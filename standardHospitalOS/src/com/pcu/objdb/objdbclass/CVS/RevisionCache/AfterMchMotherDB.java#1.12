/*
 * AfterMchMotherMotherDB.java
 *
 * Created on 26 กรกฎาคม 2548, 14:50 น.
 *
 * To change this template, choose Tools | Options and locate the template under
 * the Source Creation and Management node. Right-click the template and choose
 * Open. You can then make changes to the template in the Source Editor.
 */

package com.pcu.objdb.objdbclass;
import java.util.*;
import java.sql.*; 
import com.hospital_os.usecase.connection.*;
import com.pcu.object.*;
import com.hospital_os.utility.*;
/**
 *
 * @author tong(Padungrat)
 */
public class AfterMchMotherDB {
    public ConnectionInf theConnectionInf;
    public  AfterMchMother dbObj;
    private AfterMchMother p;
    private String sql;
    final private String idtable = "768";
    private Vector list;
    private ResultSet rs;
    /** Creates a new instance of AfterMchMotherMotherDB */
    public AfterMchMotherDB(ConnectionInf db)
    {
        theConnectionInf=db;
        dbObj = new AfterMchMother();
        initConfig(); 
    }
    public boolean initConfig()
    {
        this.dbObj.table = "t_health_postpartum";
        this.dbObj.pk_field = "t_health_postpartum_id";
        
        this.dbObj.visit_id = "t_visit_id";
        this.dbObj.patient_id = "t_patient_id";
        this.dbObj.recordtime = "record_date_time";
        this.dbObj.note = "health_postpartum_notice";
        this.dbObj.active = "health_postpartum_active";
        this.dbObj.user_record = "health_postpartum_staff_record";
        this.dbObj.user_modify = "health_postpartum_staff_modify";
        this.dbObj.user_cancel = "health_postpartum_staff_cancel";
        this.dbObj.uterus_level = "health_postpartum_fundus_height";
        this.dbObj.milk_seep  = "health_postpartum_lactation";
        this.dbObj.sugar_level  = "health_postpartum_sugar_level";
        this.dbObj.lochia  = "health_postpartum_lochia";
        this.dbObj.menses  = "health_postpartum_menstruation";
        this.dbObj.sew   = "f_health_postpartum_episiotomy_type_id";
        this.dbObj.cream  = "health_postpartum_nipple";
        this.dbObj.albumin  = "health_postpartum_albumin";
        this.dbObj.result_verify  = "health_postpartum_summary_verify";
        this.dbObj.pcare   = "health_postpartum_visit";
        this.dbObj.mch_id   = "t_health_delivery_id";
        this.dbObj.asphyxia  = "health_postpartum_asphyxia";
        this.dbObj.vit_k   = "health_postpartum_vit_k";
        this.dbObj.bcres   = "health_postpartum_bcres";
        this.dbObj.appointment  = "health_postpartum_appointment";
        this.dbObj.updatetime = "update_date_time";
        this.dbObj.symptom_notice = "health_postpartum_symptom_notice";
        this.dbObj.place = "f_health_postpartum_birth_place_id";
        this.dbObj.pregnantnumber = "health_postpartum_pregnant_number";
        this.dbObj.family_id = "t_health_family_id";
        this.dbObj.survey_date = "postpartum_survey_date";
        return true;
        
    }
    /**
     * @param cmd
     * @param o
     * @return int
     * @roseuid 3F6574DE0394
     */
    public int insert(AfterMchMother o) throws Exception
    {
        sql="";
       
        o.generateOID(idtable);
        sql="insert into " + dbObj.table + " ("
        + dbObj.pk_field
        
        
        + " ,"	+ dbObj.visit_id
        + " ,"	+ dbObj.patient_id
        + " ,"	+ dbObj.recordtime
        + " ,"	+ dbObj.note
        + " ,"	+ dbObj.active
        + " ,"	+ dbObj.user_record
        + " ,"	+ dbObj.user_modify
        + " ,"	+ dbObj.user_cancel
        + " ,"	+ dbObj.uterus_level
        + " ,"	+ dbObj.milk_seep
        + " ,"	+ dbObj.sugar_level
        + " ,"	+ dbObj.lochia
        + " ,"	+ dbObj.menses
        + " ,"	+ dbObj.sew
        + " ,"	+ dbObj.cream
        + " ,"	+ dbObj.albumin
        + " ,"	+ dbObj.result_verify
        + " ,"	+ dbObj.pcare
        + " ,"	+ dbObj.mch_id
        + " ,"	+ dbObj.asphyxia
        + " ,"	+ dbObj.vit_k
        + " ,"	+ dbObj.bcres
        + " ,"	+ dbObj.appointment
        + " ,"	+ dbObj.updatetime
        + " ,"	+ dbObj.symptom_notice
        + " ,"	+ dbObj.place
        + " ,"	+ dbObj.pregnantnumber
        + " ,"	+ dbObj.family_id
        + " ,"	+ dbObj.survey_date
        + " ) values ('"
        + o.getObjectId()
        
        + "','" + o.visit_id
        + "','" + o.patient_id
        + "','" + o.recordtime
        + "','" + o.note
        + "','" + o.active
        + "','" + o.user_record
        + "','" + o.user_modify
        + "','" + o.user_cancel
        + "','" + o.uterus_level
        + "','" + o.milk_seep
        + "','" + o.sugar_level
        + "','" + o.lochia
        + "','" + o.menses
        + "','" + o.sew
        + "','" + o.cream
        + "','" + o.albumin
        + "','" + o.result_verify
        + "','" + o.pcare
        + "','" + o.mch_id
        + "','" + o.asphyxia
        + "','" + o.vit_k
        + "','" + o.bcres
        + "','" + o.appointment      
        + "','" + o.updatetime
        + "','" + o.symptom_notice
        + "','" + o.place
        + "','" + o.pregnantnumber
        + "','" + o.family_id
        + "','" + o.survey_date
        + "')";
        
        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());
        
        return theConnectionInf.eUpdate(sql);
    }
    public int update(AfterMchMother o) throws Exception
    {
        sql="update " + dbObj.table + " set ";
       
        String field =""
        
        + "', "	+ dbObj.visit_id  + "='" + o.visit_id
        + "', "	+ dbObj.patient_id  + "='" + o.patient_id
        + "', "	+ dbObj.recordtime   + "='" + o.recordtime
        + "', "	+ dbObj.note   + "='" + o.note
        + "', "	+ dbObj.active  + "='" + o.active
        + "', "	+ dbObj.user_record   + "='" + o.user_record
        + "', "	+ dbObj.user_modify    + "='" + o.user_modify
        + "', "	+ dbObj.user_cancel    + "='" + o.user_cancel
        + "', "	+ dbObj.uterus_level    + "='" + o.uterus_level
        + "', "	+ dbObj.milk_seep    + "='" + o.milk_seep
        + "', "	+ dbObj.sugar_level    + "='" + o.sugar_level
        + "', "	+ dbObj.lochia   + "='" + o.lochia
        + "', "	+ dbObj.menses    + "='" + o.menses
        + "', "	+ dbObj.sew    + "='" + o.sew
        + "', "	+ dbObj.cream   + "='" + o.cream
        + "', "	+ dbObj.albumin   + "='" + o.albumin
        + "', "	+ dbObj.result_verify   + "='" + o.result_verify
        + "', "	+ dbObj.pcare  + "='" + o.pcare
        + "', "	+ dbObj.mch_id  + "='" + o.mch_id
        + "', "	+ dbObj.asphyxia   + "='" + o.asphyxia
        + "', "	+ dbObj.vit_k  + "='" + o.vit_k
        + "', "	+ dbObj.bcres  + "='" + o.bcres
        + "', "	+ dbObj.appointment  + "='" + o.appointment
        + "', "	+ dbObj.updatetime  + "='" + o.updatetime
        + "', "	+ dbObj.symptom_notice  + "='" + o.symptom_notice
        + "', "	+ dbObj.place  + "='" + o.place
        + "', "	+ dbObj.pregnantnumber  + "='" + o.pregnantnumber
        + "', "	+ dbObj.family_id  + "='" + o.family_id
        + "', "	+ dbObj.survey_date  + "='" + o.survey_date
        + "' where " + dbObj.pk_field + "='" + o.getObjectId() +"'";
        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());
        return theConnectionInf.eUpdate(sql);
    }
    
    public int delete(AfterMchMother o) throws Exception
    {
        sql="delete from " + dbObj.table
        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";
        return theConnectionInf.eUpdate(sql);
    }
    public int updateActive(AfterMchMother o) throws Exception
    {
        sql="update " + dbObj.table + " set ";
       
        String field =""
                + "', " + dbObj.user_cancel + "='" + o.user_cancel
                + "', " + dbObj.active + "='" + o.active
                + "', " + dbObj.updatetime + "='" + o.updatetime
        
        
        + "' where " + dbObj.pk_field + "='" + o.getObjectId() +"'";
        
        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());
        return theConnectionInf.eUpdate(sql);
    }
    
    public AfterMchMother selectByPK(String pk) throws Exception
    {
        sql="select * from " + dbObj.table
        + " where " + dbObj.pk_field
        + " = '" + pk + "'"
        + " AND " + dbObj.active + " = '1'";
        list=eQuery(sql);
        if(list.size()==0)
            return null;
        else
            return (AfterMchMother)list.get(0);
    }
    /**
     *
     * @deprecated
     */
    public Vector selectByHN(String pk) throws Exception
    {
        return selectByPtid(pk);
    }
    public Vector selectByPtid(String pk) throws Exception
    {
        sql="select * from " + dbObj.table
        + " where " + dbObj.patient_id
        + " = '" + pk + "'"
        + " AND " + dbObj.active + " = '1' "
        + " Order By  " + dbObj.pcare;
        list=eQuery(sql);
        if(list.size()==0)
            return null;
        else
            return list;
    }
    
    public Vector selectByMchID(String mch_id) throws Exception
    {
        sql="select * from " + dbObj.table
        + " where " + dbObj.mch_id
        + " = '" + mch_id + "'"
        + " AND " + dbObj.active + " = '1' "
        + " Order By  " + dbObj.pcare;
        
        list=eQuery(sql);
        if(list.size()==0)
            return null;
        else
            return list;
    }
    
    public Vector selectAll() throws Exception
    {
        sql="select * from " + dbObj.table;
        list=eQuery(sql);
        if(list.size()==0)
            return null;
        else
            return list;
    }
    
    /**
     * ใช้ในการแสดงข้อมูลลงตาราง ของ GUI ดังนั้นจึงมีข้อมูลไม่ครบ
     * @author ผดุงรัฐ
     * @return Vector ของ Object แต่จะมีข้อมูลไม่ครบ
     */
    public Vector selectShowTableByVisitID(String visit_id) throws Exception
    {
        sql = "select * from " + dbObj.table +
              " Where " + dbObj.visit_id + "='" + visit_id + "'" + 
              " AND " + dbObj.active + "= '1'" +
              " Order by " + dbObj.pregnantnumber + " , " + dbObj.pcare; // + " DESC";
       
        return eQueryShowTable(sql);
    }   
    
    /**
     * ใช้ในการแสดงข้อมูลลงตาราง ของ GUI ดังนั้นจึงมีข้อมูลไม่ครบ
     * @author หนุ่ม
     * @return Vector ของ Object แต่จะมีข้อมูลไม่ครบ
     */
    public Vector selectShowTableByPatientID(String patient_id) throws Exception
    {
        sql = "select * from " + dbObj.table +
              " Where " + dbObj.patient_id + "='" + patient_id + "'" + 
              " AND " + dbObj.active + "= '1'" +
              " Order by " + dbObj.pregnantnumber + " , " + dbObj.pcare; // + " DESC";
       
        return eQueryShowTable(sql);
    }
    
    /**
     * ใช้ในการแสดงข้อมูลลงตาราง ของ GUI ดังนั้นจึงมีข้อมูลไม่ครบ
     * @author หนุ่ม
     * @return Vector ของ Object แต่จะมีข้อมูลไม่ครบ
     */
    public Vector selectShowTableByFamilyID(String family_id) throws Exception
    {
        sql = "select * from " + dbObj.table +
              " Where " + dbObj.family_id + "='" + family_id + "'" + 
              " AND " + dbObj.active + "= '1'" +
              " Order by " + dbObj.pregnantnumber + " , " + dbObj.pcare; // + " DESC";
       
        return this.eQuery(sql);
    }   
    
    /**
     *ใช้ในการหาจำนวน row ของการค้นหาด้วย visit_id
     *@param visit_id เป็น string ของ keyหลักของตาราง
     *@return เป็น int จำนวนของ row ที่ได้จากการค้นหา
     *@author tong(padungrat)
     */
    public int countAfterMchMotherByVisitID(String visit_id) throws Exception
    {   int count = -1;
        sql = "SELECT count("+ dbObj.pk_field +") " +
               " From " + dbObj.table + "" +
               " Where " + dbObj.visit_id + "='" + visit_id + "'" + 
               " AND " + dbObj.active + "= '1'";
        rs = theConnectionInf.eQuery(sql);      
        while(rs.next())
        {
            count= rs.getInt(1);
            
        }
        rs.close();
        return count;
    }
    /**
     *ใช้ในการหาจำนวน row ของการค้นหาด้วย mch_id
     *@param mch_id เป็น string ของ keyหลักของตาราง
     *@return เป็น int จำนวนของ row ที่ได้จากการค้นหา
     *@author tong(padungrat)
     */
    public int countAfterMchMotherByMCHID(String mch_id,String carenumber) throws Exception
    {   int count = -1;
        sql = "SELECT count("+ dbObj.pk_field +") " +
               " From " + dbObj.table + "" +
               " Where " + dbObj.mch_id + "='" + mch_id + "'" +
                " AND " + dbObj.pcare  + "='" + carenumber + "'" +
               " AND " + dbObj.active + "= '1'";
        
        rs = theConnectionInf.eQuery(sql);      
        while(rs.next())
        {
            count= rs.getInt(1);
            
        }
        rs.close();
        return count;
    }
    
    /**
     *ใช้ในการหาจำนวน row ของการค้นหาด้วย id ของข้อมูลการคลอด
     *@param bornmch_id เป็น string ของ keyหลักของตาราง
     *@return เป็น int จำนวนของ row ที่ได้จากการค้นหา
     *@author tong(padungrat)
     */
    public int countAfterMchMotherByBornMchKeyID(String bornmch_id) throws Exception
    {   int count = -1;
        sql = "SELECT count("+ dbObj.pk_field +") " +
               " From " + dbObj.table + "" +
               " Where " + dbObj.mch_id + "='" + bornmch_id + "'" + 
               " AND " + dbObj.active + "= '1'";
        rs = theConnectionInf.eQuery(sql);      
        while(rs.next())
        {
            count= rs.getInt(1);
            
        }
        rs.close();
        return count;
    }
    
    
    /**
     * ใช้ในการแสดงข้อมูลลงตาราง ของ GUI ดังนั้นจึงมีข้อมูลไม่ครบ
     * @author ผดุงรัฐ
     * @return Vector ของ Object แต่จะมีข้อมูลไม่ครบ
     * @param bornmch_id เป็น string ของ keyหลักของตาราง
     */
    public Vector selectShowTableByBornMchID(String bornmch_id) throws Exception
    {
        sql = "select * from " + dbObj.table +
              " Where " + dbObj.mch_id + "='" + bornmch_id + "'" + 
              " AND " + dbObj.active + "= '1'" +
              " Order by " + dbObj.pregnantnumber + " , " + dbObj.pcare; // + " DESC";
       
        list=eQueryShowTable(sql);
        if(list.size()==0)
            return null;
        else
            return list;        
    } 
    public Vector eQueryShowTable(String sql) throws Exception
    {
     
        list = new Vector();
        rs = theConnectionInf.eQuery(sql);
        while(rs.next())
        {
            p = new AfterMchMother();
            p.setObjectId(rs.getString(dbObj.pk_field));
            
            p.visit_id = rs.getString(dbObj.visit_id);
            p.patient_id = rs.getString(dbObj.patient_id);
            p.pcare = rs.getString(dbObj.pcare);
            p.recordtime = rs.getString(dbObj.recordtime);
            p.updatetime = rs.getString(dbObj.updatetime);
            p.pregnantnumber = rs.getString(dbObj.pregnantnumber);
            list.add(p);
        }
        rs.close();
        return list;
    }
    
    
    public Vector eQuery(String sql) throws Exception
    {
        
        list = new Vector();
        rs = theConnectionInf.eQuery(sql);
        while(rs.next())
        {
            p = new AfterMchMother();
            p.setObjectId(rs.getString(dbObj.pk_field));
            
            
            p.visit_id = rs.getString(dbObj.visit_id);
            p.patient_id  = rs.getString(dbObj.patient_id);
            p.recordtime   = rs.getString(dbObj.recordtime);
            p.note   = rs.getString(dbObj.note);
            p.active  = rs.getString(dbObj.active);
            p.user_record   = rs.getString(dbObj.user_record);
            p.user_modify    = rs.getString(dbObj.user_modify);
            p.user_cancel    = rs.getString(dbObj.user_cancel);
            p.uterus_level    = rs.getString(dbObj.uterus_level);
            p.milk_seep    = rs.getString(dbObj.milk_seep);
            p.sugar_level    = rs.getString(dbObj.sugar_level);
            p.lochia   = rs.getString(dbObj.lochia);
            p.menses    = rs.getString(dbObj.menses);
            p.sew    = rs.getString(dbObj.sew);
            p.cream   = rs.getString(dbObj.cream);
            p.albumin   = rs.getString(dbObj.albumin);
            p.result_verify   = rs.getString(dbObj.result_verify);
            p.pcare  = rs.getString(dbObj.pcare);
            p.mch_id  = rs.getString(dbObj.mch_id);
            p.asphyxia   = rs.getString(dbObj.asphyxia);
            p.vit_k  = rs.getString(dbObj.vit_k);
            p.bcres  = rs.getString(dbObj.bcres);
            p.appointment  = rs.getString(dbObj.appointment);
            p.updatetime  = rs.getString(dbObj.updatetime);
            p.symptom_notice  = rs.getString(dbObj.symptom_notice);
            p.place  = rs.getString(dbObj.place);
            p.pregnantnumber  = rs.getString(dbObj.pregnantnumber);
            p.family_id  = rs.getString(dbObj.family_id);
            p.survey_date  = rs.getString(dbObj.survey_date);
            list.add(p);
            p = null;
        }
        rs.close();
        return list;
    }
/////////////////////////////////////////////////////////////////////////////    
    public int updateFidByFid(String family_id,String family_from) throws Exception
    {
        String sql="update " + dbObj.table + " set " 
                + dbObj.family_id + "='" + family_id + "',"
                + dbObj.user_cancel + "="+ dbObj.user_cancel + "||'-'||'" + family_from + "'"
                + " where " + dbObj.family_id + "='" + family_from +"'";
        return theConnectionInf.eUpdate(sql);
    }  
    
/////////////////////////////////////////////////////////////////////////////    
    public int updateFidByPtid(String family_id,String patient_id) throws Exception
    {
        String sql="update " + dbObj.table + " set " 
                + dbObj.family_id + "='" + family_id
                + "' where " + dbObj.patient_id + "='" + patient_id +"'";
        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());
        return theConnectionInf.eUpdate(sql);
    }     


    public int selectCount() throws Exception {
             String sql="select count(*) as count from " + dbObj.table;
             ResultSet rs = theConnectionInf.eQuery(sql);
             if(rs.next()){
                 return rs.getInt("count");
             }
             return 0;
    }
    
}
