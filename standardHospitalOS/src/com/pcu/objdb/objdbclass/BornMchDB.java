package com.pcu.objdb.objdbclass;import java.util.*;import java.sql.*; import com.hospital_os.usecase.connection.*;import com.pcu.object.BornMch;import com.hospital_os.utility.*;public class BornMchDB{    public ConnectionInf theConnectionInf;    public BornMch dbObj, objectBornMch;    final public String idtable = "770";    private ResultSet rs ;    private String sql;    private Vector vc;     public BornMchDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new BornMch();        initConfig();    }    public boolean initConfig()    {        dbObj.table="t_health_delivery";        dbObj.pk_field="t_health_delivery_id";        dbObj.visit_id   ="t_visit_id";        dbObj.patient_id   ="t_patient_id";        dbObj.gravida   ="gravida_number";        dbObj.bdate   ="health_delivery_born_date";        dbObj.bresult   ="b_icd10_id";        dbObj.bplace   ="f_health_postpartum_birth_place_id";        dbObj.bhosp   ="b_visit_office_birth_place";        dbObj.btype   ="f_health_postpartum_givebirth_result_id";        dbObj.bdoctor   ="f_health_pregnancy_birth_doctor_type_id";        dbObj.lborn   ="health_delivery_parity";        dbObj.sborn   ="health_delivery_stillborn";        dbObj.presult   ="f_health_postpartum_status_result_id";        dbObj.updatetime   ="update_date_time";        dbObj.mstandard   ="health_delivery_mother_standard";        dbObj.btime   ="health_delivery_born_time";        dbObj.abnormalpreg   ="abnormal_pregnancy_description";        dbObj.note   ="health_delivery_notice";        dbObj.active   ="health_delivery_active";        dbObj.user_record   ="health_delivery_staff_record";        dbObj.user_modify   ="health_delivery_staff_modify";        dbObj.user_cancel="health_delivery_staff_cancel";        dbObj.recordtime = "record_date_time";        dbObj.birthmethod = "f_health_birth_method_id";        dbObj.addressborn ="health_delivery_without_addressborn_center";        dbObj.family_id ="t_health_family_id";        dbObj.survey_date = "health_delivery_survey_date";        return true;    }        public int insert(BornMch o) throws Exception    {        sql="";          o.generateOID(idtable);        sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.visit_id        + " ,"	+ dbObj.patient_id        + " ,"	+ dbObj.gravida        + " ,"	+ dbObj.bdate        + " ,"	+ dbObj.bresult        + " ,"	+ dbObj.bplace        + " ,"	+ dbObj.bhosp        + " ,"	+ dbObj.btype        + " ,"	+ dbObj.bdoctor        + " ,"	+ dbObj.lborn        + " ,"	+ dbObj.sborn        + " ,"	+ dbObj.presult        + " ,"	+ dbObj.mstandard        + " ,"	+ dbObj.updatetime        + " ,"	+ dbObj.btime        + " ,"	+ dbObj.abnormalpreg        + " ,"	+ dbObj.note        + " ,"	+ dbObj.active        + " ,"	+ dbObj.user_record        + " ,"	+ dbObj.user_modify        + " ,"	+ dbObj.user_cancel        + " ,"	+ dbObj.recordtime        + " ,"	+ dbObj.birthmethod        + " ,"	+ dbObj.addressborn        + " ,"	+ dbObj.family_id        + " ,"	+ dbObj.survey_date        + " ) values ('"        + o.getObjectId()        + "','" + o.visit_id        + "','" + o.patient_id        + "','" + o.gravida        + "','" + o.bdate        + "','" + o.bresult        + "','" + o.bplace        + "','" + o.bhosp        + "','" + o.btype        + "','" + o.bdoctor        + "','" + o.lborn        + "','" + o.sborn        + "','" + o.presult        + "','" + o.mstandard        + "','" + o.updatetime        + "','" + o.btime        + "','" + o.abnormalpreg        + "','" + o.note        + "','" + o.active        + "','" + o.user_record        + "','" + o.user_modify        + "','" + o.user_cancel        + "','" + o.recordtime          + "','" + o.birthmethod        + "','" + o.addressborn        + "','" + o.family_id        + "','" + o.survey_date        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int update(BornMch o) throws Exception    {        sql="update " + dbObj.table + " set ";        String field =""        + "', " + dbObj.visit_id + "='" + o.visit_id        + "', " + dbObj.patient_id + "='" + o.patient_id        + "', " + dbObj.gravida + "='" + o.gravida        + "', " + dbObj.bdate + "='" + o.bdate        + "', " + dbObj.bresult + "='" + o.bresult        + "', " + dbObj.bplace + "='" + o.bplace        + "', " + dbObj.bhosp + "='" + o.bhosp        + "', " + dbObj.btype + "='" + o.btype        + "', " + dbObj.bdoctor + "='" + o.bdoctor        + "', " + dbObj.lborn + "='" + o.lborn        + "', " + dbObj.sborn + "='" + o.sborn        + "', " + dbObj.presult + "='" + o.presult        + "', " + dbObj.mstandard + "='" + o.mstandard        + "', " + dbObj.updatetime + "='" + o.updatetime        + "', " + dbObj.btime + "='" + o.btime        + "', " + dbObj.abnormalpreg + "='" + o.abnormalpreg        + "', " + dbObj.note + "='" + o.note        + "', " + dbObj.active + "='" + o.active        + "', " + dbObj.user_record + "='" + o.user_record        + "', " + dbObj.user_modify + "='" + o.user_modify        + "', " + dbObj.user_cancel + "='" + o.user_cancel        + "', " + dbObj.recordtime + "='" + o.recordtime        + "', " + dbObj.birthmethod + "='" + o.birthmethod        + "', " + dbObj.addressborn + "='" + o.addressborn        + "', " + dbObj.family_id + "='" + o.family_id        + "', " + dbObj.survey_date + "='" + o.survey_date        + "' where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());               return theConnectionInf.eUpdate(sql);    }        public int delete(BornMch o) throws Exception    {                   sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";                return theConnectionInf.eUpdate(sql);                }        public BornMch selectByPK(String pk) throws Exception    {        sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";        vc=eQuery(sql);        if(vc.size()==0)            return null;        else            return (BornMch)vc.get(0);    }        public Vector selectAll() throws Exception    {        sql="select * from " + dbObj.table;        return eQuery(sql);    }        public int updateActive(BornMch o) throws Exception    {        sql="update " + dbObj.table + " set ";               String field =""                + "', " + dbObj.user_cancel + "='" + o.user_cancel                + "', " + dbObj.active + "='" + o.active                + "', " + dbObj.updatetime + "='" + o.updatetime                        + "' where " + dbObj.pk_field + "='" + o.getObjectId() +"'";                sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    /**     * ??????????????????? ?? GUI ????????????????ú     * @author ?????     * @return Vector ?? Object ?????????????ú     */    public Vector selectShowTableByVisitID(String visit_id) throws Exception    {        sql = "select " +               dbObj.pk_field + "," +              dbObj.bdate + "," +              dbObj.visit_id + "," +              dbObj.patient_id  + "," +              dbObj.gravida+ ""+              " from " + dbObj.table +              " Where " + dbObj.visit_id + "='" + visit_id + "'" +               " AND " + dbObj.active + "= '1'" +              " Order by " + dbObj.gravida;// + " DESC";               return eQueryShowTable(sql);    }     /**     * ??????????????????? ?? GUI ????????????????ú     * @author ?????     * @return Vector ?? Object ?????????????ú     */    private Vector selectShowTableByAllByPatientID(String patient_id) throws Exception    {        sql = "select " +               dbObj.pk_field + "," +              dbObj.bdate + "," +              dbObj.visit_id + "," +            dbObj.patient_id  + "," +              dbObj.gravida+ ""+              " from " + dbObj.table +              " Where " + dbObj.patient_id + "='" + patient_id + "'" +               " AND " + dbObj.active + "= '1'" +              " Order by " + dbObj.gravida;// + " DESC";               return eQueryShowTable(sql);    }     /**     * ??????????????????? ?? GUI ????????????????ú     * @author ?????     * @return Vector ?? Object ?????????????ú     */    public Vector selectShowTableByPatientID(String patient_id) throws Exception    {        sql = "select " +               dbObj.pk_field + "," +              dbObj.bdate + "," +              dbObj.visit_id + "," +            dbObj.patient_id  + "," +              dbObj.gravida+ ""+                            " from " + dbObj.table +              " Where " + dbObj.patient_id + "='" + patient_id + "'" +               " AND " + dbObj.active + "= '1'" +              " Order by " + dbObj.gravida;// + " DESC";               return eQueryShowTable(sql);    }     /**     * ??????¡?????? Family ID     * @param  family id     * @return Vector of BornMch     * @author kingland     * @date 17-03-2549     */     public Vector selectShowTableByFamily(String family_id) throws Exception    {        sql = "select * from " + dbObj.table +              " Where " + dbObj.family_id + "='" + family_id + "'" +               " AND " + dbObj.active + "= '1'" +              " Order by " + dbObj.gravida;// + " DESC";               return eQuery(sql);    }    public BornMch readByFamilyAndGravida(String family_id,String gravida) throws Exception    {        sql = "select * from " + dbObj.table +              " Where " + dbObj.family_id + "='" + family_id + "'" +              " AND " + dbObj.active + "= '1' and " + dbObj.gravida + "= '" + gravida + "'" +              " Order by " + dbObj.gravida;// + " DESC";        Vector v = eQuery(sql);        if(v.isEmpty())            return null;        else            return (BornMch)v.get(0);    }    public BornMch readMchByFidAndGravida(String family_id,String gravida) throws Exception    {        sql = "select * from " + dbObj.table +              " Where " + dbObj.family_id + "='" + family_id + "'" +              " AND " + dbObj.active + "= '1' and " + dbObj.gravida + " = '"+ gravida + "'" +              " Order by " + dbObj.gravida;// + " DESC";       Vector v = eQuery(sql);        if(v.isEmpty())            return null;        else            return (BornMch)v.get(0);    }    public BornMch readMchByPidAndGravida(String patient_id,String gravida) throws Exception    {        sql = "select * from " + dbObj.table +              " Where " + dbObj.patient_id + "='" + patient_id + "'" +              " AND " + dbObj.active + "= '1' and " + dbObj.gravida + " = '"+ gravida + "'" +              " Order by " + dbObj.gravida;// + " DESC";       Vector v = eQuery(sql);        if(v.isEmpty())            return null;        else            return (BornMch)v.get(0);    }    public Vector eQueryShowTable(String sql) throws Exception    {             vc = new Vector();        rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            objectBornMch = new BornMch();            objectBornMch.setObjectId(rs.getString(dbObj.pk_field));            objectBornMch.patient_id = rs.getString(dbObj.patient_id);            objectBornMch.visit_id = rs.getString(dbObj.visit_id);            objectBornMch.bdate = rs.getString(dbObj.bdate);            objectBornMch.gravida = rs.getString(dbObj.gravida);                      vc.add(objectBornMch);        }        rs.close();        return vc;    }    /**     *     * @deprecated     */    public Vector selectByHN(String pk) throws Exception    {        return selectByPtid(pk);    }    public Vector selectByPtid(String pk) throws Exception    {        sql="select * from " + dbObj.table        + " where " + dbObj.patient_id        + " = '" + pk + "'"        + " and " + dbObj.active + "= '1'"                + " Order By  " + dbObj.gravida;        return eQuery(sql);    }        public Vector eQuery(String sql) throws Exception    {               vc = new Vector();        rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            objectBornMch = new BornMch();            objectBornMch.setObjectId(rs.getString(dbObj.pk_field));            objectBornMch.visit_id = rs.getString(dbObj.visit_id);            objectBornMch.patient_id = rs.getString(dbObj.patient_id);            objectBornMch.gravida = rs.getString(dbObj.gravida);            objectBornMch.bdate = rs.getString(dbObj.bdate);            objectBornMch.bresult = rs.getString(dbObj.bresult);            objectBornMch.bplace = rs.getString(dbObj.bplace);            objectBornMch.bhosp = rs.getString(dbObj.bhosp);            objectBornMch.btype = rs.getString(dbObj.btype);            objectBornMch.bdoctor = rs.getString(dbObj.bdoctor);            objectBornMch.lborn = rs.getString(dbObj.lborn);            objectBornMch.sborn = rs.getString(dbObj.sborn);            objectBornMch.presult = rs.getString(dbObj.presult);            objectBornMch.mstandard = rs.getString(dbObj.mstandard);            objectBornMch.updatetime = rs.getString(dbObj.updatetime);            objectBornMch.btime = rs.getString(dbObj.btime);            objectBornMch.abnormalpreg = rs.getString(dbObj.abnormalpreg);            objectBornMch.note = rs.getString(dbObj.note);            objectBornMch.active = rs.getString(dbObj.active);            objectBornMch.user_record = rs.getString(dbObj.user_record);            objectBornMch.user_modify = rs.getString(dbObj.user_modify);            objectBornMch.user_cancel = rs.getString(dbObj.user_cancel);            objectBornMch.recordtime = rs.getString(dbObj.recordtime);            objectBornMch.birthmethod = rs.getString(dbObj.birthmethod);            objectBornMch.addressborn = rs.getString(dbObj.addressborn);            objectBornMch.family_id = rs.getString(dbObj.family_id);            objectBornMch.survey_date = rs.getString(dbObj.survey_date);            vc.add(objectBornMch);            objectBornMch =null;        }        rs.close();        return vc;    }/////////////////////////////////////////////////////////////////////////////        public int updateFidByFid(String family_id,String family_from) throws Exception    {        String sql="update " + dbObj.table + " set "                 + dbObj.family_id + "='" + family_id + "',"                + dbObj.user_cancel + "="+ dbObj.user_cancel + "||'-'||'" + family_from + "'"                + " where " + dbObj.family_id + "='" + family_from +"'";        return theConnectionInf.eUpdate(sql);    }  /////////////////////////////////////////////////////////////////////////////        public int updateFidByPtid(String family_id,String patient_id) throws Exception    {        String sql="update " + dbObj.table + " set "                 + dbObj.family_id + "='" + family_id                + "' where " + dbObj.patient_id + "='" + patient_id +"'";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int selectCount() throws Exception {             String sql="select count(*) as count from " + dbObj.table;             ResultSet rs = theConnectionInf.eQuery(sql);             if(rs.next()){                 return rs.getInt("count");             }             return 0;    }    }