package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class GroupChronicDB{    public ConnectionInf theConnectionInf;    public GroupChronic dbObj;    final public String idtable = "165";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public GroupChronicDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new GroupChronic();        initConfig();    }    public GroupChronicDB()    {        theConnectionInf = null;        dbObj = new GroupChronic();        initConfig();    }        public boolean initConfig()    {        Vector result = new Vector();                dbObj.table="b_group_chronic";        dbObj.pk_field="b_group_chronic_id";        dbObj.group_chronic_id    ="group_chronic_number";        dbObj.description_th     ="group_chronic_description_th";        dbObj.description_en     ="group_chronic_description_en";        dbObj.active ="group_chronic_active";         /*        dbObj.table = "groupchronic";        dbObj.pk_field = "key_id";                  dbObj.group_chronic_id="group_chronic_id";        dbObj.description_en = "description_en";        dbObj.description_th= "description_th";        dbObj.active ="active";          */                return true;    }        /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */        public int insert(GroupChronic o) throws Exception    {        String sql="";        GroupChronic p=o;        p.generateOID(idtable);        sql="insert into " + dbObj.table + " ("        +  dbObj.pk_field        + " ,"  +dbObj.group_chronic_id        + " ,"	+ dbObj.description_en        + " ,"	+ dbObj.description_th        + " ,"  + dbObj.active        + " ) values ('"        + p.getObjectId()        + "','" + p.group_chronic_id        + "','" + p.description_en        + "','" + p.description_th        + "','" + p.active        + "')";                sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int update(GroupChronic o) throws Exception    {        String sql="";        GroupChronic p=o;        sql="update " + dbObj.table + " set "                + dbObj.group_chronic_id +"='" + p.group_chronic_id + "',"        + dbObj.description_th + "='" + p.description_th + "',"        + dbObj.description_en + "='" + p.description_en + "',"        + dbObj.active + "='" + p.active +"' where "        + dbObj.pk_field + "='" + p.getObjectId() + "'";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(GroupChronic gc) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + gc.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }    /**     *@deprecated henbe bad function name     */    public Vector selectByPk(String pk,String active)throws Exception    {        return selectByNameActive(pk,active);    }    public Vector selectByNameActive(String pk,String active)throws Exception    {        String sql="select * from " + dbObj.table        + " where " ;        if(pk.trim().length() !=0)        {                        sql= sql +"("+ dbObj.group_chronic_id + " like '%" + pk + "%') or ("            + dbObj.description_th  + " like '%" + pk + "%') or ("            + dbObj.description_en  + " like '%" + pk + "%') and ("            + dbObj.active + " = '" + active + "')";        }        else        {            sql= sql + dbObj.active + "='" + active +"'";        }                sql += " order by " + dbObj.group_chronic_id ;        Vector v=eQuery(sql);                if(v.size()==0)            return null;        else            return v;    }    /**     *@author henbe     */    public GroupChronic selectByPK(String pk)throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field + " = '" + pk + "'";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (GroupChronic)v.get(0);    }    /**     *@deprecated henbe bad function name     */        public GroupChronic selectByKeyId(String pk) throws Exception    {        return selectByPK(pk);    }            public GroupChronic selectByCode(String code) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.group_chronic_id + " = '" + code + "'";                        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (GroupChronic)v.get(0);    }            public Vector selectAll() throws Exception    {        String sql="select * from " + dbObj.table;        Vector v=veQuery(sql);                if(v.size()==0)            return null;        else            return v;    }        public Vector selectActivate() throws Exception    {        String sql="select * from "+ dbObj.table+" where group_chronic_active = '1'";                Vector v=veQuery(sql);                if(v.size()==0)            return null;        else            return v;    }      public Vector selectByCN(String key) throws Exception    {        String sql="select * from " + dbObj.table        + " where UPPER(" + dbObj.group_chronic_id        + ") like UPPER('%" + key+ "%') "        + " or UPPER(" + dbObj.description_en        + ") like UPPER('%" + key+ "%') order by " + dbObj.description_en;                Vector v=veEQuery(sql);        if(v.size()==0)            return null;        else            return v;    }           public Vector selectAllEng() throws Exception    {        String sql="select * from " + dbObj.table;                Vector v=veEQuery(sql);                if(v.size()==0)            return null;        else            return v;    }        public Vector eQuery(String sql) throws Exception    {        GroupChronic p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        int i=0;        while(rs.next())        {            p = new GroupChronic();            p.setObjectId(rs.getString(dbObj.pk_field));            p.group_chronic_id= rs.getString(dbObj.group_chronic_id);            p.description_en= rs.getString(dbObj.description_en);            p.description_th = rs.getString(dbObj.description_th);            p.active = rs.getString(dbObj.active);            list.add(p);            i++;            if(i>100) break;        }        rs.close();        return list;    }        public Vector veQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.description_th);            list.add(p);        }        rs.close();        return list;    }        public Vector veEQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.description_en);            list.add(p);        }        rs.close();        return list;    }        }