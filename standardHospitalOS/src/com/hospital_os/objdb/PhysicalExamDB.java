/* * PhysicalExamDB.java * * Created on 20 ตุลาคม 2546, 12:53 น. */package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;/** * * @author  tong */public class PhysicalExamDB{    public ConnectionInf theConnectionInf;    public PhysicalExam dbObj;    final public String idtable = "211";    /** Creates a new instance of PhysicalExamDB */    public PhysicalExamDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new PhysicalExam();        initConfig();    }    public boolean initConfig()    {        dbObj.table="t_visit_physical_exam";        dbObj.pk_field="t_visit_physical_exam_id";        dbObj.physical_body   ="visit_physical_exam_body";        dbObj.detail   ="visit_physical_exam_detail";        dbObj.visit_id   ="t_visit_id";        dbObj.patient_id   ="t_patient_id";        dbObj.executer   ="visit_physical_exam_staff_execute";        dbObj.date_time="record_date_time";        /*        dbObj.table = "physical_exam";                 dbObj.pk_field = "physical_exam_id";        dbObj.physical_body = "physical_body";        dbObj.detail = "detail";        dbObj.patient_id = "patient_id";        dbObj.visit_id = "visit_id";        dbObj.executer =  "executer";        dbObj.date_time = "date_time";         */                return true;    }            /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(PhysicalExam o) throws Exception    {        String sql="";        PhysicalExam p=o;        p.generateOID(idtable);           sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.physical_body        + " ,"	+ dbObj.detail        + " ,"	+ dbObj.patient_id        + " ,"	+ dbObj.visit_id        + " ,"	+ dbObj.executer        + " ,"	+ dbObj.date_time        + " ) values ('"        + p.getObjectId()        + "','"	+ p.physical_body        + "','"	+ p.detail        + "','"	+ p.patient_id        + "','"	+ p.visit_id        + "','"	+ p.executer        + "','"	+ p.date_time        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int update(PhysicalExam o) throws Exception    {        String sql="update " + dbObj.table + " set ";        PhysicalExam p=o;        String field =""        + "', " + dbObj.physical_body + "='" + p.physical_body        + "', " + dbObj.detail + "='" + p.detail        + "', " + dbObj.patient_id + "='" + p.patient_id        + "', " + dbObj.visit_id + "='" + p.visit_id        + "', " + dbObj.executer + "='" + p.executer        + "', " + dbObj.date_time + "='" + p.date_time        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(PhysicalExam o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }    public int deleteByVid(String visit_id) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.visit_id + "='" + visit_id +"'";        return theConnectionInf.eUpdate(sql);    }        public PhysicalExam selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (PhysicalExam)v.get(0);    }        public Vector eQuery(String sql) throws Exception    {        PhysicalExam p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new PhysicalExam();            p.setObjectId(rs.getString(dbObj.pk_field));            p.physical_body = rs.getString(dbObj.physical_body);            p.detail = rs.getString(dbObj.detail);            p.patient_id = rs.getString(dbObj.patient_id );            p.executer = rs.getString(dbObj.executer);            p.visit_id = rs.getString(dbObj.visit_id);            p.date_time = rs.getString(dbObj.date_time);            list.add(p);        }        rs.close();        return list;    }        /**     *      * @author amp     * list รายการ pe ตาม vn     * @deprecated ผิดความหมายเลิกใช้ได้ให้ไปใช้ selectByVisitId     */    public Vector selectByVn(String vn) throws Exception    {        String sql = "select * from " + dbObj.table        + " where " + dbObj.visit_id + " = '" + vn + "'"        + " and " + dbObj.physical_body + " = ''"        + " order by " + dbObj.physical_body;        return eQuery(sql);    }        /**@author henbe     *list รายการ pe ทั้งหมดโดยไม่มีเงื่อนไขใด     */    public Vector selectByVisitId(String vid) throws Exception    {        String sql = "select * from " + dbObj.table        + " where " + dbObj.visit_id + " = '" + vid + "'"        + " order by " + dbObj.physical_body + "," + dbObj.date_time;        return eQuery(sql);    }    /**@author sumo     *list รายการ pe nan ตาม vn     */    public Vector selectByVnNan(String vn) throws Exception    {        String sql = "select * from " + dbObj.table        + " where " + dbObj.visit_id + " = '" + vn + "'"        + " and " + dbObj.physical_body + " != ''";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }          public Vector selectAll() throws Exception    {        String sql = "select * from " + dbObj.table;        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }    }