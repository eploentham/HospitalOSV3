package com.hospital_os.objdb;/** *  tong */import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class QueueVisitDB{    public ConnectionInf theConnectionInf;    public QueueVisit dbObj;    final public String idtable = "222";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public QueueVisitDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new QueueVisit();        initConfig();    }    public QueueVisitDB()    {        theConnectionInf=null;        dbObj = new QueueVisit();        initConfig();    }    public boolean initConfig()    {        dbObj.table="b_visit_queue_setup";        dbObj.pk_field="b_visit_queue_setup_id";        dbObj.id   ="visit_queue_setup_number";        dbObj.description   ="visit_queue_setup_description";        dbObj.color   ="visit_queue_setup_queue_color";        dbObj.queue   ="visit_queue_setup_queue";        dbObj.active="visit_queue_setup_active";        /*        this.dbObj.table = "queue_visit");        dbObj.pk_field = "key_id");        dbObj.id = "id");        dbObj.description = "description");        dbObj.color = "color");        dbObj.queue = "queue");        dbObj.active = "active");         */        return true;    }    public int insert(QueueVisit o) throws Exception    {        QueueVisit p=o;        p.generateOID(idtable);        StringBuffer sql=new StringBuffer("insert into " ).append( dbObj.table ).append( " ("        ).append( dbObj.pk_field        ).append( " ,"	).append( dbObj.id        ).append( " ,"	).append( dbObj.description        ).append( " ,"	).append( dbObj.active        ).append( " ,"	).append( dbObj.color        ).append( " ,"	).append( dbObj.queue                ).append( " ) values ('"        ).append( p.getObjectId()        ).append( "','" ).append( p.id        ).append( "','" ).append( p.description        ).append( "','" ).append( p.active        ).append( "','" ).append( p.color        ).append( "','" ).append( p.queue        ).append( "')");        return theConnectionInf.eUpdate(sql.toString());    }    public int update(QueueVisit o) throws Exception    {        QueueVisit p=o;        StringBuffer sql=new StringBuffer("update " ).append( dbObj.table ).append( " set "        ).append( dbObj.id ).append( "='" ).append( p.id        ).append( "', " ).append( dbObj.description ).append( "='" ).append( p.description        ).append( "', " ).append( dbObj.active ).append( "='" ).append( p.active        ).append( "', " ).append( dbObj.color ).append( "='" ).append( p.color        ).append( "', " ).append( dbObj.queue ).append( "='" ).append( p.queue        ).append( "' where " ).append( dbObj.pk_field ).append( "='" ).append( p.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public int delete(QueueVisit o) throws Exception    {        StringBuffer sql = new StringBuffer("delete from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field ).append( "='" ).append( o.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public QueueVisit selectByPK(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field        ).append( " = '" ).append( pk ).append( "'");        Constant.println(sql.toString());        Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return (QueueVisit)v.get(0);    }        public Vector selectAllByName(String pk,String active) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where ");        if(pk.trim().length() !=0)        {            sql.append("(" ).append(  dbObj.id            ).append( " like '" ).append( pk ).append( "'" ).append( " or UPPER("            ).append( dbObj.description  ).append( ") like UPPER('%" ).append( pk ).append( "%')" ).append( ") and ");        }        sql.append( dbObj.active ).append( " = '" ).append( active ).append( "'" ).append( " order by "        ).append( dbObj.id);                return eQuery(sql.toString());    }        public int reset(String Id) throws Exception    {        StringBuffer sql = new StringBuffer("Update " ).append( dbObj.table ).append( " set " ).append( dbObj.queue ).append( " = '1' where "        ).append( dbObj.pk_field ).append( " = '" ).append( Id ).append( "'");                return theConnectionInf.eUpdate(sql.toString());            }        public QueueVisit selectByCode(String code) throws Exception    {        Vector vc = new Vector();        StringBuffer sql = new StringBuffer( " select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.id        ).append( " = '" ).append( code ).append( "'");        vc = eQuery(sql.toString());        if(vc.size()==0)            return null;        else            return (QueueVisit)vc.get(0);    }        public Vector selectAll() throws Exception    {   Vector vc = new Vector();        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table ).append( " order by ").append(        dbObj.description);        vc = veQuery(sql.toString());        if(vc.size()==0)            return null;        else            return vc;    }        public Vector veQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql.toString());        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.description);            list.add(p);        }        rs.close();        return list;    }        public Vector eQuery(String sql) throws Exception    {        QueueVisit p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql.toString());        while(rs.next())        {            p = new QueueVisit();            p.setObjectId(rs.getString(dbObj.pk_field));            p.id = rs.getString(dbObj.id);            p.description = rs.getString(dbObj.description);            p.active = rs.getString(dbObj.active);            p.color = rs.getString(dbObj.color);            p.queue = rs.getString(dbObj.queue);            list.add(p);        }        rs.close();        return list;    }    }