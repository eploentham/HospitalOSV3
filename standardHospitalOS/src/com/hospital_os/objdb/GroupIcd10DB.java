package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class GroupIcd10DB{    public ConnectionInf theConnectionInf;    public GroupIcd10 dbObj;    private String idtable = "310";        /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public GroupIcd10DB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new GroupIcd10();        initConfig();    }    public GroupIcd10DB()    {        theConnectionInf = null;        dbObj = new GroupIcd10();        initConfig();    }    public boolean initConfig()    {        Vector result = new Vector();                dbObj.table="b_group_icd10";        dbObj.pk_field="b_group_icd10_id";        dbObj.icdcode    ="group_icd10_number";        dbObj.group504    ="group_icd10_group_rp504";        dbObj.group505    ="group_icd10_group_rp505";        dbObj.group506    ="group_icd10_group_rp506";        dbObj.groupchronic    ="group_icd10_b_group_chronic_id";        dbObj.other    ="group_icd10_other";        dbObj.group_504_id    ="f_group_rp504_id";        dbObj.group_505_id    ="f_group_rp505_id";        dbObj.group_506_id    ="f_group_rp506_id";        dbObj.group_chronic_id ="b_group_chronic_id";        dbObj.group_disease ="b_health_disease_id";                return true;    }    ///////////////////////////////////////////////////////////////////////////    public Vector selectByIcd(String pk) throws Exception    {        String sql="select * from "+ dbObj.table         + " where upper(" + dbObj.icdcode + ") like upper('%" + pk + "%')"        + " order by " + dbObj.icdcode;        return eQuery(sql);    }       //ค้นหากลุ่มโรค ICD10 ที่มีอยู่แล้ว แต่มีสถานะ chronic เป็นค่าว่าง หรือเป็น 99    public GroupIcd10 selectByICD10ID(String chronic_id,String icd10code) throws Exception    {        String sql="select * from " + dbObj.table                + " where " + dbObj.icdcode + " like  '"+ icd10code  +"'"                + " and ("+ dbObj.group_chronic_id + " = '" +chronic_id + "'"                + " or " + dbObj.group_chronic_id + " = '')"  ;                  Vector v=eQuery(sql);                if(v.size()==0)            return null;        else            return (GroupIcd10)v.get(0);    }       // หารหัสICD10 ในตาราง b_group_icd10 โดยที่กลุ่มโรคเรื้อรังต้องไม่ถูกยกเลิก    public Vector selectByChonicActive(String pk) throws Exception    {                 String sql="select b_group_icd10.* " +                 " from b_group_icd10 inner join b_group_chronic " +                 "                        on b_group_icd10.b_group_chronic_id = b_group_chronic.b_group_chronic_id " +                 " where b_group_chronic.group_chronic_active = '1' " +                 "      and upper(group_icd10_number) like upper('%"+ pk +"%') " +                 " order by group_icd10_number ";        return eQuery(sql);    }        /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */        public GroupIcd10 selectByIcdCode(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.icdcode        + " = '" + pk + "'";        Vector v=eQuery(sql);                if(v.size()==0)            return null;        else            return (GroupIcd10)v.get(0);    }    //ค้นหากลุ่มโรค ICD10 ที่เป็นกลุ่ม ICD10 (ไม่มีจุดทศนิยม) หรือ รหัสเฉพาะ (มีจุดทศนิยม)    public Vector selectGruopChronicByICD10ID(String chronic_id,boolean group) throws Exception    {        String sql="select * from " + dbObj.table                + " where " + dbObj.group_chronic_id                + " = '" +chronic_id + "'";        if(group)            sql = sql + " and length("+ dbObj.icdcode +") <= 3 ";        else            sql = sql + " and length("+ dbObj.icdcode +") > 3 ";        sql = sql + " order by " + dbObj.icdcode;                return eQuery(sql);    }        public Vector selectByChronicID(String chronic_id) throws Exception    {        String sql="select * from " + dbObj.table                + " where " + dbObj.group_chronic_id                + " = '" +chronic_id + "'"                + " order by " + dbObj.icdcode;        return eQuery(sql);    }    public int insert(GroupIcd10 p)throws Exception    {        p.generateOID(idtable);        String sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + "," + dbObj.icdcode        + "," + dbObj.group504        + "," + dbObj.group505        + "," + dbObj.group506        + "," + dbObj.groupchronic        + "," + dbObj.other        + "," + dbObj.group_504_id        + "," + dbObj.group_505_id        + "," + dbObj.group_506_id        + "," + dbObj.group_chronic_id        + "," + dbObj.group_disease        + " ) values ('"        + p.getObjectId()        + "','" + p.icdcode        + "','" + p.group504        + "','" + p.group505        + "','" + p.group506        + "','" + p.groupchronic        + "','" + p.other        + "','" + p.group_504_id        + "','" + p.group_505_id        + "','" + p.group_506_id        + "','" + p.group_chronic_id        + "','" + p.group_disease        + "')";        return theConnectionInf.eUpdate(sql);    }        public int update(GroupIcd10 o) throws Exception    {        String sql="";        GroupIcd10 p=o;        sql="update " + dbObj.table + " set "                + dbObj.icdcode +"='" + p.icdcode + "',"        + dbObj.group504 + "='" + p.group504 + "',"        + dbObj.group505 + "='" + p.group505 + "',"        + dbObj.group506 + "='" + p.group506 + "',"        + dbObj.groupchronic + "='" + p.groupchronic + "',"        + dbObj.other + "='" + p.other + "',"        + dbObj.group_504_id + "= '" + p.group_504_id + "',"        + dbObj.group_505_id + "='" + p.group_505_id + "',"        + dbObj.group_506_id + "='" + p.group_506_id + "',"        + dbObj.group_chronic_id + "='" + p.group_chronic_id + "',"        + dbObj.group_disease + "='" + p.group_disease                                + "' where " + dbObj.pk_field + "='" + p.getObjectId() + "'";                return theConnectionInf.eUpdate(sql);    }        public int delete(GroupIcd10 p) throws Exception    {        String sql="delete from " + dbObj.table + " where "                + dbObj.pk_field + "='" + p.getObjectId() + "'";        return theConnectionInf.eUpdate(sql);    }         public Vector selctByPk(String pk) throws Exception    {        String sql="select * from "+ dbObj.table ;        if(pk.trim().length()!=0)        {            sql = sql + " where " + dbObj.icdcode + " like '%" + pk + "%'" ;        }        Vector v=eQuery(sql);                if(v.size()==0)            return null;        else            return v;            }        public Vector selctByDisease(String pk) throws Exception    {        String sql="select * from "+ dbObj.table ;        if(pk.trim().length()!=0)        {            sql = sql + " where " + dbObj.group_disease + " like '%" + pk + "%' order by " + dbObj.icdcode ;        }        Vector v=eQuery(sql);                if(v.size()==0)            return null;        else            return v;            }                public Vector selectAll() throws Exception    {        String sql="select * from "+ dbObj.table ;        Vector v=eQuery(sql);                if(v.size()==0)            return null;        else            return v;    }        public Vector eQuery(String sql) throws Exception    {        GroupIcd10 p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        int i=0;        while(rs.next())        {            p = new GroupIcd10();            p.setObjectId(rs.getString(dbObj.pk_field));            p.icdcode= rs.getString(dbObj.icdcode);            p.group504 = rs.getString(dbObj.group504);            p.group505 = rs.getString(dbObj.group505);            p.group506 = rs.getString(dbObj.group506);            p.other = rs.getString(dbObj.other);            p.groupchronic = rs.getString(dbObj.groupchronic);            p.group_504_id = rs.getString(dbObj.group_504_id);            p.group_505_id = rs.getString(dbObj.group_505_id);            p.group_506_id = rs.getString(dbObj.group_506_id);            p.group_chronic_id = rs.getString(dbObj.group_chronic_id);            p.group_disease = rs.getString(dbObj.group_disease);            list.add(p);            i++;        }        rs.close();        return list;    }}