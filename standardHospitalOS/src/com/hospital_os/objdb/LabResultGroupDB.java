package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.LabResultGroup;import java.util.*;import java.sql.*;public class LabResultGroupDB {    public ConnectionInf theConnectionInf;    public LabResultGroup dbObj;    final private String idtable = "901";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */      public LabResultGroupDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new LabResultGroup();        initConfig();      }    public LabResultGroupDB()    {        theConnectionInf= null;        dbObj = new LabResultGroup();        initConfig();    }    public boolean initConfig()    {        dbObj.table="b_lab_result_group";        dbObj.pk_field="b_lab_result_group_id";              dbObj.result_group_id = "b_lab_result_group_id";        dbObj.number = "lab_result_group_number";        dbObj.name   ="lab_result_group_name";                       return true;    }    /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(LabResultGroup o) throws Exception    {        LabResultGroup p=o;        p.generateOID(idtable);        StringBuffer sql = new StringBuffer("insert into " ).append( dbObj.table ).append( " ("        ).append( dbObj.pk_field        ).append( " ,"	).append( dbObj.name        ).append( " ,"	).append( dbObj.number        ).append( " ) values ('"        ).append( p.getObjectId()        ).append( "','" ).append( p.name        ).append( "','" ).append( p.number        ).append( "')");                return theConnectionInf.eUpdate(sql.toString());    }        public int update(LabResultGroup o) throws Exception    {        LabResultGroup p=o;        StringBuffer sql = new StringBuffer("update " ).append( dbObj.table ).append( " set "        ).append( dbObj.result_group_id ).append( "='" ).append( p.getObjectId()        ).append( "', " ).append( dbObj.name ).append( "='" ).append( p.name        ).append( "', " ).append( dbObj.number ).append( "='" ).append( p.number        ).append( "' where " ).append( dbObj.pk_field ).append( "='" ).append( p.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public int delete(LabResultGroup o) throws Exception    {        StringBuffer sql = new StringBuffer("delete from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field ).append( "='" ).append( o.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public LabResultGroup selectByPK(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field        ).append( " = '" ).append( pk ).append( "'");        Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return (LabResultGroup)v.get(0);    }           //    public Vector selectAllByName(String pk,String active) throws Exception//    {//        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table//        ).append( " where ");//        if(pk.trim().length() !=0)//        {//            sql.append("(" ).append(  dbObj.clinic_id//            ).append( " like '%" ).append( pk ).append( "%'" ).append( " or "//            ).append( dbObj.name ).append( " like '%" ).append( pk ).append( "%'" ).append( ") and ");//        }//        //        sql.append( dbObj.active ).append( " = '" ).append( active ).append( "'" ).append( "order by "//        ).append( dbObj.clinic_id;//        //        Vector v=eQuery(sql.toString());//        if(v.size()==0)//            return null;//        else//            return v;//    }         public Vector selectLabResultGroupAll() throws Exception    {   Vector vc = new Vector();        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table ).append(" order by ").append(dbObj.number);        vc = eQuery(sql.toString());        if(vc.size()==0)            return null;        else            return vc;    }        public Vector selectAll() throws Exception    {   Vector vc = new Vector();        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table ).append(" order by ").append(dbObj.number);        vc = veQuery(sql.toString());        if(vc.size()==0)            return null;        else            return vc;    }        public Vector selectByCode(String str) throws Exception    {   Vector vc = new Vector();        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table                     ).append( " where (UPPER(").append( dbObj.name                     ).append(") like '" ).append( str ).append("' )"                     ).append(" or (UPPER(").append( dbObj.number                     ).append(") like '" ).append( str ).append("' )") ;        vc = eQuery(sql.toString());        if(vc.size()==0)            return null;        else            return vc;    }        public LabResultGroup selectByCode1(String str) throws Exception     {           Vector vc = new Vector();        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table                     ).append( " where (UPPER(").append( dbObj.number                     ).append(") like '" ).append( str ).append("' )");        Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return (LabResultGroup)v.get(0);    }        /**     *@deprecated henbe unused     *     */    public Vector veQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql.toString());        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.name);            list.add(p);        }        rs.close();        return list;    }        public Vector eQuery(String sql) throws Exception    {        LabResultGroup p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql.toString());        while(rs.next())        {            p = new LabResultGroup();            p.setObjectId(rs.getString(dbObj.pk_field));            p.result_group_id = rs.getString(dbObj.result_group_id);            p.name = rs.getString(dbObj.name);            p.number = rs.getString(dbObj.number);            list.add(p);        }        rs.close();        return list;    }    }