package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class DrugFrequencyDB{    public ConnectionInf theConnectionInf;    public DrugFrequency dbObj;    final public String idtable = "150";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public DrugFrequencyDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new DrugFrequency();        initConfig();    }    public DrugFrequencyDB()    {        theConnectionInf= null;        dbObj = new DrugFrequency();        initConfig();    }        public boolean initConfig()    {        dbObj.table="b_item_drug_frequency";        dbObj.pk_field="b_item_drug_frequency_id";        dbObj.drug_frequency_id   ="item_drug_frequency_number";        dbObj.factor   ="item_drug_frequency_factor";        dbObj.description   ="item_drug_frequency_description";        dbObj.active ="item_drug_frequency_active";        /*        dbObj.table = "drug_frequency";        dbObj.pk_field = "key_id";        dbObj.drug_frequency_id = "drug_frequency_id";        dbObj.factor = "factor";        dbObj.description = "description";        dbObj.active = "active";         */        return true;    }            /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(DrugFrequency o) throws Exception    {                DrugFrequency p=o;        p.description = p.description.replace('\n',' ');        p.generateOID(idtable);        StringBuffer sql = new StringBuffer("insert into " ).append( dbObj.table ).append( " ("        ).append( dbObj.pk_field        ).append( " ,"	).append( dbObj.drug_frequency_id        ).append( " ,"	).append( dbObj.factor        ).append( " ,"	).append( dbObj.description        ).append( " ,"	).append( dbObj.active        ).append( " ) values ('"        ).append( p.getObjectId()        ).append( "','" ).append( p.drug_frequency_id        ).append( "','" ).append( p.factor        ).append( "','" ).append( p.description        ).append( "','" ).append( p.active        ).append( "')");                return theConnectionInf.eUpdate(sql.toString());    }    public int update(DrugFrequency o) throws Exception    {        DrugFrequency p=o;        p.description = p.description.replace('\n',' ');                StringBuffer sql = new StringBuffer("update " ).append( dbObj.table ).append( " set "                ).append( dbObj.drug_frequency_id ).append( "='" ).append( p.drug_frequency_id        ).append( "', " ).append( dbObj.factor ).append( "='" ).append( p.factor        ).append( "', " ).append( dbObj.description ).append( "='" ).append( p.description        ).append( "', " ).append( dbObj.active ).append( "='" ).append( p.active        ).append( "' where " ).append( dbObj.pk_field ).append( "='" ).append( p.getObjectId() ).append("'");                return theConnectionInf.eUpdate(sql.toString());    }        public int delete(DrugFrequency o) throws Exception    {        StringBuffer sql = new StringBuffer("delete from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field ).append( "='" ).append( o.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public DrugFrequency selectByPK(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field        ).append( " = '" ).append( pk ).append( "'");                Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return (DrugFrequency)v.get(0);    }        public DrugFrequency selectByCode(String code) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where UPPER(" ).append( dbObj.drug_frequency_id        ).append( ") = UPPER('" ).append( code ).append( "') ");                Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return (DrugFrequency)v.get(0);    }        public Vector selectAllByName(String pk,String active) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where ");        if(pk.trim().length() !=0)        {            sql .append("(" ).append(  dbObj.drug_frequency_id            ).append( " like '" ).append( pk ).append( "'" ).append( " or "            ).append( dbObj.description ).append( " like '" ).append( pk ).append( "'" ).append( ") and ");                    }                sql .append( dbObj.active ).append( " = '" ).append( active ).append( "'" ).append( "order by "        ).append( dbObj.drug_frequency_id );                Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return v;    }            public Vector selectAll() throws Exception    {   Vector vc = new Vector();        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.active ).append( " = '1'"        ).append( " order by ").append( dbObj.description);        vc = veQuery(sql.toString());        if(vc.size()==0)            return null;        else            return vc;            }                /**     *@deprecated henbe unused     *     */    public Vector veQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql.toString());        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.description);                        list.add(p);        }        rs.close();        return list;    }            public Vector eQuery(String sql) throws Exception    {        DrugFrequency p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql.toString());        while(rs.next())        {            p = new DrugFrequency();            p.setObjectId(rs.getString(dbObj.pk_field));            p.drug_frequency_id = rs.getString(dbObj.drug_frequency_id);            p.factor = rs.getString(dbObj.factor);            p.description = rs.getString(dbObj.description);            p.active = rs.getString(dbObj.active);            list.add(p);        }        rs.close();        return list;    }    }