package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class BillingDB {    public ConnectionInf theConnectionInf;    public Billing dbObj;    final private String idtable = "119";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public BillingDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new Billing();        initConfig();    }    public BillingDB()    {        this.theConnectionInf= null;        initConfig();    }    public boolean initConfig()    {        dbObj = getConfig();        return true;    }    public static Billing getConfig()    {           Billing dbObj = new Billing();        dbObj.table="t_billing";        dbObj.pk_field="t_billing_id";        dbObj.patient_id   ="t_patient_id";        dbObj.visit_id   ="t_visit_id";        dbObj.receipt_no   ="billing_billing_number";        dbObj.receipt_date   ="billing_billing_date_time";        dbObj.patient_share   ="billing_patient_share";        dbObj.payer_share   ="billing_payer_share";        dbObj.total   ="billing_total";        dbObj.paid   ="billing_paid";        dbObj.remain   ="billing_remain";        dbObj.deduct   ="billing_deduct";        dbObj.financial_date   ="billing_financial_date";        dbObj.active   ="billing_active";        dbObj.payback ="billing_payback";        dbObj.staff_financial = "billing_staff_record";        dbObj.staff_cancle_financial = "billing_staff_cancle";        dbObj.financial_cancle_date_time= "billing_cancle_date_time";        return dbObj;    }        public static void updateField(Billing bill)    {        bill.patient_share = Constant.getSDouble( bill.patient_share );        bill.payer_share = Constant.getSDouble( bill.payer_share );        bill.total  = Constant.getSDouble( bill.total  );        bill.paid  = Constant.getSDouble( bill.paid  );        bill.remain  = Constant.getSDouble( bill.remain  );        bill.deduct = Constant.getSDouble( bill.deduct );        bill.payback = Constant.getSDouble( bill.payback );    }    /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(Billing p) throws Exception    {        updateField(p);        p.generateOID(idtable);        StringBuffer sql = new StringBuffer("insert into " ).append( dbObj.table ).append( " ("        ).append( dbObj.pk_field        ).append( " ,"	).append( dbObj.patient_id        ).append( " ,"	).append( dbObj.payback        ).append( " ,"	).append( dbObj.visit_id        ).append( " ,"	).append( dbObj.receipt_no        ).append( " ,"	).append( dbObj.receipt_date        ).append( " ,"	).append( dbObj.patient_share        ).append( " ,"	).append( dbObj.payer_share        ).append( " ,"	).append( dbObj.total        ).append( " ,"	).append( dbObj.paid        ).append( " ,"	).append( dbObj.remain        ).append( " ,"	).append( dbObj.deduct        ).append( " ,"	).append( dbObj.financial_date        ).append( " ,"	).append( dbObj.staff_financial        ).append( " ,"	).append( dbObj.staff_cancle_financial        ).append( " ,"	).append( dbObj.financial_cancle_date_time        ).append( " ,"	).append( dbObj.active        ).append( " ) values ('"        ).append( p.getObjectId()        ).append( "','" ).append( p.patient_id        ).append( "','" ).append( p.payback        ).append( "','" ).append( p.visit_id        ).append( "','" ).append( p.receipt_no        ).append( "','" ).append( p.receipt_date        ).append( "'," ).append( p.patient_share   //???????????? double  by  henbe        ).append( "," ).append( p.payer_share   //???????????? double  by  henbe        ).append( "," ).append( p.total   //???????????? double  by  henbe        ).append( "," ).append( p.paid   //???????????? double  by  henbe        ).append( "," ).append( p.remain   //???????????? double  by  henbe        ).append( "," ).append( p.deduct   //???????????? double  by  henbe        ).append( ",'" ).append( p.financial_date        ).append( "','" ).append( p.staff_financial        ).append( "','" ).append( p.staff_cancle_financial        ).append( "','" ).append( p.financial_cancle_date_time        ).append( "','" ).append( p.active        ).append( "')");        return theConnectionInf.eUpdate(sql.toString());    }    public int update(Billing p) throws Exception    {        updateField(p);                StringBuffer sql = new StringBuffer("update " ).append( dbObj.table ).append( " set "        ).append( dbObj.patient_id ).append( "='" ).append( p.patient_id        ).append( "', " ).append( dbObj.payback ).append( "='" ).append( p.payback        ).append( "', " ).append( dbObj.visit_id ).append( "='" ).append( p.visit_id        ).append( "', " ).append( dbObj.receipt_no ).append( "='" ).append( p.receipt_no        ).append( "', " ).append( dbObj.receipt_date ).append( "='" ).append( p.receipt_date        ).append( "', " ).append( dbObj.patient_share ).append( "=" ).append( p.patient_share   //???????????? double  by  henbe        ).append( ", " ).append( dbObj.payer_share ).append( "=" ).append( p.payer_share   //???????????? double  by  henbe        ).append( ", " ).append( dbObj.total ).append( "=" ).append( p.total   //???????????? double  by  henbe        ).append( ", " ).append( dbObj.paid ).append( "=" ).append( p.paid   //???????????? double  by  henbe        ).append( ", " ).append( dbObj.remain ).append( "=" ).append( p.remain   //???????????? double  by  henbe        ).append( ", " ).append( dbObj.deduct ).append( "=" ).append( p.deduct   //???????????? double  by  henbe        ).append( ", " ).append( dbObj.financial_date ).append( "='" ).append( p.financial_date        ).append( "', " ).append( dbObj.staff_financial).append( "='" ).append( p.staff_financial        ).append( "', " ).append( dbObj.staff_cancle_financial).append( "='" ).append( p.staff_cancle_financial        ).append( "', " ).append( dbObj.financial_cancle_date_time).append( "='" ).append( p.financial_cancle_date_time        ).append( "', " ).append( dbObj.active ).append( "='" ).append( p.active        ).append( "' where " ).append( dbObj.pk_field ).append( "='" ).append( p.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public int delete(Billing o) throws Exception    {        StringBuffer sql = new StringBuffer("delete from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field ).append( "='" ).append( o.getObjectId() ).append("'");        return theConnectionInf.eUpdate(sql.toString());    }        public Billing selectByPK(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.pk_field        ).append( " = '" ).append( pk ).append( "'" );                Vector v=eQuery(sql.toString());        if(v.size()==0)            return null;        else            return (Billing)v.get(0);    }        public Vector selectAll() throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table);        return eQuery(sql.toString());    }    /*build 7*/    public void checkField() throws Exception    {    StringBuffer sql = new StringBuffer();         try         {             sql.append("SELECT " ).append( dbObj.staff_cancle_financial ).append( " from " ).append( dbObj.table);             this.theConnectionInf.getConnection().createStatement().executeQuery(sql.toString());         }         catch(Exception ex)         {             sql.append( "Alter table " ).append( dbObj.table ).append( " ADD " ).append( dbObj.staff_cancle_financial ).append( " varchar (255)");             this.theConnectionInf.eUpdate(sql.toString());                      }         try         {             sql.append("SELECT " ).append( dbObj.financial_cancle_date_time ).append( " from " ).append( dbObj.table);             this.theConnectionInf.getConnection().createStatement().executeQuery(sql.toString());         }         catch(Exception ex)         {             sql.append("Alter table " ).append( dbObj.table ).append( " ADD " ).append( dbObj.financial_cancle_date_time ).append( " varchar (255)");             this.theConnectionInf.eUpdate(sql.toString());         }         try         {             sql .append( "SELECT " ).append( dbObj.staff_financial ).append( " from " ).append( dbObj.table);             this.theConnectionInf.getConnection().createStatement().executeQuery(sql.toString());         }         catch(Exception ex)         {             sql .append( "Alter table " ).append( dbObj.table ).append( " ADD " ).append( dbObj.staff_financial ).append( " varchar (255)");             this.theConnectionInf.eUpdate(sql.toString());         }             }        public Vector selectByPatientId(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.patient_id        ).append( " = '" ).append( pk ).append( "' and " ).append( dbObj.active ).append( " ='1' order by " ).append( dbObj.financial_date  ).append( " desc"  );                return eQuery(sql.toString());    }        public Vector selectByVisitId(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.visit_id        ).append( " = '" ).append( pk ).append( "' and " ).append( dbObj.active ).append( " ='1'  order by " ).append( dbObj.financial_date ).append( " desc" );                return eQuery(sql.toString());    }    public Vector selectAllByVisitId(String pk) throws Exception    {        StringBuffer sql = new StringBuffer("select * from " ).append( dbObj.table        ).append( " where " ).append( dbObj.visit_id        ).append( " = '" ).append( pk ).append( "' order by " ).append( dbObj.financial_date ).append( " desc" );                return eQuery(sql.toString());    }        public Vector eQuery(String sql) throws Exception    {        ResultSet rs = theConnectionInf.eQuery(sql.toString());        return rs2Vector(rs);    }    public Vector rs2Vector(ResultSet rs) throws Exception    {        Vector list = new Vector();        while(rs.next())        {            Billing p = new Billing();            p.setObjectId(rs.getString(dbObj.pk_field));            p.payback = rs.getString(dbObj.payback);            p.patient_id = rs.getString(dbObj.patient_id);            p.visit_id = rs.getString(dbObj.visit_id);            p.receipt_no = rs.getString(dbObj.receipt_no);            p.receipt_date = rs.getString(dbObj.receipt_date);            p.patient_share = rs.getString(dbObj.patient_share);            p.payer_share = rs.getString(dbObj.payer_share);            p.total = rs.getString(dbObj.total);            p.paid = rs.getString(dbObj.paid);            p.remain = rs.getString(dbObj.remain);            p.deduct = rs.getString(dbObj.deduct);            p.financial_date = rs.getString(dbObj.financial_date);            p.active = rs.getString(dbObj.active);                        p.staff_financial= rs.getString(dbObj.staff_financial);            p.staff_cancle_financial= rs.getString(dbObj.staff_cancle_financial);            p.financial_cancle_date_time= rs.getString(dbObj.financial_cancle_date_time);            list.add(p);        }        rs.close();        return list;    }    }