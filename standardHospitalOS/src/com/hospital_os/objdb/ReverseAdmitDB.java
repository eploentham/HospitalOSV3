/** * tong */package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class ReverseAdmitDB{    public ConnectionInf theConnectionInf;    public ReverseAdmit dbObj;    final public String idtable = "235";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public ReverseAdmitDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new ReverseAdmit();        initConfig();    }    public ReverseAdmitDB()    {        theConnectionInf=null;        dbObj = new ReverseAdmit();        initConfig();    }    public boolean initConfig()    {        dbObj.table="t_visit_reverse_admit";        dbObj.pk_field="t_visit_reverse_admit_id";        dbObj.visit_id   ="t_visit_id";        dbObj.user_code   ="visit_reverse_admit_staff";        dbObj.reverse_admit_date   ="visit_reverse_admit_date_time";        dbObj.reverse_admit_cause   ="visit_reverse_admit_cause";        dbObj.clinic   ="b_visit_clinic_id";        dbObj.ward   ="b_visit_ward_id";        dbObj.bed   ="visit_reverse_admit_bed";        dbObj.an   ="visit_reverse_admit_an";        dbObj.begin_admit_time   ="visit_reverse_admit_begin_admit_time";        dbObj.used = "visit_reverse_admit_used";        /*        this.dbObj.table = "reverse_admit";        dbObj.pk_field = "reverse_admit_id";        dbObj.reverse_admit_cause = "reverse_admit_cause";        dbObj.reverse_admit_date = "reverse_admit_date";        dbObj.user_code = "user_code";        dbObj.visit_id = "visit_id";        dbObj.clinic  = "clinic";        dbObj.ward = "ward";        dbObj.bed = "bed";        dbObj.an = "an";        dbObj.begin_admit_time = "begin_admit_time";        dbObj.reused = "reused";         */        return true;    }    /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(ReverseAdmit o) throws Exception    {        String sql="";        ReverseAdmit p=o;        p.generateOID(idtable);        sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.reverse_admit_cause        + " ,"	+ dbObj.visit_id        + " ,"	+ dbObj.reverse_admit_date        + " ,"	+ dbObj.clinic        + " ,"	+ dbObj.ward        + " ,"	+ dbObj.bed        + " ,"	+ dbObj.an        + " ,"	+ dbObj.begin_admit_time        + " ,"	+ dbObj.user_code        + " ,"	+ dbObj.used        + " ) values ('"        + p.getObjectId()        + "','" + p.reverse_admit_cause        + "','" + p.visit_id        + "','" + p.reverse_admit_date        + "','" + p.clinic        + "','" + p.ward        + "','" + p.bed        + "','" + p.an        + "','" + p.begin_admit_time        + "','" + p.user_code        + "','" + p.used        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int update(ReverseAdmit o) throws Exception    {        String sql="update " + dbObj.table + " set ";        ReverseAdmit p=o;        String field =""        + "', " + dbObj.reverse_admit_cause + "='" + p.reverse_admit_cause        + "', " + dbObj.visit_id + "='" + p.visit_id        + "', " + dbObj.reverse_admit_date + "='" + p.reverse_admit_date                + "', " + dbObj.clinic + "='" + p.clinic        + "', " + dbObj.ward + "='" + p.ward        + "', " + dbObj.bed + "='" + p.bed        + "', " + dbObj.an + "='" + p.an        + "', " + dbObj.begin_admit_time + "='" + p.begin_admit_time        + "', " + dbObj.user_code + "='" + p.user_code        + "', " + dbObj.used + "='" + p.used        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(ReverseAdmit o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }        public ReverseAdmit selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (ReverseAdmit)v.get(0);    }            public Vector selectAllByNotUsed() throws Exception    {        String sql="select * from " + dbObj.table + " where " + dbObj.used + " = '0'" +        " order by " + dbObj.an;        return eQuery(sql);    }        public int updateUsedAdmitNumber(ReverseAdmit o) throws Exception    {        String sql="update " + dbObj.table + " set ";        ReverseAdmit p=o;        String field =""        + "', " + dbObj.used + "='" + p.used        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int selectUsedAdmitNumber(ReverseAdmit o) throws Exception    {    ReverseAdmit p=o;         String sql="select * from " + dbObj.table         + " where " + dbObj.used + " = '0'"         + " and " + dbObj.pk_field + " = '" + p.getObjectId() + "'"         + " order by " + dbObj.an;        // Vector v=eQuery(sql);                  sql= "select count(" + dbObj.pk_field + ") from " +dbObj.table + "" +         " WHERE " + dbObj.used + " = '0'"         + " and " + dbObj.pk_field + " = '" + p.getObjectId() + "'";         int result = 0;                ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            result = rs.getInt(1);        }         rs.close();                           return  result;             }        public Vector selectAll() throws Exception    {        String sql="select * from " + dbObj.table;        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }        public Vector eQuery(String sql) throws Exception    {        ReverseAdmit p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new ReverseAdmit();            p.setObjectId(rs.getString(dbObj.pk_field));            p.reverse_admit_cause = rs.getString(dbObj.reverse_admit_cause);            p.visit_id = rs.getString(dbObj.visit_id);            p.reverse_admit_date = rs.getString(dbObj.reverse_admit_date);                        p.clinic = rs.getString(dbObj.clinic);            p.ward = rs.getString(dbObj.ward);            p.bed = rs.getString(dbObj.bed);            p.an = rs.getString(dbObj.an);            p.user_code = rs.getString(dbObj.user_code);            p.begin_admit_time = rs.getString(dbObj.begin_admit_time);            p.used = rs.getString(dbObj.used);            list.add(p);            p = null;        }        rs.close();        return list;    }    }