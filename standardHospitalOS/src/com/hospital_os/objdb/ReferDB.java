package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class ReferDB{    public ConnectionInf theConnectionInf;    public Refer dbObj;    public SequenceDataDB theSequenceDataDB;    final public String idtable = "226";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public ReferDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new Refer();        initConfig();    }    public ReferDB(ConnectionInf db,SequenceDataDB sdb)    {        theConnectionInf=db;        theSequenceDataDB = sdb;        dbObj = new Refer();        initConfig();    }    public void setDepHosDB(SequenceDataDB sdb){        theSequenceDataDB = sdb;    }    public boolean initConfig()    {        dbObj.table="t_visit_refer_in_out";        dbObj.pk_field="t_visit_refer_in_out_id";        dbObj.refer_number   ="visit_refer_in_out_number";        dbObj.patient_id   ="visit_refer_in_out_t_patient_id";        dbObj.refer_out   ="f_visit_refer_type_id";        dbObj.near_localtion   ="visit_refer_in_out_near_refer_hospital";        dbObj.office_refer   ="visit_refer_in_out_refer_hospital";        dbObj.refer_treatment   ="visit_refer_in_out_treatment";        dbObj.refer_lab   ="visit_refer_in_out_lab";        dbObj.refer_observe   ="visit_refer_in_out_observe";        dbObj.refer_result   ="visit_refer_in_out_result_request";        dbObj.history_family   ="visit_refer_in_out_family_symptom";        dbObj.history_current   ="visit_refer_in_out_current_symptom";        dbObj.history_lab   ="visit_refer_in_out_summary_investigation";        dbObj.first_dx   ="visit_refer_in_out_summary_diagnosis";        dbObj.first_treatment   ="visit_refer_in_out_summary_treatment";        dbObj.cause_refer   ="visit_refer_in_out_cause";        dbObj.other_detail   ="visit_refer_in_out_notice";        dbObj.infectious   ="visit_refer_in_out_infection_inform";        dbObj.date_refer   ="record_date_time";        dbObj.doctor_refer   ="visit_refer_in_out_staff_doctor_refer";        dbObj.reporter_refer   ="visit_refer_in_out_staff_refer";        dbObj.final_dx   ="visit_refer_in_out_diagnosis_final";        dbObj.date_result   ="visit_refer_in_out_result_date";        dbObj.doctor_result   ="visit_refer_in_out_staff_doctor_report";        dbObj.result_lab   ="visit_refer_in_out_lab_result";        dbObj.result_treatment   ="visit_refer_in_out_treatment_result";        dbObj.continue_treatment   ="visit_refer_in_out_treatment_continue";        dbObj.reporter_result   ="visit_refer_in_out_staff_report";        dbObj.vn_id   ="t_visit_id";        dbObj.vn   ="visit_refer_in_out_vn";        dbObj.hn ="visit_refer_in_out_hn";        //เก็บสถานะการ Refer --sumo-- 13/3/2549        dbObj.refer_complete = "visit_refer_in_out_status";        dbObj.active = "visit_refer_in_out_active";        return true;    }    /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(Refer p) throws Exception    {        //เพิ่ม AutoNumber ของเลข Refer --Sumo--25/2/2549 henbe move        if(p.refer_number.trim().equals(""))        {            if(p.refer_out.equals("0"))            {                p.refer_number = theSequenceDataDB.updateSequence("rfin",false);            }            else if(p.refer_out.equals("1"))            {                p.refer_number = theSequenceDataDB.updateSequence("rfon",false);            }        }        p.generateOID(idtable);        String sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"  + dbObj.refer_number        + " ,"  + dbObj.patient_id        + " ,"  + dbObj.vn_id        + " ,"  + dbObj.vn        + " ,"  + dbObj.hn        + " ,"  + dbObj.refer_out        + " ,"  + dbObj.near_localtion        + " ,"  + dbObj.office_refer        + " ,"  + dbObj.refer_treatment        + " ,"  + dbObj.refer_lab        + " ,"  + dbObj.refer_observe        + " ,"  + dbObj.refer_result        + " ,"  + dbObj.history_family        + " ,"  + dbObj.history_current        + " ,"  + dbObj.history_lab        + " ,"  + dbObj.first_dx        + " ,"  + dbObj.first_treatment        + " ,"  + dbObj.cause_refer        + " ,"  + dbObj.other_detail        + " ,"  + dbObj.infectious        + " ,"  + dbObj.date_refer        + " ,"  + dbObj.doctor_refer        + " ,"  + dbObj.date_result        + " ,"  + dbObj.doctor_result        + " ,"  + dbObj.result_lab        + " ,"  + dbObj.final_dx        + " ,"  + dbObj.result_treatment        + " ,"  + dbObj.continue_treatment        + " ,"  + dbObj.reporter_refer        + " ,"  + dbObj.reporter_result        + " ,"  + dbObj.refer_complete         + " ,"  + dbObj.active         + " ) values ('"        + p.getObjectId()        + "','" + p.refer_number        + "','" + p.patient_id        + "','" + p.vn_id        + "','" + p.vn        + "','" + p.hn        + "','" + p.refer_out        + "','" + p.near_localtion        + "','" + p.office_refer        + "','" + p.refer_treatment        + "','" + p.refer_lab        + "','" + p.refer_observe        + "','" + p.refer_result        + "','" + p.history_family        + "','" + p.history_current        + "','" + p.history_lab        + "','" + Gutil.CheckReservedWords(p.first_dx)        + "','" + p.first_treatment        + "','" + p.cause_refer        + "','" + p.other_detail        + "','" + p.infectious        + "','" + p.date_refer        + "','" + p.doctor_refer        + "','" + p.date_result        + "','" + p.doctor_result        + "','" + p.result_lab        + "','" + Gutil.CheckReservedWords(p.final_dx)        + "','" + p.result_treatment        + "','" + p.continue_treatment        + "','" + p.reporter_refer        + "','" + p.reporter_result        + "','" + p.refer_complete        + "','" + p.active        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }            public Vector selectByHnReferNumberDate(String hn,String rfNumber,String dateFrom            ,String dateTo,String status,String refer_out) throws Exception    {        Vector vc = new Vector();        String sql="select * from " + dbObj.table +                 " where (" + dbObj.hn + " like '" + hn + "' " +                " or " + dbObj.refer_number + " like '" + rfNumber + "')" +                " and " + dbObj.refer_out + " like '" + refer_out + "'";        if(!dateFrom.equals(""))            sql = sql + " and " + dbObj.date_refer + " >= '" + dateFrom + "'";        if(!dateTo.equals(""))        {            dateTo = DateUtil.addDay(dateTo,1);            sql = sql + " and " + dbObj.date_refer + " <= '" + dateTo + "'";        }        sql = sql + " and " + dbObj.refer_complete + " = '" + status + "'";        sql = sql + " and " + dbObj.active + " = '1' order by " + dbObj.date_refer + " desc ";        return eQuery(sql);    }            public int update(Refer o) throws Exception    {        String sql="update " + dbObj.table + " set ";        Refer p=o;        String field =""        + "' " + dbObj.refer_number + "='" + p.refer_number        + "' ," + dbObj.patient_id + "='" + p.patient_id        + "' ," + dbObj.vn_id + "='" + p.vn_id        + "' ," + dbObj.vn + "='" + p.vn        + "' ," + dbObj.hn + "='" + p.hn        + "' ," + dbObj.refer_out + "='" + p.refer_out        + "' ," + dbObj.near_localtion + "='" + p.near_localtion        + "' ," + dbObj.office_refer + "='" + p.office_refer        + "' ," + dbObj.refer_treatment + "='" + p.refer_treatment        + "' ," + dbObj.refer_lab + "='" + p.refer_lab        + "' ," + dbObj.refer_observe + "='" + p.refer_observe        + "' ," + dbObj.refer_result + "='" + p.refer_result        + "' ," + dbObj.history_family + "='" + p.history_family        + "' ," + dbObj.history_current + "='" + p.history_current        + "' ," + dbObj.history_lab + "='" + p.history_lab        + "' ," + dbObj.first_dx + "='" + Gutil.CheckReservedWords(p.first_dx)        + "' ," + dbObj.first_treatment + "='" + p.first_treatment        + "' ," + dbObj.cause_refer + "='" + p.cause_refer        + "' ," + dbObj.other_detail + "='" + p.other_detail        + "' ," + dbObj.infectious + "='" + p.infectious        + "' ," + dbObj.date_refer + "='" + p.date_refer        + "' ," + dbObj.doctor_refer + "='" + p.doctor_refer        + "' ," + dbObj.date_result + "='" + p.date_result        + "' ," + dbObj.doctor_result + "='" + p.doctor_result        + "' ," + dbObj.result_lab + "='" + p.result_lab        + "' ," + dbObj.final_dx + "='" + Gutil.CheckReservedWords(p.final_dx)        + "' ," + dbObj.result_treatment + "='" + p.result_treatment        + "' ," + dbObj.continue_treatment + "='" + p.continue_treatment        + "' ," + dbObj.reporter_refer + "='" + p.reporter_refer        + "' ," + dbObj.reporter_result + "='" + p.reporter_result        + "' ," + dbObj.refer_complete + "='" + p.refer_complete        + "' ," + dbObj.active + "='" + p.active        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";                sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(Refer o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }    /**     * @author henbe     * refer active = x where visit_id = y and refer_out = z     *     */    public int updateActiveByVidOut(String active,String visit_id,String out) throws Exception    {        String sql="update " + dbObj.table +                 " set " + dbObj.active + " = '" + active + "'" +                 " where " + dbObj.vn_id + "='" + visit_id + "'" +                " and " + dbObj.refer_out + "='" + out + "'";        return theConnectionInf.eUpdate(sql);    }        public Refer selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Refer)v.get(0);    }    /**     *@depreacted ไม่ให้ใช้ vn ในการคิวรีให้ใช้ primary key ของตารางนั้นๆ     **/    public Refer selectByVN(String vn) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn        + " = '" + vn + "'";        sql = sql + " and " + dbObj.active + " = '1'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Refer)v.get(0);    }    /**     *@depreacted ไม่ให้ใช้ vn ในการคิวรีให้ใช้ primary key ของตารางนั้นๆ     **/    public Refer selectByVNTypeRefer(String vn,String typerefer) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn        + " = '" + vn        + "' and " + dbObj.refer_out + "='"+ typerefer +"'";        sql = sql + " and " + dbObj.active + " = '1'";                        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Refer)v.get(0);    }         public Refer selectByVisitIdType(String vid,String typerefer) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn_id        + " = '" + vid        + "' and " + dbObj.refer_out + "='"+ typerefer +"'";        sql = sql + " and " + dbObj.active + " = '1'";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Refer)v.get(0);    }        public Vector selectAll() throws Exception    {        String sql="select * from " + dbObj.table;                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }        public Vector eQuery(String sql) throws Exception    {        Refer p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new Refer();            p.setObjectId(rs.getString(dbObj.pk_field));            p.refer_number = rs.getString(dbObj.refer_number);            p.patient_id = rs.getString(dbObj.patient_id);            p.refer_out = rs.getString(dbObj.refer_out);            p.vn_id = rs.getString(dbObj.vn_id);            p.vn = rs.getString(dbObj.vn);            p.hn = rs.getString(dbObj.hn);            p.near_localtion = rs.getString(dbObj.near_localtion);            p.office_refer = rs.getString(dbObj.office_refer);            p.refer_treatment = rs.getString(dbObj.refer_treatment);            p.refer_lab = rs.getString(dbObj.refer_lab);            p.refer_observe = rs.getString(dbObj.refer_observe);            p.refer_result = rs.getString(dbObj.refer_result);            p.history_family = rs.getString(dbObj.history_family);            p.history_current =rs.getString(dbObj.history_current);            p.history_lab = rs.getString(dbObj.history_lab);            p.first_dx = rs.getString(dbObj.first_dx);            p.first_treatment = rs.getString(dbObj.first_treatment);            p.cause_refer = rs.getString(dbObj.cause_refer);            p.other_detail =rs.getString(dbObj.other_detail);            p.infectious = rs.getString(dbObj.infectious);            p.date_refer = rs.getString(dbObj.date_refer);            p.doctor_refer = rs.getString(dbObj.doctor_refer);            p.date_result = rs.getString(dbObj.date_result);            p.doctor_result = rs.getString(dbObj.doctor_result);            p.result_lab = rs.getString(dbObj.result_lab);            p.final_dx = rs.getString(dbObj.final_dx);            p.result_treatment= rs.getString(dbObj.result_treatment);            p.continue_treatment = rs.getString(dbObj.continue_treatment);            p.reporter_refer = rs.getString(dbObj.reporter_refer);            p.reporter_result = rs.getString(dbObj.reporter_result);            p.refer_complete = rs.getString(dbObj.refer_complete);            p.active = rs.getString(dbObj.active);            list.add(p);        }        rs.close();        return list;    }    public String selectMaxOut(String pattern) throws Exception     {        String sql = "Select MAX(" +dbObj.refer_number + ") as max From " + dbObj.table                + " where " + dbObj.refer_out +"='"+ dbObj.REFER_OUT + "'"                + " and length(" + dbObj.refer_number + ") >=" +pattern.length();        ResultSet rs = theConnectionInf.eQuery(sql);        String ret = "0";        if(rs.next())           ret = rs.getString(1);        rs.close();        return ret;    }    public String selectMaxIn(String pattern)  throws Exception     {        String sql = "Select MAX(" +dbObj.refer_number + ") as max From " + dbObj.table                + " where " + dbObj.refer_out +"='"+ dbObj.REFER_IN + "'"                + " and length(" + dbObj.refer_number + ") >=" +pattern.length();        ResultSet rs = theConnectionInf.eQuery(sql);        String ret = "0";        if(rs.next())           ret = rs.getString(1);        rs.close();        return ret;    }}