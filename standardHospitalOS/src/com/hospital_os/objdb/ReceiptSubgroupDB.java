package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class ReceiptSubgroupDB{    public ConnectionInf theConnectionInf;    public ReceiptSubgroup dbObj;    final public String idtable = "225";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public ReceiptSubgroupDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new ReceiptSubgroup();        initConfig();    }    public boolean initConfig()    {        dbObj.table="t_billing_receipt_billing_subgroup";        dbObj.pk_field="t_billing_receipt_billing_subgroup_id";        dbObj.receipt_id   ="t_billing_receipt_id";        dbObj.billing_invoice_subgroup_id   ="t_billing_invoice_billing_subgroup_id";        dbObj.hn   ="t_patient_id";        dbObj.vn   ="t_visit_id";        dbObj.item_group_code_billing   ="b_item_billing_subgroup_id";        dbObj.paid   ="billing_receipt_billing_subgroup_paid";        dbObj.draw   ="billing_receipt_billing_subgroup_draw";        dbObj.active="billing_receipt_billing_subgroup_active";        return true;    }     public static void updateField(ReceiptSubgroup obj)    {        obj.paid = Constant.getSDouble(obj.paid);    }               /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(ReceiptSubgroup p) throws Exception    {        updateField(p);        p.generateOID(idtable);        String sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.receipt_id        + " ,"	+ dbObj.billing_invoice_subgroup_id        + " ,"	+ dbObj.hn        + " ,"	+ dbObj.vn        + " ,"	+ dbObj.item_group_code_billing        + " ,"	+ dbObj.paid        + " ,"	+ dbObj.active        + " ,"	+ dbObj.draw        + " ) values ('"        + p.getObjectId()        + "','" + p.receipt_id        + "','" + p.billing_invoice_subgroup_id        + "','" + p.hn        + "','" + p.vn        + "','" + p.item_group_code_billing        + "'," + p.paid       //ดูดีดีนะว่ามันเป็น double  by  henbe        + ",'" + p.active        + "','" + p.draw        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int update(ReceiptSubgroup p) throws Exception    {        updateField(p);        String sql="update " + dbObj.table + " set ";        String field =""        + "', " + dbObj.receipt_id + "='" + p.receipt_id        + "', " + dbObj.billing_invoice_subgroup_id + "='" + p.billing_invoice_subgroup_id        + "', " + dbObj.hn + "='" + p.hn        + "', " + dbObj.vn + "='" + p.vn        + "', " + dbObj.item_group_code_billing + "='" + p.item_group_code_billing        + "', " + dbObj.paid + "=" + p.paid       //ดูดีดีนะว่ามันเป็น double  by  henbe        + ", " + dbObj.active + "='" + p.active        + "', " + dbObj.draw + "='" + p.draw        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(ReceiptSubgroup o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }        public ReceiptSubgroup selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (ReceiptSubgroup)v.get(0);    }        public Vector listReceiptSubgroupByVisitIdReceiptID(String visit_id , String receipt_id) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn + " = '" + visit_id + "' "        + " and " + dbObj.receipt_id + " = '" + receipt_id + "' "        + " and " + dbObj.active + " = '1' ";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }        public Vector selectByvisitIdBillingGroupItem(String visit_id , String billing_invoice_subgroup_id) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn + " = '" + visit_id + "' "        + " and " + dbObj.billing_invoice_subgroup_id + " = '" + billing_invoice_subgroup_id + "' "        + " and " + dbObj.active + " = '1' ";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }        public Vector selectAll( ) throws Exception    {        String sql="select * from " + dbObj.table;        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }        public Vector eQuery(String sql) throws Exception    {        ReceiptSubgroup p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new ReceiptSubgroup();            p.setObjectId(rs.getString(dbObj.pk_field));            p.receipt_id = rs.getString(dbObj.receipt_id);            p.billing_invoice_subgroup_id = rs.getString(dbObj.billing_invoice_subgroup_id);            p.hn = rs.getString(dbObj.hn);            p.vn = rs.getString(dbObj.vn);            p.item_group_code_billing = rs.getString(dbObj.item_group_code_billing);            p.paid = rs.getString(dbObj.paid);            p.draw = rs.getString(dbObj.draw);            p.active  = rs.getString(dbObj.active);            list.add(p);        }        rs.close();        return list;    }    }