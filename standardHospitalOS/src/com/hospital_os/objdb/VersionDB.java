package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class VersionDB{        public ConnectionInf theConnectionInf;    public Version dbObj;    final public String idtable = "254";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public VersionDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new Version();        initConfig();    }    public VersionDB(ConnectionInf db,Version config)    {        theConnectionInf=db;        dbObj = config;    }    public boolean initConfig()    {        dbObj.table="s_version";        dbObj.pk_field="s_version_id";        dbObj.version_id   ="version_number";        dbObj.description   ="version_description";        dbObj.app_code   ="version_application_number";        dbObj.db_code   ="version_database_number";        dbObj.update_time="version_update_time";        /*        dbObj.table = "version";        dbObj.pk_field = "key_id";        dbObj.version_id = "version_id";        dbObj.description = "description";        dbObj.app_code = "app_code";        dbObj.db_code = "db_code";        dbObj.update_time = "update_time";         */        return true;    }            /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(Version o) throws Exception    {        String sql="";        Version p=o;        p.generateOID(idtable);        sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.version_id        + " ,"	+ dbObj.description        + " ,"	+ dbObj.app_code        + " ,"	+ dbObj.db_code        + " ,"	+ dbObj.update_time        + " ) values ('"        + p.getObjectId()        + "','" + p.version_id        + "','" + p.description        + "','" + p.app_code        + "','" + p.db_code        + "','" + p.update_time        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int update(Version o) throws Exception    {        String sql="update " + dbObj.table + " set ";        Version p=o;        String field =""        + "', " + dbObj.version_id + "='" + p.version_id        + "', " + dbObj.description + "='" + p.description        + "', " + dbObj.app_code + "='" + p.app_code        + "', " + dbObj.db_code + "='" + p.db_code        + "', " + dbObj.update_time + "='" + p.update_time        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(Version o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }        public Version selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Version)v.get(0);    }            public Version selectbyAppCode(Version o) throws Exception    {                String sql = "Select * from " + dbObj.table        + " where " + dbObj.app_code + " = '" + o.app_code + "'"        + " and " + dbObj.db_code + " = '" + o.db_code + "'"        ;                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Version)v.get(0);            }         //////////////////////////////////////////////////////////////////////////////    /**     * deprecated ห้ามใช้การ update จากโค้ดเป็นอันขาดให้ update จากไฟล์เท่านั้น     *     */    public boolean insertVersion3_1() throws Exception    {            String sql = "SELECT " +dbObj.version_id + " FROM "        + dbObj.table + " order by " + dbObj.update_time + " DESC limit 1";        boolean result = false;        int version = 0;        try{            ResultSet rs = theConnectionInf.eQuery(sql);            while(rs.next()){                version = rs.getInt(1);            }            if(version>0 && version ==10) {                result = true;                sql = "INSERT INTO s_version VALUES ('9701000000001', '11', 'Hospital OS, Community Edition', '3.02.0748', '3.00.0548', '2548-07-28 12:00:00');";                theConnectionInf.getConnection().createStatement().executeQuery(sql);            }        }        catch(Exception ex){            ex.printStackTrace(Constant.getPrintStream());        }         return result;    }        public boolean insertVersionBuild7() throws Exception    {    Constant.println("Check Version....");         String sql = "SELECT MAX(" +dbObj.version_id + ") FROM " + dbObj.table ;         int version = 0;         boolean result = false;         try         {             ResultSet rs = theConnectionInf.eQuery(sql);                          while(rs.next())             {                 version = rs.getInt(1);             }                      }         catch(Exception ex)         {                                   }                  if(version>0 && version ==4)         { try           {               Constant.println("Insert Build 7");               result = true;               sql = "INSERT INTO s_version VALUES ('9400999090999', '5', 'Hospital OS, Community Edition', '2.07.0248', '2.04.0148', '2548-02-01 12:00:00')";               this.theConnectionInf.getConnection().createStatement().executeQuery(sql);                          }           catch(Exception ex)           {                        }         }                  return result;             }        public boolean insertVersionBuild8b() throws Exception    {             String sql = "SELECT MAX(" +dbObj.version_id + ") FROM " + dbObj.table ;        boolean result = false;         int version = 0;         try         {             ResultSet rs = theConnectionInf.eQuery(sql);                          while(rs.next())             {                 version = rs.getInt(1);             }         }         catch(Exception ex)         {                                  }           if(version>0 && version ==5)         {            try           {    Constant.println("Insert Build 8 b");               result = true;               sql = "INSERT INTO s_version VALUES ('9500999090999', '6', 'Hospital OS, Community Edition', '2.08.0248', '2.04.0148', '2548-04-01 12:00:00')";               this.theConnectionInf.getConnection().createStatement().executeQuery(sql);                          }           catch(Exception ex)           {                     }         }         return result;    }            public boolean insertVersionBuild8() throws Exception    {             String sql = "SELECT MAX(" +dbObj.version_id + ") FROM " + dbObj.table ;        boolean result = false;         int version = 0;         try         {             ResultSet rs = theConnectionInf.eQuery(sql);                          while(rs.next())             {                 version = rs.getInt(1);             }         }         catch(Exception ex)         {                                  }           if(version>0 && version ==6)         { try           {    Constant.println("Insert Build 8");               result = true;               sql = "INSERT INTO s_version VALUES ('9600999090999', '7', 'Hospital OS, Community Edition', '2.08.0548', '2.05.0548', '2548-05-12 12:00:00')";               this.theConnectionInf.getConnection().createStatement().executeQuery(sql);                          }           catch(Exception ex)           {                     }         }         return result;    }                public boolean insertVersionBuild8Continue() throws Exception    {             String sql = "SELECT MAX(" +dbObj.version_id + ") FROM " + dbObj.table ;        boolean result = false;         int version = 0;         try         {             ResultSet rs = theConnectionInf.eQuery(sql);                          while(rs.next())             {                 version = rs.getInt(1);             }         }         catch(Exception ex)         {                                 }           if(version>0 && version ==7)         { try           {    Constant.println("Insert Build 8 continue");               result = true;               sql = "INSERT INTO s_version VALUES ('9700999090999', '8', 'Hospital OS, Community Edition', '2.08.0548', '2.06.0548', '2548-05-12 12:00:00')";               this.theConnectionInf.getConnection().createStatement().executeQuery(sql);                          }           catch(Exception ex)           {                     }         }         return result;    }        public boolean insertVersionBuild8_1() throws Exception    {             String sql = "SELECT MAX(" +dbObj.version_id + ") FROM " + dbObj.table ;        boolean result = false;         int version = 0;         try         {             ResultSet rs = theConnectionInf.eQuery(sql);                          while(rs.next())             {                 version = rs.getInt(1);             }         }         catch(Exception ex)         {                                  }           if(version>0 && version ==8)         {            try           {                   Constant.println("Insert Build 8.1 ");               result = true;               sql = "INSERT INTO s_version VALUES ('9800999090999', '9', 'Hospital OS, Community Edition', '2.08.0548', '2.07.0548', '2548-05-31 18:29:00')";               this.theConnectionInf.getConnection().createStatement().executeQuery(sql);                          }           catch(Exception ex)           {                     }         }         return result;    }    public boolean insertVersionBuild8_2() throws Exception    {             String sql = "SELECT MAX(to_number(" +dbObj.version_id + ",99)) FROM " + dbObj.table ;        boolean result = false;         int version = 0;         try         {             ResultSet rs = theConnectionInf.eQuery(sql);                          while(rs.next())             {                 version = rs.getInt(1);             }         }         catch(Exception ex)         {                                  }           if(version>0 && version ==9)         {            try           {                   Constant.println("Insert Build 8.2 ");               result = true;               sql = "INSERT INTO s_version VALUES ('9900999090999', '10', 'Hospital OS, Community Edition', '2.08.0648', '2.08.0648', '2548-06-22 13:29:00')";               this.theConnectionInf.getConnection().createStatement().executeQuery(sql);                          }           catch(Exception ex)           {                     }         }         return result;    }           public Vector selectAll() throws Exception    {        Vector vc = new Vector();        String sql ="select * from " + dbObj.table + " order by "+        dbObj.description;        vc = veQuery(sql);        if(vc.size()==0)            return null;        else            return vc;            }    /**     * @deprecated henbe เขียนผิดไม่ยอมแก้ด้วย     */    public Vector selectAllVersoin() throws Exception    {           Vector vc = new Vector();        String sql ="select * from " + dbObj.table + " order by to_number("+        dbObj.version_id + ",'99D9S') DESC";            vc = eQuery(sql);        if(vc.size()==0)            return null;        else            return vc;    }    /**     * @deprecated henbe ตัว c จะต้องเป็นพิมพ์ใหญ่     */    public Version selectcurrentVersion() throws Exception    {   Vector vc = new Vector();                vc = this.selectAllVersoin();        if(vc.size()==0)            return null;        else        {            Version version = (Version)vc.get(0);            return version;        }            }    /**     * @author henbe     * แก้แล้ว     */    public Vector selectAllVersion() throws Exception    {        Vector vc = new Vector();        String sql ="select * from " + dbObj.table +                " where " + dbObj.update_time + " is not null " +                 " order by "+ dbObj.update_time + " DESC ";        vc = eQuery(sql);        if(vc.size()==0)            return null;        else            return vc;            }    /**     * @author henbe     * แก้แล้ว     */    public Version selectCurrentVersion() throws Exception    {           Vector vc = new Vector();        vc = this.selectAllVersion();        if(vc.size()==0)            return null;        else            return (Version)vc.get(0);            }                /**     * @deprecated henbe กำลังจะเลิกใช้ combofix ให้ใช้ commoninf แทน     */    public Vector veQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.description);            list.add(p);        }        rs.close();        return list;    }            public Vector eQuery(String sql) throws Exception    {        Version p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new Version();            p.setObjectId(rs.getString(dbObj.pk_field));            p.version_id = rs.getString(dbObj.version_id);            p.description = rs.getString(dbObj.description);            p.app_code = rs.getString(dbObj.app_code);            p.db_code = rs.getString(dbObj.db_code);            p.update_time = rs.getString(dbObj.update_time);            list.add(p);        }        rs.close();        return list;    }    /**     *@authen henbe     */        public Version selectbyDbCode(Version o) throws Exception    {                String sql = "Select * from " + dbObj.table        + " where " + dbObj.db_code + " = '" + o.db_code + "'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Version)v.get(0);            }}