package com.hospital_os.objdb;import com.hospital_os.usecase.connection.*;import com.hospital_os.utility.*;import com.hospital_os.object.*;import java.util.*;import java.sql.*;public class ReceiptDB{    public ConnectionInf theConnectionInf;    public Receipt dbObj;    final public String idtable = "224";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public ReceiptDB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = getConfig();    }    public static Receipt getConfig()    {        Receipt dbObj = new Receipt();        dbObj.table="t_billing_receipt";        dbObj.pk_field="t_billing_receipt_id";        dbObj.hn   ="t_patient_id";        dbObj.vn   ="t_visit_id";        dbObj.receipt_no   ="billing_receipt_number";        dbObj.receipt_date   ="billing_receipt_date_time";        dbObj.paid   ="billing_receipt_paid";        dbObj.active   ="billing_receipt_active";        dbObj.billing_id="t_billing_id";        dbObj.staff_receipt = "billing_receipt_staff_record";        dbObj.receipt_model = "f_billing_receipt_model_id";        return dbObj;    }        public static void updateField(Receipt obj)    {        obj.paid = Constant.getSDouble(obj.paid);         }            /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(Receipt p) throws Exception    {        updateField(p);        p.generateOID(idtable);        String sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.hn        + " ,"	+ dbObj.vn        + " ,"	+ dbObj.receipt_no        + " ,"	+ dbObj.receipt_date        + " ,"	+ dbObj.paid        + " ,"	+ dbObj.billing_id        + " ,"	+ dbObj.staff_receipt        + " ,"	+ dbObj.receipt_model        + " ,"	+ dbObj.active        + " ) values ('"        + p.getObjectId()        + "','" + p.hn        + "','" + p.vn        + "','" + p.receipt_no        + "','" + p.receipt_date        + "'," + p.paid        //ดูดีดีนะว่ามันเป็น double  by  henbe        + ",'" + p.billing_id        + "','" + p.staff_receipt        + "','" + p.receipt_model        + "','" + p.active        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());                return theConnectionInf.eUpdate(sql);    }    public int update(Receipt p) throws Exception    {        updateField(p);        String sql="update " + dbObj.table + " set ";        String field =""        + "', " + dbObj.hn + "='" + p.hn        + "', " + dbObj.vn + "='" + p.vn        + "', " + dbObj.receipt_no + "='" + p.receipt_no        + "', " + dbObj.receipt_date + "='" + p.receipt_date        + "', " + dbObj.paid + "=" + p.paid        //ดูดีดีนะว่ามันเป็น double  by  henbe        + ", " + dbObj.billing_id + "='" + p.billing_id        + "', " + dbObj.staff_receipt + "='" + p.staff_receipt        + "', " + dbObj.receipt_model + "='" + p.receipt_model        + "', " + dbObj.active + "='" + p.active        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(Receipt o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }    public Vector listReceiptByVisitIdBillingID(String visit_id,String billing_id)  throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn  + " = '" + visit_id + "'"        + " and " + dbObj.billing_id + " = '" + billing_id + "'"        ;        return eQuery(sql);    }    public Vector listReceiptByVisitIdReceiptIdOrderBy(String visit_id,String billing_id)  throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.vn  + " = '" + visit_id + "'"        + " and " + dbObj.billing_id + " = '" + billing_id + "'"        + " order by " + dbObj.receipt_date + " desc";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }    public Vector selectAll()  throws Exception    {        String sql="select * from " + dbObj.table;        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return v;    }        public Receipt selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Receipt)v.get(0);    }        public Vector eQuery(String sql) throws Exception    {        Receipt p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new Receipt();            p.setObjectId(rs.getString(dbObj.pk_field));            p.hn = rs.getString(dbObj.hn);            p.vn = rs.getString(dbObj.vn);            p.receipt_no = rs.getString(dbObj.receipt_no);            p.receipt_date = rs.getString(dbObj.receipt_date);            p.paid = rs.getString(dbObj.paid);            p.billing_id = rs.getString(dbObj.billing_id);            p.staff_receipt = rs.getString(dbObj.staff_receipt);            p.receipt_model = rs.getString(dbObj.receipt_model);            p.active = rs.getString(dbObj.active);            list.add(p);        }        rs.close();        return list;    }        /*build 7*/    public void checkField()throws Exception    {    String sql = "";         try         {             sql = "SELECT " + dbObj.staff_receipt + " from " + dbObj.table;             this.theConnectionInf.getConnection().createStatement().executeQuery(sql);         }         catch(Exception ex)         {             sql = "Alter table " + dbObj.table + " ADD " + dbObj.staff_receipt + " varchar (255)";             this.theConnectionInf.eUpdate(sql);         }    }    //////////////////////////////////////////////////////////////////////////////    public int updateAbyB(String active,String bid) throws Exception    {        String sql="update " + dbObj.table + " set ";        String field =""        + "', " + dbObj.active + "='" + active        + "' where " + dbObj.billing_id + "='" + bid +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    //////////////////////////////////////////////////////////////////////////////    public Receipt selectByBidPaid(String billing_id, String paid) throws Exception {        String sql="select * from " + dbObj.table        + " where " + dbObj.billing_id + " = '" + billing_id + "'"        + " and " + dbObj.paid + " = '" + paid + "'";                Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (Receipt)v.get(0);    }    public String selectMaxRN() throws Exception {        String sql = "Select MAX(" +dbObj.receipt_no + ") as max From " + dbObj.table;        ResultSet rs = theConnectionInf.eQuery(sql);        String ret = "0";        if(rs.next())           ret = rs.getString(1);        rs.close();        return ret;    }}