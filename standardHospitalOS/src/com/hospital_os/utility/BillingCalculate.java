/* * GUtil.java * * Created on 19 ตุลาคม 2546, 17:52 น. */package com.hospital_os.utility;import java.util.*;//import com.hospital_os.usecase.connection.*;import com.hospital_os.object.*;/** * * @author  Administrator *@deprecated henbe unused */public class BillingCalculate {    public Vector thePayment;    public Vector theContractAdjust;    public Vector theOrder;    public Vector theBillingSubgGroup;    public Payment thePaymentNow;    public Vector theContractAdjustNow;    public Vector theSumGroup = new Vector();    public Vector theSumGroupDeduct = new Vector();    /** Creates a new instance of GUtil */    public BillingCalculate(Vector vpayment, Vector contract, Vector order) {        thePayment = vpayment;        theContractAdjust = contract;        theOrder = order;    }    public BillingCalculate()    {}//group by  category group Item    public Vector groupOrder(Vector order,Vector cat)    {        Vector catGroupItem = cat;        Vector orderHead = new Vector();        Vector orderv = order;        for(int i=0;i<catGroupItem.size();i++)///////check contract         {            CategoryGroupItem cgi = (CategoryGroupItem)catGroupItem.get(i);            Vector orderList = new Vector();            for(int j=0;j<orderv.size();j++)            {                OrderItem or = (OrderItem)orderv.get(j);                if(cgi.getObjectId().equals(or.item_group_code_category))////if group_match                {                    //check if in group add in category                    orderList.add(or);                }            }            orderHead.add(orderList);        }        return orderHead;    }    //calculate and save total into subgroup     // subgroup must be arrange in category subgroup    public void calSubGroup(Vector bsg,Vector orderH)    {        for(int i=0;i<orderH.size();i++)        {            Vector v = (Vector)orderH.get(i);            BillingSubgroup bs = (BillingSubgroup)bsg.get(i);            double sum = calSumPriceOrder(v);            bs.total = String.valueOf(sum);        }    }    //calculate adjustment of contract adjust data    public void calSubGroupDeduct(Vector csg,Vector contract)    {        Vector v=new Vector();        if(csg==null || contract==null) return;        for(int i=0;i<csg.size();i++)        {            BillingSubgroup bs=(BillingSubgroup)csg.get(i);            ContractAdjust c=null;            int j=0;            for(j=0;j<contract.size();j++)            {                c = (ContractAdjust)contract.get(j);                if(c.covered_id.equals(bs.category_group_item_id))                    break;            }            if(j==contract.size()){                Constant.println(bs.category_group_item_id + "  ContractAdjust.covered_id is not in CategoryGroupItem");            }           else            {               //Constant.println(c.adjustment);                double tp = Double.parseDouble(bs.total);                double adj = Double.parseDouble(c.adjustment);                double py_share = tp*adj/100;                tp = tp - py_share;               //Constant.println("Price of goup is :" + tp);                if(bs.patient_share.equals("")){                    bs.patient_share = String.valueOf(tp);                    bs.payer_share = String.valueOf(py_share);                }            }        }    }///////////////////////////////////////////////////////////////////////////       public double calSumPriceOrder(Vector order)    {        double sum=0.0;        for(int i=0;i<order.size();i++)        {            OrderItem o = (OrderItem)order.get(i);            try{                sum = sum + Double.parseDouble(o.price)*Double.parseDouble(o.qty);            }            catch(Exception e) {                Constant.println(o.getObjectId()                    + " does not have price or qty in write format");             }        }        return sum;    }    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////        public static void main(String[] argv){        BillingCalculate b=new BillingCalculate();        Vector c = b.initCatItem();        Vector o = b.initOrder();        Vector og = b.groupOrder(o,c);                Vector bs = b.initBillingSubgroup(c);        Vector ct = b.initContractAdjust();        Vector ct2 = b.initContractAdjust2();        b.calSubGroup(bs,og); //for first payment        b.calSubGroupDeduct(bs,ct); //for next payment        b.printBillingSubgroup(bs);        b.calSubGroupDeduct(bs,ct2); //for next payment        b.printBillingSubgroup(bs);    }    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////    ///////////of grouping order    public void printOrder(Vector orderH)    {        Constant.println("order size " + orderH.size());        for(int i=0;i<orderH.size();i++)        {            OrderItem o = (OrderItem)orderH.get(i);            //Constant.println(o.item_group_code_category);            Constant.print("price:" + o.price);            Constant.println("qty:" + o.qty);        }    }    ///////////of grouping order    public void printCateG(Vector orderH)    {        Constant.println("category group size " + orderH.size());        for(int i=0;i<orderH.size();i++)        {            CategoryGroupItem v = (CategoryGroupItem)orderH.get(i);            Constant.print("description:" + v.description);            Constant.println("   active:" + v.active);        }    }    public void printGroupOrder(Vector orderH)    {        Constant.println("group size " + orderH.size());        for(int i=0;i<orderH.size();i++)        {            Vector v = (Vector)orderH.get(i);            printOrder(v);        }    }    ////////////////initial order     public Vector initOrder()    {        Vector v=new Vector();        for(int i=0;i<20;i++)        {            OrderItem o = new OrderItem();            o.setObjectId(String.valueOf(i));            if(i%4==0)            {                o.item_group_code_category = "henbe";                o.price = "10";                o.qty = "10";            }            if(i%4==1)            {                o.item_group_code_category = "henbe1";                o.price = "110";                o.qty = "6";            }            if(i%4==2)            {                o.item_group_code_category = "henbe2";                o.price = "12.4";                o.qty = "7";            }            if(i%4==3)            {                o.item_group_code_category = "henbe3";                o.price = "20.1";                o.qty = "10";            }            v.add(o);        }        return v;    }    public Vector initContractAdjust2()    {        Vector c=new Vector();        ContractAdjust cc=new ContractAdjust();        cc.setObjectId("1");        cc.covered_id = "henbe";        cc.adjustment = "90";/////////mean percent deduct from total price        c.add(cc);        cc=new ContractAdjust();        cc.setObjectId("1");        cc.covered_id = "henbe3";        cc.adjustment = "90";/////////mean percent of total price        c.add(cc);        return c;    }    public Vector initContractAdjust()    {        Vector c=new Vector();        ContractAdjust cc=new ContractAdjust();        cc.setObjectId("1");        cc.covered_id = "henbe";        cc.adjustment = "20";/////////mean percent of total price        c.add(cc);        cc=new ContractAdjust();        cc.setObjectId("2");        cc.covered_id = "henbe1";        cc.adjustment = "50";        c.add(cc);        cc=new ContractAdjust();        cc.setObjectId("3");        cc.covered_id = "henbe2";        cc.adjustment = "25";        c.add(cc);  /*      cc=new ContractAdjust();        cc.setObjectId("4");        cc.covered_id = "henbe3";        cc.adjustment = "50";        c.add(cc);    */    return c;    }    public Vector initCatItem()    {        Vector v=new Vector();            CategoryGroupItem o = new CategoryGroupItem();            o.setObjectId("henbe");            o.active = "0";            v.add(o);            o = new CategoryGroupItem();            o.setObjectId("henbe1");            o.active = "0";            v.add(o);            o = new CategoryGroupItem();            o.setObjectId("henbe2");            o.active = "0";            v.add(o);            o = new CategoryGroupItem();            o.setObjectId("henbe3");            o.active = "0";            v.add(o);        return v;    }    //from category group item get all child and insert into it    public Vector initBillingSubgroup(Vector v)    {        Vector vr=new Vector();        for(int i=0;i<v.size();i++){            CategoryGroupItem cgi = (CategoryGroupItem)v.get(i);            BillingSubgroup o = new BillingSubgroup();            o.category_group_item_id = cgi.getObjectId();            o.patient_share = "";            vr.add(o);        }        return vr;    }    //from category group item get all child and insert into it    public void printBillingSubgroup(Vector v)    {        for(int i=0;i<v.size();i++)        {            BillingSubgroup cgi = (BillingSubgroup)v.get(i);            Constant.print(cgi.category_group_item_id);            Constant.print(" total:" + cgi.total);            Constant.print(" pt_paid:" + cgi.patient_share);            Constant.println("");        }    }    //keep data in to description of category}