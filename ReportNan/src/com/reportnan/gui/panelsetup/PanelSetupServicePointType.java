/*
 * PanelSetupServicePointType.java
 *
 * Created on 13 มิถุนายน 2549, 17:49 น.
 */

package com.reportnan.gui.panelsetup;
import com.reportnan.subject.ManageControlSubjectSetup;
import com.reportnan.usecase.ManageGUI;
import com.reportnan.usecase.SaveServicePoint;
import com.reportnan.utility.TableModelGUI;
import com.reportnan.object.RPNanServicePointType;
import com.reportnan.object.RPNanServicePointTypeMap;
import com.reportnan.utility.Language;
import com.reportnan.gui.panel.DialogSearchServicePoint;
import com.hospital_os.object.ServicePoint;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
/**
 *
 * @author  pu
 */
public class PanelSetupServicePointType extends javax.swing.JPanel implements ManageGUI,SaveServicePoint
{
    ManageControlSubjectSetup theMCS;
    final String panelName = "ServicePointType";
    String[] colNameGroup;
    String[] colNameItem;
    TableModelGUI theTableModelGUI;
    RPNanServicePointType theRPNanServicePointType;
    RPNanServicePointTypeMap theRPNanServicePointTypeMap;
    Vector vServicePointType;
    Vector vServicePointTypeMap;
    /**ใช้ตรวจสอบว่าข้อมูลที่จะบันทึกนั้นเป็นการแก้ไขหรือบันทึกใหม่*/
    int saveNewServicePointType = 1;
    /**ใช้ตรวจความครบถ้วนของข้อมูลก่อนการบันทึก*/
    int dataComplete = 1;
    /**ใช้ตรวจสอบว่าข้อมูล item ที่เลือกสำหรับการเพิ่มนั้นมีอยู่ในข้อมูลเดิมหรือไม่*/
    int status = 1;
    /**
     * Creates new form PanelSetupServicePointType
     */
    public PanelSetupServicePointType(ManageControlSubjectSetup mcs)
    {
        theMCS = mcs;
        initComponents();
        setLanguage();
        theMCS.theManageSubject.theServicePointSubject.registerMainReportManage(this);
        
        Language.getTextBundle(panelName);
        searchServicePointType();
        setEnableSubGUI(false);
    }
    
    public String getPanelName()
    {
        return panelName;
    }
    
    public void setEnableButtonSetupPanel(boolean enabled)
    {
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMiddle = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanelLeft = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableServicePointType = new javax.swing.JTable();
        jPanelRight = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelCode = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jLabelDescription = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableServicePointTypeMap = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButtonAdd1 = new javax.swing.JButton();
        jButtonDelete1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanelMiddle.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel3.setText("ServicePointType");
        jPanelMiddle.add(jLabel3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(jPanelMiddle, gridBagConstraints);

        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        jPanelLeft.setMinimumSize(new java.awt.Dimension(250, 51));
        jPanelLeft.setPreferredSize(new java.awt.Dimension(250, 430));
        jPanelLeft.setRequestFocusEnabled(false);
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel7.add(jLabelSearch, gridBagConstraints);

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelLeft.add(jPanel7, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(250, 23));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 402));
        jTableServicePointType.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableServicePointType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableServicePointTypeMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableServicePointType);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelLeft.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        add(jPanelLeft, gridBagConstraints);

        jPanelRight.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelCode.setText("Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(jLabelCode, gridBagConstraints);

        jTextFieldCode.setEditable(false);
        jTextFieldCode.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel3.add(jTextFieldCode, gridBagConstraints);

        jLabelDescription.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel3.add(jLabelDescription, gridBagConstraints);

        jTextFieldDescription.setEditable(false);
        jTextFieldDescription.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        jPanel3.add(jTextFieldDescription, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanelRight.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jTableServicePointTypeMap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableServicePointTypeMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableServicePointTypeMapMouseReleased(evt);
            }
        });

        jScrollPane2.setViewportView(jTableServicePointTypeMap);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel2.add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jButtonAdd1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdd1.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd1.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd1.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdd1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel6.add(jButtonAdd1, gridBagConstraints);

        jButtonDelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonDelete1.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete1.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelete1.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelete1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jButtonDelete1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelRight.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        add(jPanelRight, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jTableServicePointTypeMapMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTableServicePointTypeMapMouseReleased
    {//GEN-HEADEREND:event_jTableServicePointTypeMapMouseReleased
        selectServicePointTypeMap(jTableServicePointTypeMap.getSelectedRow());
    }//GEN-LAST:event_jTableServicePointTypeMapMouseReleased

    private void jTableServicePointTypeMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTableServicePointTypeMouseReleased
    {//GEN-HEADEREND:event_jTableServicePointTypeMouseReleased
        // เลือกช่วงอายุการรับวัคซีน
        selectServicePointType(jTableServicePointType.getSelectedRow());
    }//GEN-LAST:event_jTableServicePointTypeMouseReleased

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextFieldSearchKeyReleased
    {//GEN-HEADEREND:event_jTextFieldSearchKeyReleased
        if(evt.getKeyCode() == evt.VK_ENTER)
        {
            searchServicePointType();
        }
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jButtonDelete1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDelete1ActionPerformed
    {//GEN-HEADEREND:event_jButtonDelete1ActionPerformed
       int confirm_del = JOptionPane.showConfirmDialog(this,Language.getTextBundle("confirm_del_effect_report"),Language.getTextBundle("confirm_del"),JOptionPane.YES_NO_OPTION);
        if(confirm_del == 0)
        {
            deleteServicePointTypeMap();
        }
    }//GEN-LAST:event_jButtonDelete1ActionPerformed

    private void jButtonAdd1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAdd1ActionPerformed
    {//GEN-HEADEREND:event_jButtonAdd1ActionPerformed
       addServicePointTypeMap();
    }//GEN-LAST:event_jButtonAdd1ActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSearchActionPerformed
    {//GEN-HEADEREND:event_jButtonSearchActionPerformed
        searchServicePointType();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    private void checkSameData(RPNanServicePointTypeMap theServicePointTypeMap)
    {
        if(vServicePointTypeMap != null)
        {
            int size = vServicePointTypeMap.size();
            if(size > 0)
            {
                for(int i =0;i<size;i++)
                {
                    if(!theServicePointTypeMap.b_service_point_id.equals(((RPNanServicePointTypeMap)vServicePointTypeMap.get(i)).b_service_point_id))
                    {
                        status = 1;
                    }
                    else
                    {
                        status = 0;
                        JOptionPane.showMessageDialog(this,Language.getTextBundle("Same_Item") + theServicePointTypeMap.service_point_description ,Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                }
                if(status != 0)
                {
                    // ไม่มีข้อมูลซ้ำส่งไปบันทึก
                    theMCS.theManageControl.theServicePointTypeMapControl.saveServicePointTypeMap(theServicePointTypeMap);                           
                }
            }
        }
        else
        {
            // ไม่มีข้อมูลสำหรับตรวจสอบส่งไปบันทึก
            theMCS.theManageControl.theServicePointTypeMapControl.saveServicePointTypeMap(theServicePointTypeMap);
        }
        
    }  
    
    private void selectServicePointTypeMap(int row)
    {
        if(row > -1)
        {
            //vServicePointTypeMap = null;
            // มีการเลือกจากตาราง
            if(vServicePointType != null)
            {
                theRPNanServicePointTypeMap = (RPNanServicePointTypeMap)vServicePointTypeMap.get(row);
            }
        }
        else
        {
            setEnableSubGUI(false);
        }
    }
    
    /**
     * เลือกรประเภทจุดบริการ
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void selectServicePointType(int row)
    {
        System.out.println("private void selectServicePointType(int row)" + row);
        if(row > -1)
        {
            vServicePointTypeMap = null;
            // มีการเลือกจากตาราง
            if(vServicePointType != null)
            {
                System.out.println("--------------");
                theRPNanServicePointType = (RPNanServicePointType)vServicePointType.get(row);
                vServicePointTypeMap = theMCS.theManageControl.theServicePointTypeMapControl.selectServicePointTypeMapByServicePointTypeId(theRPNanServicePointType.getObjectId());
                // แสดงรายละเอียดข้อมูล
                setObjectToData();
                
                setEnableSubGUI(true);
            }
        }
        else
        {
            setEnableSubGUI(false);
        }
    }
    /**
     * แสดงค่าจาก Object ให้กับ GUI
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void setObjectToData()
    {
        if(theRPNanServicePointType != null)
        {
            saveNewServicePointType = 0;
            jTextFieldCode.setText(theRPNanServicePointType.service_point_type_number);
            jTextFieldDescription.setText(theRPNanServicePointType.service_point_type_description);
            
            
            if(vServicePointTypeMap != null && vServicePointTypeMap.size() > 0)
            {
                // สั่ง Set ตาราง
                setTableServicePointTypeMap(vServicePointTypeMap);
            }
            else
            {
                setTableServicePointTypeMap(null);
            }
        }
        else
        {
            clearGUI();
        }
    }
    /**
     * ลบจุดบริการออกจากฐานข้อมูล
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void deleteServicePointTypeMap()
    {
        if(theRPNanServicePointTypeMap != null)
        {
            // ส่งค่าของ Object ไปลบ
            theMCS.theManageControl.theServicePointTypeMapControl.deleteServicePointTypeMapByKeyId(theRPNanServicePointTypeMap);
            // แจ้งบอกสถานะการลบรายการ
            
            // เรียกค้นหาอีกครั้ง
            searchServicePointTypeMap(theRPNanServicePointType.getObjectId());
        }
    }
    
    /**
     * แสดง Dialog สำหรับเลือกจุดบริการ
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void addServicePointTypeMap()
    {
        if(theRPNanServicePointType != null)
        {
            DialogSearchServicePoint dialog = new DialogSearchServicePoint(new JFrame(), true,theMCS, 1);
            dialog.show();
        }
    }
    /**
     * บันทึกประเภทจุดบริการ
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void saveServicePointType()
    {
        dataComplete = 1;
        // ตรวจสอบค่าจาก GUI
        // checkGUIForSave();
        
        if(dataComplete == 1)
        {
            // Set ค่าจาก GUI ให้กับ Object เพื่อส่งไปบันทึก
            setDataToObjectForSave();
            
            theMCS.theManageControl.theServicePointTypeControl.saveServicePointType(theRPNanServicePointType);
            
            setEnableSubGUI(true);
            
            searchServicePointType();
        }
    }
    
    /**
     * เซ็ทข้อมูลให้กับ Object สำหรับส่ง Save
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void setDataToObjectForSave()
    {
        if(theRPNanServicePointType == null)
        {
            theRPNanServicePointType = new RPNanServicePointType();
        }
        
        theRPNanServicePointType.service_point_type_number = jTextFieldCode.getText().trim();
        theRPNanServicePointType.service_point_type_description = jTextFieldDescription.getText().trim();
    }
    
    /**
     * ลบข้อมูลประเภทจุดบริการ
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void deleteServicePointType()
    {
        System.out.println("private void deleteServicePointType() = null");
        if(theRPNanServicePointType != null && theRPNanServicePointType.getObjectId() != null)
        {
            // มีค่าช่วงอายุที่เลือก
            // ลบประเภทจุดบริการ
            theMCS.theManageControl.theServicePointTypeControl.deleteServicePointTypeByKeyId(theRPNanServicePointType);
            // ลบประเภทจุดบริการที่ map แล้ว
            vServicePointType.remove(theRPNanServicePointType);
             setTableServicePointType(vServicePointType);
            theRPNanServicePointType = null;
            //searchServicePointType();
        }
        else
        {
            setEnableSubGUI(true);
        }
    }
    
    /**
     * สำหรับค้นหาช่วงอายุการรับวัคซีน และ ส่งข้อมูลไปแสดงในตาราง
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void searchServicePointType()
    {
        // ค้นหารายการ โดยส่ง keyword ไปค้น
        vServicePointType = new Vector();
        String keyword = jTextFieldSearch.getText().trim();
        
        vServicePointType = theMCS.theManageControl.theServicePointTypeControl.selectServicePointTypeByKeyword(keyword);
        
        // ส่งข้อมูลที่ได้จากการค้นหานั้นไปแสดงยังตาราง
        setTableServicePointType(vServicePointType);
        
        //clearGUI();
        setEnableSubGUI(false);
    }
    
    /**
     * สำหรับค้นหาจุดบริการที่ถูก Map
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void searchServicePointTypeMap(String servicePointTypeMapId)
    {
        // ค้นหารายการ โดยส่ง keyword ไปค้น
        vServicePointTypeMap = new Vector();
        
        vServicePointTypeMap = theMCS.theManageControl.theServicePointTypeMapControl.selectServicePointTypeMapByServicePointTypeId(servicePointTypeMapId);
        
        // ส่งข้อมูลที่ได้จากการค้นหานั้นไปแสดงยังตาราง
        setTableServicePointTypeMap(vServicePointTypeMap);
    }
    /**
     * จัดการกับ GUI ที่ต้องเกี่ยวข้องกับการเลือกข้อมูล
     * @Author Pu
     * @Date 14/06/2006
     **/
    private void setEnableSubGUI(boolean b)
    {
        jButtonAdd1.setEnabled(b);
        jButtonDelete1.setEnabled(b);
    }
    /**
     * เคลียร์ข้อมูลบน Gui
     * @Author pu
     * @Date 14/06/2006
     **/
    private void clearGUI()
    {
        System.out.println("private void clearGUI() = null");
        jTextFieldCode.setText("");
        jTextFieldDescription.setText("");
        
        setTableServicePointTypeMap(null);
        
        theRPNanServicePointType = null;
        vServicePointType = null;
    }
    
    /**
     * แสดงข้อมูลที่ได้จากการค้นหาในตาราง
     * @author Pu
     * @Date 14/06/2006
     **/
    private void setTableServicePointType(Vector vData)
    {
        
        System.out.println("private void setTableServicePointType(Vector vData) = null");
        theTableModelGUI = new TableModelGUI(colNameGroup, 0);
        if(vData != null)
        {
            int size = vData.size();
            theTableModelGUI = new TableModelGUI(colNameGroup, size);
            theRPNanServicePointType = null;
            for(int i = 0 ; i < size ;i++)
            {
                theRPNanServicePointType = (RPNanServicePointType)vData.get(i);
                theTableModelGUI.setValueAt(theRPNanServicePointType.service_point_type_number,i, 0);
                theTableModelGUI.setValueAt(theRPNanServicePointType.service_point_type_description,i, 1);
                theRPNanServicePointType = null;
            }
            
        }
        
        jTableServicePointType.setModel(theTableModelGUI);
        
        jTableServicePointType.getColumnModel().getColumn(0).setPreferredWidth(25);
        jTableServicePointType.getColumnModel().getColumn(1).setPreferredWidth(100);
    }
    
    /**
     * แสดงข้อมูลที่ได้จากการค้นหาในตาราง
     * @author Pu
     * @Date 14/06/2006
     **/
    private void setTableServicePointTypeMap(Vector vData)
    {
        
        theTableModelGUI = new TableModelGUI(colNameItem, 0);
        if(vData != null)
        {
            int size = vData.size();
            theTableModelGUI = new TableModelGUI(colNameItem, size);
            theRPNanServicePointTypeMap = null;
            for(int i = 0 ; i < size ;i++)
            {
                theRPNanServicePointTypeMap = (RPNanServicePointTypeMap)vData.get(i);
                theTableModelGUI.setValueAt(theRPNanServicePointTypeMap.service_point_description,i, 0);
                theRPNanServicePointTypeMap = null;
            }
        }
        jTableServicePointTypeMap.setModel(theTableModelGUI);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd1;
    private javax.swing.JButton jButtonDelete1;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelMiddle;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableServicePointType;
    private javax.swing.JTable jTableServicePointTypeMap;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
    private void setLanguage()
    {
        colNameGroup = new String[] {Language.getTextBundle("Code"),Language.getTextBundle("Description")};
        colNameItem = new String[] {Language.getTextBundle("ServicePoint")};
        
        jLabel3.setText(Language.getTextBundle(jLabel3.getText()));
        
        jLabelSearch.setText(Language.getTextBundle(jLabelSearch.getText()));
        jButtonSearch.setText(Language.getTextBundle(jButtonSearch.getText()));
        
        jLabelCode.setText(Language.getTextBundle(jLabelCode.getText()));
        jLabelDescription.setText(Language.getTextBundle(jLabelDescription.getText()));
        jButtonAdd1.setText(Language.getTextBundle(jButtonAdd1.getText()));
        jButtonDelete1.setText(Language.getTextBundle(jButtonDelete1.getText()));
        
        //jScrollPaneShowEpiItem.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle("EpiItem")));
    }

    public void notifySaveServicePoint(Vector vServicePoint)
    {
        if(vServicePoint != null && theRPNanServicePointType!=null)
        {
            System.out.println(vServicePoint.size());
            ServicePoint theServicePoint = new ServicePoint();
            int size = vServicePoint.size();
            for(int i =0;i<size;i++)
            {
                theServicePoint = (ServicePoint)vServicePoint.get(i);
                
                theRPNanServicePointTypeMap = new RPNanServicePointTypeMap();
                
                theRPNanServicePointTypeMap.r_service_point_type_id = theRPNanServicePointType.getObjectId();
                theRPNanServicePointTypeMap.b_service_point_id = theServicePoint.getObjectId();
                theRPNanServicePointTypeMap.service_point_description = theServicePoint.name;
                theRPNanServicePointTypeMap.service_point_type_description = theRPNanServicePointType.service_point_type_description;
                
                checkSameData(theRPNanServicePointTypeMap);
                theRPNanServicePointTypeMap = null;
                searchServicePointTypeMap(theRPNanServicePointType.getObjectId());
            }
            theServicePoint = null;
            searchServicePointTypeMap(theRPNanServicePointType.getObjectId());
        }
        
        //เรียก Function การค้นหาเพื่อเปลี่ยนข้อมูลใหม่
    }
}
