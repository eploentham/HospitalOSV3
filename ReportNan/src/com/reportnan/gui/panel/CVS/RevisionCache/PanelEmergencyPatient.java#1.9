/*
 * PanelEmergencyPatient.java
 *
 * Created on 12 ÁÔ¶Ø¹ÒÂ¹ 2549, 17:49 ¹.
 */

package com.reportnan.gui.panel;
import com.hospital_os.usecase.connection.ConnectionInf;
import com.hospital_os.utility.ConnectionDBMgr;
import com.reportnan.subject.ManageControlSubject;
import com.reportnan.usecase.CardNameControl;
import com.reportnan.usecase.GUIResp;
import com.reportnan.usecase.AllPanelResp;
import com.reportnan.utility.Report;
import com.reportnan.utility.Constant;
import com.reportnan.utility.ComboboxModel;
import com.reportnan.utility.ComboFix;
import com.reportnan.utility.Language;
import com.reportnan.utility.TableModelGUI;
import com.reportnan.gui.panel.DialogShowStatus;
import java.util.Vector;
import java.awt.CardLayout;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JOptionPane;
/**
 *
 * @author  pu
 */
public class PanelEmergencyPatient extends javax.swing.JPanel implements 
        GUIResp,AllPanelResp,Runnable,CardNameControl
{
    JFrame theJFrame;
    DialogShowStatus theDialogShowStatus;
    ComboboxModel theComboboxModel;
    private ManageControlSubject theMCS;
    private String cardName;
    private String startDate;
    private String endDate;
    TableModelGUI theTableModelGUI;
    DefaultTableCellRenderer rendererCenter;
    DefaultTableCellRenderer rendererRight;
    Thread theThread;
    private String[] headColumn;
    Vector vcData;
    Vector vcDataQuery;
    Vector vAllYear;
    String year1;
    private String morning_time_start;
    private String morning_time_end;
    private String afternoon_time_start;
    private String afternoon_time_end;
    private String night_time_start;
    private String night_time_end;
    private String morning_sat_start;
    private String morning_sat_end;
    private String morning_sun_start;
    private String morning_sun_end;
    /** Creates new form PanelEmergencyPatient */
    public PanelEmergencyPatient(ManageControlSubject mcs)
    {
        theMCS = mcs;
        theMCS.theManageSubject.theGUISubject.registerGUIManage(this);
        theMCS.theManageSubject.theAllPanelSubject.registerAllPanelManage(this);
        initComponents();
        cardName = ((Report)Constant.Report.get("5")).ENG_NAME;
        theDialogShowStatus = new DialogShowStatus(new javax.swing.JFrame(),false,theMCS);
        theComboboxModel = new ComboboxModel();
        setLanguage();
        initComboBox();        
    }

    private void initComboBox()
    {
        vAllYear = new Vector();
        vAllYear = this.theMCS.theManageControl.theComboBoxControl.listYear();
        theComboboxModel.initComboBox(jComboBoxAllYear, vAllYear);        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelAllYear = new javax.swing.JLabel();
        jComboBoxAllYear = new javax.swing.JComboBox();
        jPanelMonFri = new javax.swing.JPanel();
        jLabelMorning = new javax.swing.JLabel();
        jLabelAfternoon = new javax.swing.JLabel();
        jLabelNight = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        timeTextFieldMorningEnd = new com.hospital_os.utility.TimeTextField();
        timeTextFieldMorningStart = new com.hospital_os.utility.TimeTextField();
        timeTextFieldAfternoonStart = new com.hospital_os.utility.TimeTextField();
        timeTextFieldNightStart = new com.hospital_os.utility.TimeTextField();
        timeTextFieldAfternoonEnd = new com.hospital_os.utility.TimeTextField();
        timeTextFieldNightEnd = new com.hospital_os.utility.TimeTextField();
        jPanelSat = new javax.swing.JPanel();
        jLabelMorningSat = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        timeTextFieldMorningSatEnd = new com.hospital_os.utility.TimeTextField();
        timeTextFieldMorningSatStart = new com.hospital_os.utility.TimeTextField();
        jPanelSun = new javax.swing.JPanel();
        jLabelMorningSun = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        timeTextFieldMorningSunStart = new com.hospital_os.utility.TimeTextField();
        timeTextFieldMorningSunEnd = new com.hospital_os.utility.TimeTextField();
        jPanel2 = new javax.swing.JPanel();
        fixedColumnScrollPane1 = new com.hospital_os.utility.FixedColumnScrollPane();
        jTableEmergency = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelAllYear.setText("AllYear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel3.add(jLabelAllYear, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel3.add(jComboBoxAllYear, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanelMonFri.setBorder(javax.swing.BorderFactory.createTitledBorder("Mon-Fri"));
        jPanelMonFri.setLayout(new java.awt.GridBagLayout());

        jLabelMorning.setText("morning");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelMonFri.add(jLabelMorning, gridBagConstraints);

        jLabelAfternoon.setText("afternoon");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelMonFri.add(jLabelAfternoon, gridBagConstraints);

        jLabelNight.setText("night");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 0);
        jPanelMonFri.add(jLabelNight, gridBagConstraints);

        jLabel5.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 0);
        jPanelMonFri.add(jLabel5, gridBagConstraints);

        jLabel6.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelMonFri.add(jLabel6, gridBagConstraints);

        jLabel7.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 0, 0);
        jPanelMonFri.add(jLabel7, gridBagConstraints);

        timeTextFieldMorningEnd.setText("16.30");
        timeTextFieldMorningEnd.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldMorningEnd.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanelMonFri.add(timeTextFieldMorningEnd, gridBagConstraints);

        timeTextFieldMorningStart.setText("08:31");
        timeTextFieldMorningStart.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelMonFri.add(timeTextFieldMorningStart, gridBagConstraints);

        timeTextFieldAfternoonStart.setText("16.31");
        timeTextFieldAfternoonStart.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldAfternoonStart.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelMonFri.add(timeTextFieldAfternoonStart, gridBagConstraints);

        timeTextFieldNightStart.setText("00:00");
        timeTextFieldNightStart.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldNightStart.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 0);
        jPanelMonFri.add(timeTextFieldNightStart, gridBagConstraints);

        timeTextFieldAfternoonEnd.setText("23:59");
        timeTextFieldAfternoonEnd.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldAfternoonEnd.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        jPanelMonFri.add(timeTextFieldAfternoonEnd, gridBagConstraints);

        timeTextFieldNightEnd.setText("08.30");
        timeTextFieldNightEnd.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldNightEnd.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelMonFri.add(timeTextFieldNightEnd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jPanelMonFri, gridBagConstraints);

        jPanelSat.setBorder(javax.swing.BorderFactory.createTitledBorder("Sat"));
        jPanelSat.setLayout(new java.awt.GridBagLayout());

        jLabelMorningSat.setText("morning");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelSat.add(jLabelMorningSat, gridBagConstraints);

        jLabel9.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelSat.add(jLabel9, gridBagConstraints);

        timeTextFieldMorningSatEnd.setText("16.30");
        timeTextFieldMorningSatEnd.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldMorningSatEnd.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        jPanelSat.add(timeTextFieldMorningSatEnd, gridBagConstraints);

        timeTextFieldMorningSatStart.setText("08.31");
        timeTextFieldMorningSatStart.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldMorningSatStart.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelSat.add(timeTextFieldMorningSatStart, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jPanelSat, gridBagConstraints);

        jPanelSun.setBorder(javax.swing.BorderFactory.createTitledBorder("Sun"));
        jPanelSun.setLayout(new java.awt.GridBagLayout());

        jLabelMorningSun.setText("morning");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelSun.add(jLabelMorningSun, gridBagConstraints);

        jLabel11.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelSun.add(jLabel11, gridBagConstraints);

        timeTextFieldMorningSunStart.setText("08.31");
        timeTextFieldMorningSunStart.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldMorningSunStart.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelSun.add(timeTextFieldMorningSunStart, gridBagConstraints);

        timeTextFieldMorningSunEnd.setText("16.30");
        timeTextFieldMorningSunEnd.setMinimumSize(new java.awt.Dimension(43, 21));
        timeTextFieldMorningSunEnd.setPreferredSize(new java.awt.Dimension(43, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        jPanelSun.add(timeTextFieldMorningSunEnd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jPanelSun, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTableEmergency.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableEmergency.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        fixedColumnScrollPane1.setViewportView(jTableEmergency);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(fixedColumnScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(jPanel2, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(50, 60));
        jPanel4.setPreferredSize(new java.awt.Dimension(50, 60));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Mark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(jLabel1, gridBagConstraints);

        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(3);
        jTextArea1.setText("     àÇÃºèÒÂ ¤Ó¹Ç³àÇÅÒÊÔé¹ÊØ´·Õè 23.59 ¹.à¹×èÍ§¨Ò¡àÇÅÒ·Õèá·é¨ÃÔ§¨Ðà»ç¹ 23:59:59 ¹. «Öè§à»ç¹àÇÅÒ·ÕèÂÑ§äÁèàÅÂà·ÕèÂ§¤×¹ \n     àÇÃ´Ö¡ ¨Ö§ÁÕàÇÅÒàÃÔèÁµé¹·Õè 00.00 ¹. à¹×èÍ§¨Ò¡àÇÅÒ¹Õé à»ç¹àÇÅÒËÅÑ§à·ÕèÂ§¤×¹µÒÁàÇÅÒ¨ÃÔ§ (àÇÅÒËÅÑ§à·ÕèÂ§¤×¹¨ÐàÃÔèÁ·Õè 00:00:01 à»ç¹µé¹ä»\n     ¶éÒãËéàÇÃºèÒÂÊÔé¹ÊØ´·Õè 00.00¹. áÅÐàÇÃ´Ö¡àÃÔèÁ·ÕèàÇÅÒ 00.01 ¹. àÇÅÒã¹¡ÒÃ¤Ó¹Ç³ ¨ÐËÒÂä» 1¹Ò·Õ");
        jTextArea1.setMinimumSize(new java.awt.Dimension(575, 110));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jTextArea1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jPanel4, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
   /**
     *  ãªéã¹¡ÒÃÃÑº¢éÍÁÙÅ¨Ò¡ ¡ÒÃ¤é¹ËÒ áÅÐÊè§¤èÒà¢éÒÁÒ panel ¹Õé
     *  à¾×èÍãËé·Ó¡ÒÃ Query áÅÐ¤é¹ËÒÃÒÂ¡ÒÃµÒÁ¢éÍ¡ÓË¹´¢Í§ panel
     *  @param startDate à»ç¹ String à»ç¹ÇÑ¹·ÕèàÃÔèÁµé¹ ÍÂÙèã¹ÃÙ»áºº yyyy-mm-dd
     *  @param endDate à»ç¹ String à»ç¹ÇÑ¹·ÕèÊÔé¹ÊØ´ ÍÂÙèã¹ÃÙ»áºº yyyy-mm-dd
     **/
    public void setQueryReport(String startDate, String endDate)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        startQuery();
    }
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    public Vector getEmergencyPatient()
    {
        return this.vcData;
    }
    private void showDataInTable(String[] columnname,Vector vc)
    {
        String[] col = columnname;
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            //Ç¹ÅÙ» µèÍ 1 á¶Ç
            for(int i=0 ;i<size; i++)
            {    //Ç¹ÅÙ»µ¢Í§ column
                String[] rowdata = (String[])vc.get(i);
                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    theTableModelGUI.setValueAt(Language.getTextBundle(rowdata[j]),i,j);
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
            }
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);
        }
        this.jTableEmergency.setModel(theTableModelGUI);
        if(col!= null && col.length!= 0)
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableEmergency, 1, 150);
            setTableListReportPattern(col);
        }
        else
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableEmergency,0, 150);
            setTableListReportPattern(new String[0]);
        }
        sendDataToMainReport(size);
    }
    /**ãªéã¹¡ÒÃáÊ´§¤ÇÒÁ¡ÇéÒ§¢Í§¤ÍÅÑÁ¹ì
     *@param col à»ç¹ Array ¢Í§ String ·Õèà¡çºËÑÇ column ÊÓËÃÑº¹ÓÁÒ¹Ñº¨Ó¹Ç¹ Column ·ÕèµéÍ§ÊÃéÒ§ã¹µÒÃÒ§
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        if(rendererRight == null)
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        
        String[] col_number = col;
        int size = col_number.length;
        for(int i=0;i<size-1;i++)
        {
            if(i > 0)
            {
                jTableEmergency.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
            }
            jTableEmergency.getColumnModel().getColumn(i).setPreferredWidth(80);
          /*  else if(i == 6)
            {
                jTableResident.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableResident.getColumnModel().getColumn(i).setPreferredWidth(10);
            }*/
        }
    }
    /**
     *  ãªéã¹¡ÒÃÊè§Ê¶Ò¹ÐãËéáÊ´§ »ØèÁºÑ¹·Ö¡ËÃ×ÍäÁè â´Â¨ÐµÃÇ¨ÊÍº¨Ò¡ size ¢Í§µÒÃÒ§
     */
    private void sendDataToMainReport(int size)
    {
        theMCS.theManageSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theMCS.theManageSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    /**áÊ´§¢éÍ¤ÇÒÁ ÇÑ¹·ÕèàÃÔèÁ áÅÐÇÑ¹·ÕèÊÔé¹ÊØ´ µéÍ§ ÁÕ»Õ à´ÕÂÇ¡Ñ¹*/
    private void showMessageStartYearOver()
    {
        JOptionPane.showMessageDialog(this, Language.getTextBundle("StartYearNotSameEndYear"),Language.getTextBundle("Warning"),JOptionPane.OK_OPTION);
    }
    
    public String getCardName()
    {
        return this.cardName;
    }
    
    public void notifySetInitAllGUI()
    {
     clearDataGUI();
    }
    /**ãªéã¹¡ÒÃ Clear ¢éÍÁÙÅ·ÕèÍÂÙèº¹µÒÃÒ§*/
    private void clearDataGUI()
    {
        vcData = null;
        showDataInTable(null,null);
    }
    public void notifyStopProcess()
    {
        try
        {
            if(theThread != null)
            {
                theThread.stop();
            }
            theThread = null;
            System.out.println("In stop in PanelPatientInClinic");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void run()
    {
        getDataFromGUI();        
    }
    
    private void getDataFromGUI()
    {
        year1 = this.theComboboxModel.getStringConboBox(this.jComboBoxAllYear);
        
        if(year1 != null && !year1.equalsIgnoreCase(""))
        {
            morning_time_start = this.timeTextFieldMorningStart.getTextTime();
            morning_time_end = this.timeTextFieldMorningEnd.getTextTime();
            afternoon_time_start = this.timeTextFieldAfternoonStart.getTextTime();
            afternoon_time_end = this.timeTextFieldAfternoonEnd.getTextTime();
            night_time_start = this.timeTextFieldNightStart.getTextTime();
            night_time_end = this.timeTextFieldNightEnd.getTextTime();
            morning_sat_start = this.timeTextFieldMorningSatStart.getTextTime();
            morning_sat_end = this.timeTextFieldMorningSatEnd.getTextTime();
            morning_sun_start = this.timeTextFieldMorningSunStart.getTextTime();
            morning_sun_end = this.timeTextFieldMorningSunEnd.getTextTime();

            if(checkTimeTextField())
            {
                queryPatientOPDRemain();
            }
            else
            {
                this.vcData = null;
                showDataInTable(null,null);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("äÁè¾º¢éÍÁÙÅ ÊÓËÃÑºÍÍ¡ÃÒÂ§Ò¹ ¡ÃØ³ÒµÃÇ¨ÊÍº°Ò¹¢éÍÁÙÅ·ÕèãªéÍÍ¡ÃÒÂ§Ò¹"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);            
            this.vcData = null;
            showDataInTable(null,null);
        }
    }
    private void queryPatientOPDRemain()
    {
        if(this.theMCS.theManageControl.theReportNanControl.setDateForQuery(this.startDate, this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            
            this.vcData = this.theMCS.theManageControl.theReportNanControl.queryEmergencyPatient(year1, morning_time_start, morning_time_end, afternoon_time_start, afternoon_time_end, night_time_start, night_time_end, morning_sat_start, morning_sat_end, morning_sun_start, morning_sun_end);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    private boolean checkTimeTextField()
    {
        boolean status = true;
        if(this.morning_time_start.equals("") || this.morning_time_start.equals(null))
        {
            System.out.println(this.morning_time_start);
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldMorningStart.requestFocus();
            status = false;            
        }
        else if(this.morning_time_end.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldMorningEnd.requestFocus();
            status = false;
        }
        else if(afternoon_time_start.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldAfternoonStart.requestFocus();
            status = false;
        }
        else if(afternoon_time_end.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldAfternoonEnd.requestFocus();
            status = false;
        }
        else if(night_time_start.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldNightStart.requestFocus();
            status = false;
        }
        else if(night_time_end.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldNightEnd.requestFocus();
            status = false;
        }
        else if(morning_sat_start.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldMorningSatStart.requestFocus();
            status = false;
        }
        else if(morning_sat_end.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldMorningSatEnd.requestFocus();
            status = false;
        }
        else if(morning_sun_start.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldMorningSunStart.requestFocus();
            status = false;
        }
        else if(morning_sun_end.equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyTime"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            timeTextFieldMorningSunEnd.requestFocus();
            status = false;
        }
        
        else
        {
            if(Float.parseFloat(this.morning_time_start.substring(0, 2)+"."+this.morning_time_start.substring(3))  > Float.parseFloat(this.morning_time_end.substring(0, 2)+"."+this.morning_time_end.substring(3)))
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("MorningStartMoreThanMorningEnd_ER"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
                timeTextFieldMorningEnd.requestFocus();
                status = false;
            }
            else if(Float.parseFloat(this.morning_time_end.substring(0, 2)+"."+this.morning_time_end.substring(3)) > Float.parseFloat(this.afternoon_time_start.substring(0, 2)+"."+this.afternoon_time_start.substring(3)))
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("AfternoonStartLassThanMorningEnd_ER"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
                timeTextFieldAfternoonStart.requestFocus();
                status = false;
            }
            else if(Float.parseFloat(this.afternoon_time_start.substring(0, 2)+"."+this.afternoon_time_start.substring(3)) > Float.parseFloat(this.afternoon_time_end.substring(0, 2)+"."+this.afternoon_time_end.substring(3)))
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("AfternoonStartMoreThanAfternoonEnd_ER"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
                timeTextFieldAfternoonEnd.requestFocus();
                status = false;
            }
            else if(Float.parseFloat(this.night_time_start.substring(0, 2)+"."+this.night_time_start.substring(3)) > Float.parseFloat(this.afternoon_time_end.substring(0, 2)+"."+this.afternoon_time_end.substring(3)))
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("AfternoonEndLassThanNightStart_ER"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
                timeTextFieldAfternoonStart.requestFocus();
                status = false;
            }
            else if(Float.parseFloat(this.night_time_start.substring(0, 2)+"."+this.night_time_start.substring(3)) > Float.parseFloat(this.night_time_end.substring(0, 2)+"."+this.night_time_end.substring(3)))
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("NightStartMoreThanNightEnd_ER"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
                timeTextFieldAfternoonEnd.requestFocus();
                status = false;
            }
            else
                status = true;
        }
        return status;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.FixedColumnScrollPane fixedColumnScrollPane1;
    private javax.swing.JComboBox jComboBoxAllYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAfternoon;
    private javax.swing.JLabel jLabelAllYear;
    private javax.swing.JLabel jLabelMorning;
    private javax.swing.JLabel jLabelMorningSat;
    private javax.swing.JLabel jLabelMorningSun;
    private javax.swing.JLabel jLabelNight;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelMonFri;
    private javax.swing.JPanel jPanelSat;
    private javax.swing.JPanel jPanelSun;
    private javax.swing.JTable jTableEmergency;
    private javax.swing.JTextArea jTextArea1;
    private com.hospital_os.utility.TimeTextField timeTextFieldAfternoonEnd;
    private com.hospital_os.utility.TimeTextField timeTextFieldAfternoonStart;
    private com.hospital_os.utility.TimeTextField timeTextFieldMorningEnd;
    private com.hospital_os.utility.TimeTextField timeTextFieldMorningSatEnd;
    private com.hospital_os.utility.TimeTextField timeTextFieldMorningSatStart;
    private com.hospital_os.utility.TimeTextField timeTextFieldMorningStart;
    private com.hospital_os.utility.TimeTextField timeTextFieldMorningSunEnd;
    private com.hospital_os.utility.TimeTextField timeTextFieldMorningSunStart;
    private com.hospital_os.utility.TimeTextField timeTextFieldNightEnd;
    private com.hospital_os.utility.TimeTextField timeTextFieldNightStart;
    // End of variables declaration//GEN-END:variables
    private void setLanguage()
    {
        jLabelAllYear.setText(Language.getTextBundle(jLabelAllYear.getText()));
        jLabelMorning.setText(Language.getTextBundle(jLabelMorning.getText()));
        jLabelAfternoon.setText(Language.getTextBundle(jLabelAfternoon.getText()));
        jLabelNight.setText(Language.getTextBundle(jLabelNight.getText()));        
        jLabelMorningSat.setText(Language.getTextBundle(jLabelMorningSat.getText()));        
        jLabelMorningSun.setText(Language.getTextBundle(jLabelMorningSun.getText()));        
        jLabel1.setText(Language.getTextBundle(jLabel1.getText()));    
        Language.JPanelLabler(jPanelMonFri);
        Language.JPanelLabler(jPanelSat);
        Language.JPanelLabler(jPanelSun);
    }
}
