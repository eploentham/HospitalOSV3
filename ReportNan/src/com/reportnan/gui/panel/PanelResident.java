/*
 * PanelResident.java
 *
 * Created on 5 มิถุนายน 2549, 17:48 น.
 */

package com.reportnan.gui.panel;
import com.hospital_os.usecase.connection.ConnectionInf;
import com.hospital_os.utility.ConnectionDBMgr;
import com.reportnan.subject.ManageControlSubject;
import com.reportnan.usecase.CardNameControl;
import com.reportnan.usecase.GUIResp;
import com.reportnan.usecase.AllPanelResp;
import com.reportnan.utility.Report;
import com.reportnan.utility.Constant;
import com.reportnan.utility.ComboboxModel;
import com.reportnan.utility.ComboFix;
import com.reportnan.utility.Language;
import com.reportnan.utility.TableModelGUI;
import com.reportnan.gui.panel.DialogShowStatus;
import java.util.Vector;
import java.awt.CardLayout;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableCellRenderer;
import com.reportnan.utility.CellRendererToolTipText;
import javax.swing.JOptionPane;
/**
 *
 * @author  pu
 */
public class PanelResident extends javax.swing.JPanel implements 
        GUIResp,AllPanelResp,Runnable,CardNameControl
{
    JFrame theJFrame;
    DialogShowStatus theDialogShowStatus;
    ComboboxModel theComboboxModel;
    private ManageControlSubject theMCS;
    private String cardName;
    private String startDate;
    private String endDate;
    TableModelGUI theTableModelGUI;
    DefaultTableCellRenderer rendererCenter;
    DefaultTableCellRenderer rendererRight;
    CellRendererToolTipText rendererToolTipText;
    Thread theThread;
    private String[] headColumn;
    Vector vTambon;
    String site;
    String tambon;
    Vector vcData;
    Vector vcDataQuery;
    
    /** Creates new form PanelResident */
    public PanelResident(ManageControlSubject mcs)
    {
        theMCS = mcs;
        theMCS.theManageSubject.theGUISubject.registerGUIManage(this);
        theMCS.theManageSubject.theAllPanelSubject.registerAllPanelManage(this);
        initComponents();
        cardName = ((Report)Constant.Report.get("1")).ENG_NAME;
        theDialogShowStatus = new DialogShowStatus(new javax.swing.JFrame(),false,theMCS);
        theComboboxModel = new ComboboxModel();
        setLanguage();
        initComboBoxTambon();
    }
    /**
     *เซ็ตค่าให้กับ ComboBox ตำบล
     *@Author pu
     *@Date 06/06/2006
     */
    private void initComboBoxTambon()
    {
        vTambon = new Vector();
        vTambon = this.theMCS.theManageControl.theComboBoxControl.listTambon();
        theComboboxModel.initComboBox(this.jComboBoxTambon, vTambon);
        theComboboxModel.setCodeComboBox(this.jComboBoxTambon, "0");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabelTambon = new javax.swing.JLabel();
        jComboBoxTambon = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        fixedColumnScrollPane1 = new com.hospital_os.utility.FixedColumnScrollPane();
        jTableResident = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelTambon.setText("Tambon");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabelTambon, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jComboBoxTambon, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTableResident.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        jTableResident.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        fixedColumnScrollPane1.setViewportView(jTableResident);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(fixedColumnScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        add(jPanel2, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    /**
     *  ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     **/
    public void setQueryReport(String startDate, String endDate)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        startQuery();
    }
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    
    public Vector getResident()
    {
        return this.vcData;
    } 
    
    public String getCardName()
    {
        return this.cardName;
    }
    
    public void notifySetInitAllGUI()
    {
        clearDataGUI();
    }
    /**ใช้ในการ Clear ข้อมูลที่อยู่บนตาราง*/
    private void clearDataGUI()
    {
        vcData = null;
        showDataInTable(null,null);
    }
    public void notifyStopProcess()
    {
        try
        {
            if(theThread != null)
            {
                theThread.stop();
            }
            theThread = null;
            System.out.println("In stop in PanelResident");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void run()
    {
        this.tambon = this.theComboboxModel.getCodeComboBox(jComboBoxTambon);
        queryResident();
    }
    /**
     *ค้นหาข้อมูลประชากร หลังคาเรือน ครอบครัว แยกตามหมู่บ้าน
     *@Author pu
     *@Date 06/06/2006
     */
    private void queryResident()
    {
        if(this.theMCS.theManageControl.theReportNanControl.setDateForQuery(this.startDate, this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            
            this.vcData = this.theMCS.theManageControl.theReportNanControl.queryResident(this.tambon);
            
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }
            
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    private void showDataInTable(String[] columnname,Vector vc)
    {
        String[] col = columnname;
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);
                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    theTableModelGUI.setValueAt(Language.getTextBundle(rowdata[j]),i,j);
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
            }            
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);
        }
        
        this.jTableResident.setModel(theTableModelGUI);
        if(col!= null && col.length!= 0)
        {
            /*if(rendererToolTipText == null)
            {
                rendererToolTipText = new CellRendererToolTipText(true);
            }
            jTableResident.getColumnModel().getColumn(0).setCellRenderer(rendererToolTipText);*/
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableResident, 1, 300);
            setTableListReportPattern(col);
        }
        else
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableResident, 0, 300);
            setTableListReportPattern(new String[0]);
        }
        sendDataToMainReport(size);
    }
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        if(rendererRight == null)
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        
        String[] col_number = col;
        int size = col_number.length;
        for(int i=0;i<size-1;i++)
        {
            jTableResident.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
            jTableResident.getColumnModel().getColumn(i).setPreferredWidth(110);
        }        
        
    }
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theMCS.theManageSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theMCS.theManageSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    /**แสดงข้อความ วันที่เริ่ม และวันที่สิ้นสุด ต้อง มีปี เดียวกัน*/
    private void showMessageStartYearOver()
    {
        JOptionPane.showMessageDialog(this, Language.getTextBundle("StartYearNotSameEndYear"),Language.getTextBundle("Warning"),JOptionPane.OK_OPTION);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.FixedColumnScrollPane fixedColumnScrollPane1;
    private javax.swing.JComboBox jComboBoxTambon;
    private javax.swing.JLabel jLabelTambon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable jTableResident;
    // End of variables declaration//GEN-END:variables
    private void setLanguage()
    {
        jLabelTambon.setText(Language.getTextBundle(jLabelTambon.getText()));
    }
}
