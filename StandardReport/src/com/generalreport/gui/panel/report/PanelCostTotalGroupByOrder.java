/*
 * PanelCostTotalGroupByOrder.java
 *
 * Created on 13 ตุลาคม 2548, 14:18 น.
 */

package com.generalreport.gui.panel.report;
import com.generalreport.gui_component.TableModelGUI;
import com.generalreport.utility.Constant;
import com.generalreport.utility.Language;
import com.generalreport.utility.Report;
import com.hospital_os.utility.Gutil;
import com.generalreport.utility.ComboboxModel;
import com.generalreport.control.HosControl;
import com.generalreport.utility.GUIControl;
import com.generalreport.subject.ManageGUI;
import com.generalreport.subject.ManageMainReport;
import com.generalreport.subject.ManageAllPanel;
import com.generalreport.control.HosManage;
import com.generalreport.gui_component.DialogShowStatus;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author  americus
 */
public class PanelCostTotalGroupByOrder extends javax.swing.JPanel implements
GUIControl,ManageGUI,Runnable,ManageAllPanel
{
    public HosControl theHosControl;
    private ComboboxModel theComboboxModel;
    /**ใช้ในการจัดการกับ cell ในตาราง*/
    private DefaultTableCellRenderer rendererRight;
    HosManage theHosManage;
    Thread theThread;
    private String startDate;
    private String endDate;
    final private String cardName;// = "TestReport";
    Vector vcData;
    String[] headColumn;
    Vector vcDataQuery;
    TableModelGUI theTableModelGUI;
    DialogShowStatus theDialogShowStatus;
    String status[] = {"0","1","2","3","4","5","6"};
    Vector vStatus = new Vector(7);
    int language = 1;
    private boolean isDbBackup;
    /** Creates new form PanelCostTotalGroupByOrder */
    public PanelCostTotalGroupByOrder(HosManage hosmanage)
    {
        initComponents();
        theHosManage = hosmanage;
        theHosManage.theHosControl.theHosSubject.theGUISubject.registerGUIManage(this);
        theHosManage.theHosControl.theHosSubject.theAllPanelSubject.registerAllPanelManage(this);
        cardName = ((Report)Constant.Report.get("8")).ENG_NAME;
        setLanguage();        
        theDialogShowStatus = new DialogShowStatus(theHosManage.theUS.getJFrame(),false,theHosManage);
        initData();
    }
    
    public void initData()
    {
        if(this.jCheckBox3.isSelected())
        {
            this.vStatus.add(status[2]);
        }
    }
    
    public void checkBoxStatus()
    {
        if(!this.jCheckBox3.isSelected())
        {
            this.jCheckBox3.setSelected(true);
        }
        initData();
    }
    
    public String getCardName()
    {
        return this.cardName;
    }
    
    public void notifySetInitAllGUI()
    {
        vcData = null;
        showDataInTable(null,null);
    }
    
    public void notifyStopProcess()
    {
        try
        {
            if(theThread != null)
            {
                theThread.stop();
            }
            theThread = null;
            System.out.println("In stop in HosControl");
            //  theGUISubject.setEnabled(true);
            //ยังไม่ได้ใช้
            //theManageReport12File.onShowStatus(Constant.STATUS_CANCEL_REPORT, java.awt.Color.red);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void run()
    {
        queryDataByDate(startDate,endDate);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableReportPatientInServicePoint = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jCheckBox1.setText("NotConfirm");
        jCheckBox1.setMaximumSize(new java.awt.Dimension(75, 25));
        jCheckBox1.setMinimumSize(new java.awt.Dimension(75, 25));
        jCheckBox1.setPreferredSize(new java.awt.Dimension(75, 25));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("Confirm");
        jCheckBox2.setMaximumSize(new java.awt.Dimension(75, 25));
        jCheckBox2.setMinimumSize(new java.awt.Dimension(75, 25));
        jCheckBox2.setPreferredSize(new java.awt.Dimension(75, 25));
        jCheckBox2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("InProcess");
        jCheckBox3.setMaximumSize(new java.awt.Dimension(75, 25));
        jCheckBox3.setMinimumSize(new java.awt.Dimension(75, 25));
        jCheckBox3.setPreferredSize(new java.awt.Dimension(75, 25));
        jCheckBox3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("Cancel");
        jCheckBox4.setMaximumSize(new java.awt.Dimension(75, 25));
        jCheckBox4.setMinimumSize(new java.awt.Dimension(75, 25));
        jCheckBox4.setPreferredSize(new java.awt.Dimension(75, 25));
        jCheckBox4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox4, gridBagConstraints);

        jCheckBox5.setText("Result");
        jCheckBox5.setMaximumSize(new java.awt.Dimension(75, 25));
        jCheckBox5.setMinimumSize(new java.awt.Dimension(75, 25));
        jCheckBox5.setPreferredSize(new java.awt.Dimension(75, 25));
        jCheckBox5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox5, gridBagConstraints);

        jCheckBox6.setText("Dispense");
        jCheckBox6.setMaximumSize(new java.awt.Dimension(75, 25));
        jCheckBox6.setMinimumSize(new java.awt.Dimension(75, 25));
        jCheckBox6.setPreferredSize(new java.awt.Dimension(75, 25));
        jCheckBox6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox6ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox6, gridBagConstraints);

        jCheckBox7.setText("NotResult");
        jCheckBox7.setMaximumSize(new java.awt.Dimension(83, 25));
        jCheckBox7.setMinimumSize(new java.awt.Dimension(83, 25));
        jCheckBox7.setPreferredSize(new java.awt.Dimension(83, 25));
        jCheckBox7.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox7ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jCheckBox7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("ReportDetail"));
        jScrollPane1.setBorder(null);
        jTableReportPatientInServicePoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        jScrollPane1.setViewportView(jTableReportPatientInServicePoint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox7ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox7ActionPerformed
        if(jCheckBox7.isSelected())
        {
            System.out.println("jCheckBox7  Selected");
            this.vStatus.add(status[6]);
        }
        else
        {
            checkStatus(status[6]);
            this.vStatus.remove(status[6]);
        }    
    }//GEN-LAST:event_jCheckBox7ActionPerformed
    
    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox4ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox4ActionPerformed
        if(jCheckBox4.isSelected())
        {
            System.out.println("jCheckBox4  Selected");
            this.vStatus.add(status[3]);
        }
        else
        {
            checkStatus(status[3]);
            this.vStatus.remove(status[3]);
        }            
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox5ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox5ActionPerformed
        if(jCheckBox5.isSelected())
        {
            System.out.println("jCheckBox5  Selected");
            this.vStatus.add(status[4]);
        }
        else
        {
            checkStatus(status[4]);
            this.vStatus.remove(status[4]);
        } 
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox6ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox6ActionPerformed
        if(jCheckBox6.isSelected())
        {
            System.out.println("jCheckBox6  Selected");
            this.vStatus.add(status[5]);
        }
        else
        {
            checkStatus(status[5]);
            this.vStatus.remove(status[5]);
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox3ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox3ActionPerformed
        if(jCheckBox3.isSelected())
        {
            System.out.println("jCheckBox3  Selected");
            this.vStatus.add(status[2]);
        }
        else
        {
            checkStatus(status[2]);
            this.vStatus.remove(status[2]);
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox2ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox2ActionPerformed
        if(jCheckBox2.isSelected())
        {
            System.out.println("jCheckBox2  Selected");
            this.vStatus.add(status[1]);
        }
        else
        {
            checkStatus(status[1]);
            this.vStatus.remove(status[1]);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox1ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
        {
            System.out.println("jCheckBox1  Selected");
            this.vStatus.add(status[0]);
        }
        else
        {
            checkStatus(status[0]);
            this.vStatus.remove(status[0]);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    /**
     *ตรวจสอบให้มีการเลือกสถานะอย่างน้อย 1 สถานะ
     *มิฉะนั้น จะไม่ให้ทำการ query
     */
    public void checkStatus(String i)
    {
        if(i ==status[0])//ไม่ยืนยัน
        {
            if(!jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected() && !jCheckBox5.isSelected() && !jCheckBox6.isSelected() && !jCheckBox7.isSelected())
            {
                checkBoxStatus();
                JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(i == status[1]) //ยืนยัน
        {
              if(!jCheckBox1.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected() && !jCheckBox5.isSelected() && !jCheckBox6.isSelected() && !jCheckBox7.isSelected())
            {
                checkBoxStatus();
                JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(i == status[2]) //ดำเนินการ
        {
              if(!jCheckBox2.isSelected() && !jCheckBox1.isSelected() && !jCheckBox4.isSelected() && !jCheckBox5.isSelected() && !jCheckBox6.isSelected() && !jCheckBox7.isSelected())
            {
                checkBoxStatus();
                JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(i ==status[3]) //ยกเลิก
        {
            if(!jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox1.isSelected() && !jCheckBox5.isSelected() && !jCheckBox6.isSelected() && !jCheckBox7.isSelected())
            {
                checkBoxStatus();
                JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(i ==status[4])//รายงานผล
        {
            if(!jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected() && !jCheckBox1.isSelected() && !jCheckBox6.isSelected() && !jCheckBox7.isSelected())
            {
                checkBoxStatus();
                JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(i ==status[5])//จ่าย
        {
            if(!jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected() && !jCheckBox5.isSelected() && !jCheckBox1.isSelected() && !jCheckBox7.isSelected())
            {
              checkBoxStatus();
              JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
        else if(i ==status[6]) //รอรายงานผล
        {
            if(!jCheckBox2.isSelected() && !jCheckBox3.isSelected() && !jCheckBox4.isSelected() && !jCheckBox5.isSelected()  && !jCheckBox6.isSelected() && !jCheckBox1.isSelected())
            {
                checkBoxStatus();
                JOptionPane.showMessageDialog(this,Language.getTextBundle("status_require", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    
    /**
     *Query ข้อมูลตามช่วงวันที่ที่กำหนด สำหรับแสดงในตาราง
     *@startDate วันที่เริ่มต้น สำหรับการ query
     *@endDate วันที่สิ้นสุด สำหรับการ query
     */
    private void queryDataByDate(String startDate, String endDate)
    {
        theDialogShowStatus.setVisible(false);
        theDialogShowStatus.showDialog("กรุณารอสักครู่",false);
        
        vcData = theHosManage.theHosControl.theRPCostTotalGroupByOrderControl.selectCostTotalGroupByOrderByDate(startDate,endDate, this.vStatus,isDbBackup);
        headColumn = new String[] {""};
        vcDataQuery = null;
        if(vcData != null)
        {
            
            headColumn = (String[])vcData.get(0);
            vcDataQuery = (Vector)vcData.get(1);
        }
        
        showDataInTable(headColumn, vcDataQuery);
        theDialogShowStatus.setVisible(false);
    }
    
    /**ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     */
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        //setFileDescription();
        startQuery();
        // queryDataByDate(startDate,endDate);
    }
    
    public Vector getCostTotalGroupByOrder()
    {
        return this.vcData;
    }
    
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    
    private void showDataInTable(String[] columnname,Vector vc)
    {
        
        String[] col = columnname;
        
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);
                
                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    theTableModelGUI.setValueAt(rowdata[j],i,j);
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
                
                //    tm.setValueAt(((OrderItem)this.theOrderControl.listOrderItemByItem(p.getObjectId(),this.vn)).refer_out,i,2);
            }
            
        }
        else
        {
            theTableModelGUI= new TableModelGUI(col,0);
        }
        
        this.jTableReportPatientInServicePoint.setModel(theTableModelGUI);
        if(col!= null && col.length!= 0)
        {
            setTableListReportPattern(col);
        }
        sendDataToMainReport(size);
    }
    
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     * 
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererRight == null)
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        
        String[] col_number = col;
        for(int i=0;i<col_number.length;i++)
        {
            if(i == 0)
            {
                jTableReportPatientInServicePoint.getColumnModel().getColumn(i).setPreferredWidth(300);
            }
            else
            {
                jTableReportPatientInServicePoint.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableReportPatientInServicePoint.getColumnModel().getColumn(i).setPreferredWidth(150);
            }
        }
      /*  if(rendererRight == null)
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
       */
        
        //jTableReportPatientInServicePoint.getColumnModel().getColumn(0).setPreferredWidth(300);
        //jTableReportPatientInServicePoint.getColumnModel().getColumn(1).setCellRenderer(rendererRight);
        //jTableReportPatientInServicePoint.getColumnModel().getColumn(2).setCellRenderer(rendererRight);
        
        
        //jTableReportPatientInServicePoint.getColumnModel().getColumn(1).setPreferredWidth(150);
        //jTableReportPatientInServicePoint.getColumnModel().getColumn(2).setPreferredWidth(150);
    }
    
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    public void setLanguage()
    {
        this.jCheckBox1.setText(Language.getTextBundle(this.jCheckBox1.getText(), language));
        this.jCheckBox2.setText(Language.getTextBundle(this.jCheckBox2.getText(), language));
        this.jCheckBox3.setText(Language.getTextBundle(this.jCheckBox3.getText(), language));
        this.jCheckBox4.setText(Language.getTextBundle(this.jCheckBox4.getText(), language));
        this.jCheckBox5.setText(Language.getTextBundle(this.jCheckBox5.getText(), language));
        this.jCheckBox6.setText(Language.getTextBundle(this.jCheckBox6.getText(), language));
        this.jCheckBox7.setText(Language.getTextBundle(this.jCheckBox7.getText(), language));
        jPanel3.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle("DetailReport", language)));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableReportPatientInServicePoint;
    // End of variables declaration//GEN-END:variables
    
}
