/*
 * PanelCostDrugInServicePoint.java
 *
 * Created on 20 ตุลาคม 2548, 15:27 น.
 */

package com.generalreport.gui.panel.report;
import com.generalreport.gui_component.TableModelGUI;
import com.generalreport.subject.ManageAllPanel;
import com.generalreport.subject.ManageGUI;
import com.generalreport.utility.GUIControl;
import com.generalreport.utility.Constant;
import com.generalreport.utility.Report;
import java.util.Vector;

import com.generalreport.control.HosManage;
import com.generalreport.utility.Language;
import com.generalreport.gui_component.DialogShowStatus;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author  tong(Padungrat)
 */
public class PanelCostDrugInServicePoint extends javax.swing.JPanel implements 
GUIControl,ManageGUI,Runnable,ManageAllPanel{
    
    HosManage theHosManage;
    Thread theThread;
    private String startDate;
    private String endDate;
    final private String cardName;// = "TestReport";
    private DefaultTableCellRenderer rendererRight;
    private DefaultTableCellRenderer rendererCenter;
    Vector vcData;
    String[] headColumn;
    Vector vcDataQuery;
    TableModelGUI theTableModelGUI;
    DialogShowStatus theDialogShowStatus;
    int language = 1;
    private boolean isDbBackup;
 //  String startTime;
   // String finishTime;
    public PanelCostDrugInServicePoint(HosManage hosmanage)
    {
        theHosManage = hosmanage;
        theHosManage.theHosControl.theHosSubject.theGUISubject.registerGUIManage(this);
        theHosManage.theHosControl.theHosSubject.theAllPanelSubject.registerAllPanelManage(this);
        
        cardName = ((Report)Constant.Report.get("15")).ENG_NAME;
        initComponents();
        language();
        theDialogShowStatus = new DialogShowStatus(theHosManage.theUS.getJFrame(),false,theHosManage);
        
    }
    /**run thread*/
    public void run()
    {
       queryDataByDate(startDate,endDate);
    }    
    /**
     *  ส่งชื่อของ panel ไปให้ Frame หลังที่จะใช้ในการทำ card Layout
     *  @return string เป็น ชื่อ ของ panel เป็นอังกฤษ
     */ 
    public String getCardName()
    {
        return cardName;
    }
    /**
     *  ใช้ในการรับ notify เมื่อมีการ stop service 
     */
    public void notifyStopProcess()
    {
         try
        {
              if(theThread != null)
              {
                  theThread.stop();
              }
              theThread = null;
              System.out.println("In stop in PanelReportARIC");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelControl = new javax.swing.JPanel();
        jLabelStartTime = new javax.swing.JLabel();
        jLabelStartTypeTime = new javax.swing.JLabel();
        jLabelFinishTypeTime = new javax.swing.JLabel();
        timeTextFieldStartTime = new com.hospital_os.utility.TimeTextField();
        timeTextFieldFinishTime = new com.hospital_os.utility.TimeTextField();
        jPanelDetail = new javax.swing.JPanel();
        jScrollPanelDetail = new javax.swing.JScrollPane();
        jTableShow = new javax.swing.JTable();
        jPanelComment = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaNotice = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jPanelControl.setLayout(new java.awt.GridBagLayout());

        jLabelStartTime.setText("Time");
        jPanelControl.add(jLabelStartTime, new java.awt.GridBagConstraints());

        jLabelStartTypeTime.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelControl.add(jLabelStartTypeTime, gridBagConstraints);

        jLabelFinishTypeTime.setText("Minute");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelControl.add(jLabelFinishTypeTime, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelControl.add(timeTextFieldStartTime, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelControl.add(timeTextFieldFinishTime, gridBagConstraints);

        add(jPanelControl, java.awt.BorderLayout.NORTH);

        jPanelDetail.setLayout(new java.awt.GridBagLayout());

        jTableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPanelDetail.setViewportView(jTableShow);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelDetail.add(jScrollPanelDetail, gridBagConstraints);

        add(jPanelDetail, java.awt.BorderLayout.CENTER);

        jPanelComment.setLayout(new java.awt.GridBagLayout());

        jTextAreaNotice.setEditable(false);
        jTextAreaNotice.setLineWrap(true);
        jTextAreaNotice.setText("\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 : \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1c\u0e39\u0e49\u0e1b\u0e48\u0e27\u0e22\u0e17\u0e35\u0e48\u0e21\u0e32\u0e23\u0e31\u0e01\u0e29\u0e32\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 2 \u0e2a\u0e34\u0e17\u0e18\u0e34 \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e23\u0e31\u0e1a\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 \n                  \u0e23\u0e32\u0e22\u0e07\u0e32\u0e19\u0e08\u0e30\u0e04\u0e34\u0e14\u0e23\u0e27\u0e21\u0e43\u0e2b\u0e49\u0e43\u0e19\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e2b\u0e25\u0e31\u0e01\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e40\u0e14\u0e35\u0e22\u0e27");
        jTextAreaNotice.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaNotice);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelComment.add(jScrollPane1, gridBagConstraints);

        add(jPanelComment, java.awt.BorderLayout.SOUTH);

    }// </editor-fold>//GEN-END:initComponents
    /**ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     */
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        //setFileDescription();
        startQuery();
        // queryDataByDate(startDate,endDate);
    }
    
    /**
     *  ใช้ในการเริ่มให้ thread เริ่มทำงาน จะต้องมาเรียก method นี้ทุกครั้ง
     * 
     */
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    /**
     *  ส่งค่าข้อมูลกลับไปยัง Frame หลักเมื่อมีการบันทึกออกมาเป็นไฟล์
     *  @return Vector ของ ข้อมูลที่ Query ออกมาได้
     */
    public Vector getData()
    {
        return this.vcData;
    }
    
    /**ใช้ในการตรวจสอบเวลา*/
    private boolean checkTime()
    {
        return true;
    }
    
    /***/
    private void queryDataByDate(String startDate, String endDate)
    {
       
        theDialogShowStatus.setVisible(false);
        theDialogShowStatus.showDialog("กรุณารอสักครู่",false);
    
        vcData = theHosManage.theHosControl.theRPCostDrugInServicePointControl
                .selectCostDrugInServicePointByDate(startDate,endDate
                ,timeTextFieldStartTime.getText()
                ,timeTextFieldFinishTime.getText(),isDbBackup);
        headColumn = new String[] {""};
        vcDataQuery = null;
        if(vcData != null)
        {
           
            headColumn = (String[])vcData.get(0);
            vcDataQuery = (Vector)vcData.get(1);
        }
        
        showDataInTable(headColumn, vcDataQuery);
       // theHosManage.theHosControl.theTestReportControl.stop();
      //  theDialogShowStatus.showDialog("กรุณารอสักครู่",true);
        theDialogShowStatus.setVisible(false);       
    }
    
    private void showDataInTable(String[] columnname,Vector vc)
    {
             
        String[] col = columnname;      
        
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);

                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    
                    theTableModelGUI.setValueAt(rowdata[j],i,j);                        
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
                
                //    tm.setValueAt(((OrderItem)this.theOrderControl.listOrderItemByItem(p.getObjectId(),this.vn)).refer_out,i,2);
            }                
                       
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);            
        }
        this.jTableShow.setModel(theTableModelGUI);
        if(col!= null && col.length!= 0)
        {
            setTableListReportPattern(col);
        }
        sendDataToMainReport(size);
    }
    
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     *
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererRight == null )
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        
                
                rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
                rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        String[] col_number = col;
        for(int i=0;i<col_number.length;i++)
        {
            if(i == 0)
            {
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(50);
            }
            else if(i == 1)
            {
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(15);
            }
            else if(i == 3)
            {
                jTableShow.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(20);
            }
            else if(i == 4 || i == 5)
            {
                jTableShow.getColumnModel().getColumn(i).setCellRenderer(rendererCenter);
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(10);
            }
            
        }
    }
    
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    
    /**ใช้ในการ Clear ข้อมูลที่อยู่บนตาราง*/
    private void clearDataGUI()
    {
        showDataInTable(new String[] {""}, null);
        System.out.println("Clear Data in GUI");
    }
    public void notifySetInitAllGUI()
    {
        clearDataGUI();
    }
    
    private void language()
    {
        jLabelFinishTypeTime.setText(Language.getTextBundle(jLabelFinishTypeTime.getText(),language));
        jLabelStartTime.setText(Language.getTextBundle(jLabelStartTime.getText(),language));
        jLabelStartTypeTime.setText(Language.getTextBundle(jLabelStartTypeTime.getText(),language));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelFinishTypeTime;
    private javax.swing.JLabel jLabelStartTime;
    private javax.swing.JLabel jLabelStartTypeTime;
    private javax.swing.JPanel jPanelComment;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPanelDetail;
    private javax.swing.JTable jTableShow;
    private javax.swing.JTextArea jTextAreaNotice;
    private com.hospital_os.utility.TimeTextField timeTextFieldFinishTime;
    private com.hospital_os.utility.TimeTextField timeTextFieldStartTime;
    // End of variables declaration//GEN-END:variables
    
}
