/*
 * PanelReportRevenueAndExpenseSummary.java
 *
 * Created on 11 ตุลาคม 2548, 11:00 น.
 */

package com.generalreport.gui.panel.report;

import com.generalreport.gui_component.TableModelGUI;
import com.generalreport.utility.Constant;
import com.generalreport.utility.Report;
import java.util.Vector;
import java.awt.*;
import javax.swing.*;

import com.generalreport.utility.Language;
import com.generalreport.control.HosManage;
import com.generalreport.gui_component.DialogShowStatus;
import com.generalreport.utility.Gutil;
import com.generalreport.objdb.RPRevenueAndExpenseDB;
import com.generalreport.object.CashInFlow;
import com.generalreport.utility.NumberUtil;
import com.generalreport.subject.ManageAllPanel;
import javax.swing.table.DefaultTableCellRenderer;
import com.generalreport.utility.ComboboxModel;
import com.generalreport.utility.ComboFix;
/**
 *
 * @author  amp
 */
public class PanelReportRevenueAndExpenseSummary extends javax.swing.JPanel implements 
Runnable,ManageAllPanel
{
    final private String cardName;
    private String startDate = "";
    private String endDate = "";
    /**ใช้ในการจัดการกับ cell ในตาราง*/
    private DefaultTableCellRenderer rendererRight;
    Thread theThread;
    Vector vcData;
    Vector vcDataQuery;
    DialogShowStatus theDialogShowStatus;
    HosManage theHosManage;
    ComboboxModel theComboboxModel;
    String codeServicePoint;
    public final static String CARD_CASHINFLOW = "CARD_CASHINFLOW";
    public final static String CARD_ACCRUALS = "CARD_ACCRUALS";
    public final static String CARD_REVENUEEXPENSE = "CARD_REVENUEEXPENSE";
    private String[] col;
    
    private String sub_fileName = "CashInflow";
    private boolean isDbBackup;
    
    /** Creates new form PanelReportRevenueAndExpenseSummary */
    public PanelReportRevenueAndExpenseSummary(HosManage hosManage)
    {
        theHosManage = hosManage;
        theHosManage.theHosControl.theHosSubject.theAllPanelSubject.registerAllPanelManage(this);
        cardName = ((Report)Constant.Report.get("4")).ENG_NAME;
        initComponents();
        
        initServicePoint();
        
        setLanguage();
        setEnableTypeOfRevenueExpense(false);
        theDialogShowStatus = new DialogShowStatus(theHosManage.theUS.getJFrame(),false,theHosManage);
    }
    /**
     *เซ็ตค่าเริ่มต้นให้กับ Combo Box
     */
    private void initServicePoint()
    {    
        this.theComboboxModel.initComboBox(this.jComboBoxSurvicePoint,this.theHosManage.theHosControl.getServicePoint());  
        this.theComboboxModel.setCodeComboBox(this.jComboBoxSurvicePoint, "0");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupRevenueExpense = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabelSurvicePoint = new javax.swing.JLabel();
        jComboBoxSurvicePoint = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        timeTextFieldTimeFrom = new com.hospital_os.utility.TimeTextField();
        timeTextFieldTimeTo = new com.hospital_os.utility.TimeTextField();
        jPanel8 = new javax.swing.JPanel();
        jRadioButtonCashInflow = new javax.swing.JRadioButton();
        jRadioButtonAccruals = new javax.swing.JRadioButton();
        jRadioButtonExpense = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanelCashInflow = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCashInflow = new javax.swing.JTable();
        jPanelAccruals = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAccruals = new javax.swing.JTable();
        jPanelRevenueExpense = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRevenueExpense = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelTotalPatient = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelTotalBaht = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabelInPatient = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabelInBaht = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabelOutPatient = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabelOutBaht = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabelSurvicePoint.setText("NAME_SERVICEPOINT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jLabelSurvicePoint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jComboBoxSurvicePoint, gridBagConstraints);

        jLabel1.setText("Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jLabel1, gridBagConstraints);

        jLabel2.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jLabel2, gridBagConstraints);

        jLabel7.setText("Minute");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel7.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel7.add(timeTextFieldTimeFrom, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel7.add(timeTextFieldTimeTo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        jPanel1.add(jPanel7, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        buttonGroupRevenueExpense.add(jRadioButtonCashInflow);
        jRadioButtonCashInflow.setSelected(true);
        jRadioButtonCashInflow.setText("CashInflow");
        jRadioButtonCashInflow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCashInflowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel8.add(jRadioButtonCashInflow, gridBagConstraints);

        buttonGroupRevenueExpense.add(jRadioButtonAccruals);
        jRadioButtonAccruals.setText("Accruals");
        jRadioButtonAccruals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAccrualsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel8.add(jRadioButtonAccruals, gridBagConstraints);

        buttonGroupRevenueExpense.add(jRadioButtonExpense);
        jRadioButtonExpense.setText("Expense");
        jRadioButtonExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonExpenseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel8.add(jRadioButtonExpense, gridBagConstraints);

        jLabel5.setText("TypeOfRevenueExpense");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel8.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.CardLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelCashInflow.setLayout(new java.awt.GridBagLayout());

        jTableCashInflow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableCashInflow);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelCashInflow.add(jScrollPane1, gridBagConstraints);

        jPanel2.add(jPanelCashInflow, "CARD_CASHINFLOW");

        jPanelAccruals.setLayout(new java.awt.GridBagLayout());

        jTableAccruals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableAccruals);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelAccruals.add(jScrollPane2, gridBagConstraints);

        jPanel2.add(jPanelAccruals, "CARD_ACCRUALS");

        jPanelRevenueExpense.setLayout(new java.awt.GridBagLayout());

        jTableRevenueExpense.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTableRevenueExpense);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelRevenueExpense.add(jScrollPane3, gridBagConstraints);

        jPanel2.add(jPanelRevenueExpense, "CARD_REVENUEEXPENSE");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 3);
        add(jPanel2, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setText("Summary");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 25);
        jPanel6.add(jLabel3, gridBagConstraints);

        jLabel4.setText("TotalPatient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 0);
        jPanel6.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 3, 0);
        jPanel6.add(jLabelTotalPatient, gridBagConstraints);

        jLabel6.setText("Person");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 0);
        jPanel6.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 3, 0);
        jPanel6.add(jLabelTotalBaht, gridBagConstraints);

        jLabel8.setText("Baht");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel6.add(jLabel8, gridBagConstraints);

        jLabel9.setText("InPatient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel6.add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 0, 0);
        jPanel6.add(jLabelInPatient, gridBagConstraints);

        jLabel11.setText("Person");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel6.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 0, 0);
        jPanel6.add(jLabelInBaht, gridBagConstraints);

        jLabel13.setText("Baht");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        jPanel6.add(jLabel13, gridBagConstraints);

        jLabel14.setText("OutPatient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel6.add(jLabel14, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 0, 0);
        jPanel6.add(jLabelOutPatient, gridBagConstraints);

        jLabel16.setText("Person");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel6.add(jLabel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 0, 0);
        jPanel6.add(jLabelOutBaht, gridBagConstraints);

        jLabel18.setText("Baht");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        jPanel6.add(jLabel18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 3, 3);
        add(jPanel6, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonExpenseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonExpenseActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonExpenseActionPerformed
    this.sub_fileName = "RevenueExpense";
    showTypeOfReport(PanelReportRevenueAndExpenseSummary.CARD_REVENUEEXPENSE);
    queryRevenueExpenseDataByDateTime();
    showCurrentDate();
    }//GEN-LAST:event_jRadioButtonExpenseActionPerformed

    private void jRadioButtonAccrualsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonAccrualsActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonAccrualsActionPerformed
    this.sub_fileName = "Accruals";
    showTypeOfReport(PanelReportRevenueAndExpenseSummary.CARD_ACCRUALS);
    queryAccrualsDataByDateTime();
    showCurrentDate();
    }//GEN-LAST:event_jRadioButtonAccrualsActionPerformed

    private void jRadioButtonCashInflowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonCashInflowActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonCashInflowActionPerformed
    this.sub_fileName = "CashInflow";
    showTypeOfReport(PanelReportRevenueAndExpenseSummary.CARD_CASHINFLOW);
    queryCashInflowDataByDate();
    showCurrentDate();
    }//GEN-LAST:event_jRadioButtonCashInflowActionPerformed
    
    public String getCardName()
    {
        return cardName;
    }
    
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        startQuery();        
    }
    
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    
    public void run()
    {
       setEnableTypeOfRevenueExpense(true);
       this.jRadioButtonCashInflow.setSelected(true);
       showTypeOfReport(PanelReportRevenueAndExpenseSummary.CARD_CASHINFLOW);
       queryCashInflowDataByDate();       
    }  
    
    private void queryCashInflowDataByDate()
    {        
        theDialogShowStatus.setVisible(false);
        theDialogShowStatus.showDialog(Language.getTextBundle("JustMoment", 1),false);
        this.vcData = new Vector();
        this.codeServicePoint = this.theComboboxModel.getCodeComboBox(this.jComboBoxSurvicePoint);
        this.vcData = theHosManage.theHosControl.theRPRevenueAndExpenseControl.selectRevenueAndExpenseByDateTime(this.startDate
                ,this.endDate
                ,this.timeTextFieldTimeFrom.getText()
                ,this.timeTextFieldTimeTo.getText()
                , this.codeServicePoint
                ,isDbBackup);
        this.vcDataQuery = new Vector();
        this.vcDataQuery = (Vector)this.vcData.get(1);
        showCashInflowDataInTable(this.vcDataQuery);  
        setSummary(this.vcDataQuery);
        theDialogShowStatus.setVisible(false);
    }
    
    private void showCashInflowDataInTable(Vector vc)
    {
        this.col = new String[] {Language.getTextBundle("HN",1),
            Language.getTextBundle("VN",1),    
            Language.getTextBundle("Prefix",1),
            Language.getTextBundle("Firstname",1),
            Language.getTextBundle("Lastname",1),
            Language.getTextBundle("Plan",1),
            Language.getTextBundle("ReceiptDate",1),                        
            Language.getTextBundle("ReceiptPaid",1)}; 
        
        TableModelGUI tm ;
        int size = 0;
        if(vc != null)
        {   
            CashInFlow theCashInFlowTemp = new CashInFlow();
            size = vc.size();
            tm= new TableModelGUI(col,size);           
            for(int i=0 ; i<size; i++)
            {  
                theCashInFlowTemp = (CashInFlow)vc.get(i);
                tm.setValueAt(theCashInFlowTemp.patient_hn,i,0);
                tm.setValueAt(theCashInFlowTemp.visit_vn,i,1); 
                tm.setValueAt(theCashInFlowTemp.patient_prefix_description,i,2);
                tm.setValueAt(theCashInFlowTemp.patient_firstname,i,3);
                tm.setValueAt(theCashInFlowTemp.patient_lastname,i,4);                
                tm.setValueAt(theCashInFlowTemp.contract_plans_description,i,5);
                tm.setValueAt(Gutil.changDateToString(theCashInFlowTemp.date,false),i,6);
                tm.setValueAt(theCashInFlowTemp.paid,i,7); 
            }
            theCashInFlowTemp = null;
        }
        else
        {   
            tm= new TableModelGUI(col,0);
        }
        this.jTableCashInflow.setModel(tm);
  
        if(rendererRight == null )
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        /***SetTableDefault***/
        this.jTableCashInflow.getColumnModel().getColumn(0).setPreferredWidth(150);
        this.jTableCashInflow.getColumnModel().getColumn(1).setPreferredWidth(150);
        this.jTableCashInflow.getColumnModel().getColumn(2).setPreferredWidth(130);
        this.jTableCashInflow.getColumnModel().getColumn(3).setPreferredWidth(200);
        this.jTableCashInflow.getColumnModel().getColumn(4).setPreferredWidth(200);
        this.jTableCashInflow.getColumnModel().getColumn(5).setPreferredWidth(480);
        this.jTableCashInflow.getColumnModel().getColumn(6).setPreferredWidth(230);
        this.jTableCashInflow.getColumnModel().getColumn(7).setCellRenderer(rendererRight);        
        this.jTableCashInflow.getColumnModel().getColumn(7).setPreferredWidth(130);
        sendDataToMainReport(size);
        
        this.col = new String[] {Language.getTextBundle("HN",1),
                Language.getTextBundle("VN",1),
                Language.getTextBundle("Prefix",1),
                Language.getTextBundle("Firstname",1),
                Language.getTextBundle("Lastname",1),
                Language.getTextBundle("Plan",1),
                Language.getTextBundle("ReceiptDate",1),
                Language.getTextBundle("ReceiptPaid",1)};
                if(this.vcData!=null)
                {
                    this.vcData.remove(0);
                    this.vcData.add(0,this.col);
                }
    }
    
    private void queryAccrualsDataByDateTime()
    {
        theDialogShowStatus.setVisible(false);
        theDialogShowStatus.showDialog(Language.getTextBundle("JustMoment", 1),false);
        this.vcData = new Vector();
        this.codeServicePoint = this.theComboboxModel.getCodeComboBox(this.jComboBoxSurvicePoint);
        this.vcData = theHosManage.theHosControl.theRPRevenueAndExpenseControl.selectAccrualsByDateTime(this.startDate,this.endDate,this.timeTextFieldTimeFrom.getText(),this.timeTextFieldTimeTo.getText(), this.codeServicePoint);
        this.vcDataQuery = new Vector();
        this.vcDataQuery = (Vector)this.vcData.get(1);
        showAccrualsDataInTable(this.vcDataQuery);
        setSummary(this.vcDataQuery);
        theDialogShowStatus.setVisible(false);
    }
    
    private void showAccrualsDataInTable(Vector vc)
    {
        this.col = new String[] {Language.getTextBundle("HN",1),
                Language.getTextBundle("VN",1),
                Language.getTextBundle("Prefix",1),
                Language.getTextBundle("Firstname",1),
                Language.getTextBundle("Lastname",1),
                Language.getTextBundle("Plan",1),
                Language.getTextBundle("BillingInvoiceDate",1),
                Language.getTextBundle("ReceiptPaid",1)};
                TableModelGUI tm ;
                int size = 0;
                if(vc != null)
                {
                    CashInFlow theCashInFlowTemp = new CashInFlow();
                    size = vc.size();
                    tm= new TableModelGUI(col,size);
                    for(int i=0 ; i<size; i++)
                    {
                        theCashInFlowTemp = (CashInFlow)vc.get(i);
                        tm.setValueAt(theCashInFlowTemp.patient_hn,i,0);
                        tm.setValueAt(theCashInFlowTemp.visit_vn,i,1);
                        tm.setValueAt(theCashInFlowTemp.patient_prefix_description,i,2);
                        tm.setValueAt(theCashInFlowTemp.patient_firstname,i,3);
                        tm.setValueAt(theCashInFlowTemp.patient_lastname,i,4);
                        tm.setValueAt(theCashInFlowTemp.contract_plans_description,i,5);
                        tm.setValueAt(Gutil.changDateToString(theCashInFlowTemp.date,false),i,6);
                        tm.setValueAt(theCashInFlowTemp.paid,i,7);
                    }
                    theCashInFlowTemp = null;
                }
                else
                {
                    tm= new TableModelGUI(col,0);
                }
                this.jTableAccruals.setModel(tm);
                
                if(rendererRight == null )
                {
                    rendererRight = new DefaultTableCellRenderer();
                }
                rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
                /***SetTableDefault***/
                this.jTableAccruals.getColumnModel().getColumn(0).setPreferredWidth(150);
                this.jTableAccruals.getColumnModel().getColumn(1).setPreferredWidth(150);
                this.jTableAccruals.getColumnModel().getColumn(2).setPreferredWidth(130);
                this.jTableAccruals.getColumnModel().getColumn(3).setPreferredWidth(200);
                this.jTableAccruals.getColumnModel().getColumn(4).setPreferredWidth(200);
                this.jTableAccruals.getColumnModel().getColumn(5).setPreferredWidth(480);
                this.jTableAccruals.getColumnModel().getColumn(6).setPreferredWidth(230);
                this.jTableAccruals.getColumnModel().getColumn(7).setCellRenderer(rendererRight);
                this.jTableAccruals.getColumnModel().getColumn(7).setPreferredWidth(130);
                sendDataToMainReport(size);
                
                this.col = new String[] {Language.getTextBundle("HN",1),
                        Language.getTextBundle("VN",1),
                        Language.getTextBundle("Prefix",1),
                        Language.getTextBundle("Firstname",1),
                        Language.getTextBundle("Lastname",1),
                        Language.getTextBundle("Plan",1),
                        Language.getTextBundle("BillingInvoiceDate",1),
                        Language.getTextBundle("ReceiptPaid",1)};
                        if(this.vcData!=null)
                        {
                            this.vcData.remove(0);
                            this.vcData.add(0,this.col);
                        }
    }
    
    private void queryRevenueExpenseDataByDateTime()
    {
        theDialogShowStatus.setVisible(false);
        theDialogShowStatus.showDialog(Language.getTextBundle("JustMoment", 1),false);
        this.vcData = new Vector();
        this.codeServicePoint = this.theComboboxModel.getCodeComboBox(this.jComboBoxSurvicePoint);
        this.vcData = theHosManage.theHosControl.theRPRevenueAndExpenseControl.selectRevenueExpenseByDateTime
                (this.startDate,this.endDate,this.timeTextFieldTimeFrom.getText()
                ,this.timeTextFieldTimeTo.getText(), this.codeServicePoint);
        this.vcDataQuery = new Vector();
        this.vcDataQuery = (Vector)this.vcData.get(1);
        showRevenueExpenseDataInTable(this.vcDataQuery);
        setSummary(this.vcDataQuery);
        theDialogShowStatus.setVisible(false);
    }
    
    private void showRevenueExpenseDataInTable(Vector vc)
    {
        this.col = new String[] {Language.getTextBundle("HN",1),
                Language.getTextBundle("VN",1),
                Language.getTextBundle("Prefix",1),
                Language.getTextBundle("Firstname",1),
                Language.getTextBundle("Lastname",1),
                Language.getTextBundle("Plan",1),
                Language.getTextBundle("BillingInvoiceDate",1),
                Language.getTextBundle("ReceiptPaid",1)};
                TableModelGUI tm ;
                int size = 0;
                if(vc != null)
                {
                    CashInFlow theCashInFlowTemp = new CashInFlow();
                    size = vc.size();
                    tm= new TableModelGUI(col,size);
                    for(int i=0 ; i<size; i++)
                    {
                        theCashInFlowTemp = (CashInFlow)vc.get(i);
                        tm.setValueAt(theCashInFlowTemp.patient_hn,i,0);
                        tm.setValueAt(theCashInFlowTemp.visit_vn,i,1);
                        tm.setValueAt(theCashInFlowTemp.patient_prefix_description,i,2);
                        tm.setValueAt(theCashInFlowTemp.patient_firstname,i,3);
                        tm.setValueAt(theCashInFlowTemp.patient_lastname,i,4);
                        tm.setValueAt(theCashInFlowTemp.contract_plans_description,i,5);
                        tm.setValueAt(Gutil.changDateToString(theCashInFlowTemp.date,false),i,6);
                        tm.setValueAt(theCashInFlowTemp.paid,i,7);
                    }
                    theCashInFlowTemp = null;
                }
                else
                {
                    tm= new TableModelGUI(col,0);
                }
                this.jTableRevenueExpense.setModel(tm);
                
                if(rendererRight == null )
                {
                    rendererRight = new DefaultTableCellRenderer();
                }
                rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
                /***SetTableDefault***/
                this.jTableRevenueExpense.getColumnModel().getColumn(0).setPreferredWidth(150);
                this.jTableRevenueExpense.getColumnModel().getColumn(1).setPreferredWidth(150);
                this.jTableRevenueExpense.getColumnModel().getColumn(2).setPreferredWidth(130);
                this.jTableRevenueExpense.getColumnModel().getColumn(3).setPreferredWidth(200);
                this.jTableRevenueExpense.getColumnModel().getColumn(4).setPreferredWidth(200);
                this.jTableRevenueExpense.getColumnModel().getColumn(5).setPreferredWidth(480);
                this.jTableRevenueExpense.getColumnModel().getColumn(6).setPreferredWidth(230);
                this.jTableRevenueExpense.getColumnModel().getColumn(7).setCellRenderer(rendererRight);
                this.jTableRevenueExpense.getColumnModel().getColumn(7).setPreferredWidth(130);
                sendDataToMainReport(size);
                
                this.col = new String[] {Language.getTextBundle("HN",1),
                        Language.getTextBundle("VN",1),
                        Language.getTextBundle("Prefix",1),
                        Language.getTextBundle("Firstname",1),
                        Language.getTextBundle("Lastname",1),
                        Language.getTextBundle("Plan",1),
                        Language.getTextBundle("BillingInvoiceDate",1),
                        Language.getTextBundle("ReceiptPaid",1)};
                        if(this.vcData!=null)
                        {
                            this.vcData.remove(0);
                            this.vcData.add(0,this.col);
                        }
    }
    
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    
    public Vector getRevenueExpense()
    {
        return this.vcData;
    }
    
    /*
     *true = CashInFlow
     *false = AccrualAndRevenueExpense
     */
    private void setSummary(Vector summary)
    {
        int inPatient = 0;
            int outPatient = 0;
            double totalBath = 0;
            double inBaht = 0;
            double outBaht = 0;
            
        if(summary != null)
        {                        
            CashInFlow theCashInFlowTemp = new CashInFlow();   
            CashInFlow theCashInFlowTemp1 = new CashInFlow();
            Vector vNumberOfPatients = new Vector();
            for(int i=0, size = summary.size(); i<size; i++)
            {
                theCashInFlowTemp = (CashInFlow)summary.get(i); 
                //นับจำนวนเงิน
                if(("0").equals(theCashInFlowTemp.f_visit_type_id)) 
                {
                    outBaht = outBaht + Double.parseDouble(theCashInFlowTemp.paid);
                    outPatient = outPatient + 1;
                }
                else 
                {
                    inBaht = inBaht + Double.parseDouble(theCashInFlowTemp.paid);
                    inPatient = inPatient + 1;
                }
            }
             
            // ojika 22 Nov. 2006
            // code เดิมเป็นการ group patient และ นำไปนับ แต่ก็ยังนับผิดอยู่ 
            // แต่ที่จริงไม่ต้องทำอย่างนั้นให้นับ visit เลย
            
            this.jLabelTotalPatient.setText(String.valueOf(inPatient+outPatient));
            this.jLabelInPatient.setText(String.valueOf(inPatient));
            this.jLabelOutPatient.setText(String.valueOf(outPatient));
            this.jLabelTotalBaht.setText(NumberUtil.formatCurrency(outBaht+inBaht));
            this.jLabelInBaht.setText(NumberUtil.formatCurrency(inBaht));
            this.jLabelOutBaht.setText(NumberUtil.formatCurrency(outBaht));
        }
        else
        {
            this.jLabelTotalPatient.setText("0");
            this.jLabelInPatient.setText("0");
            this.jLabelOutPatient.setText("0");
            this.jLabelTotalBaht.setText("0.00");
            this.jLabelInBaht.setText("0.00");
            this.jLabelOutBaht.setText("0.00");
        }
    }
    
    private void setEnableTypeOfRevenueExpense(boolean flag)
    {
        this.jRadioButtonCashInflow.setEnabled(flag);
        this.jRadioButtonAccruals.setEnabled(flag);
        this.jRadioButtonExpense.setEnabled(flag);        
    }
    
    private void showCurrentDate()
    {
        this.theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyReturnStartAndFinishDate(this.startDate, this.endDate);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupRevenueExpense;
    private javax.swing.JComboBox jComboBoxSurvicePoint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelInBaht;
    private javax.swing.JLabel jLabelInPatient;
    private javax.swing.JLabel jLabelOutBaht;
    private javax.swing.JLabel jLabelOutPatient;
    private javax.swing.JLabel jLabelSurvicePoint;
    private javax.swing.JLabel jLabelTotalBaht;
    private javax.swing.JLabel jLabelTotalPatient;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelAccruals;
    private javax.swing.JPanel jPanelCashInflow;
    private javax.swing.JPanel jPanelRevenueExpense;
    private javax.swing.JRadioButton jRadioButtonAccruals;
    private javax.swing.JRadioButton jRadioButtonCashInflow;
    private javax.swing.JRadioButton jRadioButtonExpense;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAccruals;
    private javax.swing.JTable jTableCashInflow;
    private javax.swing.JTable jTableRevenueExpense;
    private com.hospital_os.utility.TimeTextField timeTextFieldTimeFrom;
    private com.hospital_os.utility.TimeTextField timeTextFieldTimeTo;
    // End of variables declaration//GEN-END:variables
    
    /**
     *ส่งชื่อของไฟล์ เพื่อนำไปต่อเป็นชื่อไฟล์ที่ได้เซ้ตไว้แล้ว 
     * เพื่อระบุให้ชัดเจนว่ารายงานที่ถูก save เป็นรายงานอะไร
     *@return String เป็นชื่อไฟลืที่ต้องการนำไปต่อ
     */
    public String getFileName()
    {
        return sub_fileName;
    }
    
    public void showTypeOfReport(String type)
    {         
        CardLayout layout = (CardLayout)this.jPanel2.getLayout();
        layout.show(this.jPanel2, type);
    }
    
    private void setLanguage()
    {
        jLabel1.setText(Language.getTextBundle(jLabel1.getText(),1));
        jLabel2.setText(Language.getTextBundle(jLabel2.getText(),1));
        jLabel3.setText(Language.getTextBundle(jLabel3.getText(),1));
        jLabel4.setText(Language.getTextBundle(jLabel4.getText(),1));
        jLabel5.setText(Language.getTextBundle(jLabel5.getText(),1));
        jLabel6.setText(Language.getTextBundle(jLabel6.getText(),1));
        jLabel7.setText(Language.getTextBundle(jLabel7.getText(),1));
        jLabel8.setText(Language.getTextBundle(jLabel8.getText(),1));
        jLabel9.setText(Language.getTextBundle(jLabel9.getText(),1));
        jLabel11.setText(Language.getTextBundle(jLabel11.getText(),1));
        jLabel13.setText(Language.getTextBundle(jLabel13.getText(),1));
        jLabel14.setText(Language.getTextBundle(jLabel14.getText(),1));
        jLabel16.setText(Language.getTextBundle(jLabel16.getText(),1));
        jLabel18.setText(Language.getTextBundle(jLabel18.getText(),1));
        jLabelSurvicePoint.setText(Language.getTextBundle(jLabelSurvicePoint.getText(),1));
        
        jRadioButtonCashInflow.setText(Language.getTextBundle(jRadioButtonCashInflow.getText(),1));
        jRadioButtonAccruals.setText(Language.getTextBundle(jRadioButtonAccruals.getText(),1));
        jRadioButtonExpense.setText(Language.getTextBundle(jRadioButtonExpense.getText(),1));
    }
    
    public void notifySetInitAllGUI()
    {
        this.vcData = null;
        showCashInflowDataInTable(null);
        showAccrualsDataInTable(null);
        showRevenueExpenseDataInTable(null);
        setEnableTypeOfRevenueExpense(false);
    }
}
