/*
 * PanelCostPaymentShareOFA7INOUTHos.java
 *
 * Created on 18 ตุลาคม 2548, 18:45 น.
 */

package com.generalreport.gui.panel.report;
import com.generalreport.gui_component.TableModelGUI;
import com.generalreport.subject.ManageAllPanel;
import com.generalreport.subject.ManageGUI;
import com.generalreport.utility.GUIControl;
import com.generalreport.utility.Constant;
import com.generalreport.utility.Report;
import java.util.Vector;

import com.generalreport.control.HosManage;
import com.generalreport.utility.Language;
import com.generalreport.gui_component.DialogShowStatus;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author  tong(Padungrat)
 */
public class PanelCostPaymentShareOFA7INOUTHos extends javax.swing.JPanel implements 
GUIControl,ManageGUI,Runnable,ManageAllPanel{
    
    HosManage theHosManage;
    Thread theThread;
    private String startDate;
    private String endDate;
    final private String cardName;// = "TestReport";
    private DefaultTableCellRenderer rendererRight;
    private DefaultTableCellRenderer rendererCenter;
    Vector vcData;
    String[] headColumn;
    Vector vcDataQuery;
    TableModelGUI theTableModelGUI;
    DialogShowStatus theDialogShowStatus;
    private String saveFileName;
    private int language = 1;
    private boolean isDbBackup;
    public PanelCostPaymentShareOFA7INOUTHos(HosManage hosmanage)
    {
        theHosManage = hosmanage;
        theHosManage.theHosControl.theHosSubject.theGUISubject.registerGUIManage(this);
        theHosManage.theHosControl.theHosSubject.theAllPanelSubject.registerAllPanelManage(this);
        saveFileName= "OPDHOS";
        cardName = ((Report)Constant.Report.get("12")).ENG_NAME;
        initComponents();
        setLanguage();
        theDialogShowStatus = new DialogShowStatus(theHosManage.theUS.getJFrame(),false,theHosManage);
    
    }
    /**run thread*/
    public void run()
    {
       queryDataByDate(startDate,endDate);
    }    
    /**
     *  ส่งชื่อของ panel ไปให้ Frame หลังที่จะใช้ในการทำ card Layout
     *  @return string เป็น ชื่อ ของ panel เป็นอังกฤษ
     */ 
    public String getCardName()
    {
        return cardName;
    }
    /**
     *  ใช้ในการรับ notify เมื่อมีการ stop service 
     */
    public void notifyStopProcess()
    {
         try
        {
              if(theThread != null)
              {
                  theThread.stop();
              }
              theThread = null;
              System.out.println("In stop in PanelReportARIC");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupChoose = new javax.swing.ButtonGroup();
        jPanelChoose = new javax.swing.JPanel();
        jRadioButtonOPD = new javax.swing.JRadioButton();
        jRadioButtonIPD = new javax.swing.JRadioButton();
        jPanelShow = new javax.swing.JPanel();
        jScrollPanelShow = new javax.swing.JScrollPane();
        jTableShow = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanelChoose.setLayout(new java.awt.GridBagLayout());

        buttonGroupChoose.add(jRadioButtonOPD);
        jRadioButtonOPD.setSelected(true);
        jRadioButtonOPD.setText("ShowPatientOPD");
        jRadioButtonOPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonOPDActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        jPanelChoose.add(jRadioButtonOPD, gridBagConstraints);

        buttonGroupChoose.add(jRadioButtonIPD);
        jRadioButtonIPD.setText("ShowPatientIPD");
        jRadioButtonIPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonIPDActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanelChoose.add(jRadioButtonIPD, gridBagConstraints);

        add(jPanelChoose, java.awt.BorderLayout.NORTH);

        jPanelShow.setLayout(new java.awt.GridBagLayout());

        jTableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPanelShow.setViewportView(jTableShow);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShow.add(jScrollPanelShow, gridBagConstraints);

        add(jPanelShow, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jRadioButtonIPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonIPDActionPerformed
        saveFileName= "IPDHOS";
    }//GEN-LAST:event_jRadioButtonIPDActionPerformed

    private void jRadioButtonOPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonOPDActionPerformed
        saveFileName= "OPDHOS";
    }//GEN-LAST:event_jRadioButtonOPDActionPerformed
    
    public String getSaveFile()
    {
        return saveFileName;
    }
    
    /**
     *  ตรวจสอบค่าเป็นผู้ป่วยในนอก
     */
    private String getChoose()
    {
        if(jRadioButtonOPD.isSelected())
        {   //ผู้ป่วยนอก
            return "0";
        }
        else
        {   //ผู้ป่วยใน
            return "1";
        }
       
        
    }
    
    /**ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     */
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        //setFileDescription();
        startQuery();
        // queryDataByDate(startDate,endDate);
    }
    
    /**
     *  ใช้ในการเริ่มให้ thread เริ่มทำงาน จะต้องมาเรียก method นี้ทุกครั้ง
     * 
     */
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    /**
     *  ส่งค่าข้อมูลกลับไปยัง Frame หลักเมื่อมีการบันทึกออกมาเป็นไฟล์
     *  @return Vector ของ ข้อมูลที่ Query ออกมาได้
     */
    public Vector getData()
    {
        return this.vcData;
    }
    
    /***/
    private void queryDataByDate(String startDate, String endDate)
    {
       
        theDialogShowStatus.setVisible(false);
        theDialogShowStatus.showDialog("กรุณารอสักครู่",false);
 
        vcData = theHosManage.theHosControl.theRPCostPaymentShareOFA7INOUTHosControl.selectCostPaymentShareOFA7INOUTHosByDate(startDate,endDate,getChoose(),isDbBackup);
        headColumn = new String[] {""};
        vcDataQuery = null;
        if(vcData != null)
        {
           
            headColumn = (String[])vcData.get(0);
            vcDataQuery = (Vector)vcData.get(1);
        }
        
        showDataInTable(headColumn, vcDataQuery);
       // theHosManage.theHosControl.theTestReportControl.stop();
      //  theDialogShowStatus.showDialog("กรุณารอสักครู่",true);
        theDialogShowStatus.setVisible(false);       
    }
    
    private void showDataInTable(String[] columnname,Vector vc)
    {
             
        String[] col = columnname;      
        
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);

                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    
                    theTableModelGUI.setValueAt(rowdata[j],i,j);                        
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
                
                //    tm.setValueAt(((OrderItem)this.theOrderControl.listOrderItemByItem(p.getObjectId(),this.vn)).refer_out,i,2);
            }                
                       
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);            
        }
        this.jTableShow.setModel(theTableModelGUI);
        if(col!= null && col.length!= 0)
        {
            setTableListReportPattern(col);
        }
        sendDataToMainReport(size);
    }
    
    
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     *
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererRight == null )
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        String[] col_number = col;
        for(int i=0;i<col_number.length;i++)
        {
            if(i == 9)
            {
                jTableShow.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(20);
            }
            else if((i == 3) || (i == 5))
            {
                jTableShow.getColumnModel().getColumn(i).setCellRenderer(rendererCenter);
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(20);
            }
            else 
            {
                jTableShow.getColumnModel().getColumn(i).setPreferredWidth(20);
            }
        }
    }
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    
    
    /**ใช้ในการ Clear ข้อมูลที่อยู่บนตาราง*/
    private void clearDataGUI()
    {
        this.jRadioButtonOPD.setSelected(true);
        showDataInTable(new String[] {""}, null);
    }
    private void setLanguage()
    {
        this.jRadioButtonOPD.setText(Language.getTextBundle(this.jRadioButtonOPD.getText(),language));
        this.jRadioButtonIPD.setText(Language.getTextBundle(this.jRadioButtonIPD.getText(),language));
    }
    
    public void notifySetInitAllGUI()
    {
        clearDataGUI();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupChoose;
    private javax.swing.JPanel jPanelChoose;
    private javax.swing.JPanel jPanelShow;
    private javax.swing.JRadioButton jRadioButtonIPD;
    private javax.swing.JRadioButton jRadioButtonOPD;
    private javax.swing.JScrollPane jScrollPanelShow;
    private javax.swing.JTable jTableShow;
    // End of variables declaration//GEN-END:variables
    
}
