/*
 * PanelAccident19Cause.java
 *
 * Created on 1 พฤศจิกายน 2548, 18:35 น.
 */

package com.generalreport.gui.panel.report;

import com.generalreport.gui_component.TableModelGUI;
import com.generalreport.subject.ManageAllPanel;
import com.generalreport.subject.ManageGUI;
import com.generalreport.utility.Constant;
import com.generalreport.utility.Language;
import com.generalreport.utility.Report;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JOptionPane;
import java.util.Vector;

import com.generalreport.utility.GUIControl;
import com.generalreport.control.HosManage;
import com.generalreport.gui_component.DialogShowStatus;
/**
 *
 * @author  nu_ojika
 */
public class PanelAccident19Cause extends javax.swing.JPanel implements 
GUIControl,ManageGUI,Runnable,ManageAllPanel {
    
    /**
     * Creates new form PanelAccident19Cause 
     */
    HosManage theHosManage;
    Thread theThread;
    private String startDate;
    private String endDate;    
    final private String cardName;
private DefaultTableCellRenderer rendererCenter;
    
    Vector vcData;
    String[] headColumn;
    Vector vcDataQuery;
    TableModelGUI theTableModelGUI;
    DialogShowStatus theDialogShowStatus;
    int language = 1;
    private boolean isDbBackup;
    
    public PanelAccident19Cause(HosManage hosManage) {
        theHosManage = hosManage;
        theHosManage.theHosControl.theHosSubject.theGUISubject.registerGUIManage(this);
        theHosManage.theHosControl.theHosSubject.theAllPanelSubject.registerAllPanelManage(this);
        
        cardName = ((Report)Constant.Report.get("17")).ENG_NAME;
        initComponents();
        
        theDialogShowStatus = new DialogShowStatus(theHosManage.theUS.getJFrame(),false,theHosManage);
    }
    
    public void notifySetInitAllGUI() {
        clearDataGUI();
    }
    
     /**ใช้ในการ Clear ข้อมูลที่อยู่บนตาราง*/
    private void clearDataGUI()
    {
        showDataInTable(new String[] {""}, null);
        System.out.println("Clear Data in GUI");
    }

    /**run thread*/
    public void run()
    {
       queryAccident19CauseByDate();    
    }    
    /**
     *  ส่งชื่อของ panel ไปให้ Frame หลังที่จะใช้ในการทำ card Layout
     *  @return string เป็น ชื่อ ของ panel เป็นอังกฤษ
     */ 
    public String getCardName()
    {
        return cardName;
    }       
    
    /**แสดงข้อความ วันที่เริ่ม และวันที่สิ้นสุด ต้อง มีปี เดียวกัน*/
    private void showMessageStartYearOver()
    {
        JOptionPane.showMessageDialog(this, Language.getTextBundle("StartYearNotSameEndYear", language),"Warnning",JOptionPane.OK_OPTION);
        
    }
    
     /**
     *  ใช้ในการรับ notify เมื่อมีการ stop service 
     */
    public void notifyStopProcess()
    {
         try
        {
              if(theThread != null)
              {
                  theThread.stop();
              }
              theThread = null;
              System.out.println("In stop in PanelReportARIC");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableVisitQueue = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTableVisitQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        jScrollPane3.setViewportView(jTableVisitQueue);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jScrollPane3, gridBagConstraints);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     *  ใช้ในการดึงข้อมูลรายการLAB ที่ตรตวจภายในโรงพยาบาล
     **/
    private void queryAccident19CauseByDate()
    {
        if(theHosManage.theHosControl.theRPAccident19CauseControl.setDateForQuery(this.startDate,this.endDate))
        {
            theDialogShowStatus.setVisible(false);
            theDialogShowStatus.showDialog("กรุณารอสักครู่",false);

            vcData = theHosManage.theHosControl.theRPAccident19CauseControl.queryAccident19CauseByDate(isDbBackup);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null && vcData.size() > 1)
            {

                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }

            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);       
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    /**ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     */
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        startQuery();
    }
    
    /**
     *  ใช้ในการเริ่มให้ thread เริ่มทำงาน จะต้องมาเรียก method นี้ทุกครั้ง
     * 
     */
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    /**
     *  ส่งค่าข้อมูลกลับไปยัง Frame หลักเมื่อมีการบันทึกออกมาเป็นไฟล์
     *  @return Vector ของ ข้อมูลที่ Query ออกมาได้
     */
    public Vector getData()
    {
        return this.vcData;
    }
    
     private void showDataInTable(String[] columnname,Vector vc)
    {
             
        String[] col = columnname;      
        
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);

                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    
                    theTableModelGUI.setValueAt(rowdata[j],i,j);                        
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
                
                //    tm.setValueAt(((OrderItem)this.theOrderControl.listOrderItemByItem(p.getObjectId(),this.vn)).refer_out,i,2);
            }                
                       
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);            
        }
        this.jTableVisitQueue.setModel(theTableModelGUI);
        if(col!= null && col.length!= 0)
        {
            setTableListReportPattern(col);
        }
        sendDataToMainReport(size);
    }
    
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     *
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        
        String[] col_number = col;
        int size = col_number.length;
        for(int i=0;i<size;i++)
        {
            if(i == 0)
            {
                jTableVisitQueue.getColumnModel().getColumn(i).setPreferredWidth(100);                             
            }
            else
            {                
                jTableVisitQueue.getColumnModel().getColumn(i).setCellRenderer(rendererCenter);
                jTableVisitQueue.getColumnModel().getColumn(i).setPreferredWidth(10);   
            }

        }
    }
    
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theHosManage.theHosControl.theHosSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableVisitQueue;
    // End of variables declaration//GEN-END:variables
      
} 
