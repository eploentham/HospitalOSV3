/*
 * PanelResidentPCU.java
 *
 * Created on 1 มีนาคม 2549, 9:48 น.
 */

package com.generalpcu.gui.panel;
import com.hospital_os.usecase.connection.ConnectionInf;
import com.hospital_os.utility.ConnectionDBMgr;
import com.generalpcu.control.ManageControlSubject;
import com.generalpcu.usecase.CardNameControl;
import com.generalpcu.usecase.GUIResp;
import com.generalpcu.usecase.AllPanelResp;
import com.generalpcu.utility.Report;
import com.generalpcu.utility.Constant;
import com.generalpcu.utility.ComboboxModel;
import com.generalpcu.utility.ComboFix;
import com.generalpcu.utility.Language;
import com.generalpcu.utility.TableModelGUI;
import com.generalpcu.gui.panel.DialogShowStatus;
import java.util.Vector;
import java.awt.CardLayout;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JOptionPane;
import com.generalpcu.object.*;
/**
 *
 * @author  pu
 */
public class PanelResidentPCU extends javax.swing.JPanel implements
CardNameControl,GUIResp,Runnable,AllPanelResp
{
    JFrame theJFrame;
    DialogShowStatus theDialogShowStatus;
    ComboboxModel theComboboxModel;
    private ManageControlSubject theMCS;
    private String cardName;
    Vector vVillage;
    Vector vResidentReport;
    Vector vAgePortion;
    Vector vcData;
    Vector vcDataQuery;
    Vector vStartEndAge;
    CardLayout layoutAge;
    private int selectedReport;
    private int isSpecifyAge;
    private int isPortion;       
    private int isAllResident;
    private String village;
    private String startAge;
    private String endAge;
    private String agePortion;
    private String startDate;
    private String endDate;
    TableModelGUI theTableModelGUI;
    DefaultTableCellRenderer rendererCenter;
    DefaultTableCellRenderer rendererRight;
    Thread theThread;
    private String[] headColumn;
    private boolean isDbBackup;
    
    /**
     * Creates new form PanelResidentPCU 
     */
    public PanelResidentPCU(ManageControlSubject mcs)
    {
        theMCS = mcs;
        theMCS.theManageSubject.theGUISubject.registerGUIManage(this);
        theMCS.theManageSubject.theAllPanelSubject.registerAllPanelManage(this);
        initComponents();
        cardName = ((Report)Constant.Report.get("4")).ENG_NAME;
        theDialogShowStatus = new DialogShowStatus(theMCS.theUS.getJFrame(),false,theMCS);
        theComboboxModel = new ComboboxModel();
        setLanguage();
        initReport();
        initComboBoxVillage();
        initComboBoxResidentReport();        
        initConboBoxAgePortion();
        initRadioButton();
    }
    
    private void initReport()
    {
        this.selectedReport = 0;    
        this.isAllResident = 1;
        this.isPortion = 1;
    }
    /**
     *เซ็ตค่าให้กับ ComboBox รายงานย่อยทั้งหมดของรายงานประชากร
     *@Author pu
     *@Date 01/03/2006
     */
    private void initComboBoxResidentReport()
    {
        vResidentReport = this.theMCS.theManageControl.theComboBoxControl.listResidenrReport();
        theComboboxModel.initComboBox(this.jComboBoxResidentReport, vResidentReport);
        theComboboxModel.setCodeComboBox(this.jComboBoxResidentReport, "0");
    }
    
    /**
     *เซ็ตค่าให้กับ ComboBox หมู่บ้าน
     *@Author pu
     *@Date 23/02/2006
     */
    private void initComboBoxVillage()
    {
        vVillage = new Vector();
        vVillage = theMCS.theManageControl.theComboBoxControl.listVillage();
        theComboboxModel.initComboBox(this.jComboBoxVillage, vVillage);
        theComboboxModel.setCodeComboBox(this.jComboBoxVillage, "0");
    }
    
    /**
     *เซ็ตค่าให้กับ ComboBox ช่วงอายุประชากร
     *@Author pu
     *@Date 04/03/2006
     */
    private void initConboBoxAgePortion()
    {
        vAgePortion = new Vector();
        vAgePortion = theMCS.theManageControl.theComboBoxControl.listAgePortion();
        theComboboxModel.initComboBox(this.jComboBoxAgePortion, vAgePortion);
        theComboboxModel.setCodeComboBox(this.jComboBoxAgePortion, "0");
    }    
    
    /**
     *เซ็ต การทำงานของ component  
     *@Author pu
     *@Date 31/07/2006
     */
    private void initRadioButton()
    {
        if(jRadioButtonAllResident.isSelected())
        {
            setEnableGO(false);
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabelResidentReport = new javax.swing.JLabel();
        jComboBoxResidentReport = new javax.swing.JComboBox();
        jLabelVillage = new javax.swing.JLabel();
        jComboBoxVillage = new javax.swing.JComboBox();
        jRadioButtonAllResident = new javax.swing.JRadioButton();
        jRadioButtonSpecifyAge = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jPanelSelectAgePortion = new javax.swing.JPanel();
        jComboBoxAgePortion = new javax.swing.JComboBox();
        jPanelFixAgePortion = new javax.swing.JPanel();
        jLabelStartAge = new javax.swing.JLabel();
        integerTextFieldStartAge = new com.hospital_os.utility.IntegerTextField();
        jLabelEndAge = new javax.swing.JLabel();
        integerTextFieldEndAge = new com.hospital_os.utility.IntegerTextField();
        jRadioButtonSpecifyPosition = new javax.swing.JRadioButton();
        jRadioButtonAgePosition = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        fixedColumnScrollPane1 = new com.hospital_os.utility.FixedColumnScrollPane();
        jTableResident = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabelMark = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelResidentReport.setText("ResidentReport");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabelResidentReport, gridBagConstraints);

        jComboBoxResidentReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxResidentReportActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jComboBoxResidentReport, gridBagConstraints);

        jLabelVillage.setText("Village");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabelVillage, gridBagConstraints);

        jComboBoxVillage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxVillageActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jComboBoxVillage, gridBagConstraints);

        buttonGroup1.add(jRadioButtonAllResident);
        jRadioButtonAllResident.setSelected(true);
        jRadioButtonAllResident.setText("AllResident");
        jRadioButtonAllResident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAllResidentActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        jPanel1.add(jRadioButtonAllResident, gridBagConstraints);

        buttonGroup1.add(jRadioButtonSpecifyAge);
        jRadioButtonSpecifyAge.setText("SpecifyAge");
        jRadioButtonSpecifyAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSpecifyAgeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jRadioButtonSpecifyAge, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanelSelectAgePortion.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSelectAgePortion.add(jComboBoxAgePortion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel6.add(jPanelSelectAgePortion, gridBagConstraints);

        jPanelFixAgePortion.setLayout(new java.awt.GridBagLayout());

        jLabelStartAge.setText("StartAge");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelFixAgePortion.add(jLabelStartAge, gridBagConstraints);

        integerTextFieldStartAge.setColumns(3);
        integerTextFieldStartAge.setMinimumSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelFixAgePortion.add(integerTextFieldStartAge, gridBagConstraints);

        jLabelEndAge.setText("EndAge");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelFixAgePortion.add(jLabelEndAge, gridBagConstraints);

        integerTextFieldEndAge.setColumns(3);
        integerTextFieldEndAge.setMinimumSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelFixAgePortion.add(integerTextFieldEndAge, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanel6.add(jPanelFixAgePortion, gridBagConstraints);

        buttonGroup2.add(jRadioButtonSpecifyPosition);
        jRadioButtonSpecifyPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSpecifyPositionActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel6.add(jRadioButtonSpecifyPosition, gridBagConstraints);

        buttonGroup2.add(jRadioButtonAgePosition);
        jRadioButtonAgePosition.setSelected(true);
        jRadioButtonAgePosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAgePositionActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel6.add(jRadioButtonAgePosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel1.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTableResident.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableResident.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        fixedColumnScrollPane1.setViewportView(jTableResident);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(fixedColumnScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelMark.setText("mark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jLabelMark, gridBagConstraints);

        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(2);
        jTextArea1.setText("- \u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e0a\u0e32\u0e01\u0e23\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 \u0e41\u0e22\u0e01\u0e15\u0e32\u0e21\u0e40\u0e1e\u0e28 \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e19\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e0a\u0e32\u0e01\u0e23\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e40\u0e02\u0e15\u0e23\u0e31\u0e1a\u0e1c\u0e34\u0e14\u0e0a\u0e2d\u0e1a\n- \u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e0a\u0e32\u0e01\u0e23\u0e17\u0e38\u0e01\u0e0a\u0e48\u0e27\u0e07\u0e2d\u0e32\u0e22\u0e38 \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e19\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e0a\u0e32\u0e01\u0e23 \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e40\u0e02\u0e15\u0e23\u0e31\u0e1a\u0e1c\u0e34\u0e14\u0e0a\u0e2d\u0e1a \u0e40\u0e09\u0e1e\u0e32\u0e30\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07\u0e43\u0e14\u0e0a\u0e48\u0e27\u0e07\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e02\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07\u0e2d\u0e32\u0e22\u0e38 \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49 setup \u0e44\u0e27\u0e49\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e01\u0e32\u0e23\u0e19\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e0a\u0e32\u0e01\u0e23\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setMinimumSize(new java.awt.Dimension(400, 50));
        jTextArea1.setPreferredSize(new java.awt.Dimension(494, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jTextArea1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(jPanel3, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jComboBoxVillageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxVillageActionPerformed

      
    }//GEN-LAST:event_jComboBoxVillageActionPerformed

    private void jRadioButtonSpecifyPositionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonSpecifyPositionActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonSpecifyPositionActionPerformed
        
        if(jRadioButtonSpecifyPosition.isSelected())
        {
            this.isSpecifyAge = 1;
            this.isAllResident = 0;
            this.isPortion = 0;
            jRadioButtonAgePosition.setSelected(false);
            integerTextFieldStartAge.requestFocus();
            setSubEnableGO(true);
        }
    }//GEN-LAST:event_jRadioButtonSpecifyPositionActionPerformed

    private void jRadioButtonAgePositionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonAgePositionActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonAgePositionActionPerformed
        
        if(jRadioButtonAgePosition.isSelected())
        {
            this.isAllResident = 0;
            this.isPortion = 1;
            isSpecifyAge = 1;
            jRadioButtonSpecifyPosition.setSelected(false);  
            jComboBoxAgePortion.requestFocus();
            setSubEnableGO(false);
        }
    }//GEN-LAST:event_jRadioButtonAgePositionActionPerformed

    private void jRadioButtonSpecifyAgeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonSpecifyAgeActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonSpecifyAgeActionPerformed
        
        if(jRadioButtonSpecifyAge.isSelected())
        {
            isSpecifyAge = 1;
            this.isAllResident = 0;
            this.isPortion = 1;
            jRadioButtonAllResident.setSelected(false);
            setEnableGO(true);
            //integerTextFieldStartAge.requestFocus();
        }
      /*  else
        {
            isSpecifyAge = 0;
            //this.theComboboxModel.setCodeComboBox(this.jComboBoxAgePortion, "0");
        }*/
    }//GEN-LAST:event_jRadioButtonSpecifyAgeActionPerformed

    private void jRadioButtonAllResidentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonAllResidentActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonAllResidentActionPerformed
        //ค้นหาจำนวนประชากรทั้งหมด
        if(jRadioButtonAllResident.isSelected())
        {
            this.isAllResident = 1;   
            isSpecifyAge = 0; 
            jRadioButtonSpecifyAge.setSelected(false);  
            setEnableGO(false);
           // setAgePortionEnable(false);
        }
        /*else
        {
            this.isAllResident = 0;
            jRadioButtonAllResident.setSelected(false);    
            setEnableGO(true);
            setAgePortionEnable(true);
        }*/
    }//GEN-LAST:event_jRadioButtonAllResidentActionPerformed

    private void jComboBoxResidentReportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxResidentReportActionPerformed
    {//GEN-HEADEREND:event_jComboBoxResidentReportActionPerformed
        
        if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("0"))
        {
            jRadioButtonAllResident.setEnabled(true);//setVisible(true);
            jRadioButtonSpecifyAge.setEnabled(true);//setVisible(true);
//            jPanel6.setEnabled(true);//setVisible(true);
            //ปรับแก้ให้สามารถ Enable true ในกรอบเลือกอายุ sumo 24/10/2549
            setEnableGO(true);
        }
        else
        {
            jRadioButtonAllResident.setEnabled(false);//setVisible(false);
            jRadioButtonSpecifyAge.setEnabled(false);//setVisible(false);
//            jPanel6.setEnabled(false);//setVisible(false);
            //ปรับแก้ให้สามารถ Enable false ในกรอบเลือกอายุ sumo 24/10/2549
            setEnableGO(false);
        }
        this.setSelectedReport();
    }//GEN-LAST:event_jComboBoxResidentReportActionPerformed
    /**
     *กำหนดสถานะการแสดงผลของ GUI ของการระบุเงื่อนไขการเลือกอายุในการดึงรายงาน
     */
    private void setEnableGO(boolean flag)
    {
        if(flag)
        {
            jRadioButtonAgePosition.setSelected(true);
            jRadioButtonAgePosition.setEnabled(flag);
            jComboBoxAgePortion.setEnabled(flag);
            
            jRadioButtonSpecifyPosition.setSelected(false);
            jRadioButtonSpecifyPosition.setEnabled(flag);
    
        }
        else
        {
            jRadioButtonAgePosition.setEnabled(flag);
            jComboBoxAgePortion.setEnabled(flag);
            jRadioButtonSpecifyPosition.setEnabled(flag);
            jLabelStartAge.setEnabled(flag);
            integerTextFieldStartAge.setEnabled(flag);
            jLabelEndAge.setEnabled(flag);
            integerTextFieldEndAge.setEnabled(flag);
        }
    }
    /**
     *กำหนดสถานะการแสดงผลของ GUI ของการระบุช่วงอายุ
     */
    private void setSubEnableGO(boolean isSpecifyPosition)
    {
        integerTextFieldStartAge.setText("");
        integerTextFieldEndAge.setText("");
        
        if(isSpecifyPosition)
        {
            // กำหนดช่วงอายุเอง
            jComboBoxAgePortion.setEnabled(false);
            
            jLabelStartAge.setEnabled(true);
            integerTextFieldStartAge.setEnabled(true);
            jLabelEndAge.setEnabled(true);
            integerTextFieldEndAge.setEnabled(true);
            
        }
        else
        {
            // เลือกช่วงอายุ
            jComboBoxAgePortion.setEnabled(true);
            
            jLabelStartAge.setEnabled(false);
            integerTextFieldStartAge.setEnabled(false);
            jLabelEndAge.setEnabled(false);
            integerTextFieldEndAge.setEnabled(false);
        }
    }
    /**
     *กำหนดสถานะการแสดงผลของ GUI ของการระบุเงื่อนไขการเลือกอายุในการดึงรายงาน
     *@param flag เป็น boolean ที่มีค่าเป็น true และ false
     * ถ้าเป็น true แสดงว่าระบุช่วงอายุในการดึงข้อมูลประชากร Enable GUI ของการดึงรายงานด้วยช่วงอายุ
     * ถ้าเป็น false แสดงว่าค้นหาข้อมูลประชากรทั้งหมด ไม่ขึ้นอยู่กับช่วงอายุ Disable GUI ของการดึงรายงานด้วยช่วงอายุ
     *@Author pu
     *@date 03/04/2006
     */
    private void setAgePortionEnable(boolean flag)
    {
        if(!flag)
        {
            //this.jRadioButtonSpecifyAge.setSelected(flag);
            jRadioButtonSpecifyAgeActionPerformed(null);
        }
        //this.jRadioButtonSpecifyAge.setEnabled(flag);
        jLabelStartAge.setEnabled(flag);
        integerTextFieldStartAge.setEnabled(flag);
        jLabelEndAge.setEnabled(flag);
        integerTextFieldEndAge.setEnabled(flag);
        this.jComboBoxAgePortion.setEnabled(flag);
    }
    
    /**
     *ใช้สำหรับตรวจสอบว่า ผู้ใช้เลือกรายงานใด สำหรับดึงข้อมูล
     *@Date 04/03/2006
     *@Author pu
     */
    private void setSelectedReport()
    {
        //รายงายจำนวนประชากร แยกตามกลุ่มอายุ แยกตามหมู่บ้าน
        if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("0"))
        {
            this.selectedReport = 0;
            this.isAllResident = 1;
            //this.jRadioButtonAllResident.setSelected(true);
        }
        //รายงานรายชื่อเด็กอายุไม่เกิน 72 เดือน หรือ 0-5 ปี จำแนกตามหมู่บ้าน
        else if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("1"))
        {
            this.selectedReport = 1;
            this.isAllResident = 0;
            //this.jRadioButtonAllResident.setSelected(false);
        }
        //รายงานประชากรในเขตรับผิดชอบ เพศหญิง อายุ 15 ปีขึ้นไป
        else if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("2"))
        {
            this.selectedReport = 2;
            this.isAllResident = 0;
            //this.jRadioButtonAllResident.setSelected(false);
        }
        //รายงานการเสียชีวิตของประชากรในเขตรับผิดชอบ พร้อมระบุสาเหตุการเสียชีวิต
        else if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("3"))
        {
            this.selectedReport = 3;
            this.isAllResident = 0;
            //this.jRadioButtonAllResident.setSelected(false);
        }
    }
    /**
     *ให้ค่าที่ได้จากการดึงข้อมูล
     *@return Vector ของข้อมูลที่ได้จากการดึงรายงาน
     *@Author pu
     *@Date 04/03/2006
     */
    public Vector getUncontagiousPCU()
    {
        return this.vcData;
    }
    
    /**
     *ให้ชื่อของรายงานตามที่ได้เลือกจากหน้า GUI
     *@return String ที่เป็นชื่อของรายงาน ตามประเภทของรายงาน
     *@Author pu
     *@Date 04/03/2006
     */
    public String getNameReport()
    {
        if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("0"))
        {
            if(this.isAllResident == 1 && this.isSpecifyAge == 0)
            {
                return "_AllResident";
            }
            else
            {
                String name = "";
                this.selectedReport = 0;
                //รายงายจำนวนประชากร แยกตามกลุ่มอายุ แยกตามหมู่บ้าน
                if(this.isSpecifyAge == 1 && this.isPortion ==1)
                {
                    name = this.theComboboxModel.getStringConboBox(jComboBoxAgePortion);
                    return "_AgePortion_" + name;
                }
                else
                {
                    name = this.startAge + "-" + this.endAge;
                    return "_AgePortion_" + name;
                }
                
            }
        }
        //รายงานรายชื่อเด็กอายุไม่เกิน 72 เดือน หรือ 0-5 ปี จำแนกตามหมู่บ้าน
        else if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("1"))
        {
            this.selectedReport = 1;
            return "_Child0_5";
        }
        //รายงานประชากรในเขตรับผิดชอบ เพศหญิง อายุ 15 ปีขึ้นไป
        else if(this.theComboboxModel.getCodeComboBox(this.jComboBoxResidentReport).equals("2"))
        {
            this.selectedReport = 2;
            return "_Women_15Up";
        }
        //รายงานการเสียชีวิตของประชากรในเขตรับผิดชอบ พร้อมระบุสาเหตุการเสียชีวิต
        else
        {
            this.selectedReport = 3;
            return "_Death";
        }
    }
    
    
    /**
     *  ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     **/
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        startQuery();
    }
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    
    private void showDataInTable(String[] columnname,Vector vc)
    {
        String[] col = columnname;
        
        int size = 0;
        if(vc != null)
        {   
            theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);
                
                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    theTableModelGUI.setValueAt(rowdata[j],i,j);
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
            }
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);
        }
        this.jTableResident.setModel(theTableModelGUI);
        
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        if(col!= null && col.length!= 0)
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableResident, 1, 80, rendererCenter);
            setTableListReportPattern(col);
        }
        else
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableResident, 0, 80,rendererCenter);
            setTableListReportPattern(new String[0]);
        }
        sendDataToMainReport(size);
    }
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     *
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        if(rendererRight == null)
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        
        String[] col_number = col;
        int size = col_number.length;
        for(int i=0;i<size-1;i++)
        {   //จำนวนประชากรแยกตามกลุ่มอายุ
            if(this.selectedReport == 0)
            {
                if(i == 0)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(150);
                }
                else
                {
                    jTableResident.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(150);
                }
            }
            //รายงานรายชื่อเด็กอายุไม่เกิน 72 เดือน หรือ 0-5 ปี จำแนกตามหมู่บ้าน
            else if(this.selectedReport == 1)
            {
                if(i == 0)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(150);
                }
                else if(i==1 || i==2)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(100);
                }
                else if(i==3)
                {
                    jTableResident.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(80);
                }
                else if(i==4)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(120);
                }
                else if(i == 5 || i == 6 || i == 7)
                {
                    jTableResident.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(60);
                }
                else
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(80);
                }
                
            }
            //รายงานประชากรในเขตรับผิดชอบ เพศหญิง อายุ 15 ปีขึ้นไป
            else if(this.selectedReport == 2)
            {
                if(i == 0)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(150);
                }
                else if(i==1 || i==2)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(100);
                }
                else if(i==3)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(150);
                }
                else
                {
                    jTableResident.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(80);
                }
            }
            //รายงานการเสียชีวิตของประชากรในเขตรับผิดชอบ พร้อมระบุสาเหตุการเสียชีวิต
            else if(this.selectedReport == 3)
            {
                if(i == 0)
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(150);
                }
                else
                {
                    jTableResident.getColumnModel().getColumn(i).setPreferredWidth(100);
                }
            }
        }
    }
    
    public String getCardName()
    {
        return this.cardName;
    }
    
    public void notifyStopProcess()
    {
        try
        {
            if(theThread != null)
            {
                theThread.stop();
            }
            theThread = null;
            System.out.println("In stop in PanelResidentPCU");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void run()
    {
        this.setSelectedReport();
        this.village = this.theComboboxModel.getCodeComboBox(jComboBoxVillage);
        //เลือกรายงาน จำนวนประชากรแยกตามกลุ่มอายุ
        if(this.selectedReport == 0)
        {   //เลือกจำนวนประชากรทั้งหมด
            if(this.isAllResident == 1 && isSpecifyAge == 0)
            {
                queryAllResidentByDate();
            }
            else
            {
                if(this.isPortion == 1)
                {
                    this.agePortion = this.theComboboxModel.getCodeComboBox(this.jComboBoxAgePortion);
                }
                else
                {
                    this.startAge = this.integerTextFieldStartAge.getText();
                    this.endAge = this.integerTextFieldEndAge.getText();
                }
                queryResidentAgePortionByDate();
            }
           /* else if(this.isAllResident == 0 && this.isSpecifyAge == 0)
            {
                // เพิ่มกรณีที่ไม่เลือกอะไรเลย ojika 22/06/2549
                JOptionPane.showMessageDialog(this,Language.getTextBundle("ยังไม่ได้เลือกเงื่อนไขของรายงาน จำนวนประชากรแยกตามกลุ่มอายุ โปรแกรมจะตั้งค่าปกติไว้ที่ จำนวนประชากรทั้งหมด แยกตามเพศ"),Language.getTextBundle("Warning"),JOptionPane.OK_OPTION);
                jRadioButtonAllResident.setSelected(true);
                this.isAllResident = 1;
                queryAllResidentByDate();
            }*/
            
        }
        else if(this.selectedReport == 1)
        {
            queryResidentChild0_5ByDate();
        }
        else if(this.selectedReport == 2)
        {
            queryResidentWomen_15UpByDate();
        }
        else
        {
            queryResidentDeathByDate();
        }
    }
    /**
     *ค้นหาข้อมูลรายงานจำนวนประชากรทั้งหมด แยกตามเพศ และหมู่บ้าน
     *@Author pu
     *@Date 03/04/2006
     */
    private void queryAllResidentByDate()
    {
        theDialogShowStatus.setVisible(true);
        theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
        this.vcData = this.theMCS.theManageControl.theGeneralPCUControl.queryAllResident(this.village, isDbBackup);
        headColumn = new String[] {""};
        vcDataQuery = null;
        if(vcData != null)
        {
            headColumn = (String[])vcData.get(0);
            vcDataQuery = (Vector)vcData.get(1);
        }
        
        showDataInTable(headColumn, vcDataQuery);
        theDialogShowStatus.setVisible(false);
    }
    /**
     *ค้นหาข้อมูลรายงานจำนวนประชากร แยกตามกลุ่มอายุ จำแนกตามหมู่บ้าน
     *@Author pu
     *@Date 04/03/2006
     */
    private void queryResidentAgePortionByDate()
    {
        if(this.theMCS.theManageControl.theGeneralPCUControl.setDateForQuery(this.startDate, this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            if(this.isPortion == 0)
            {
                if(this.startAge != null && this.endAge != null)
                {
                    if(this.startAge.equals("") || this.endAge.equals(""))
                    {
                        JOptionPane.showMessageDialog(this,Language.getTextBundle("EmptyAge"),Language.getTextBundle("Warning"),JOptionPane.OK_OPTION);
                        this.vcData = null;
                        showDataInTable(null, null);
                        integerTextFieldStartAge.requestFocus();
                        return;
                    }
                }
            }
            vStartEndAge = this.theMCS.theManageControl.theComboBoxControl.getStartEndAge();
            this.vcData = this.theMCS.theManageControl.theGeneralPCUControl.queryResidentAgePortion(
                    this.village
                    , this.startAge
                    ,this.endAge
                    ,this.agePortion
                    ,this.isSpecifyAge
                    , this.isPortion
                    ,vStartEndAge
                    ,isDbBackup);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }
            
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    /**
     *ค้นหาข้อมูลรายงานรายชื่อเด็กอายุไม่เกิน 72 เดือน (0-5 ปี) จำแนกตามหมู่บ้าน
     *@Author pu
     *@Date 04/03/2006
     */
    private void queryResidentChild0_5ByDate()
    {
        if(this.theMCS.theManageControl.theGeneralPCUControl.setDateForQuery(this.startDate, this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            this.vcData = this.theMCS.theManageControl.theGeneralPCUControl.queryResidentChild0_5(this.village, isDbBackup);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }
            
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    /**
     *ค้นหาข้อมูลรายงานประชากรที่อยู่ในเขตรับผิดชอบ เพศหญิง อายุ มากกว่า 15 ปี
     *@Author pu
     *@Date 04/03/2006
     */
    private void queryResidentWomen_15UpByDate()
    {
        if(this.theMCS.theManageControl.theGeneralPCUControl.setDateForQuery(this.startDate, this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            this.vcData = this.theMCS.theManageControl.theGeneralPCUControl.queryResidentWomenUpper15(this.village, isDbBackup);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }
            
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    /**
     *ค้นหาข้อมูลรายงานรายงานการเสียชีวิตของประชากร แต่ละหมู่บ้าน พร้อมระบุสาเหตุการเสียชีวิต
     *@Author pu
     *@Date 04/03/2006
     */
    private void queryResidentDeathByDate()
    {
        if(this.theMCS.theManageControl.theGeneralPCUControl.setDateForQuery(this.startDate, this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            this.vcData = this.theMCS.theManageControl.theGeneralPCUControl.queryResidentDeath(this.village, isDbBackup);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);
            }
            
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    public void notifySetInitAllGUI()
    {
        clearDataGUI();
    }
    
    /**ใช้ในการ Clear ข้อมูลที่อยู่บนตาราง*/
    private void clearDataGUI()
    {
        System.out.println("Clear Data in GUI");
        vcData = null;
        showDataInTable(null,null);
    }
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theMCS.theManageSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theMCS.theManageSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    /**แสดงข้อความ วันที่เริ่ม และวันที่สิ้นสุด ต้อง มีปี เดียวกัน*/
    private void showMessageStartYearOver()
    {
        JOptionPane.showMessageDialog(this, Language.getTextBundle("StartYearNotSameEndYear"),Language.getTextBundle("Warning"),JOptionPane.OK_OPTION);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private com.hospital_os.utility.FixedColumnScrollPane fixedColumnScrollPane1;
    private com.hospital_os.utility.IntegerTextField integerTextFieldEndAge;
    private com.hospital_os.utility.IntegerTextField integerTextFieldStartAge;
    private javax.swing.JComboBox jComboBoxAgePortion;
    private javax.swing.JComboBox jComboBoxResidentReport;
    private javax.swing.JComboBox jComboBoxVillage;
    private javax.swing.JLabel jLabelEndAge;
    private javax.swing.JLabel jLabelMark;
    private javax.swing.JLabel jLabelResidentReport;
    private javax.swing.JLabel jLabelStartAge;
    private javax.swing.JLabel jLabelVillage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelFixAgePortion;
    private javax.swing.JPanel jPanelSelectAgePortion;
    private javax.swing.JRadioButton jRadioButtonAgePosition;
    private javax.swing.JRadioButton jRadioButtonAllResident;
    private javax.swing.JRadioButton jRadioButtonSpecifyAge;
    private javax.swing.JRadioButton jRadioButtonSpecifyPosition;
    private javax.swing.JTable jTableResident;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private void setLanguage()
    {
        jLabelEndAge.setText(Language.getTextBundle(jLabelEndAge.getText()));
        jLabelResidentReport.setText(Language.getTextBundle(jLabelResidentReport.getText()));
        jLabelStartAge.setText(Language.getTextBundle(jLabelStartAge.getText()));
        jLabelVillage.setText(Language.getTextBundle(jLabelVillage.getText()));
        jRadioButtonSpecifyAge.setText(Language.getTextBundle(jRadioButtonSpecifyAge.getText()));
        jRadioButtonAllResident.setText(Language.getTextBundle(jRadioButtonAllResident.getText()));
        jLabelMark.setText(Language.getTextBundle(jLabelMark.getText()));
    } 
}
