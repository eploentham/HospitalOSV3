/*
 * PanelNutritionPCU.java
 *
 * Created on 10 กุมภาพันธ์ 2549, 9:26 น.
 */

package com.generalpcu.gui.panel;


import com.generalpcu.usecase.*;
import com.generalpcu.utility.Constant;
import com.generalpcu.utility.Report;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JOptionPane;
import java.util.Vector;
import com.generalpcu.control.ManageControlSubject;
import com.generalpcu.utility.TableModelGUI;
import com.generalpcu.gui.panel.DialogShowStatus;
import com.generalpcu.utility.Language;
/**
 *
 * @author  pu
 */
public class PanelNutritionPCU extends javax.swing.JPanel  implements 
CardNameControl,GUIResp,Runnable,AllPanelResp
{
    TableModelGUI theTableModelGUI;
    DefaultTableCellRenderer rendererCenter;
    DefaultTableCellRenderer rendererRight;
    ManageControlSubject theMSC;
    private String cardName = "";
    private String startDate = "";
    private String endDate ="";
    private String[] headColumn;
    private Vector vcData;
    private Vector vcDataQuery;
    Thread theThread;
    DialogShowStatus theDialogShowStatus;
    private boolean isDbBackup;
    
    /** Creates new form PanelNutritionPCU */
    public PanelNutritionPCU(ManageControlSubject msc)
    {
        theMSC = msc;
        theMSC.theManageSubject.theGUISubject.registerGUIManage(this);
        theMSC.theManageSubject.theAllPanelSubject.registerAllPanelManage(this);
        
        cardName = ((Report)Constant.Report.get("2")).ENG_NAME;
        initComponents();
        setLanguage();
        theDialogShowStatus = new DialogShowStatus(theMSC.theUS.getJFrame(),false,theMSC);
    }    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        fixedColumnScrollPane1 = new com.hospital_os.utility.FixedColumnScrollPane();
        jTableNutrition = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabelMark = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTableNutrition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableNutrition.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        fixedColumnScrollPane1.setViewportView(jTableNutrition);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(fixedColumnScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel3, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelMark.setText("mark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(jLabelMark, gridBagConstraints);

        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(2);
        jTextArea1.setText("\u0e08\u0e33\u0e19\u0e27\u0e19\u0e40\u0e14\u0e47\u0e01 0-5 \u0e1b\u0e35 \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e43\u0e19\u0e2b\u0e21\u0e39\u0e48\u0e1a\u0e49\u0e32\u0e19  \u0e44\u0e14\u0e49\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e40\u0e14\u0e47\u0e01 0-5 \u0e1b\u0e35 \u0e17\u0e35\u0e48\u0e21\u0e35\u0e27\u0e31\u0e19\u0e40\u0e01\u0e34\u0e14\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e02\u0e49\u0e32\u0e07\u0e15\u0e49\u0e19");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setMinimumSize(new java.awt.Dimension(400, 34));
        jTextArea1.setPreferredSize(new java.awt.Dimension(400, 34));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(jTextArea1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
   /**ใช้ในการรับข้อมูลจาก การค้นหา และส่งค่าเข้ามา panel นี้
     *  เพื่อให้ทำการ Query และค้นหารายการตามข้อกำหนดของ panel
     *  @param startDate เป็น String เป็นวันที่เริ่มต้น อยู่ในรูปแบบ yyyy-mm-dd
     *  @param endDate เป็น String เป็นวันที่สิ้นสุด อยู่ในรูปแบบ yyyy-mm-dd
     */
    public void setQueryReport(String startDate, String endDate, boolean dbBackup)
    {
        this.startDate = startDate;
        this.endDate = endDate;
        isDbBackup = dbBackup;
        startQuery();
    }
    /**
     *  ใช้ในการเริ่มให้ thread เริ่มทำงาน จะต้องมาเรียก method นี้ทุกครั้ง
     */
    private void startQuery()
    {
        theThread = new Thread(this);
        theThread.start();
    }
    
    /**ใช้ในการ Clear ข้อมูลที่อยู่บนตาราง*/
    private void clearDataGUI()
    {
        vcData = null;
        showDataInTable(null,null);
        System.out.println("Clear Data in GUI");
    }
    
    public void run()
    {
        queryNutritionByDate();
    }
    
    /**
     *  ใช้ในการดึงข้อมูลรายการLAB ที่ตรตวจภายในโรงพยาบาล
     **/
    private void queryNutritionByDate()
    {
        if(theMSC.theManageControl.theGeneralPCUControl.setDateForQuery(this.startDate,this.endDate))
        {
            theDialogShowStatus.setVisible(true);
            theDialogShowStatus.showDialog(Language.getTextBundle("PleaseWait"),false);
            
            vcData = theMSC.theManageControl.theGeneralPCUControl.queryNutritionByDate(isDbBackup);
            headColumn = new String[] {""};
            vcDataQuery = null;
            if(vcData != null)
            {                
                headColumn = (String[])vcData.get(0);
                vcDataQuery = (Vector)vcData.get(1);                
            }            
            showDataInTable(headColumn, vcDataQuery);
            theDialogShowStatus.setVisible(false);
        }
        else
        {
            showMessageStartYearOver();
        }
    }
    
    /**แสดงข้อความ วันที่เริ่ม และวันที่สิ้นสุด ต้อง มีปี เดียวกัน*/
    private void showMessageStartYearOver()
    {
        JOptionPane.showMessageDialog(this, Language.getTextBundle("StartYearNotSameEndYear"),Language.getTextBundle("Warning"),JOptionPane.OK_OPTION);
    }
    
    public String getCardName()
    {
        return cardName;
    }
    
    public Vector getNutrition()
    {
        return this.vcData;
    }
    
    public void notifySetInitAllGUI()
    {
        clearDataGUI();
    }
    
    public void notifyStopProcess()
    {
        try
        {
            if(theThread != null)
            {
                theThread.stop();
            }
            theThread = null;
            System.out.println("In stop in PanelNutritionPCU");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    
    private void showDataInTable(String[] columnname,Vector vc)
    {
        String[] col = columnname;
        
        int size = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            size = vc.size();
            //วนลูป ต่อ 1 แถว
            for(int i=0 ;i<size; i++)
            {    //วนลูปตของ column
                String[] rowdata = (String[])vc.get(i);
                
                for(int j = 0 ; j < rowdata.length ;j++)
                {
                    theTableModelGUI.setValueAt(rowdata[j],i,j);
                }
                theTableModelGUI.setEditingCol(rowdata.length+1);
                rowdata = null;
            }
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);
        }
        this.jTableNutrition.setModel(theTableModelGUI);
        //pu : Fix column แรกของ GUI ให้อยู่กับที่
        if(col!= null && col.length!= 0)
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableNutrition, 1, 80);
            //fixedColumnScrollPane1.setFixedColumnScrollPane(jTableNutrition, 2, 120);
            setTableListReportPattern(col);
        }
        else
        {
            fixedColumnScrollPane1.setFixedColumnScrollPane(jTableNutrition, 0, 50);
            setTableListReportPattern(new String[0]);
        }        
        sendDataToMainReport(size);
    }
    
    /**ใช้ในการแสดงความกว้างของคอลัมน์
     *@param col เป็น Array ของ String ที่เก็บหัว column สำหรับนำมานับจำนวน Column ที่ต้องสร้างในตาราง
     *
     */
    private void setTableListReportPattern(String [] col)
    {
        if(rendererCenter == null )
        {
            rendererCenter = new DefaultTableCellRenderer();
        }
        if(rendererRight == null)
        {
            rendererRight = new DefaultTableCellRenderer();
        }
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        String[] col_number = col;
        int size = col_number.length;
        for(int i=0;i<size-1;i++)
        {
           if(i==0)
            {
                jTableNutrition.getColumnModel().getColumn(i).setPreferredWidth(150);
            }
            else if(i==1)
            {
                jTableNutrition.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableNutrition.getColumnModel().getColumn(i).setPreferredWidth(180);
            }                    
            else if(i==2 || i==3)
            {
                jTableNutrition.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableNutrition.getColumnModel().getColumn(i).setPreferredWidth(150);
            }
            else if(i==4 || i==5)
            {
                jTableNutrition.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableNutrition.getColumnModel().getColumn(i).setPreferredWidth(100);
            }
            else
            {
                jTableNutrition.getColumnModel().getColumn(i).setCellRenderer(rendererRight);
                jTableNutrition.getColumnModel().getColumn(i).setPreferredWidth(80);
            }
                   
        }
    }
    
    /**
     *  ใช้ในการส่งสถานะให้แสดง ปุ่มบันทึกหรือไม่ โดยจะตรวจสอบจาก size ของตาราง
     */
    private void sendDataToMainReport(int size)
    {
        theMSC.theManageSubject.theMainReportSubject.notifyShowSaveToFile(false);
        if(size >0)
        {
            theMSC.theManageSubject.theMainReportSubject.notifyShowSaveToFile(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.FixedColumnScrollPane fixedColumnScrollPane1;
    private javax.swing.JLabel jLabelMark;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTable jTableNutrition;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    public void setLanguage()
    {
        jLabelMark.setText(Language.getTextBundle(jLabelMark.getText()));
    }
}
