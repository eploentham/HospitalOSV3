/*
 * PanelReportFile.java
 *
 * Created on 9 กุมภาพันธ์ 2549, 14:40 น.
 */

package com.generalpcu.gui.panel;

import com.generalpcu.utility.Constant;
import com.generalpcu.utility.Report;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import java.util.*;
import java.awt.*;
import java.io.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.event.*;
import javax.swing.text.*;

import com.generalpcu.usecase.ShowPanelSelectResp;
import com.generalpcu.usecase.MainReportResp;
import com.generalpcu.control.ManageControlSubject;
import com.generalpcu.control.ManageControl;
import com.generalpcu.usecase.ManageSubject;
import com.generalpcu.utility.DateUtil;
import com.generalpcu.utility.Language;
/**
 *
 * @author  pu
 */
public class PanelReportFile extends javax.swing.JPanel implements ShowPanelSelectResp,MainReportResp
{
    public ManageControlSubject theMSC;
    MainReport theMainReport;
    ComboboxModel theComboboxModel;
    public String cur_path = System.getProperty("user.dir");
    private JFileChooser  chooser;
    private Report report ;
    private String cardname = "";
    private String cardname_old = "";
    private String fileType = "";
    private String oldPath = ".";
    private String select_path = "";
    private String startDate = "";
    private String endDate = "";
    private boolean isSelectBetweenDate = false;
    private boolean isProcessRunning = false;
    HashMap theHashMap;
    /** Creates new form PanelReportFile */
    public PanelReportFile(ManageControlSubject msc)
    {
        theMSC = msc;
        theMSC.theManageSubject.theMainReportSubject.registerMainReportManage(this);
        theMSC.theManageSubject.theShowPanelSelectSubject.registerGUIManage(this);
        theMainReport = new MainReport(theMSC);
        initComponents();
        
        setControlSubject();
        theComboboxModel = new ComboboxModel();
        initComboBox();
        setLanguage();
        getObjectReport();
        addCardReport();
        setGuiForShowReport(320,60);        
    }
    
    public void setControlSubject()
    {
        System.out.println("--- Pass set connection");
        this.setEnableGUI(true);
    }
    
    /**ใช้ในการกำหนดให้ Combobox แสดงค่าเริ่มต้น*/
    public void initComboBox()
    {
        initReportName();
        initReportType();
    }
    
    public void getObjectReport()
    {
        theHashMap = Constant.Report;
    }   
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelDetail = new javax.swing.JPanel();
        jPanelControl = new javax.swing.JPanel();
        jLabelReport = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox();
        jLabelType = new javax.swing.JLabel();
        jLabelStartDate = new javax.swing.JLabel();
        jComboBoxReport = new javax.swing.JComboBox();
        jButtonSave = new javax.swing.JButton();
        jButtonView = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        dateComboBoxStartDate = new com.reportcenter.utility.DateComboBox();
        jLabelEndDate = new javax.swing.JLabel();
        dateComboBoxEndDate = new com.reportcenter.utility.DateComboBox();
        jCheckBoxDBBackup = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jButtonBackToMain = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanelDetail.setLayout(new java.awt.CardLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanelDetail, gridBagConstraints);

        jPanelControl.setLayout(new java.awt.GridBagLayout());

        jLabelReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/standardReport/images/assign_permission.gif"))); // NOI18N
        jLabelReport.setText("รูปแบบรายงาน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelControl.add(jLabelReport, gridBagConstraints);

        jComboBoxType.setMinimumSize(new java.awt.Dimension(150, 20));
        jComboBoxType.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelControl.add(jComboBoxType, gridBagConstraints);

        jLabelType.setText("ชนิดของไฟล์");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelControl.add(jLabelType, gridBagConstraints);

        jLabelStartDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/standardReport/images/appointment.gif"))); // NOI18N
        jLabelStartDate.setText("จากวันที่");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        jPanelControl.add(jLabelStartDate, gridBagConstraints);

        jComboBoxReport.setMinimumSize(new java.awt.Dimension(150, 20));
        jComboBoxReport.setPreferredSize(new java.awt.Dimension(150, 20));
        jComboBoxReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxReportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelControl.add(jComboBoxReport, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelControl.add(jButtonSave, gridBagConstraints);

        jButtonView.setText("Query");
        jButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanelControl.add(jButtonView, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        dateComboBoxStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxStartDateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(dateComboBoxStartDate, gridBagConstraints);

        jLabelEndDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEndDate.setText("ถึงวันที่");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        jPanel2.add(jLabelEndDate, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(dateComboBoxEndDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelControl.add(jPanel2, gridBagConstraints);

        jCheckBoxDBBackup.setText("ต้องการดึงรายงานจากฐานข้อมูลสำรอง");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelControl.add(jCheckBoxDBBackup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanelControl, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonBackToMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/standardReport/images/Back.gif"))); // NOI18N
        jButtonBackToMain.setText("Back");
        jButtonBackToMain.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonBackToMain.setMaximumSize(new java.awt.Dimension(70, 24));
        jButtonBackToMain.setMinimumSize(new java.awt.Dimension(70, 24));
        jButtonBackToMain.setPreferredSize(new java.awt.Dimension(70, 24));
        jButtonBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackToMainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButtonBackToMain, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void dateComboBoxStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxStartDateActionPerformed
//        Calendar c = Calendar.getInstance();
//        c.setTime(DateUtil.getDateFromText(dateComboBoxStartDate.getText()));
//        int month = c.get(Calendar.MONTH) + 1;
//        c.set(Calendar.MONTH,month);
//        String date_str = DateUtil.getTextDB(c.getTime(),false);
//        this.dateComboBoxEndDate.setText(DateUtil.getGuiDateTime(date_str));
    }//GEN-LAST:event_dateComboBoxStartDateActionPerformed

    private void jComboBoxReportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxReportActionPerformed
    {//GEN-HEADEREND:event_jComboBoxReportActionPerformed
        setShowPanel(jComboBoxReport.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxReportActionPerformed
    
    private void jButtonViewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonViewActionPerformed
    {//GEN-HEADEREND:event_jButtonViewActionPerformed
        queryData();
    }//GEN-LAST:event_jButtonViewActionPerformed
    
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveActionPerformed
        if(this.setPathFileToSave())
        {
            this.setDataForSaveReport();
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    private void jButtonBackToMainActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBackToMainActionPerformed
    {//GEN-HEADEREND:event_jButtonBackToMainActionPerformed
        backToMainReport();
    }//GEN-LAST:event_jButtonBackToMainActionPerformed
    /**
     *แสดงรายงาน จากการเลือกจาก ComboBox
     */
    public void setShowPanel(int select)
    {
        //ตรวจสอบลำดับต้องมากกว่า -1
        if(select > -1)
        {   //ตรวจสอบ hashmap มีค่าข้อมูลหรือไม่
            if(theHashMap != null)
            {
                //ให้ค่ากับ object report
                this.report = (Report)theHashMap.get(String.valueOf(select+1));  
                
                if(this.report.INDEX.equals(Integer.toString(select+1)))
               {
                   System.out.println("SelectedIndex : " + this.report.INDEX);
                   this.cardname = this.report.ENG_NAME;
                   
                   if(!this.cardname.equalsIgnoreCase(cardname_old))
                    {
                        this.cardname_old = this.cardname;
                        setEnableSaveToFile(false);
                    }
                   this.theMSC.theManageSubject.theAllPanelSubject.notifySetInitAllGUI();
                   this.showCardReport(this.cardname);
               }
            }
        }          
        
    }
    
    private String getNameEngReport(int i)
    {
        report = (Report)Constant.Report.get(String.valueOf(i+1));
        return report.ENG_NAME;
    }
    /**
     *เพิ่มแถบการออกรายงาน
     *
     */
    public void addCardReport()
    {
        jPanelDetail.add(theMainReport.thePanelChronicPCU,theMainReport.thePanelChronicPCU.getCardName());
        jPanelDetail.add(theMainReport.thePanelNutritionPCU,theMainReport.thePanelNutritionPCU.getCardName());
        jPanelDetail.add(theMainReport.thePanelUncontagiousPCU,theMainReport.thePanelUncontagiousPCU.getCardName());
        jPanelDetail.add(theMainReport.thePanelResidentPCU,theMainReport.thePanelResidentPCU.getCardName());
        jPanelDetail.add(theMainReport.thePanelPregnancePCU,theMainReport.thePanelPregnancePCU.getCardName());
        jPanelDetail.add(theMainReport.thePanelMaimPCU,theMainReport.thePanelMaimPCU.getCardName());        
        jPanelDetail.add(theMainReport.thePanelEpiPCU,theMainReport.thePanelEpiPCU.getCardName());
        jPanelDetail.add(theMainReport.thePanelFamilyPlaningPCU,theMainReport.thePanelFamilyPlaningPCU.getCardName());
    }
    
    private void setGuiForShowReport(int x,int y)
    {
        this.jPanelControl.setPreferredSize(new java.awt.Dimension(x, y));
        this.jPanelControl.setMinimumSize(new java.awt.Dimension(x, y));
    }
    
    /**ใช้ในการ Query ข้อมูล และส่งข้อมูลไปยัง รายงานที่เลือกไว้*/
    public void queryData()
    {
        if(checkData())
        {
            int rowReport = jComboBoxReport.getSelectedIndex();
            System.out.println("Select name Report : " +getNameEngReport(rowReport));
          
            if(theMainReport.thePanelNutritionPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport)))
            {
                theMainReport.thePanelNutritionPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }  
            else if(theMainReport.thePanelChronicPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport)))
            {
                theMainReport.thePanelChronicPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
            else if(theMainReport.thePanelUncontagiousPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport)))
            {
                theMainReport.thePanelUncontagiousPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
            else if(theMainReport.thePanelResidentPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport)))
            {
                theMainReport.thePanelResidentPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
            else if(theMainReport.thePanelPregnancePCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport)))
            {
                theMainReport.thePanelPregnancePCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
            else if(theMainReport.thePanelMaimPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport)))
            {
                theMainReport.thePanelMaimPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
            else if(theMainReport.thePanelEpiPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport))) 
            {
                theMainReport.thePanelEpiPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
            else if(theMainReport.thePanelFamilyPlaningPCU.getCardName().equalsIgnoreCase(getNameEngReport(rowReport))) 
            {
                theMainReport.thePanelFamilyPlaningPCU.setQueryReport(dateComboBoxStartDate.getText()
                        ,dateComboBoxEndDate.getText()
                        ,jCheckBoxDBBackup.isSelected());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("TimeWarning"),Language.getTextBundle("Warning"),JOptionPane.WARNING_MESSAGE);
            
        }
    }
    
    /**
     *  ใช้ในการตรวจสอบค่าของข้อมูลต่างๆว่าถูกต้องตามความต้องการหรือไม่
     *  @return boolean ถ้าเป็น true จะไม่มี่ปัญหากับข้อมูล ถ้าเป็น false จะมีปัญหากับข้อมูล
     */
    private boolean checkData()
    {
        boolean result = false;
        result = this.isBetweenDateFormat();
        return result;
    }
    
     /*
      *  ใช้ในการตรวจสอบวันที่สำหรับการออกรายงาน ให้อยู่ในรูปแบบที่ถูกต้อง คือ วันที่เริ่มต้นในการ query
      *  ต้องไม่เป็นวันที่ในอนาคต หรือเป็นวันที่มากกว่าวันที่ถูกระบุว่าเป็นวันที่สิ้นสุดของการ query
      *  @return boolean ถ้าค่าเป็น true แสดงว่าเป็บช่วงวันที่ที่ถูกต้อง ถ้าเป็น false แสดงว่าเป็นช่วงวันที่ไม่ถูกต้อง
      */
    private boolean isBetweenDateFormat()
    {
        setBetweenDate(dateComboBoxStartDate.getText(),dateComboBoxEndDate.getText());
        if(Gutil.beforDate(DateUtil.getDateFromText(this.startDate),DateUtil.getDateFromText(this.endDate)) || (this.startDate.compareTo(this.endDate) <= 0))
        {
            isSelectBetweenDate = true;
        }
        else
        {
            isSelectBetweenDate = false;
        }
        return isSelectBetweenDate;
    }
      /*
       *กำหนดค่าให้กับตัวแปรวันที่เริ่มต้น และวันที่สิ้นสุด ในการนำมา query
       *@param startDate วันที่เริ่มต้น
       *@param endDate วันที่สิ้นสุด
       */
    private  void setBetweenDate(String startDate,String endDate)
    {
        this.startDate = startDate;
        this.endDate = endDate;
    }
    public boolean setPathFileToSave()
    {
        boolean isSetPathFileDone = false;
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(oldPath));
        chooser.setDialogTitle(Language.getTextBundle("PleaseSelectPathForSave"));
        
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setApproveButtonText("Save");
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            int index = jComboBoxType.getSelectedIndex();
            if(index == 0)
            {
                setFileType(Constant.TXT_FILE);
            }
            else if(index == 1)
            {
                setFileType(Constant.XLS_FILE);
            }
            else if(index == 2)
            {
                setFileType(Constant.DBF_FILE);
            }
            oldPath = chooser.getSelectedFile().getPath();
            select_path =  chooser.getSelectedFile().getPath()+"\\";
            isSetPathFileDone = true;
        }
        else
        {
            isSetPathFileDone = false;
        }
        return isSetPathFileDone;
    }
    /**
     *เซ็ตข้อมูลสำหรับบันทึกเป็นไฟล์
     */
    public void setDataForSaveReport()
    {
        if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelNutritionPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelNutritionPCU.getNutrition();
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME);
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelChronicPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelChronicPCU.getChronicPCU();
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME + this.theMainReport.thePanelChronicPCU.getNameReport());
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelUncontagiousPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelUncontagiousPCU.getUncontagiousPCU();
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME + this.theMainReport.thePanelUncontagiousPCU.getNameReport());
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelResidentPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelResidentPCU.getUncontagiousPCU();
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME + this.theMainReport.thePanelResidentPCU.getNameReport());
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelPregnancePCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelPregnancePCU.getPregnancePCU();
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME);
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelMaimPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelMaimPCU.getPersontMaimPCU();
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME);
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelEpiPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelEpiPCU.getEpiPCU(); 
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME + this.theMainReport.thePanelEpiPCU.getNameReport());
        }
        else if(this.cardname.equalsIgnoreCase(this.theMainReport.thePanelFamilyPlaningPCU.getCardName()))
        {
            Vector vcData = this.theMainReport.thePanelFamilyPlaningPCU.getFpPCU(); 
            this.theMSC.theManageControl.theExportControl.startExportByVector(vcData,this.select_path,this.fileType,this.report.ENG_NAME + this.theMainReport.thePanelFamilyPlaningPCU.getNameReport());
        }
    }
    
    private void setFileType(String fileType)
    {
        this.fileType = fileType;
    }
    /*
     *ใช้ในการกลับไปยังหน้า MainReport
     *เพื่อเลือกรายงานทั่วไป
     */
    public void  backToMainReport()
    {
        theMSC.theManageSubject.theShowPanelSelectSubject.notifyCallBackToMainReport();
    }
    
    /**
     *  กำหนดค่าของ Combobox รายงานแสดงชื่อรายงาน
     */
    private void initReportName()
    {
        for(int i=0;i<Constant.Report.size();i++)
        {   report = (Report)Constant.Report.get(String.valueOf(i+1));
            jComboBoxReport.addItem(report.THAI_NAME);
            report = null;
        }
        report = null;
    }
    
    /**
     *  กำหนดค่าของ Combobox บันทึก
     */
    private void initReportType()
    {
        for(int j=0;j<Constant.REPORT_TYPE.length;j++)
        {
            jComboBoxType.addItem(Constant.REPORT_TYPE[j]);
        }
    }
    
    public void showCardReport(String cardname)
    {
        CardLayout layout = (CardLayout)this.jPanelDetail.getLayout();
        layout.show(this.jPanelDetail, cardname);
    }
    
    public void setEnableGUI(boolean isEnable)
    {
        jComboBoxReport.setEnabled(isEnable);
    }
    
    /**
     *  ใช้ในการกำหนดให้ การบันทึกสามารถทำงานได้หรือไม่
     *  @param isEnable เป็น boolean ที่ใช้ในการกำหนดให้แสดงหรือไม่แสดง
     *
     */
    public void setEnableSaveToFile(boolean isEnable)
    {
        jComboBoxType.setEnabled(isEnable);
        jButtonSave.setEnabled(isEnable);
    }
    
    /**ใช้ในการกำหนดค่าวันที่เริ่มต้นและวันที่สิ้นสุดให้กับ combobox
     *  @param startDate เป็น String ของ วันที่เริ่มต้น รูปแบบ เป็น yyyy-mm-dd
     *  @param finishDate เป็น String ของ วันที่สิ้นสุด รูปแบบ เป็น yyyy-mm-dd
     */
    private void setDateCombobox(String startDate,String finishDate)
    {
        dateComboBoxStartDate.setText(DateUtil.getGuiDateTime(startDate));
        dateComboBoxEndDate.setText(DateUtil.getGuiDateTime(finishDate));
    }
    
    /**ใช้ในการ แสดงรายงานใน Combobox ตาม param ที่ส่งเข้ามา
     *  @param report เป็น Object ของ Report
     */
    private void setShowReport(Report report)
    {
        jComboBoxReport.setSelectedItem(report.THAI_NAME);
        this.cardname = report.ENG_NAME;
        this.showCardReport(this.cardname);
        
    }
    private void clearGUI()
    {
        
    }
    
    public static void setFrame(int width ,int height)
    {
        ManageControlSubject hosManage = new ManageControlSubject(null,null,null);
        PanelReportFile thePanelReport18File= new PanelReportFile(hosManage);
        thePanelReport18File.setSize(500, 400);
        JFrame frm = new JFrame("PanelReportStandard");
        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        //thePanelReport18File.setSize(screenSize);
        frm.setSize(width, height);
        frm.setLocation((screenSize.width-frm.getSize().width)/2,(screenSize.height-frm.getSize().height)/2);
        //frm.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        //frm.setVisible(true);
        
        
        frm.getContentPane().add(thePanelReport18File);
        frm.pack();
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frm.setVisible(true);
    }
    
    public void notifyCallBackToMainReport()
    {
        
    }
    
    public void notifyCallReportShow(Report report)
    {
        this.report = report;
        setShowReport(report);
        setEnableSaveToFile(false);
    }
    
    public void notifyReturnStartAndFinishDate(String startDate, String finishDate)
    {
        setDateCombobox(startDate, finishDate);
    }
    
    public void notifyShowSaveToFile(boolean show)
    {
        setEnableSaveToFile(show);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.reportcenter.utility.DateComboBox dateComboBoxEndDate;
    private com.reportcenter.utility.DateComboBox dateComboBoxStartDate;
    private javax.swing.JButton jButtonBackToMain;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonView;
    private javax.swing.JCheckBox jCheckBoxDBBackup;
    private javax.swing.JComboBox jComboBoxReport;
    private javax.swing.JComboBox jComboBoxType;
    private javax.swing.JLabel jLabelEndDate;
    private javax.swing.JLabel jLabelReport;
    private javax.swing.JLabel jLabelStartDate;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelDetail;
    // End of variables declaration//GEN-END:variables
    public void setLanguage()
    {
        jLabelReport.setText(Language.getTextBundle(jLabelReport.getText()));
        jButtonBackToMain.setText(Language.getTextBundle(jButtonBackToMain.getText()));
        jLabelStartDate.setText(Language.getTextBundle(jLabelStartDate.getText()));
        jLabelType.setText(Language.getTextBundle(jLabelType.getText()));
        jLabelEndDate.setText(Language.getTextBundle(jLabelEndDate.getText()));
        jButtonSave.setText(Language.getTextBundle(jButtonSave.getText()));
        jButtonView.setText(Language.getTextBundle(jButtonView.getText()));
    }
    public static void main(String[] args){
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        System.out.println("getCurrentDirectory(): " +  chooser.getSelectedFile().getPath());
        System.out.println("getCurrentDirectory(): " +  chooser.getSelectedFile().getAbsolutePath());    
        System.out.println("getCurrentDirectory(): " +  chooser.getCurrentDirectory());
    }
}
