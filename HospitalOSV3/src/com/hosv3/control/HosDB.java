/* * HosDB.java * * Created on 9 æƒ…¿“§¡ 2548, 12:46 π. */package com.hosv3.control;import com.hospital_os.objdb.*;import com.pcu.objdb.objdbclass.*;import com.hospital_os.objdb.Option2DB;import com.hospital_os.objdb.specialQuery.*;import com.hospital_os.object.*;import com.hospital_os.usecase.connection.*;import com.pcu.objdb.objdbclass.HomeDB;import com.pcu.objdb.objdbclass.FamilyDB;import com.pcu.objdb.objdbclass.VillageDB;import com.pcu.objdb.objdbclass.DiseaseDB;import com.pcu.objdb.objdbclass.UncontagiousDB;import com.hosv3.object.*;import com.hosv3.objdb.squery.*;import com.hosv3.utility.*;import com.hosv3.objdb.*;/** * * @author  henbe */public class HosDB {        public PatientDB thePatientDB;        public VillageDB theVillageDB;        public HomeDB theHomeDB;        public FamilyDB theFamilyDB;        public XRayLeteralDB theXRayLeteralDB;	public AccidentDB theAccidentDB;	public AccproTypeDB theAccproTypeDB;	public AccrdTypeDB theAccrdTypeDB;	public AccuseTypeDB theAccuseTypeDB;	public Address2DB theAddressDB;//	public AfterMchDB theAfterMchDB;//	public AncDB theAncDB;//	public AncDetailDB theAncDetailDB;	public AncSectionDB theAncSectionDB;	public AnswerDB theAnswerDB;	public Appointment2DB theAppointmentDB;        public AppointmentStatusDB theAppointmentStatusDB;	public AreaTypeDB theAreaTypeDB;	public AuthenticationDB theAuthenticationDB;	public AutoOrderItemDB theAutoOrderItemDB;	public AutoPaymentDB theAutoPaymentDB;	public BdoctorDB theBdoctorDB;	public BeforeMchDB theBeforeMchDB;	public Billing2DB theBillingDB;	public BillingGroupDB theBillingGroupDB;	public BillingGroupItem2DB theBillingGroupItemDB;	public BillingInvoice2DB theBillingInvoiceDB;	public BillingInvoiceItem2DB theBillingInvoiceItemDB;	public BillingInvoiceSubgroup2DB theBillingInvoiceSubgroupDB;	public BillingItemDB theBillingItemDB;	public BillingSubgroupDB theBillingSubgroupDB;	public BirthPlaceDB theBirthPlaceDB;	public BloodGroupDB theBloodGroupDB;        public BorrowFilmXrayDB theBorrowFilmXrayDB;        public SpecialQueryBorrowFilmXrayDB theSpecialQueryBorrowFilmXrayDB;        public BorrowOpdCardDB theBorrowOpdCardDB;        public SpecialQueryBorrowOpdCardDB theSpecialQueryBorrowOpdCardDB;	public BTypeDB theBTypeDB;	public CategoryGroupDB theCategoryGroupDB;	public CategoryGroupItemDB theCategoryGroupItemDB;	public CheckSQLDB theCheckSQLDB;	public ClinicDB theClinicDB;	public ComCharacDB theComCharacDB;	public ConductDB theConductDB;	public ContractAdjust2DB theContractAdjustDB;	public ContractDB theContractDB;	public ContractMethodDB theContractMethodDB;	public Chronic2DB theChronicDB;	public DayTimeDB theDayTimeDB;	public Death2DB theDeathDB;	public DiagIcd10DB theDiagIcd10DB;	public DiagIcd9DB theDiagIcd9DB;	public DiagIcd10DB theDiagIcd102DB;	public DiagIcd9DB theDiagIcd92DB;	public DiagnosisStatusDB theDiagnosisStatusDB;	public DischargeDB theDischargeDB;	public DischargeIpdDB theDischargeIpdDB;	public DischargeTypeDB theDischargeTypeDB;	public DischargeOpdDB theDischargeOpdDB;	public DoseDrugSetDB theDoseDrugSetDB;	public DoseEpiSetDB theDoseEpiSetDB;	public DrugAllergyDB theDrugAllergyDB;	public DrugDB theDrugDB;	public DrugFrequency2DB theDrugFrequencyDB;	public DrugInstruction2DB theDrugInstructionDB;	public DrugSetDB theDrugSetDB;	public DrugSetGroup2DB theDrugSetGroupDB;	public DxTemplateDB theDxTemplateDB;	public DxtypeDB theDxtypeDB;	public EducateDB theEducateDB;	public EmployeeDB theEmployeeDB;	public EpiDB theEpiDB;	public EpiDetailDB theEpiDetailDB;	public EpiSetDB theEpiSetDB;	public EpiSetGroupDB theEpiSetGroupDB;	public FilmSize2DB theFilmSizeDB;	public FormLabreferoutDB theFormLabreferoutDB;	public FpTypeDB theFpTypeDB;//	public FpWomanDB theFpWomanDB;	public FStatusDB theFStatusDB;	public GActionDB theGActionDB;        public GarbageDB theGarbageDB;        public GActionAuthDB theGActionAuthDB;	public Group504DB theGroup504DB;	public Group505DB theGroup505DB;	public Group506DB theGroup506DB;	public GroupChronicDB theGroupChronicDB;        public GroupSurveilDB theGroupSurveilDB;	public GroupIcd10DB theGroupIcd10DB;	public GuideAfterDxDB theGuideAfterDxDB;	public GuideAfterDxTransactionDB theGuideAfterDxTransactionDB;	public HCharacDB theHCharacDB;	public HighRiskDB theHighRiskDB;	public ICD10DB theICD10DB;	public Icd10GroupTypeDB theIcd10GroupTypeDB;        public ICD10GroupChronicDB theICD10GroupChronicDB;        public ICD10GroupSurveilDB theICD10GroupSurveilDB;	public ICD92DB theICD9DB;	public Idx10V3DB theIdx10V3DB;	public InOutrdTypeDB theInOutrdTypeDB;	public Item2DB theItemDB;	public ItemPriceDB theItemPriceDB;	public LabGroupDB theLabGroupDB;	public LaborDB theLaborDB;	public LabResultItemDB theLabResultItemDB;	public LabSetDB theLabSetDB;	public LevelDB theLevelDB;	public ListTransferDB theListTransferDB;        public ListTransferDB theListTransferC2DB;	public LocalTypeDB theLocalTypeDB;	public MapQueueVisit2DB theMapQueueVisitDB;	public MapVisitDx2DB theMapVisitDxDB;	public MarryStatusDB theMarryStatusDB;	public NationDB theNationDB;	public NofpDB theNofpDB;	public NutritionTypeDB theNutritionTypeDB;//        public NutritionType2DB theNutritionType2DB;	public Occupation2DB theOccupatDB;	public OfficeDB theOfficeDB;	public OpdTypeDB theOpdTypeDB;	public Option2DB theOptionDB;	public OptionDetailDB theOptionDetailDB;	public OptypeDB theOptypeDB;	public OrderContinue2DB theOrderContinueDB;	public OrderItemDB theOrderItemDB;	public OrderItemDrugDB theOrderItemDrugDB;	public OrderItemLabreferinDB theOrderItemLabreferinDB;	public OrderItemLabreferoutDB theOrderItemLabreferoutDB;	public OrderItemReceiveDrugDB theOrderItemReceiveDrugDB;	public OrderItemStatusDB theOrderItemStatusDB;	public OrderItemStatusLabreferinDB theOrderItemStatusLabreferinDB;	public OrderResultLabDB theOrderResultLabDB;	public OrderResultLabreferinDB theOrderResultLabreferinDB;	public OrderResultXrayDB theOrderResultXrayDB;	public ParticipateOr2DB theParticipateOrDB;	public PastHistoryDB thePastHistoryDB;	public PatientLabreferinDB thePatientLabreferinDB;	public PatientPayment2DB thePatientPaymentDB;	public Payer2DB thePayerDB;	public PaymentDB thePaymentDB;	public PhysicalExamDB thePhysicalExamDB;	public PlanDB thePlanDB;        public DrugDosePrintDB theDrugDosePrintDB;	public PostureBabyDB thePostureBabyDB;	public PpDB thePpDB;	public Prefix2DB thePrefixDB;	public PregnantLevelDB thePregnantLevelDB;	public PrimarySymptomDB thePrimarySymptomDB;	public PtmobieTypeDB thePtmobieTypeDB;	public PtStatusTypeDB thePtStatusTypeDB;	public QueueDespenseDB theQueueDespenseDB;        public QueueDispense2DB theQueueDispense2DB;        public QueueDispense2DB theQueueDispenseC2DB;	public QueueICDDB theQueueICDDB;	public QueueLab2DB theQueueLabDB;	public QueueVisitDB theQueueVisitDB;	public QueueXrayDB theQueueXrayDB;	public ReceiptDB theReceiptDB;	public ReceiptItem2DB theReceiptItemDB;	public ReceiptSubgroup2DB theReceiptSubgroupDB;	public ReferDB theReferDB;        public ReferCauseDB theReferCauseDB;	public Relation2DB theRelationDB;	public ReligionDB theReligionDB;	public ResultGiveBirthDB theResultGiveBirthDB;	public ResultLabDB theResultLabDB;	public ResultStatusDB theResultStatusDB;	public ResultXRayDB theResultXRayDB;	public ResultXrayPositionDB theResultXrayPositionDB;	public ResultXraySizeDB theResultXraySizeDB;	public ReverseAdmitDB theReverseAdmitDB;	public RuleDB theRuleDB;	public SequenceDataDB theSequenceDataDB;	public ServicePointDB theServicePointDB;	public ServicePointDoctor2DB theServicePointDoctorDB;	public ServiceSubTypeDB theServiceSubTypeDB;	public com.hospital_os.objdb.ServiceTypeDB theServiceTypeDB;	public SewDB theSewDB;	public SexDB theSexDB;	public SiteDB theSiteDB;	public SQLTemplateDB theSQLTemplateDB;	public SQLTemplateParamDB theSQLTemplateParamDB;	public Surveil2DB theSurveilDB;	public TimeServer theTimeServer;	public TlockDB theTlockDB;	public Transfer2DB theTransferDB;	public TypeAreaDB theTypeAreaDB;	public TypeDishDB theTypeDishDB;	public Uom2DB theUomDB;	public UterusLevelDB theUterusLevelDB;	public VersionDB theVersionDB;	public VisitDB theVisitDB;        public VisitPatientDB theVisitPatientDB;        public VisitLabreferinDB theVisitLabreferinDB;	public VisitStatusDB theVisitStatusDB;	public VisitStatusLabreferinDB theVisitStatusLabreferinDB;	public VisitTypeDB theVisitTypeDB;        public VisitYearDB theVisitYearDB;	public VitalSignDB theVitalSignDB;	public VitalTemplateDB theVitalTemplateDB;        public VitalTemplate2DB theVitalTemplate2DB;	public Ward2DB theWardDB;	public WaterTypeDB theWaterTypeDB;	public XRayPositionDB theXRayPositionDB;	public SpecialContrctAdjustByVGaCTDB theSpecialContrctAdjustByVGaCTDB;	public SpecialEmployeeDB theSpecialEmployeeDB;        public SpecialQueryVisit2DB theSpecialQueryVisit2DB;	public SpecialPatientReportDB theSpecialPatientReportDB;	public SpecialQueryAppointment2DB theSpecialQueryAppointmentDB;	public SpecialQueryBillingReceiptDB theSpecialQueryBillingReceiptDB;	public SpecialQueryItemDB theSpecialQueryItemDB;	public SpecialQueryOrderDB theSpecialQueryOrderDB;	public SpecialQueryOrderDrugDB theSpecialQueryOrderDrugDB;	public SpecialQueryOrderHistoryDrugDB theSpecialQueryOrderHistoryDrugDB;	public SpecialQueueDespenseDB theSpecialQueueDespenseDB;	public SpecialQueueEPIItemDB theSpecialQueueEPIItemDB;	public SpecialQueueEPItemDrugDB theSpecialQueueEPItemDrugDB;	public SpecialQueueVisitDB theSpecialQueueVisitDB;        public SpecialQueryItem2DB theSpecialQueryItem2DB;//neung        public SpecialQueryLabResultItem theSpecialQueryLabResultItem;//neung//	public DrugStickerDetailDB theDrugStickerDetailDB;//	public PrintPointDB thePrintPointDB;//	public SetupPrintOpdDetailDB theSetupPrintOpdDetailDB;//	public SetupPrintOpdHeadDB theSetupPrintOpdHeadDB;        public QueueTransfer2DB theQueueTransferDB;        public QueueTransfer2DB theQueueTransferC2DB;        public LookupDB theLookupDB;        public TabPanelDB theTabPanelDB;        public DxTemplateDB theDxTemplate2DB;        public LabResultDetailDB theLabResultDetailDB;        public LabResultGroupDB theLabResultGroupDB;        public OfficeInCupDB theOfficeInCupDB;        public DrugDoseMapUomDB theDrugDoseMapUomDB;        public DrugDoseMapUom2DB theDrugDoseMapUom2DB;        public DrugDosePrint2DB theDrugDosePrint2DB;        //amp        public RiskFactorDB theRiskFactorDB;        public FamilyHistoryDB theFamilyHistoryDB;        public PersonalDiseaseDB thePersonalDiseaseDB;        public AppointmentOrderDB theAppointmentOrderDB;        public OrderLabSecretDB theOrderLabSecretDB;        public DrugStandardDB theDrugStandardDB;        public DrugStandardMapItemDB theDrugStandardMapItemDB;        public DrugInteractionDB theDrugInteractionDB;        public DrugInteractionDetailDB theDrugInteractionDetailDB;        public OrderDrugInteractionDB theOrderDrugInteractionDB;        public BodyOrganDB theBodyOrganDB;        public DiseaseDB theDiseaseDB;//amp:18/04/2549 ‚√§µ‘¥µËÕ·≈–‚√§‰¡Ëµ‘¥µËÕ        public UncontagiousDB theUncontagiousDB;//amp:18/04/2549        public NutritionTypeMapDB theNutritionTypeMapDB;//amp:26/04/2549        public NCDGroupDB theNCDGroupDB;//amp:14/06/2549        public NCDDB theNCDDB;//amp:14/06/2549        public AppointmentTemplateDB theAppointmentTemplateDB;//amp:10/08/2549        public AppointmentTemplateItemDB theAppointmentTemplateItemDB;//amp:10/08/2549        //sumo        public ItemServiceDB theItemServiceDB;        public Item16GroupDB theItem16GroupDB;        public GuideDB theGuideDB; // sumo:04/08/2549 §”·π–π”        public CalDateAppointmentDB theCalDateAppointmentDB; // sumo:08/08/2549 : µ—«§”π«≥«—π∑’Ëπ—¥        //tong        public PatientXNDB thePatientXNDB;        public AccidentGroupDB theAccidentGroupDB;        public AccidentGroupMapDB theAccidentGroupMapDB;        public AccidentGroupPatientTypeDB theAccidentGroupPatientTypeDB;        public AccidentType2DB theAccidentTypeDB;        //neung        public WoundDB theWoundDB;        //pu        public DrugDoseShortcutDB theDrugDoseShortcutDB;        public DxTemplateMapItemDB theDxTemplateMapItemDB;        public VersionDB thePcuVersionDB;        public VersionDB theReportVersionDB;        public ConnectionInf c2;        public AncDetailPcuDB theAncDetailPcuDB;        public AfterMchMotherDB theAfterMchMotherDB;        public AncPcuDB theAncPcuDB;        public BornMchDB theBornMchDB;        public CheckHealthDB theCheckHealthDB;        public CheckHealthYearDB theCheckHealthYearDB;        public CounselDB theCounselDB;        public DentalDB theDentalDB;        public EfficiencyDB theEfficiencyDB;        public EpiOutSiteDB theEpiOutSiteDB;        public FamilyPlaningDB theFamilyPlaningDB;        public GrowHistoryDB theGrowHistoryDB;        public GrowPcuDB theGrowPcuDB;        public MaimDB theMaimDB;        public NutritionDB theNutritionDB;        public PPCareDB thePPCareDB;        public PPDB thePPDB;        public PregnancyDB thePregnancyDB;        public VisitHomeDB theVisitHomeDB;        public HosLogDB theHosLogDB;        public ReceiptModelDB theReceiptModelDB;        public OrderSpecifiedDB theOrderSpecifiedDB;        public AutoReportBugDB theAutoReportBugDB;//        public ICD10TMDB theICD10TMDB;    //icd10tm        // Somprasong add for LIS 23-09-2010        public LisLnDB theLisLnDB;        public LisOrderDB theLisOrderDB;        // SOmprasong add for notify note 20101007        public NotifyNoteDB theNotifyNoteDB;        public WSConfigDB theWSConfigDB;        public NhsoRightDB theNhsoRightDB;        public MapNhsoPlanDB theMapNhsoPlanDB;        public NhsoSubInsclDB theNhsoSubInsclDB;        public NhsoMainInsclDB theNhsoMainInsclDB;        public MapNhsoSubInsclDB theMapNhsoSubInsclDB;        public MapNhsoMainInsclDB theMapNhsoMainInsclDB;    /** Creates a new instance of HosDB */    public HosDB(ConnectionInf c)    {        //c2 = c.getClone();        c2=c;        thePcuVersionDB = new VersionDB(c,initConfigPcuVersion());        theReportVersionDB = new VersionDB(c,initConfigReportVersion());        theWSConfigDB = new WSConfigDB(c);        theHosLogDB = new HosLogDB(c);        theVillageDB = new VillageDB(c);        theHomeDB =  new HomeDB(c);        theFamilyDB = new FamilyDB(c);        theOptionDetailDB = new OptionDetailDB(c);	theOptionDB = new Option2DB(c, theOptionDetailDB);	theSequenceDataDB = new SequenceDataDB(c);	theReferDB = new ReferDB(c, theSequenceDataDB);        theXRayLeteralDB = new XRayLeteralDB(c);        theAddressDB = new Address2DB(c);        theBillingGroupDB = new BillingGroupDB(c);	theAccidentDB = new AccidentDB(c);	theAccproTypeDB = new AccproTypeDB(c);	theAccrdTypeDB = new AccrdTypeDB(c);	theAccuseTypeDB = new AccuseTypeDB(c);//	theAfterMchDB = new AfterMchDB(c);//	theAncDB = new AncDB(c);//	theAncDetailDB = new AncDetailDB(c);	theAncSectionDB = new AncSectionDB(c);	theAnswerDB = new AnswerDB(c);	theAppointmentDB = new Appointment2DB(c);        theAppointmentStatusDB = new AppointmentStatusDB(c);	theAreaTypeDB = new AreaTypeDB(c);	theAuthenticationDB = new AuthenticationDB(c);	theAutoOrderItemDB = new AutoOrderItemDB(c);	theAutoPaymentDB = new AutoPaymentDB(c);	theBdoctorDB = new BdoctorDB(c);	theBeforeMchDB = new BeforeMchDB(c);	theBillingDB = new Billing2DB(c);	theBillingGroupDB = new BillingGroupDB(c);	theBillingGroupItemDB = new BillingGroupItem2DB(c);	theBillingInvoiceDB = new BillingInvoice2DB(c);	theBillingInvoiceItemDB = new BillingInvoiceItem2DB(c);	theBillingInvoiceSubgroupDB = new BillingInvoiceSubgroup2DB(c);	theBillingItemDB = new BillingItemDB(c);	theBillingSubgroupDB = new BillingSubgroupDB(c);	theBirthPlaceDB = new BirthPlaceDB(c);	theBloodGroupDB = new BloodGroupDB(c);        theBorrowFilmXrayDB = new BorrowFilmXrayDB(c);        theSpecialQueryBorrowFilmXrayDB = new SpecialQueryBorrowFilmXrayDB(c);        theBorrowOpdCardDB = new BorrowOpdCardDB(c);        theSpecialQueryBorrowOpdCardDB = new SpecialQueryBorrowOpdCardDB(c);	theBTypeDB = new BTypeDB(c);	theCategoryGroupDB = new CategoryGroupDB(c);	theCategoryGroupItemDB = new CategoryGroupItemDB(c);	theCheckSQLDB = new CheckSQLDB(c);	theClinicDB = new ClinicDB(c);	theComCharacDB = new ComCharacDB(c);	theConductDB = new ConductDB(c);	theContractAdjustDB = new ContractAdjust2DB(c);	theContractDB = new ContractDB(c);	theContractMethodDB = new ContractMethodDB(c);	theChronicDB = new Chronic2DB(c);	theDayTimeDB = new DayTimeDB(c);	theDeathDB = new Death2DB(c);	theDiagIcd10DB = new DiagIcd10DB(c);	theDiagIcd9DB = new DiagIcd9DB(c);//	theDiagIcd102DB = new DiagIcd10DB(c);//        theDiagIcd102DB.initConfig2();//	theDiagIcd92DB = new DiagIcd9DB(c);//        theDiagIcd92DB.initConfig2();	theDiagnosisStatusDB = new DiagnosisStatusDB(c);	theDischargeDB = new DischargeDB(c);	theDischargeIpdDB = new DischargeIpdDB(c);	theDischargeTypeDB = new DischargeTypeDB(c);	theDischargeOpdDB = new DischargeOpdDB(c);	theDoseDrugSetDB = new DoseDrugSetDB(c);	theDoseEpiSetDB = new DoseEpiSetDB(c);	theDrugAllergyDB = new DrugAllergyDB(c);	theDrugDB = new DrugDB(c);	theDrugFrequencyDB = new DrugFrequency2DB(c);	theDrugInstructionDB = new DrugInstruction2DB(c);	theDrugSetDB = new DrugSetDB(c,theDoseDrugSetDB);	theDrugSetGroupDB = new DrugSetGroup2DB(c);	theDxTemplateDB = new DxTemplateDB(c);	theDxtypeDB = new DxtypeDB(c);	theEducateDB = new Educate2DB(c);	theEmployeeDB = new EmployeeDB(c);	theEpiSetDB = new EpiSetDB(c);	theEpiSetGroupDB = new EpiSetGroupDB(c);	theFilmSizeDB = new FilmSize2DB(c);	theFormLabreferoutDB = new FormLabreferoutDB(c);	theFpTypeDB = new FpTypeDB(c);//	theFpWomanDB = new FpWomanDB(c);	theFStatusDB = new FStatusDB(c);	theGActionDB = new GActionDB(c);        theGarbageDB = new GarbageDB(c);        theGActionAuthDB = new GActionAuthDB(c);	theGroup504DB = new Group504DB(c);	theGroup505DB = new Group505DB(c);	theGroup506DB = new Group506DB(c);	theGroupChronicDB = new GroupChronicDB(c);        theGroupSurveilDB = new GroupSurveilDB(c);	theGroupIcd10DB = new GroupIcd10DB(c);	theGuideAfterDxDB = new GuideAfterDxDB(c);	theGuideAfterDxTransactionDB = new GuideAfterDxTransactionDB(c);	theHCharacDB = new HCharacDB(c);	theHighRiskDB = new HighRiskDB(c);	theICD10DB = new ICD10DB(c);	theIcd10GroupTypeDB = new Icd10GroupTypeDB(c);        theICD10GroupChronicDB = new ICD10GroupChronicDB(c);        theICD10GroupSurveilDB = new ICD10GroupSurveilDB(c);	theICD9DB = new ICD92DB(c);	theIdx10V3DB = new Idx10V3DB(c);	theInOutrdTypeDB = new InOutrdTypeDB(c);	theItemDB = new Item2DB(c);	theItemPriceDB = new ItemPriceDB(c);	theLabGroupDB = new LabGroupDB(c);	theLaborDB = new LaborDB(c);	theLabResultItemDB = new LabResultItemDB(c);	theLabSetDB = new LabSetDB(c);	theLevelDB = new LevelDB(c);	theListTransferDB = new ListTransferDB(c);        theListTransferC2DB = new ListTransferDB(c2);	theLocalTypeDB = new LocalTypeDB(c);	theMapQueueVisitDB = new MapQueueVisit2DB(c);	theMapVisitDxDB = new MapVisitDx2DB(c);	theMarryStatusDB = new MarryStatusDB(c);	theNationDB = new NationDB(c);	theNofpDB = new NofpDB(c);	theNutritionTypeDB = new NutritionTypeDB(c);//        theNutritionType2DB = new NutritionType2DB(c);	theOccupatDB = new Occupation2DB(c);	theOfficeDB = new OfficeDB(c);	theOpdTypeDB = new OpdTypeDB(c);	theOptypeDB = new OptypeDB(c);	theOrderContinueDB = new OrderContinue2DB(c);        theOrderItemDB = new OrderItemDB(c);	theOrderItemDrugDB = new OrderItemDrugDB(c);	theOrderItemLabreferinDB = new OrderItemLabreferinDB(c);	theOrderItemLabreferoutDB = new OrderItemLabreferoutDB(c);	theOrderItemReceiveDrugDB = new OrderItemReceiveDrugDB(c);	theOrderItemStatusDB = new OrderItemStatusDB(c);	theOrderItemStatusLabreferinDB = new OrderItemStatusLabreferinDB(c);	theOrderResultLabDB = new OrderResultLabDB(c);	theOrderResultLabreferinDB = new OrderResultLabreferinDB(c);	theOrderResultXrayDB = new OrderResultXrayDB(c);	theParticipateOrDB = new ParticipateOr2DB(c);	thePastHistoryDB = new PastHistoryDB(c);	thePatientDB = new PatientDB(c,theFamilyDB);	thePatientLabreferinDB = new PatientLabreferinDB(c);	thePatientPaymentDB = new PatientPayment2DB(c);        thePayerDB = new Payer2DB(c);	thePaymentDB = new PaymentDB(c);	thePhysicalExamDB = new PhysicalExamDB(c);	thePlanDB = new PlanDB(c);        theDrugDosePrintDB = new DrugDosePrintDB(c);	thePostureBabyDB = new PostureBabyDB(c);	thePpDB = new PpDB(c);	thePrefixDB = new Prefix2DB(c);	thePregnantLevelDB = new PregnantLevelDB(c);	thePrimarySymptomDB = new PrimarySymptomDB(c);	thePtmobieTypeDB = new PtmobieTypeDB(c);	thePtStatusTypeDB = new PtStatusTypeDB(c);	theQueueDespenseDB = new QueueDespenseDB(c);        theQueueDispense2DB = new QueueDispense2DB(c);        theQueueDispenseC2DB = new QueueDispense2DB(c2);	theQueueICDDB = new QueueICDDB(c);	theQueueLabDB = new QueueLab2DB(c);	theQueueVisitDB = new QueueVisitDB(c);	theQueueXrayDB = new QueueXrayDB(c);	theReceiptDB = new ReceiptDB(c);	theReceiptItemDB = new ReceiptItem2DB(c);	theReceiptSubgroupDB = new ReceiptSubgroup2DB(c);        theReferCauseDB = new ReferCauseDB(c);	theRelationDB = new Relation2DB(c);	theReligionDB = new ReligionDB(c);	theResultGiveBirthDB = new ResultGiveBirthDB(c);	theResultLabDB = new ResultLabDB(c);	theResultStatusDB = new ResultStatusDB(c);	theResultXRayDB = new ResultXRayDB(c);	theResultXrayPositionDB = new ResultXrayPositionDB(c);	theResultXraySizeDB = new ResultXraySizeDB(c);	theReverseAdmitDB = new ReverseAdmitDB(c);	theRuleDB = new RuleDB(c);	theServicePointDB = new ServicePointDB(c);	theServicePointDoctorDB = new ServicePointDoctor2DB(c);	theServiceSubTypeDB = new ServiceSubTypeDB(c);	theServiceTypeDB = new com.hospital_os.objdb.ServiceTypeDB(c);	theSewDB = new SewDB(c);	theSexDB = new SexDB(c);	theSiteDB = new SiteDB(c);	theSQLTemplateDB = new SQLTemplateDB(c);	theSQLTemplateParamDB = new SQLTemplateParamDB(c);	theSurveilDB = new Surveil2DB(c);	theTlockDB = new TlockDB(c);	theTransferDB = new Transfer2DB(c);	theTypeAreaDB = new TypeAreaDB(c);	theTypeDishDB = new TypeDishDB(c);	theUomDB = new Uom2DB(c);	theUterusLevelDB = new UterusLevelDB(c);	theVersionDB = new VersionDB(c);	theVisitDB = new VisitDB(c);        theVisitPatientDB = new VisitPatientDB(c);        theVisitLabreferinDB = new VisitLabreferinDB(c);	theVisitStatusDB = new VisitStatusDB(c);	theVisitStatusLabreferinDB = new VisitStatusLabreferinDB(c);	theVisitTypeDB = new VisitTypeDB(c);	theVitalSignDB = new VitalSignDB(c);        theVisitYearDB = new VisitYearDB(c);	theVitalTemplateDB = new VitalTemplateDB(c);        theVitalTemplate2DB = new VitalTemplate2DB(c);	theWardDB = new Ward2DB(c);	theWaterTypeDB = new WaterTypeDB(c);	theXRayLeteralDB = new XRayLeteralDB(c);	theXRayPositionDB = new XRayPositionDB(c);	theSpecialContrctAdjustByVGaCTDB = new SpecialContrctAdjustByVGaCTDB(c);	theSpecialEmployeeDB = new SpecialEmployeeDB(c);	theSpecialPatientReportDB = new SpecialPatientReportDB(c);        theSpecialQueryVisit2DB = new SpecialQueryVisit2DB(c);	theSpecialQueryAppointmentDB = new SpecialQueryAppointment2DB(c);	theSpecialQueryBillingReceiptDB = new SpecialQueryBillingReceiptDB(c);	theSpecialQueryItemDB = new SpecialQueryItemDB(c);	theSpecialQueryOrderDB = new SpecialQueryOrderDB(c);	theSpecialQueryOrderDrugDB = new SpecialQueryOrderDrugDB(c);	theSpecialQueryOrderHistoryDrugDB = new SpecialQueryOrderHistoryDrugDB(c);	theSpecialQueueDespenseDB = new SpecialQueueDespenseDB(c);	theSpecialQueueEPIItemDB = new SpecialQueueEPIItemDB(c);	theSpecialQueueEPItemDrugDB = new SpecialQueueEPItemDrugDB(c);	theSpecialQueueVisitDB = new SpecialQueueVisitDB(c);        theSpecialQueryItem2DB = new SpecialQueryItem2DB(c);//neung        theSpecialQueryLabResultItem = new SpecialQueryLabResultItem(c);//neung//	theDrugStickerDetailDB = new DrugStickerDetailDB(c);//	thePrintPointDB = new PrintPointDB(c);//	theSetupPrintOpdDetailDB = new SetupPrintOpdDetailDB(c);//	theSetupPrintOpdHeadDB = new SetupPrintOpdHeadDB(c);        theQueueTransferDB = new QueueTransfer2DB(c);        theQueueTransferC2DB = new QueueTransfer2DB(c2);        theLookupDB = new LookupDB(c);        theTabPanelDB = new TabPanelDB(c);        theDxTemplate2DB = new DxTemplateDB(c);        theLabResultDetailDB = new LabResultDetailDB(c);        theLabResultGroupDB = new LabResultGroupDB(c);        theOfficeInCupDB = new OfficeInCupDB(c);        theDrugDoseMapUomDB = new DrugDoseMapUomDB(c);        theDrugDoseMapUom2DB = new DrugDoseMapUom2DB(c);        theDrugDosePrint2DB = new DrugDosePrint2DB(c);        theRiskFactorDB = new RiskFactorDB(c);        theFamilyHistoryDB = new FamilyHistoryDB(c);        thePersonalDiseaseDB = new PersonalDiseaseDB(c);        theAppointmentOrderDB = new AppointmentOrderDB(c);        theOrderLabSecretDB = new OrderLabSecretDB(c);        theDrugStandardDB = new DrugStandardDB(c);        theDrugStandardMapItemDB = new DrugStandardMapItemDB(c);        theDrugInteractionDB = new DrugInteractionDB(c);        theDrugInteractionDetailDB = new DrugInteractionDetailDB(c);        theOrderDrugInteractionDB = new OrderDrugInteractionDB(c);        theItemServiceDB = new ItemServiceDB(c);        theBodyOrganDB = new BodyOrganDB(c);        theDiseaseDB = new DiseaseDB(c);        theNutritionTypeMapDB = new NutritionTypeMapDB(c);        theNCDGroupDB = new NCDGroupDB(c);        theNCDDB = new NCDDB(c);        //amp        theAppointmentTemplateDB = new AppointmentTemplateDB(c);        theAppointmentTemplateItemDB = new AppointmentTemplateItemDB(c);        //sumo        theItem16GroupDB = new Item16GroupDB(c);        theGuideDB = new GuideDB(c); // sumo 04/08/2549 §”·π–π”        theCalDateAppointmentDB = new CalDateAppointmentDB(c); // sumo:08/08/2549 : µ—«§”π«≥«—π∑’Ëπ—¥        //tong        thePatientXNDB = new PatientXNDB(c);        theAccidentGroupDB = new AccidentGroupDB(c);        theAccidentGroupMapDB = new AccidentGroupMapDB(c);        theAccidentGroupPatientTypeDB = new AccidentGroupPatientTypeDB(c);        theAccidentTypeDB = new AccidentType2DB(c);        //neung        theWoundDB = new WoundDB(c);        //pu        theDrugDoseShortcutDB = new DrugDoseShortcutDB(c);        theDxTemplateMapItemDB = new DxTemplateMapItemDB(c);        //henbe        theAncDetailPcuDB = new AncDetailPcuDB(c);        theAfterMchMotherDB = new AfterMchMotherDB(c);        theAncPcuDB = new AncPcuDB(c);        theBornMchDB = new BornMchDB(c);        theCheckHealthDB = new CheckHealthDB(c);        theCheckHealthYearDB = new CheckHealthYearDB(c);        theCounselDB = new CounselDB(c);        theDentalDB = new DentalDB(c);        theEfficiencyDB = new EfficiencyDB(c);        theEpiDB = new EpiDB(c);        theEpiDetailDB = new EpiDetailDB(c);        theEpiOutSiteDB = new EpiOutSiteDB(c);        theFamilyPlaningDB = new FamilyPlaningDB(c);        theGrowHistoryDB = new GrowHistoryDB(c);        theGrowPcuDB = new GrowPcuDB(c);        theMaimDB = new MaimDB(c);        theNutritionDB = new NutritionDB(c);        thePPCareDB = new PPCareDB(c);        thePPDB = new PPDB(c);        thePregnancyDB = new PregnancyDB(c);        theUncontagiousDB = new UncontagiousDB(c);        theVisitHomeDB = new VisitHomeDB(c);        theReceiptModelDB = new ReceiptModelDB(c);        theOrderSpecifiedDB = new OrderSpecifiedDB(c);        theAutoReportBugDB = new AutoReportBugDB(c);//        theICD10TMDB = new ICD10TMDB(c);  //icd10tm        // Somprasong add for LIS 23-09-2010        theLisLnDB = new LisLnDB(c);        theLisOrderDB = new LisOrderDB(c);        theNotifyNoteDB = new NotifyNoteDB(c);        theNhsoRightDB = new NhsoRightDB(c);        theMapNhsoPlanDB = new MapNhsoPlanDB(c);        theNhsoSubInsclDB = new NhsoSubInsclDB(c);        theNhsoMainInsclDB = new NhsoMainInsclDB(c);        theMapNhsoSubInsclDB = new MapNhsoSubInsclDB(c);        theMapNhsoMainInsclDB = new MapNhsoMainInsclDB(c);        try{            c.open();            if(theOptionDB.select().used_1open_con.equals("1"))                ((ConnectionDBMgr)c).setOpenMode(false);            c.close();        }catch(Exception e){            e.printStackTrace(Constant.getPrintStream());        }        if(((ConnectionDBMgr)c).isOpenMode()) {            ((ConnectionDBMgr)c).begin();            ((ConnectionDBMgr)c2).begin();        }//        initData();    }    public void initData(){        //µÈÕß‡√’¬ß≈”¥—∫Õ—π„À¡Ë°ËÕπ‡æ√“–«Ë“Õ—π‡°Ë“¡—π®–‡°‘¥ exception ·πËπÕπ°Á®–‰¡Ë∑”Õ—πÀ≈—ßÊ        try{            theGActionDB.insert(GAction.A2601);            theGActionDB.insert(GAction.A2602);            theGActionDB.insert(GAction.A2401);            theGActionDB.insert(GAction.A2402);            theGActionDB.insert(GAction.A2907);        }        catch(Exception e){ Constant.println(e.getMessage());   }    }    public Version initConfigPcuVersion()    {        Version dbObj = new Version();        dbObj.table="s_health_version";        dbObj.pk_field="s_health_version_id";        dbObj.version_id   ="version_health_number";        dbObj.description   ="version_health_description";        dbObj.app_code   ="version_health_application_number";        dbObj.db_code   ="version_health_database_number";        dbObj.update_time="version_health_update_time";        return dbObj;    }    public Version initConfigReportVersion()    {        Version dbObj = new Version();        dbObj.table="s_report_version";        dbObj.pk_field="s_report_version_id";        dbObj.version_id   ="report_version_number";        dbObj.description   ="report_version_description";        dbObj.app_code   ="report_version_notice";        dbObj.db_code   ="report_version_application_number";        dbObj.update_time="report_version_update_date_time";        return dbObj;    }    public void checkAll() throws Exception{	try{ testFormLabreferout();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testFpType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testFStatus();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testGarbage();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testHCharac();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testHighRisk();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testICD102();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testICD92();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testInOutrdType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testItem2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testItemPrice();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLabGroup();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLabor();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLabResultDetail();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLabResultItem();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLabResultGroup();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLabSet();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//	try{ testLevel();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testListTransfer2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testLocalType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testMapQueueVisit2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testMapVisitDx();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testMarryStatus();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testNation();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testNofp();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testNutritionType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//	try{ testNutritionType2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOccupation2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOffice();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOfficeInCup();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOpdType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOption2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOptype();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOrderContinue2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOrderItem();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//isNull	try{ testOrderItemDrug2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOrderItemLabreferin();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOrderItemLabreferout();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//isNull	try{ testOrderItemReceiveDrug();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOrderItemStatusLabreferin();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//notFound	try{ testOrderResultLab();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testOrderResultLabreferin();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//notFound	try{ testOrderResultXray();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testParticipateOr2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPatientLabreferin();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPatientPayment();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPayer();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPayment();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPhysicalExam();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPlan2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{ testDrugDosePrint();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPostureBaby();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPrefix2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPregnantLevel();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPrimarySymptom();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPtmobieType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testPtStatusType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testQueueDespense();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testQueueDispense2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testQueueICD();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testQueueLab2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testQueueVisit();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testQueueXray();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//isNull	try{ testReceipt2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//isNull	try{ testReceiptItem2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//isNull	try{ testReceiptSubgroup2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testRefer();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{ testReferCause();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testRelation();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testReligion();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//	try{ testResultGiveBirth();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testResultLab2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//	try{ testResultStatus();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testResultXRay();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testResultXrayPosition();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testResultXraySize();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testReverseAdmit();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testRule();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSequenceData();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testServicePoint();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testServicePointDoctor2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testServiceSubType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testServiceType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSew();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSex();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSite();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSQLTemplate();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSQLTemplateParam();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testSurveil2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testTlock();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testTransfer2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testTypeArea();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testTypeDish();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testUom2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//	try{ testUterusLevel();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVersion2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVisitLabreferin();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVisitStatus();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVisitStatusLabreferin();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVisitType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVitalSign2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVitalTemplate();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testVitalTemplate2();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testWard();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}//	try{ testWaterType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testXRayLeteral();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}	try{ testXRayPosition();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{testPatientXN();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{testAccidentGroup();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{testAccidentGroupMap();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{testAccidentGroupPatientType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}        try{testAccidentType();}catch(Exception e){e.printStackTrace(Constant.getPrintStream());}    }public void testAccident()throws Exception {Accident a = new Accident();        theAccidentDB.insert(a);        theAccidentDB.selectByPK(a.getObjectId());        theAccidentDB.update(a);        theAccidentDB.delete(a);}public void testAccproType()throws Exception {AccproType a = new AccproType();        theAccproTypeDB.insert(a);        theAccproTypeDB.selectByPK(a.getObjectId());        theAccproTypeDB.update(a);        theAccproTypeDB.delete(a);}public void testAccrdType()throws Exception {AccrdType a = new AccrdType();        theAccrdTypeDB.insert(a);        theAccrdTypeDB.selectByPK(a.getObjectId());        theAccrdTypeDB.update(a);        theAccrdTypeDB.delete(a);}public void testAccuseType()throws Exception {AccuseType a = new AccuseType();        theAccuseTypeDB.insert(a);        theAccuseTypeDB.selectByPK(a.getObjectId());        theAccuseTypeDB.update(a);        theAccuseTypeDB.delete(a);}//public void testAnc()throws Exception {Anc a = new Anc();        theAncDB.insert(a);        theAncDB.selectByPK(a.getObjectId());        theAncDB.update(a);        theAncDB.delete(a);}public void testAnswer()throws Exception {Answer a = new Answer();        theAnswerDB.insert(a);        theAnswerDB.selectByPK(a.getObjectId());        theAnswerDB.update(a);        theAnswerDB.delete(a);}public void testAppointment2()throws Exception {Appointment2 a = new Appointment2();        theAppointmentDB.insert(a);        theAppointmentDB.selectByPK(a.getObjectId());        theAppointmentDB.update(a);        theAppointmentDB.delete(a);}public void testAuthentication()throws Exception {Authentication a = new Authentication();        theAuthenticationDB.insert(a);        theAuthenticationDB.selectByPK(a.getObjectId());        theAuthenticationDB.update(a);        theAuthenticationDB.delete(a);}public void testAutoOrderItem()throws Exception {AutoOrderItem a = new AutoOrderItem();        theAutoOrderItemDB.insert(a);        theAutoOrderItemDB.selectByPK(a.getObjectId());        theAutoOrderItemDB.update(a);        theAutoOrderItemDB.delete(a);}public void testAutoPayment()throws Exception {AutoPayment a = new AutoPayment();        theAutoPaymentDB.insert(a);        theAutoPaymentDB.selectByPK(a.getObjectId());        theAutoPaymentDB.update(a);        theAutoPaymentDB.delete(a);}public void testBilling()throws Exception {Billing a = new Billing();        theBillingDB.insert(a);        theBillingDB.selectByPK(a.getObjectId());        theBillingDB.update(a);        theBillingDB.delete(a);}public void testBillingGroup()throws Exception {BillingGroup a = new BillingGroup();        theBillingGroupDB.insert(a);        theBillingGroupDB.selectByPK(a.getObjectId());        theBillingGroupDB.update(a);        theBillingGroupDB.delete(a);}public void testBillingGroupItem2()throws Exception {BillingGroupItem2 a = new BillingGroupItem2();        theBillingGroupItemDB.insert(a);        theBillingGroupItemDB.selectByPK(a.getObjectId());        theBillingGroupItemDB.update(a);        theBillingGroupItemDB.delete(a);}public void testBillingInvoice2()throws Exception {BillingInvoice a = new BillingInvoice();        theBillingInvoiceDB.insert(a);        theBillingInvoiceDB.selectByPK(a.getObjectId());        theBillingInvoiceDB.update(a);        theBillingInvoiceDB.delete(a);}public void testBillingInvoiceItem2()throws Exception {BillingInvoiceItem a = new BillingInvoiceItem();        theBillingInvoiceItemDB.insert(a);        theBillingInvoiceItemDB.selectByPK(a.getObjectId());        theBillingInvoiceItemDB.update(a);        theBillingInvoiceItemDB.delete(a);}public void testBillingInvoiceSubgroup2()throws Exception {BillingInvoiceSubgroup a = new BillingInvoiceSubgroup();        theBillingInvoiceSubgroupDB.insert(a);        theBillingInvoiceSubgroupDB.selectByPK(a.getObjectId());        theBillingInvoiceSubgroupDB.update(a);        theBillingInvoiceSubgroupDB.delete(a);}public void testBillingItem()throws Exception {BillingItem a = new BillingItem();        theBillingItemDB.insert(a);        theBillingItemDB.selectByPK(a.getObjectId());        theBillingItemDB.update(a);        theBillingItemDB.delete(a);}public void testBillingSubgroup()throws Exception {BillingSubgroup a = new BillingSubgroup();        theBillingSubgroupDB.insert(a);        theBillingSubgroupDB.selectByPK(a.getObjectId());        theBillingSubgroupDB.update(a);        theBillingSubgroupDB.delete(a);}public void testBloodGroup()throws Exception {BloodGroup a = new BloodGroup();        theBloodGroupDB.insert(a);        theBloodGroupDB.selectByPK(a.getObjectId());        theBloodGroupDB.update(a);        theBloodGroupDB.delete(a);}public void testCategoryGroup()throws Exception {CategoryGroup a = new CategoryGroup();        theCategoryGroupDB.insert(a);        theCategoryGroupDB.selectByPK(a.getObjectId());        theCategoryGroupDB.update(a);        theCategoryGroupDB.delete(a);}public void testCategoryGroupItem()throws Exception {CategoryGroupItem a = new CategoryGroupItem();        theCategoryGroupItemDB.insert(a);        theCategoryGroupItemDB.selectByPK(a.getObjectId());        theCategoryGroupItemDB.update(a);        theCategoryGroupItemDB.delete(a);}public void testClinic()throws Exception {Clinic a = new Clinic();        theClinicDB.insert(a);        theClinicDB.selectByPK(a.getObjectId());        theClinicDB.update(a);        theClinicDB.delete(a);}public void testComCharac()throws Exception {ComCharac a = new ComCharac();        theComCharacDB.insert(a);        theComCharacDB.selectByPK(a.getObjectId());        theComCharacDB.update(a);        theComCharacDB.delete(a);}//public void testConduct()throws Exception {Conduct a = new Conduct();        theConductDB.insert(a);        theConductDB.selectByPK(a.getObjectId());        theConductDB.update(a);        theConductDB.delete(a);}public void testContractAdjust()throws Exception {ContractAdjust a = new ContractAdjust();        theContractAdjustDB.insert(a);        theContractAdjustDB.selectByPK(a.getObjectId());        theContractAdjustDB.update(a);        theContractAdjustDB.delete(a);}public void testContract()throws Exception {Contract a = new Contract();        theContractDB.insert(a);        theContractDB.selectByPK(a.getObjectId());        theContractDB.update(a);        theContractDB.delete(a);}public void testChronic2()throws Exception {Chronic a = new Chronic();        theChronicDB.insert(a);        theChronicDB.selectByPK(a.getObjectId());        theChronicDB.update(a);        theChronicDB.delete(a);}public void testDayTime()throws Exception {DayTime a = new DayTime();        theDayTimeDB.insert(a);        theDayTimeDB.selectByPK(a.getObjectId());        theDayTimeDB.update(a);        theDayTimeDB.delete(a);}public void testDeath()throws Exception {Death a = new Death();        theDeathDB.insert(a);        theDeathDB.selectByPK(a.getObjectId());        theDeathDB.update(a);        theDeathDB.delete(a);}public void testDiagIcd10()throws Exception {DiagIcd10 a = new DiagIcd10();        theDiagIcd10DB.insert(a);        theDiagIcd10DB.selectByPK(a.getObjectId());        theDiagIcd10DB.update(a);       }public void testDiagIcd9()throws Exception {DiagIcd9 a = new DiagIcd9();        theDiagIcd9DB.insert(a);        theDiagIcd9DB.selectByPK(a.getObjectId());        theDiagIcd9DB.update(a);        theDiagIcd9DB.delete(a);}public void testDiagnosisStatus()throws Exception {DiagnosisStatus a = new DiagnosisStatus();        theDiagnosisStatusDB.insert(a);        theDiagnosisStatusDB.selectByPK(a.getObjectId());        theDiagnosisStatusDB.update(a);        theDiagnosisStatusDB.delete(a);}public void testDischarge()throws Exception {Discharge a = new Discharge();        theDischargeDB.insert(a);        theDischargeDB.selectByPK(a.getObjectId());        theDischargeDB.update(a);        theDischargeDB.delete(a);}public void testDischargeType()throws Exception {DischargeType a = new DischargeType();        theDischargeTypeDB.insert(a);        theDischargeTypeDB.selectByPK(a.getObjectId());        theDischargeTypeDB.update(a);        theDischargeTypeDB.delete(a);}public void testDischargeOpd()throws Exception {DischargeOpd a = new DischargeOpd();        theDischargeOpdDB.insert(a);        theDischargeOpdDB.selectByPK(a.getObjectId());        theDischargeOpdDB.update(a);        theDischargeOpdDB.delete(a);}public void testDoseDrugSet()throws Exception {DoseDrugSet a = new DoseDrugSet();        theDoseDrugSetDB.insert(a);        theDoseDrugSetDB.selectByPK(a.getObjectId());        theDoseDrugSetDB.update(a);        theDoseDrugSetDB.delete(a);}//public void testDoseEpiSet()throws Exception {DoseEpiSet a = new DoseEpiSet();        theDoseEpiSetDB.insert(a);        theDoseEpiSetDB.selectByPK(a.getObjectId());        theDoseEpiSetDB.update(a);        theDoseEpiSetDB.delete(a);}public void testDrugAllergy()throws Exception {DrugAllergy a = new DrugAllergy();        theDrugAllergyDB.insert(a);        theDrugAllergyDB.selectByPK(a.getObjectId());        theDrugAllergyDB.update(a);        theDrugAllergyDB.delete(a);}public void testDrug()throws Exception {Drug a = new Drug();        theDrugDB.insert(a);        theDrugDB.selectByPK(a.getObjectId());        theDrugDB.update(a);        theDrugDB.delete(a);}public void testDrugFrequency2()throws Exception {DrugFrequency2 a = new DrugFrequency2();        theDrugFrequencyDB.insert(a);        theDrugFrequencyDB.selectByPK(a.getObjectId());        theDrugFrequencyDB.update(a);        theDrugFrequencyDB.delete(a);}public void testDrugInstruction2()throws Exception {DrugInstruction2 a = new DrugInstruction2();        theDrugInstructionDB.insert(a);        theDrugInstructionDB.selectByPK(a.getObjectId());        theDrugInstructionDB.update(a);        theDrugInstructionDB.delete(a);}public void testDrugSet()throws Exception {DrugSet a = new DrugSet();        theDrugSetDB.insert(a);        theDrugSetDB.selectByPK(a.getObjectId());        theDrugSetDB.update(a);        theDrugSetDB.delete(a);}public void testDrugSetGroup()throws Exception {DrugSetGroup a = new DrugSetGroup();        theDrugSetGroupDB.insert(a);        theDrugSetGroupDB.selectByPK(a.getObjectId());        theDrugSetGroupDB.update(a);        theDrugSetGroupDB.delete(a);}public void testDxTemplate()throws Exception {DxTemplate a = new DxTemplate();        theDxTemplateDB.insert(a);        theDxTemplateDB.selectByPK(a.getObjectId());        theDxTemplateDB.update(a);        theDxTemplateDB.delete(a);}public void testDxTemplate2()throws Exception {DxTemplate a = new DxTemplate();        theDxTemplate2DB.insert(a);        theDxTemplate2DB.selectByPK(a.getObjectId());        theDxTemplate2DB.update(a);        theDxTemplate2DB.delete(a);}public void testDxtype()throws Exception {Dxtype a = new Dxtype();        theDxtypeDB.insert(a);        theDxtypeDB.selectByPK(a.getObjectId());        theDxtypeDB.update(a);        theDxtypeDB.delete(a);}public void testEducate()throws Exception {Educate a = new Educate();        theEducateDB.insert(a);        theEducateDB.selectByPK(a.getObjectId());        theEducateDB.update(a);        theEducateDB.delete(a);}public void testEmployee()throws Exception {Employee a = new Employee();        theEmployeeDB.insert(a);        theEmployeeDB.selectByPK(a.getObjectId());        theEmployeeDB.update(a);        theEmployeeDB.delete(a);}//public void testEpi()throws Exception {Epi a = new Epi();        theEpiDB.insert(a);        theEpiDB.selectByPK(a.getObjectId());        theEpiDB.update(a);        theEpiDB.delete(a);}//public void testEpiDetail()throws Exception {EpiDetail a = new EpiDetail();        theEpiDetailDB.insert(a);        theEpiDetailDB.selectByPK(a.getObjectId());        theEpiDetailDB.update(a);        theEpiDetailDB.delete(a);}//public void testEpiSet()throws Exception {EpiSet a = new EpiSet();        theEpiSetDB.insert(a);        theEpiSetDB.selectByPK(a.getObjectId());        theEpiSetDB.update(a);        theEpiSetDB.delete(a);}public void testFilmSize2()throws Exception {    FilmSize a = new FilmSize();    theFilmSizeDB.insert(a);    //theFilmSizeDB.selectByPK(a.getObjectId());    theFilmSizeDB.update(a);    //theFilmSizeDB.delete(a);/////////≈∫‰¡Ë‰¥È‡æ√“–Õ–‰√}public void testFormLabreferout()throws Exception {FormLabreferout a = new FormLabreferout();        theFormLabreferoutDB.insert(a);        theFormLabreferoutDB.selectByPK(a.getObjectId());        theFormLabreferoutDB.update(a);        theFormLabreferoutDB.delete(a);}public void testFpType()throws Exception {FpType a = new FpType();        theFpTypeDB.insert(a);        theFpTypeDB.selectByPK(a.getObjectId());        theFpTypeDB.update(a);        theFpTypeDB.delete(a);}public void testFStatus()throws Exception {FStatus a = new FStatus();        theFStatusDB.insert(a);        theFStatusDB.selectByPK(a.getObjectId());        theFStatusDB.update(a);        theFStatusDB.delete(a);}public void testGarbage()throws Exception {Garbage a = new Garbage();        theGarbageDB.insert(a);        theGarbageDB.selectByPK(a.getObjectId());        theGarbageDB.update(a);        theGarbageDB.delete(a);}public void testHCharac()throws Exception {HCharac a = new HCharac();        theHCharacDB.insert(a);        theHCharacDB.selectByPK(a.getObjectId());        theHCharacDB.update(a);        theHCharacDB.delete(a);}public void testHighRisk()throws Exception {HighRisk a = new HighRisk();        theHighRiskDB.insert(a);        theHighRiskDB.selectByPK(a.getObjectId());        theHighRiskDB.update(a);        theHighRiskDB.delete(a);}public void testICD102()throws Exception {ICD10 a = new ICD10();        theICD10DB.insert(a);        theICD10DB.selectByPK(a.getObjectId());        theICD10DB.update(a);        theICD10DB.delete(a);}public void testICD92()throws Exception {ICD9 a = new ICD9();        theICD9DB.insert(a);        theICD9DB.selectByPK(a.getObjectId());        theICD9DB.update(a);        theICD9DB.delete(a);}public void testInOutrdType()throws Exception {InOutrdType a = new InOutrdType();        theInOutrdTypeDB.insert(a);        theInOutrdTypeDB.selectByPK(a.getObjectId());        theInOutrdTypeDB.update(a);        theInOutrdTypeDB.delete(a);}public void testItem2()throws Exception {Item a = new Item();        theItemDB.insert(a);        theItemDB.selectByPK(a.getObjectId());        theItemDB.update(a);        theItemDB.delete(a);}public void testItemPrice()throws Exception {ItemPrice a = new ItemPrice();        theItemPriceDB.insert(a);        theItemPriceDB.selectByPK(a.getObjectId());        theItemPriceDB.update(a);        theItemPriceDB.delete(a);}public void testLabGroup()throws Exception {LabGroup a = new LabGroup();        theLabGroupDB.insert(a);        theLabGroupDB.selectByPK(a.getObjectId());        theLabGroupDB.update(a);        theLabGroupDB.delete(a);}public void testLabor()throws Exception {Labor a = new Labor();        theLaborDB.insert(a);        theLaborDB.selectByPK(a.getObjectId());        theLaborDB.update(a);        theLaborDB.delete(a);}public void testLabResultItem()throws Exception {LabResultItem a = new LabResultItem();        theLabResultItemDB.insert(a);        theLabResultItemDB.selectByPK(a.getObjectId());        theLabResultItemDB.update(a);        theLabResultItemDB.delete(a);}public void testLabSet()throws Exception {LabSet a = new LabSet();        theLabSetDB.insert(a);        theLabSetDB.selectByPK(a.getObjectId());        theLabSetDB.update(a);        theLabSetDB.delete(a);}public void testLevel()throws Exception {Level a = new Level();        theLevelDB.insert(a);        theLevelDB.selectByPK(a.getObjectId());        theLevelDB.update(a);        theLevelDB.delete(a);}public void testLocalType()throws Exception {LocalType a = new LocalType();        theLocalTypeDB.insert(a);        theLocalTypeDB.selectByPK(a.getObjectId());        theLocalTypeDB.update(a);        theLocalTypeDB.delete(a);}public void testMapQueueVisit2()throws Exception {MapQueueVisit a = new MapQueueVisit();        theMapQueueVisitDB.insert(a);        theMapQueueVisitDB.selectByPK(a.getObjectId());        theMapQueueVisitDB.update(a);        theMapQueueVisitDB.delete(a);}public void testListTransfer2()throws Exception {//theListTransferDB.insert(a);//theListTransferDB.selectByPK(a.getObjectId());//theListTransferDB.update(a);//theListTransferDB.delete(a); readOnly ‡æ√“–Õ–‰√}public void testMapVisitDx()throws Exception {    MapVisitDx a = new MapVisitDx();    theMapVisitDxDB.insert(a);    //theMapVisitDxDB.selectByPK(a.getObjectId());    theMapVisitDxDB.update(a);    theMapVisitDxDB.delete(a);}public void testMarryStatus()throws Exception {MarryStatus a = new MarryStatus();        theMarryStatusDB.insert(a);        theMarryStatusDB.selectByPK(a.getObjectId());        theMarryStatusDB.update(a);        theMarryStatusDB.delete(a);}public void testNation()throws Exception {Nation a = new Nation();        theNationDB.insert(a);        theNationDB.selectByPK(a.getObjectId());        theNationDB.update(a);        theNationDB.delete(a);}public void testNofp()throws Exception {Nofp a = new Nofp();        theNofpDB.insert(a);        theNofpDB.selectByPK(a.getObjectId());        theNofpDB.update(a);        theNofpDB.delete(a);}public void testNutritionType()throws Exception {NutritionType a = new NutritionType();        theNutritionTypeDB.insert(a);        theNutritionTypeDB.selectByPK(a.getObjectId());        theNutritionTypeDB.update(a);        theNutritionTypeDB.delete(a);}//public void testNutritionType2()throws Exception {NutritionType2 a = new NutritionType2();        theNutritionType2DB.insert(a);        theNutritionType2DB.selectByPK(a.getObjectId());        theNutritionType2DB.update(a);        theNutritionType2DB.delete(a);}public void testOccupation2()throws Exception {Occupation2 a = new Occupation2();        theOccupatDB.insert(a);        theOccupatDB.selectByPK(a.getObjectId());        theOccupatDB.update(a);        theOccupatDB.delete(a);}public void testOffice()throws Exception {    Office a = new Office();    //theOfficeDB.insert(a);    theOfficeDB.selectByPK(a.getObjectId());    theOfficeDB.update(a);    theOfficeDB.delete(a);}public void testOfficeInCup()throws Exception {OfficeInCup a = new OfficeInCup();    theOfficeInCupDB.insert(a);    //theOfficeInCupDB.selectByPK(a.getObjectId());    //theOfficeInCupDB.update(a);    theOfficeInCupDB.delete(a);}public void testOpdType()throws Exception {OpdType a = new OpdType();        theOpdTypeDB.insert(a);        theOpdTypeDB.selectByPK(a.getObjectId());        theOpdTypeDB.update(a);        theOpdTypeDB.delete(a);}public void testOption2()throws Exception {Option a = new Option();        theOptionDB.insert(a);        theOptionDB.selectByPK(a.getObjectId());        theOptionDB.update(a);        theOptionDB.delete(a);}public void testOptype()throws Exception {Optype a = new Optype();        theOptypeDB.insert(a);        theOptypeDB.selectByPK(a.getObjectId());        theOptypeDB.update(a);        theOptypeDB.delete(a);}public void testOrderContinue2()throws Exception {OrderContinue a = new OrderContinue();        theOrderContinueDB.insert(a);        theOrderContinueDB.selectByPK(a.getObjectId());        theOrderContinueDB.update(a);        theOrderContinueDB.delete(a);}public void testOrderItem()throws Exception {OrderItem a = new OrderItem();        theOrderItemDB.insert(a);        theOrderItemDB.selectByPK(a.getObjectId());        theOrderItemDB.update(a);        theOrderItemDB.delete(a);}public void testOrderItemDrug2()throws Exception {OrderItemDrug a = new OrderItemDrug();        theOrderItemDrugDB.insert(a);        theOrderItemDrugDB.selectByPK(a.getObjectId());        theOrderItemDrugDB.update(a);        theOrderItemDrugDB.delete(a);}public void testOrderItemLabreferin()throws Exception {OrderItemLabreferin a = new OrderItemLabreferin();        theOrderItemLabreferinDB.insert(a);        theOrderItemLabreferinDB.selectByPK(a.getObjectId());        theOrderItemLabreferinDB.update(a);        theOrderItemLabreferinDB.delete(a);}public void testOrderItemLabreferout()throws Exception {    OrderItemLabreferout a = new OrderItemLabreferout();    theOrderItemLabreferoutDB.insert(a);//    theOrderItemLabreferoutDB.selectByPK(a.getObjectId());    theOrderItemLabreferoutDB.update(a);    theOrderItemLabreferoutDB.delete(a);}public void testOrderItemReceiveDrug()throws Exception {OrderItemReceiveDrug a = new OrderItemReceiveDrug();        theOrderItemReceiveDrugDB.insert(a);        theOrderItemReceiveDrugDB.selectByPK(a.getObjectId());        theOrderItemReceiveDrugDB.update(a);        theOrderItemReceiveDrugDB.delete(a);}public void testOrderItemStatusLabreferin()throws Exception {    OrderItemStatusLabreferin a = new OrderItemStatusLabreferin();    theOrderItemStatusLabreferinDB.insert(a);    //theOrderItemStatusLabreferinDB.selectByPK(a.getObjectId());    theOrderItemStatusLabreferinDB.update(a);    theOrderItemStatusLabreferinDB.delete(a);}public void testOrderResultLab()throws Exception {OrderResultLab a = new OrderResultLab();        theOrderResultLabDB.insert(a);        theOrderResultLabDB.selectByPK(a.getObjectId());        theOrderResultLabDB.update(a);        theOrderResultLabDB.delete(a);}public void testOrderResultLabreferin()throws Exception {    OrderResultLabreferin a = new OrderResultLabreferin();    theOrderResultLabreferinDB.insert(a);    //theOrderResultLabreferinDB.selectByPK(a.getObjectId());    theOrderResultLabreferinDB.update(a);    theOrderResultLabreferinDB.delete(a);}public void testOrderResultXray()throws Exception {OrderResultXray a = new OrderResultXray();        theOrderResultXrayDB.insert(a);        theOrderResultXrayDB.selectByPK(a.getObjectId());        theOrderResultXrayDB.update(a);        theOrderResultXrayDB.delete(a);}public void testParticipateOr2()throws Exception {    ParticipateOr a = new ParticipateOr();    theParticipateOrDB.insert(a);    //theParticipateOrDB.selectByPK(a.getObjectId());//    theParticipateOrDB.update(a);    theParticipateOrDB.delete(a);}public void testPatientLabreferin()throws Exception {PatientLabreferin a = new PatientLabreferin();        thePatientLabreferinDB.insert(a);        thePatientLabreferinDB.selectByPK(a.getObjectId());        thePatientLabreferinDB.update(a);        thePatientLabreferinDB.delete(a);}public void testPatientPayment()throws Exception {PatientPayment a = new PatientPayment();        thePatientPaymentDB.insert(a);        thePatientPaymentDB.selectByPK(a.getObjectId());        thePatientPaymentDB.update(a);        thePatientPaymentDB.delete(a);}public void testPayer()throws Exception {Payer a = new Payer();        thePayerDB.insert(a);        thePayerDB.selectByPK(a.getObjectId());        thePayerDB.update(a);        thePayerDB.delete(a);}public void testPayment()throws Exception {Payment a = new Payment();        thePaymentDB.insert(a);        thePaymentDB.selectByPK(a.getObjectId());        thePaymentDB.update(a);        thePaymentDB.delete(a);}public void testPhysicalExam()throws Exception {PhysicalExam a = new PhysicalExam();        thePhysicalExamDB.insert(a);        thePhysicalExamDB.selectByPK(a.getObjectId());        thePhysicalExamDB.update(a);        thePhysicalExamDB.delete(a);}public void testPlan2()throws Exception {Plan a = new Plan();        thePlanDB.insert(a);        thePlanDB.selectByPK(a.getObjectId());        thePlanDB.update(a);        thePlanDB.delete(a);}public void testDrugDosePrint()throws Exception {DrugDosePrint a = new DrugDosePrint();        theDrugDosePrintDB.insert(a);        theDrugDosePrintDB.selectByPK(a.getObjectId());        theDrugDosePrintDB.update(a);        theDrugDosePrintDB.delete(a);}public void testPostureBaby()throws Exception {PostureBaby a = new PostureBaby();        thePostureBabyDB.insert(a);        thePostureBabyDB.selectByPK(a.getObjectId());        thePostureBabyDB.update(a);        thePostureBabyDB.delete(a);}public void testPrefix2()throws Exception {Prefix2 a = new Prefix2();        thePrefixDB.insert(a);        thePrefixDB.selectByPK(a.getObjectId());        thePrefixDB.update(a);        thePrefixDB.delete(a);}public void testPregnantLevel()throws Exception {PregnantLevel a = new PregnantLevel();        thePregnantLevelDB.insert(a);        thePregnantLevelDB.selectByPK(a.getObjectId());        thePregnantLevelDB.update(a);        thePregnantLevelDB.delete(a);}public void testPrimarySymptom()throws Exception {PrimarySymptom a = new PrimarySymptom();        thePrimarySymptomDB.insert(a);        thePrimarySymptomDB.selectByPK(a.getObjectId());        thePrimarySymptomDB.update(a);        thePrimarySymptomDB.delete(a);}public void testPtmobieType()throws Exception {PtmobieType a = new PtmobieType();        thePtmobieTypeDB.insert(a);        thePtmobieTypeDB.selectByPK(a.getObjectId());        thePtmobieTypeDB.update(a);        thePtmobieTypeDB.delete(a);}public void testPtStatusType()throws Exception {PtStatusType a = new PtStatusType();        thePtStatusTypeDB.insert(a);        thePtStatusTypeDB.selectByPK(a.getObjectId());        thePtStatusTypeDB.update(a);        thePtStatusTypeDB.delete(a);}public void testQueueDespense()throws Exception {QueueDespense a = new QueueDespense();        theQueueDespenseDB.insert(a);        theQueueDespenseDB.selectByPK(a.getObjectId());        theQueueDespenseDB.update(a);        theQueueDespenseDB.delete(a);}public void testQueueDispense2()throws Exception {QueueDispense2 a = new QueueDispense2();        theQueueDispense2DB.insert(a);        theQueueDispense2DB.selectByPK(a.getObjectId());        theQueueDispense2DB.update(a);        theQueueDispense2DB.delete(a);}public void testQueueICD()throws Exception {QueueICD a = new QueueICD();        theQueueICDDB.insert(a);        theQueueICDDB.selectByPK(a.getObjectId());        theQueueICDDB.update(a);        theQueueICDDB.delete(a);}public void testQueueLab2()throws Exception {QueueLab2 a = new QueueLab2();        theQueueLabDB.insert(a);        theQueueLabDB.selectByPK(a.getObjectId());        theQueueLabDB.update(a);        theQueueLabDB.delete(a);}public void testQueueVisit()throws Exception {QueueVisit a = new QueueVisit();        theQueueVisitDB.insert(a);        theQueueVisitDB.selectByPK(a.getObjectId());        theQueueVisitDB.update(a);        theQueueVisitDB.delete(a);}public void testQueueXray()throws Exception {QueueXray a = new QueueXray();        theQueueXrayDB.insert(a);        theQueueXrayDB.selectByPK(a.getObjectId());        theQueueXrayDB.update(a);        theQueueXrayDB.delete(a);}public void testReceipt2()throws Exception {Receipt a = new Receipt();        theReceiptDB.insert(a);        theReceiptDB.selectByPK(a.getObjectId());        theReceiptDB.update(a);        theReceiptDB.delete(a);}public void testReceiptItem2()throws Exception {ReceiptItem a = new ReceiptItem();        theReceiptItemDB.insert(a);        theReceiptItemDB.selectByPK(a.getObjectId());        theReceiptItemDB.update(a);        theReceiptItemDB.delete(a);}public void testReceiptSubgroup2()throws Exception {ReceiptSubgroup a = new ReceiptSubgroup();        theReceiptSubgroupDB.insert(a);        theReceiptSubgroupDB.selectByPK(a.getObjectId());        theReceiptSubgroupDB.update(a);        theReceiptSubgroupDB.delete(a);}public void testRefer()throws Exception {Refer a = new Refer();        theReferDB.insert(a);        theReferDB.selectByPK(a.getObjectId());        theReferDB.update(a);        theReferDB.delete(a);}public void testReferCause()throws Exception {ReferCause a = new ReferCause();        theReferCauseDB.selectByPK(a.getObjectId());}public void testRelation()throws Exception {Relation a = new Relation();        theRelationDB.insert(a);        theRelationDB.selectByPK(a.getObjectId());        theRelationDB.update(a);        theRelationDB.delete(a);}public void testReligion()throws Exception {Religion a = new Religion();        theReligionDB.insert(a);        theReligionDB.selectByPK(a.getObjectId());        theReligionDB.update(a);        theReligionDB.delete(a);}//public void testResultGiveBirth()throws Exception {ResultGiveBirth a = new ResultGiveBirth();        theResultGiveBirthDB.insert(a);        theResultGiveBirthDB.selectByPK(a.getObjectId());        theResultGiveBirthDB.update(a);        theResultGiveBirthDB.delete(a);}public void testResultLab2()throws Exception {ResultLab a = new ResultLab();        theResultLabDB.insert(a);        theResultLabDB.selectByPK(a.getObjectId());        theResultLabDB.update(a);        theResultLabDB.delete(a);}//public void testResultStatus()throws Exception {ResultStatus a = new ResultStatus();        theResultStatusDB.insert(a);        theResultStatusDB.selectByPK(a.getObjectId());        theResultStatusDB.update(a);        theResultStatusDB.delete(a);}public void testResultXRay()throws Exception {    ResultXRay a = new ResultXRay();    theResultXRayDB.insert(a);    theResultXRayDB.selectByPK(a.getObjectId());    theResultXRayDB.update(a);    //theResultXRayDB.delete(a);}public void testResultXrayPosition()throws Exception {ResultXrayPosition a = new ResultXrayPosition();        theResultXrayPositionDB.insert(a);        theResultXrayPositionDB.selectByPK(a.getObjectId());        theResultXrayPositionDB.update(a);        theResultXrayPositionDB.delete(a);}public void testResultXraySize()throws Exception {ResultXraySize a = new ResultXraySize();        theResultXraySizeDB.insert(a);        theResultXraySizeDB.selectByPK(a.getObjectId());        theResultXraySizeDB.update(a);        theResultXraySizeDB.delete(a);}public void testReverseAdmit()throws Exception {ReverseAdmit a = new ReverseAdmit();        theReverseAdmitDB.insert(a);        theReverseAdmitDB.selectByPK(a.getObjectId());        theReverseAdmitDB.update(a);        theReverseAdmitDB.delete(a);}public void testRule()throws Exception {Rule a = new Rule();        theRuleDB.insert(a);        theRuleDB.selectByPK(a.getObjectId());        theRuleDB.update(a);        theRuleDB.delete(a);}public void testSequenceData()throws Exception {SequenceData a = new SequenceData();        theSequenceDataDB.insert(a);        theSequenceDataDB.selectByPK(a.getObjectId());        theSequenceDataDB.update(a);        theSequenceDataDB.delete(a);}public void testServicePoint()throws Exception {ServicePoint a = new ServicePoint();        theServicePointDB.insert(a);        theServicePointDB.selectByPK(a.getObjectId());        theServicePointDB.update(a);        theServicePointDB.delete(a);}public void testServicePointDoctor2()throws Exception {    ServicePointDoctor a = new ServicePointDoctor();    theServicePointDoctorDB.insert(a);    theServicePointDoctorDB.selectByPK(a.getObjectId());    theServicePointDoctorDB.update(a);    theServicePointDoctorDB.delete(a.getObjectId());}public void testServiceSubType()throws Exception {ServiceSubType a = new ServiceSubType();        theServiceSubTypeDB.insert(a);        theServiceSubTypeDB.selectByPK(a.getObjectId());        theServiceSubTypeDB.insert(a);        theServiceSubTypeDB.delete(a);}public void testServiceType()throws Exception {ServiceType a = new ServiceType();        theServiceTypeDB.insert(a);        theServiceTypeDB.selectByPK(a.getObjectId());        theServiceTypeDB.update(a);        theServiceTypeDB.delete(a);}public void testSew()throws Exception {Sew a = new Sew();        theSewDB.insert(a);        theSewDB.selectByPK(a.getObjectId());        theSewDB.update(a);        theSewDB.delete(a);}public void testSex()throws Exception {Sex a = new Sex();        theSexDB.insert(a);        theSexDB.selectByPK(a.getObjectId());        theSexDB.update(a);        theSexDB.delete(a);}public void testSite()throws Exception {Site a = new Site();        theSiteDB.insert(a);        theSiteDB.selectByPK(a.getObjectId());        theSiteDB.update(a);        theSiteDB.delete(a);}public void testSQLTemplate()throws Exception {SQLTemplate a = new SQLTemplate();        theSQLTemplateDB.insert(a);        theSQLTemplateDB.selectByPK(a.getObjectId());        theSQLTemplateDB.update(a);        theSQLTemplateDB.delete(a);}public void testSQLTemplateParam()throws Exception {SQLTemplateParam a = new SQLTemplateParam();        theSQLTemplateParamDB.insert(a);        theSQLTemplateParamDB.selectByPK(a.getObjectId());        theSQLTemplateParamDB.update(a);        theSQLTemplateParamDB.delete(a);}public void testSurveil2()throws Exception {Surveil a = new Surveil();        theSurveilDB.insert(a);        theSurveilDB.selectByPK(a.getObjectId());        theSurveilDB.update(a);        theSurveilDB.delete(a);}public void testTlock()throws Exception {Tlock a = new Tlock();        theTlockDB.insert(a);        theTlockDB.selectByPK(a.getObjectId());        theTlockDB.update(a);        theTlockDB.delete(a);}public void testTransfer2()throws Exception {    Transfer a = new Transfer();    theTransferDB.insert(a);    theTransferDB.selectByPK(a.getObjectId());    theTransferDB.update(a);    //theTransferDB.delete(a);}public void testTypeArea()throws Exception {TypeArea a = new TypeArea();        theTypeAreaDB.insert(a);        theTypeAreaDB.selectByPK(a.getObjectId());        theTypeAreaDB.update(a);        theTypeAreaDB.delete(a);}public void testTypeDish()throws Exception {TypeDish a = new TypeDish();        theTypeDishDB.insert(a);        theTypeDishDB.selectByPK(a.getObjectId());        theTypeDishDB.update(a);        theTypeDishDB.delete(a);}public void testUom2()throws Exception {Uom2 a = new Uom2();        theUomDB.insert(a);        theUomDB.selectByPK(a.getObjectId());        theUomDB.update(a);        theUomDB.delete(a);}//public void testUterusLevel()throws Exception {UterusLevel a = new UterusLevel();        theUterusLevelDB.insert(a);        theUterusLevelDB.selectByPK(a.getObjectId());        theUterusLevelDB.update(a);        theUterusLevelDB.delete(a);}public void testVersion2()throws Exception {Version a = new Version();        theVersionDB.insert(a);        theVersionDB.selectByPK(a.getObjectId());        theVersionDB.update(a);        theVersionDB.delete(a);}public void testVisitLabreferin()throws Exception {    VisitLabreferin a = new VisitLabreferin();    theVisitLabreferinDB.insert(a);    //heVisitLabreferinDB.selectByPK(a.getObjectId());    theVisitLabreferinDB.update(a);    theVisitLabreferinDB.delete(a);}public void testVisitStatus()throws Exception {VisitStatus a = new VisitStatus();        theVisitStatusDB.insert(a);        theVisitStatusDB.selectByPK(a.getObjectId());        theVisitStatusDB.update(a);        theVisitStatusDB.delete(a);}public void testVisitStatusLabreferin()throws Exception {    VisitStatusLabreferin a = new VisitStatusLabreferin();    theVisitStatusLabreferinDB.insert(a);    //theVisitStatusLabreferinDB.selectByPK(a.getObjectId());    theVisitStatusLabreferinDB.update(a);    theVisitStatusLabreferinDB.delete(a);}public void testVisitType()throws Exception {VisitType a = new VisitType();        theVisitTypeDB.insert(a);        theVisitTypeDB.selectByPK(a.getObjectId());        theVisitTypeDB.update(a);        theVisitTypeDB.delete(a);}public void testVitalSign2()throws Exception {VitalSign a = new VitalSign();        theVitalSignDB.insert(a);        theVitalSignDB.selectByPK(a.getObjectId());        theVitalSignDB.update(a);        theVitalSignDB.delete(a);}public void testVitalTemplate()throws Exception {VitalTemplate a = new VitalTemplate();        theVitalTemplateDB.insert(a);        theVitalTemplateDB.selectByPK(a.getObjectId());        theVitalTemplateDB.update(a);        theVitalTemplateDB.delete(a);}public void testVitalTemplate2()throws Exception {VitalTemplate2 a = new VitalTemplate2();        theVitalTemplate2DB.insert(a);        theVitalTemplate2DB.selectByPK(a.getObjectId());        theVitalTemplate2DB.update(a);        theVitalTemplate2DB.delete(a);}public void testWard()throws Exception {Ward a = new Ward();        theWardDB.insert(a);        theWardDB.selectByPK(a.getObjectId());        theWardDB.update(a);        theWardDB.delete(a);}//public void testWaterType()throws Exception {WaterType a = new WaterType();        theWaterTypeDB.insert(a);        theWaterTypeDB.selectByPK(a.getObjectId());        theWaterTypeDB.update(a);        theWaterTypeDB.delete(a);}public void testXRayLeteral()throws Exception {XRayLeteral a = new XRayLeteral();        theXRayLeteralDB.insert(a);        theXRayLeteralDB.selectByPK(a.getObjectId());        theXRayLeteralDB.update(a);        theXRayLeteralDB.delete(a);}public void testXRayPosition()throws Exception {XRayPosition a = new XRayPosition();        theXRayPositionDB.insert(a);        theXRayPositionDB.selectByPK(a.getObjectId());        theXRayPositionDB.update(a);        theXRayPositionDB.delete(a);}public void testLabResultGroup()throws Exception {LabResultGroup a = new LabResultGroup();        theLabResultGroupDB.insert(a);        theLabResultGroupDB.selectByPK(a.getObjectId());        theLabResultGroupDB.update(a);        theLabResultGroupDB.delete(a);}public void testLabResultDetail()throws Exception {LabResultDetail a = new LabResultDetail();        theLabResultDetailDB.insert(a);        theLabResultDetailDB.selectByPK(a.getObjectId());        theLabResultDetailDB.update(a);        theLabResultDetailDB.delete(a);}public void testPatientXN() throws Exception{PatientXN a = new PatientXN(); thePatientXNDB.insert(a);}public void testAccidentGroup() throws Exception{Accident a = new Accident(); theAccidentGroupDB.insert(a);}public void testAccidentGroupMap() throws Exception{AccidentGroupMap a = new AccidentGroupMap(); theAccidentGroupMapDB.insert(a);}public void testAccidentGroupPatientType() throws Exception{AccidentGroupPatientType a = new AccidentGroupPatientType(); theAccidentGroupPatientTypeDB.insert(a);}public void testAccidentType() throws Exception{AccidentType2 a = new AccidentType2(); theAccidentTypeDB.insert(a);}//public void testAddress2()throws Exception {Address2 a = new Address2();        theAddressDB.insert(a);        theAddressDB.selectByPK(a.getObjectId());        theAddressDB.update(a);        theAddressDB.delete(a);}//public void testGAction()throws Exception {GAction a = new GAction();        theGActionDB.insert(a);        theGActionDB.selectByPK(a.getObjectId());        theGActionDB.update(a);        theGActionDB.delete(a);}//public void testGActionAuth()throws Exception {GActionAuth a = new GActionAuth();        theGActionAuthDB.insert(a);        theGActionAuthDB.selectByPK(a.getObjectId());        theGActionAuthDB.update(a);        theGActionAuthDB.delete(a);}//public void testGroup504()throws Exception {Group504 a = new Group504();        theGroup504DB.insert(a);        theGroup504DB.selectByPK(a.getObjectId());        theGroup504DB.update(a);        theGroup504DB.delete(a);}//public void testGroup505()throws Exception {Group505 a = new Group505();        theGroup505DB.insert(a);        theGroup505DB.selectByPK(a.getObjectId());        theGroup505DB.update(a);        theGroup505DB.delete(a);}//public void testGroup506()throws Exception {Group506 a = new Group506();        theGroup506DB.insert(a);        theGroup506DB.selectByPK(a.getObjectId());        theGroup506DB.update(a);        theGroup506DB.delete(a);}//public void testGroupCronic()throws Exception {GroupCronic a = new GroupCronic();        theGroupCronicDB.insert(a);        theGroupCronicDB.selectByPK(a.getObjectId());        theGroupCronicDB.update(a);        theGroupCronicDB.delete(a);}//public void testGroupIcd10()throws Exception {GroupIcd10 a = new GroupIcd10();        theGroupIcd10DB.insert(a);        theGroupIcd10DB.selectByPK(a.getObjectId());        theGroupIcd10DB.update(a);        theGroupIcd10DB.delete(a);}//public void testGuideAfterDx()throws Exception {GuideAfterDx a = new GuideAfterDx();        theGuideAfterDxDB.insert(a);        theGuideAfterDxDB.selectByPK(a.getObjectId());        theGuideAfterDxDB.update(a);        theGuideAfterDxDB.delete(a);}//public void testGuideAfterDxTransaction()throws Exception {GuideAfterDxTransaction a = new GuideAfterDxTransaction();        theGuideAfterDxTransactionDB.insert(a);        theGuideAfterDxTransactionDB.selectByPK(a.getObjectId());        theGuideAfterDxTransactionDB.update(a);        theGuideAfterDxTransactionDB.delete(a);}//public void testContractMethod()throws Exception {ContractMethod a = new ContractMethod();        theContractMethodDB.insert(a);        theContractMethodDB.selectByPK(a.getObjectId());        theContractMethodDB.update(a);        theContractMethodDB.delete(a);}//public void testDischargeIpd()throws Exception {DischargeIpd a = new DischargeIpd();        theDischargeIpdDB.insert(a);        theDischargeIpdDB.selectByPK(a.getObjectId());        theDischargeIpdDB.update(a);        theDischargeIpdDB.delete(a);}//public void testIcd10GroupType()throws Exception {Icd10GroupType a = new Icd10GroupType();        theIcd10GroupTypeDB.insert(a);        theIcd10GroupTypeDB.selectByPK(a.getObjectId());        theIcd10GroupTypeDB.update(a);        theIcd10GroupTypeDB.delete(a);}//public void testIdx10V3()throws Exception {Idx10V3 a = new Idx10V3();        theIdx10V3DB.insert(a);        theIdx10V3DB.selectByPK(a.getObjectId());        theIdx10V3DB.update(a);        theIdx10V3DB.delete(a);}//public void testQueueTransfer2()throws Exception {QueueTransfer a = new QueueTransfer();        theQueueTransferDB.insert(a);        theQueueTransferDB.selectByPK(a.getObjectId());        theQueueTransferDB.update(a);        theQueueTransferDB.delete(a);}//public void testSpecialContrctAdjustByVGaCT()throws Exception {SpecialContrctAdjustByVGaCT a = new SpecialContrctAdjustByVGaCT();        theSpecialContrctAdjustByVGaCTDB.insert(a);        theSpecialContrctAdjustByVGaCTDB.selectByPK(a.getObjectId());        theSpecialContrctAdjustByVGaCTDB.update(a);        theSpecialContrctAdjustByVGaCTDB.delete(a);}//public void testSpecialEmployee()throws Exception {SpecialEmployee a = new SpecialEmployee();        theSpecialEmployeeDB.insert(a);        theSpecialEmployeeDB.selectByPK(a.getObjectId());        theSpecialEmployeeDB.update(a);        theSpecialEmployeeDB.delete(a);}//public void testSpecialPatientReport()throws Exception {SpecialPatientReport a = new SpecialPatientReport();        theSpecialPatientReportDB.insert(a);        theSpecialPatientReportDB.selectByPK(a.getObjectId());        theSpecialPatientReportDB.update(a);        theSpecialPatientReportDB.delete(a);}//public void testSpecialQueryAppointment()throws Exception {SpecialQueryAppointment a = new SpecialQueryAppointment();        theSpecialQueryAppointmentDB.insert(a);        theSpecialQueryAppointmentDB.selectByPK(a.getObjectId());        theSpecialQueryAppointmentDB.update(a);        theSpecialQueryAppointmentDB.delete(a);}//public void testSpecialQueryBillingReceipt()throws Exception {SpecialQueryBillingReceipt a = new SpecialQueryBillingReceipt();        theSpecialQueryBillingReceiptDB.insert(a);        theSpecialQueryBillingReceiptDB.selectByPK(a.getObjectId());        theSpecialQueryBillingReceiptDB.update(a);        theSpecialQueryBillingReceiptDB.delete(a);}//public void testSpecialQueryItem()throws Exception {SpecialQueryItem a = new SpecialQueryItem();        theSpecialQueryItemDB.insert(a);        theSpecialQueryItemDB.selectByPK(a.getObjectId());        theSpecialQueryItemDB.update(a);        theSpecialQueryItemDB.delete(a);}//public void testSpecialQueryOrder()throws Exception {SpecialQueryOrder a = new SpecialQueryOrder();        theSpecialQueryOrderDB.insert(a);        theSpecialQueryOrderDB.selectByPK(a.getObjectId());        theSpecialQueryOrderDB.update(a);        theSpecialQueryOrderDB.delete(a);}//public void testSpecialQueryOrderDrug()throws Exception {SpecialQueryOrderDrug a = new SpecialQueryOrderDrug();        theSpecialQueryOrderDrugDB.insert(a);        theSpecialQueryOrderDrugDB.selectByPK(a.getObjectId());        theSpecialQueryOrderDrugDB.update(a);        theSpecialQueryOrderDrugDB.delete(a);}//public void testSpecialQueryOrderHistoryDrug()throws Exception {SpecialQueryOrderHistoryDrug a = new SpecialQueryOrderHistoryDrug();        theSpecialQueryOrderHistoryDrugDB.insert(a);        theSpecialQueryOrderHistoryDrugDB.selectByPK(a.getObjectId());        theSpecialQueryOrderHistoryDrugDB.update(a);        theSpecialQueryOrderHistoryDrugDB.delete(a);}//public void testSpecialQueueDespense()throws Exception {SpecialQueueDespense a = new SpecialQueueDespense();        theSpecialQueueDespenseDB.insert(a);        theSpecialQueueDespenseDB.selectByPK(a.getObjectId());        theSpecialQueueDespenseDB.update(a);        theSpecialQueueDespenseDB.delete(a);}//public void testSpecialQueueEPIItem()throws Exception {SpecialQueueEPIItem a = new SpecialQueueEPIItem();        theSpecialQueueEPIItemDB.insert(a);        theSpecialQueueEPIItemDB.selectByPK(a.getObjectId());        theSpecialQueueEPIItemDB.update(a);        theSpecialQueueEPIItemDB.delete(a);}//public void testSpecialQueueEPItemDrug()throws Exception {SpecialQueueEPItemDrug a = new SpecialQueueEPItemDrug();        theSpecialQueueEPItemDrugDB.insert(a);        theSpecialQueueEPItemDrugDB.selectByPK(a.getObjectId());        theSpecialQueueEPItemDrugDB.update(a);        theSpecialQueueEPItemDrugDB.delete(a);}//public void testSpecialQueueVisit()throws Exception {SpecialQueueVisit a = new SpecialQueueVisit();        theSpecialQueueVisitDB.insert(a);        theSpecialQueueVisitDB.selectByPK(a.getObjectId());        theSpecialQueueVisitDB.update(a);        theSpecialQueueVisitDB.delete(a);}////public void testBillingReport()throws Exception {BillingReport a = new BillingReport();        theBillingReportDB.insert(a);        theBillingReportDB.selectByPK(a.getObjectId());        theBillingReportDB.update(a);        theBillingReportDB.delete(a);}//public void testBirthPlace()throws Exception {BirthPlace a = new BirthPlace();        theBirthPlaceDB.insert(a);        theBirthPlaceDB.selectByPK(a.getObjectId());        theBirthPlaceDB.update(a);        theBirthPlaceDB.delete(a);}//public void testBType()throws Exception {BType a = new BType();        theBTypeDB.insert(a);        theBTypeDB.selectByPK(a.getObjectId());        theBTypeDB.update(a);        theBTypeDB.delete(a);}//public void testCheckSQL()throws Exception {CheckSQL a = new CheckSQL();        theCheckSQLDB.insert(a);        theCheckSQLDB.selectByPK(a.getObjectId());        theCheckSQLDB.update(a);        theCheckSQLDB.delete(a);}//public void testEpiSetGroup()throws Exception {EpiSetGroup a = new EpiSetGroup();        theEpiSetGroupDB.insert(a);        theEpiSetGroupDB.selectByPK(a.getObjectId());        theEpiSetGroupDB.update(a);        theEpiSetGroupDB.delete(a);}//public void testFpWoman()throws Exception {FpWoman a = new FpWoman();        theFpWomanDB.insert(a);        theFpWomanDB.selectByPK(a.getObjectId());        theFpWomanDB.update(a);        theFpWomanDB.delete(a);}//public void testOrderItemStatus2()throws Exception {OrderItemStatus2 a = new OrderItemStatus2();        theOrderItemStatus2DB.insert(a);        theOrderItemStatus2DB.selectByPK(a.getObjectId());        theOrderItemStatus2DB.update(a);        theOrderItemStatus2DB.delete(a);}//public void testPp()throws Exception {Pp a = new Pp();        thePpDB.insert(a);        thePpDB.selectByPK(a.getObjectId());        thePpDB.update(a);        thePpDB.delete(a);}//public void testMch()throws Exception {Mch a = new Mch();        theMchDB.insert(a);        theMchDB.selectByPK(a.getObjectId());        theMchDB.update(a);        theMchDB.delete(a);}//public void testTimeServer()throws Exception {TimeServer a = new TimeServer();        theTimeServerDB.insert(a);        theTimeServerDB.selectByPK(a.getObjectId());        theTimeServerDB.update(a);        theTimeServerDB.delete(a);}//public void testDrugStickerDetail()throws Exception {DrugStickerDetail a = new DrugStickerDetail();        theDrugStickerDetailDB.insert(a);        theDrugStickerDetailDB.selectByPK(a.getObjectId());        theDrugStickerDetailDB.update(a);        theDrugStickerDetailDB.delete(a);}//public void testPrintPoint()throws Exception {PrintPoint a = new PrintPoint();        thePrintPointDB.insert(a);        thePrintPointDB.selectByPK(a.getObjectId());        thePrintPointDB.update(a);        thePrintPointDB.delete(a);}//public void testSetupPrintOpdDetail()throws Exception {SetupPrintOpdDetail a = new SetupPrintOpdDetail();        theSetupPrintOpdDetailDB.insert(a);        theSetupPrintOpdDetailDB.selectByPK(a.getObjectId());        theSetupPrintOpdDetailDB.update(a);        theSetupPrintOpdDetailDB.delete(a);}//public void testSetupPrintOpdHead()throws Exception {SetupPrintOpdHead a = new SetupPrintOpdHead();        theSetupPrintOpdHeadDB.insert(a);        theSetupPrintOpdHeadDB.selectByPK(a.getObjectId());        theSetupPrintOpdHeadDB.update(a);        theSetupPrintOpdHeadDB.delete(a);}    public static void main(String[] argc){        String url = "jdbc:postgresql://192.168.1.8:5432/weangsa_37hb";        String user = "postgres";        String pass = "postgres";        String dri = "org.postgresql.Driver";        String type = "0"; //0 postgres 1 mysql 2 sqlserver        ConnectionInf theConnectionInf = new ConnectionDBMgr(dri,url,user,pass,type);        HosDB hdb = new HosDB(theConnectionInf);        try{            theConnectionInf.open();            hdb.checkAll();            theConnectionInf.close();        }catch(Exception e){            e.printStackTrace(Constant.getPrintStream());        }    }}