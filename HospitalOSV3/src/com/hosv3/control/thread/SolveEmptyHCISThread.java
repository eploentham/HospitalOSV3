/* * SolveEmptyHCISThread.java * * Created on 16 กรกฎาคม 2550, 13:38 น. * * To change this template, choose Tools | Template Manager * and open the template in the editor. */package com.hosv3.control.thread;import com.hospital_os.object.SequenceData;import com.hospital_os.usecase.connection.ConnectionInf;import com.hospital_os.usecase.connection.UpdateStatus;import com.hosv3.utility.Constant;import com.hosv3.control.HosDB;import com.hosv3.object.HosObject;import java.sql.ResultSet;import java.sql.SQLException;import java.util.logging.Level;import java.util.logging.Logger;/** * * @author Aut */public class SolveEmptyHCISThread extends ControlThread {    /**     * Creates a new instance of SolveEmptyHCISThread     */    public SolveEmptyHCISThread() {        this.setDaemon(true);    }    public void setControl(ConnectionInf con, HosDB hdb, HosObject ho, UpdateStatus us, Object control) {        theConnectionInf = con;        theHosDB = hdb;        theHO = ho;        theUS = us;    }    protected void runTask() {        theConnectionInf.open();        try {            theConnectionInf.getConnection().setAutoCommit(false);            //pu:อัพเดตประชากรที่มีเลข hcis ซ้ำ ให้ hcis เป็นค่าว่าง            updateRepeatHCIS();            /////////////////////////////////////////////////////////////////            int i=0;            boolean update_seq = false;            int value = 1;            int sd_value = 1;            //ค้นเลขลำดับของ hn hcis ล่าสุดมาเก็บไว้ก่อนเพื่อจะได้วนลูปเร็วๆ//            hn_hcis = theHosDB.theSequenceDataDB.updateSequence("hn_hcis",true);            SequenceData sd = theHosDB.theSequenceDataDB.selectByPK("hn_hcis");            try{                sd_value = Integer.parseInt(sd.value);            }            catch(Exception e){                e.printStackTrace(Constant.getPrintStream());                theUS.setStatus("เลขลำดับ HN_HCIS ผิดพลาดกรุณาตรวจสอบจากหน้ากำหนดเลขลำดับอีกครั้ง",UpdateStatus.WARNING);                return;            }            try{                String max = "0";               //pu: 1.หาค่า max ของ hn_hcis                ResultSet rs = theConnectionInf.eQuery("select max(t_health_family.health_family_hn_hcis)"                        + " from t_health_family");                if(rs.next())                    max = rs.getString(1);                value = Integer.parseInt(max);            }            catch(Exception e){                value = 0;            }            //เลือกว่าจะเอาค่าไหนเป็นค่าในการเริ่ม running            if(sd_value>value){                value = sd_value;            /////////////////////////////////////////////////////////////////            //หาว่ามีประชากรคนไหนบ้างที่มีเลข HN_HCIS อยู่ในข่ายที่ต้องปรับปรุง            ResultSet rs = theConnectionInf.eQuery("select " +                    "t_health_family_id,health_family_hn_hcis from t_health_family  " +                    "where (health_family_hn_hcis = ''" +                    "    or health_family_hn_hcis is null " +//                    "    or length(t_health_family.health_family_hn_hcis) <>6 " +                    //เอาออกเพราะว่าตอน migrate จำนวนจะไม่ได้ตามหลักแต่ต้องตรวจสอบตอนออกรายงานว่าถูกต้องหรือเปล่า                    "   or t_health_family.health_family_hn_hcis='000000')");            theHosDB.theSequenceDataDB.theConnectionInf = theConnectionInf.getClone();            String hn_hcis = theHosDB.theSequenceDataDB.getSeqPattern(sd.pattern,value);            theConnectionInf = theConnectionInf.getClone();            while(rs.next()){                // โดยนำคีย์ family_id มาใช้ในการ update ข้อมูล                String family_id = rs.getString(1);                //เมื่อก่อนจะตรวจสอบเลขให้แต่เดียวนี้ไม่ตัดเลขให้แล้วแต่จะเปลี่ยนเลขไปเลยเพราะว่าหากเลขที่ตัดซ้ำกับเลขที่เคยให้                // จะไม่สามารถตรวจสอบได้ทำให้ข้อมูลผิดพลาดได้//                theHosDB.theSequenceDataDB.theConnectionInf = theConnectionInf.getClone();//                String hn_hcis = theHosDB.theSequenceDataDB.getSeqPattern(sd.pattern,value);//                theConnectionInf = theConnectionInf.getClone();                int ret = theConnectionInf.eUpdate("update t_health_family set" +                        " health_family_hn_hcis = '"+ hn_hcis+"' where t_health_family_id = " +                        "'"+family_id+"'");                i++;                value++;                hn_hcis = String.valueOf(Integer.parseInt(hn_hcis)+1);                if(i%100==0)                    theUS.setStatus("value " + i + " : " + ret,UpdateStatus.WARNING);            }            rs.close();            try{                theConnectionInf.eUpdate("CREATE UNIQUE INDEX family_hcis ON t_health_family (health_family_hn_hcis)");            } catch(Exception e){                e.printStackTrace();            }            sd.value = String.valueOf(value);            theHosDB.theSequenceDataDB.update(sd);            theUS.confirmBox("การแก้ปัญหา HN_HCIS เป็นค่าว่างเสร็จสิ้น",UpdateStatus.COMPLETE);            }else{                this.theUS.setStatus("กรุณาตั้งค่าเลขถัดไปของ HCIS ("+value+")ให้มีค่าเพิ่มขึ้นอีก 1 ("+(value+1)+")",UpdateStatus.ERROR);            }            theConnectionInf.getConnection().commit();        } catch(Exception e) {            try {                theConnectionInf.getConnection().rollback();                this.theUS.setStatus("การแก้ปัญหา HN_HCIS เป็นค่าว่างผิดพลาด", UpdateStatus.ERROR);                e.printStackTrace(Constant.getPrintStream());            } catch (SQLException ex) {                Logger.getLogger(SolveEmptyHCISThread.class.getName()).log(Level.SEVERE, null, ex);            }        } finally {            try {                theConnectionInf.getConnection().close();            } catch (SQLException ex) {                Logger.getLogger(SolveEmptyHCISThread.class.getName()).log(Level.SEVERE, null, ex);            }        }    }    //pu:อัพเดตประชากรที่มีเลข hcis ซ้ำ ให้ hcis เป็นค่าว่าง    private void updateRepeatHCIS() throws Exception    {        try{        java.sql.ResultSet rs = theConnectionInf.eQuery("select t_health_family.health_family_hn_hcis " +                ",count(t_health_family.health_family_hn_hcis) " +                " from t_health_family  where t_health_family.health_family_hn_hcis  <> '' " +                " group by t_health_family.health_family_hn_hcis " +                " having count(t_health_family.health_family_hn_hcis)  > 1 ");        theConnectionInf = theConnectionInf.getClone();        while(rs.next())        {            String hn_hcis = rs.getString(1);//hn_hcis ที่ซ้ำ            int repeat_no = rs.getInt(2);//จำนวน row ที่มี hn_hcis ซ้ำ            //pu:อัพเดตค่า hn_hcis ให้เป็นค่าว่าง            int ret = theConnectionInf.eUpdate("update t_health_family set" +                    " health_family_hn_hcis = '' where health_family_hn_hcis = '"+ hn_hcis + "'");        }        rs.close();        }catch(Exception ex){            ex.printStackTrace();            throw ex;        }    }}