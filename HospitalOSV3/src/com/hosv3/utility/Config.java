/* * HosConfig.java * * Created on 10 พฤศจิกายน 2546, 11:40 น. */package com.hosv3.utility;import com.birosoft.liquid.LiquidLookAndFeel;import com.hospital_os.gui.font.DefaultFont;import com.hospital_os.usecase.connection.ConnectionInf;import com.hospital_os.utility.*;import com.jgoodies.looks.plastic.Plastic3DLookAndFeel;import com.jtattoo.plaf.acryl.AcrylLookAndFeel;import com.jtattoo.plaf.aero.AeroLookAndFeel;import com.jtattoo.plaf.aluminium.AluminiumLookAndFeel;import com.jtattoo.plaf.hifi.HiFiLookAndFeel;import com.jtattoo.plaf.bernstein.BernsteinLookAndFeel;import com.jtattoo.plaf.luna.LunaLookAndFeel;import com.jtattoo.plaf.fast.FastLookAndFeel;import com.jtattoo.plaf.mcwin.McWinLookAndFeel;import com.jtattoo.plaf.mint.MintLookAndFeel;import com.jtattoo.plaf.noire.NoireLookAndFeel;import com.jtattoo.plaf.smart.SmartLookAndFeel;import com.nilo.plaf.nimrod.NimRODLookAndFeel;import com.nilo.plaf.nimrod.NimRODTheme;import java.awt.Font;import java.io.*;import java.util.*;import javax.swing.*;import javax.swing.plaf.InsetsUIResource;/** * * @author  tong */public class Config {//        public static final String THEME_FILE = "config/gui/LookAndFeel.xml";    public static final String FONT_PATH = "font";    public static final String DB_FILE = ".hospital_os.cfg";    public static final String LANGUAGE_FILE = "config/language/Default.xml";    public static final String LANGUAGE_PATH = "config/language/";    public static final String MODULE_PATH = "config/ext_module";    public static final String MODULE_PATH_RP = "config/ext_module_rp";    public static final String PATHFONT_FILE = "config/gui/pathfont.xml";    public static final String SPLASH_FILE = "icon/splash.jpg";    public static final String SPLASH_FILE_BG = "icon/splash_bk.jpg";    public static final String DATABSE_PATH = "database/";    /** Creates a new instance of HosConfig */    protected static final Font LABEL_FONT = new DefaultFont();    //pu:หากโปรแกรมหาไฟล์ดังกล่าวไม่เจอให้ default เป็น plasticskyblue หากหาเจอก็เอาตามไฟล์นั้น    public static String theme = "PlasticSkyBlue";    private String DONT_REMIND;    private String SERVER;    private String DATABASE;    private String PORT;    private String USERNAME;    private String PASSWORD;    public Config() {        theme = "";        File f = new File(THEME_FILE);        try {            FileInputStream fstream = new FileInputStream(f);            byte b = 0;            char d[] = new char[30];            int i = 0;            do {                b = (byte) fstream.read();                d[i] = (char) b;                if (b != -1) {                    theme = theme + d[i];                }                i++;            } while (b != -1 && i < 30);            Constant.println("Setup1 Theme :" + theme);            fstream.close();        } catch (Exception e) {            e.printStackTrace();            theme = "Plastic";            Constant.println("Default Theme :" + theme);        }        setLookAndFeel(theme);    }    /**     *@deprecated henbe unused it is hardcode     */    public void setConfigFile(String file) {        //filename = file;    }    /**     *@deprecated henbe unused     **/    public Properties sendURL() {        return null;    }////////////////////////henbe add for check external module/////////////////////new 26jul04    public static ConnectionInf getConnectionInf(String[] args) {        String database = null;        String username = null;        String password = null;        String server = null;        for (int i = 0; i < args.length; i++) {            if (args[i].startsWith("-server=")) {                server = args[i].substring(args[i].indexOf("=") + 1);            }            if (args[i].startsWith("-database=")) {                database = args[i].substring(args[i].indexOf("=") + 1);            }            if (args[i].startsWith("-username=")) {                username = args[i].substring(args[i].indexOf("=") + 1);            }            if (args[i].startsWith("-password=")) {                password = args[i].substring(args[i].indexOf("=") + 1);            }        }        if (server != null && database != null && username != null && password != null) {            ConnectionInf cinf = new com.hosv3.utility.ConnectionDBMgr(server, database, username, password);            return cinf;        }        return null;    }    /**     * while connection is ok then return true     * else     * @param args     * @param theSplash     * @param aFrameMain     * @return     */    public ConnectionInf getConnectionInfFromFile(String[] args, Splash theSplash, JFrame aFrameMain) {        boolean ret = false;        //from Argruments when start program        ConnectionInf con = getConnectionInf(args);        if(con!=null)            return con;        //อ่านจากไฟล์ไม่สำเร็จ        String[] dbfile = DialogConfig.readDbFile();        if (dbfile==null) {            theSplash.setVisible(false);            if(!DialogConfig.showDialog(aFrameMain, Constant.getTextBundle("ไม่พบไฟล์ฐานข้อมูล"), dbfile, true))                return null;            dbfile = DialogConfig.readDbFile();            ConnectionDBMgr con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);            return con_inf;        }        //ตรวจว่าต้องแสดงหน้าจอเลือกฐานอีกครั้งหรือไม่        if (dbfile[5].equals("0")) {            theSplash.setVisible(false);            if(!DialogConfig.showDialog(aFrameMain, Constant.getTextBundle("แสดงฐานข้อมูลที่ติดต่อ"), dbfile,true))                return null;            ConnectionDBMgr con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);            return con_inf;        }        ConnectionDBMgr con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);        if (!con_inf.open()) {            theSplash.setVisible(false);            if(!DialogConfig.showDialog(aFrameMain, Constant.getTextBundle("ติดต่อฐานข้อมูลไม่ได้"), dbfile,true))                return null;            con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);            return con_inf;        }        return con_inf;    }    /**     * while connection is ok then return true     * else     * @param args     * @param theSplash     * @param aFrameMain     * @return     */    public static ConnectionInf getConnectionInfDBBackupFromFile(JFrame aFrameMain) {        //อ่านจากไฟล์ไม่สำเร็จ        String[] dbfile = DialogConfig.readDbBackupFile();        if (dbfile==null) {            if(!DialogConfig.showDialog(aFrameMain, Constant.getTextBundle("ไม่พบไฟล์ฐานข้อมูลสำรอง"), dbfile, true, true))                return null;            dbfile = DialogConfig.readDbBackupFile();            ConnectionDBMgr con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);            return con_inf;        }        //ตรวจว่าต้องแสดงหน้าจอเลือกฐานอีกครั้งหรือไม่        if (dbfile[5].equals("0")) {            if(!DialogConfig.showDialog(aFrameMain, Constant.getTextBundle("แสดงฐานข้อมูลสำรองที่ติดต่อ"), dbfile,true, true))                return null;            ConnectionDBMgr con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);            return con_inf;        }        ConnectionDBMgr con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);        if (!con_inf.open()) {            if(!DialogConfig.showDialog(aFrameMain, Constant.getTextBundle("ติดต่อฐานข้อมูลสำรองไม่ได้"), dbfile,true, true))                return null;            con_inf = new ConnectionDBMgr(dbfile[0],dbfile[1],dbfile[3],dbfile[4]);            return con_inf;        }        return con_inf;    }    public ConnectionInf getConnectionInf() throws Exception {        String url = "jdbc:postgresql://" + SERVER + ":5432/" + DATABASE;        String dri = "org.postgresql.Driver";        String type = "0"; //0 postgres 1 mysql 2 sqlserver        ConnectionDBMgr con = new ConnectionDBMgr(dri, url,USERNAME, PASSWORD, type);        con.checkConnection();        return con;    }    /**     * @deprecated เลิกใช้งาน ต้องขึ้นต้นด้วยตัวพิมพ์เล็ก deleteConfigFile();     *     */    public void DeleteFile() {        Constant.println("Delete Filename : " + DB_FILE);        try {            IOStream.writeOutputDefault("", DB_FILE);        } catch (Exception e) {            Constant.println("ไม่พบแฟ้ม " + DB_FILE);        }    }    public boolean initConfig() {        theme = "";        File f = new File(THEME_FILE);        try {            FileInputStream fstream = new FileInputStream(f);            byte b = 0;            char d[] = new char[30];            int i = 0;            do {                b = (byte) fstream.read();                d[i] = (char) b;                if (b != -1) {                    theme = theme + d[i];                }                i++;            } while (b != -1);            Constant.println("Setup Theme :" + theme);            fstream.close();        } catch (java.io.FileNotFoundException file) {            theme = "PlasticSkyBlue";            Constant.println("Default Theme :" + theme);        } catch (Exception e) {            e.printStackTrace();        }        try {            UIManager.put("Button.margin", new InsetsUIResource(4, 10, 4, 10));            if (theme.equals("Mac")) {                System.setProperty("sun.java2d.ddscale", "true");                com.birosoft.liquid.LiquidLookAndFeel lq = new com.birosoft.liquid.LiquidLookAndFeel();                UIManager.setLookAndFeel(lq);                UIManager.put("Table.gridColor", new java.awt.Color(225, 225, 225));                LiquidLookAndFeel.setPanelTransparency(true);                LiquidLookAndFeel.setDefaultRowBackgroundMode(true);//set ให้ แต่ละแถวในตาราง และ แถวในComboBox มีสีสลับแถว                LiquidLookAndFeel.setShowTableGrids(true);//show เส้นในตาราง                LiquidLookAndFeel.setStipples(true);//ทำให้ Background มีลายขวาง                LiquidLookAndFeel.setToolbarFlattedButtons(true);                LiquidLookAndFeel.setLiquidDecorations(false);//เปลี่ยน frame เป็นอีกแบบ                LiquidLookAndFeel.setToolbarButtonsFocusable(true);                UIManager.put("ComboBoxUI", "com.birosoft.liquid.LiquidComboBoxUI");                setDefaultFont();            } else if (theme.equals("Windows")) {                com.sun.java.swing.plaf.windows.WindowsLookAndFeel win = new com.sun.java.swing.plaf.windows.WindowsLookAndFeel();                UIManager.setLookAndFeel(win);                UIManager.put("ComboBoxUI", "com.sun.java.swing.plaf.windows.WindowsComboBoxUI");            } else if (theme.equals("Motif")) {                com.sun.java.swing.plaf.motif.MotifLookAndFeel motif = new com.sun.java.swing.plaf.motif.MotifLookAndFeel();                UIManager.setLookAndFeel(motif);                UIManager.put("ComboBoxUI", "com.sun.java.swing.plaf.motif.MotifComboBoxUI");            } else if (theme.equals("Metal")) {                javax.swing.plaf.metal.MetalLookAndFeel metal = new javax.swing.plaf.metal.MetalLookAndFeel();                UIManager.setLookAndFeel(metal);                UIManager.put("ComboBoxUI", "javax.swing.plaf.metal.MetalComboBoxUI");//            }else if(theme.equals("Ubuntu")){//                com.sun.java.swing.plaf.gtk.GTKLookAndFeel gtk = new com.sun.java.swing.plaf.gtk.GTKLookAndFeel();//                UIManager.setLookAndFeel(gtk);            } else {                System.setProperty("Debug", "1");                com.jgoodies.looks.plastic.PlasticXPLookAndFeel px = new com.jgoodies.looks.plastic.PlasticXPLookAndFeel();                if (theme.equals("PlasticBrownSugar")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.BrownSugar());                } else if (theme.equals("PlasticDarkStar")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DarkStar());                } else if (theme.equals("PlasticDesertBlue")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertBlue());                } else if (theme.equals("PlasticDesertBluer")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertBluer());                } else if (theme.equals("PlasticDesertGreen")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertGreen());                } else if (theme.equals("PlasticDesertRed")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertRed());                } else if (theme.equals("PlasticDesertYellow")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertYellow());                } else if (theme.equals("PlasticExperienceBlue")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.ExperienceBlue());                } else if (theme.equals("PlasticExperienceGreen")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.ExperienceGreen());                } else if (theme.equals("PlasticSilver")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.Silver());                } else if (theme.equals("PlasticSkyBluer")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyBluer());                } else if (theme.equals("PlasticSkyBlue")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyBlue());                } else if (theme.equals("PlasticSkyGreen")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyGreen());                } else if (theme.equals("PlasticSkyKrupp")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyKrupp());                } else if (theme.equals("PlasticSkyPink")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyPink());                } else if (theme.equals("PlasticSkyRed")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyRed());                } else if (theme.equals("PlasticSkyYellow")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyYellow());                } else {                    return false;                }                UIManager.setLookAndFeel(px);                UIManager.put("ComboBoxUI", "com.jgoodies.looks.plastic.PlasticComboBoxUI");            }            return true;        } catch (Exception ex) {            ex.printStackTrace(Constant.getPrintStream());            return false;        }    }    public static void setLookAndFeel(String theme) {        setDefaultFont();        try {            if (theme.trim().equals("Liquid")) {                UIManager.setLookAndFeel(new LiquidLookAndFeel());//                LiquidLookAndFeel.setLiquidDecorations(false);//                UIManager.put("ComboBoxUI","com.birosoft.liquid.LiquidComboBoxUI");            } else if (theme.trim().equals("Plastic")) {                UIManager.setLookAndFeel(new Plastic3DLookAndFeel());//                UIManager.put("ComboBoxUI","com.sun.java.swing.plaf.windows.WindowsComboBoxUI");//            }else if(theme.trim().equals("EaSynth")){//                UIManager.setLookAndFeel(new EaSynthLookAndFeel());            } else if (theme.trim().equals("JTattoo")) {                UIManager.setLookAndFeel(new AcrylLookAndFeel());//            }else if(theme.trim().equals("NimRod")){//                UIManager.setLookAndFeel(new NimRODLookAndFeel()); //            }else if(theme.trim().equals("SubstanceLegacyDefault")){//                UIManager.setLookAndFeel(new SubstanceLegacyDefaultLookAndFeel());            } else if (theme.trim().equals("Aero")) {                UIManager.setLookAndFeel(new AeroLookAndFeel());            } else if (theme.trim().equals("Aluminium")) {                UIManager.setLookAndFeel(new AluminiumLookAndFeel());            } else if (theme.trim().equals("Bernstein")) {                UIManager.setLookAndFeel(new BernsteinLookAndFeel());            } else if (theme.trim().equals("Fast")) {                UIManager.setLookAndFeel(new FastLookAndFeel());            } else if (theme.trim().equals("HiFi")) {                UIManager.setLookAndFeel(new HiFiLookAndFeel());            } else if (theme.trim().equals("Luna")) {                UIManager.setLookAndFeel(new LunaLookAndFeel());            } else if (theme.trim().equals("McWin")) {                UIManager.setLookAndFeel(new McWinLookAndFeel());            } else if (theme.trim().equals("Mint")) {                UIManager.setLookAndFeel(new MintLookAndFeel());            } else if (theme.trim().equals("Noire")) {                UIManager.setLookAndFeel(new NoireLookAndFeel());            } else if (theme.trim().equals("Smart")) {                UIManager.setLookAndFeel(new SmartLookAndFeel());//            }else if(theme.trim().equals("SubstanceBusinessBlackSteel")){//                UIManager.setLookAndFeel(new SubstanceBusinessBlackSteelLookAndFeel());            }            // Somprasong add Nimrod theme 12-02-2010 (use nimrodlf-1.1.jar)            else if(theme.startsWith("NimRod_")){//                UIManager.setLookAndFeel(new NimRODLookAndFeel());                String themePath = System.getProperty("user.dir") + "/config/gui/"+theme+".theme";                NimRODTheme nt = new NimRODTheme(themePath);                NimRODLookAndFeel nf = new NimRODLookAndFeel();                NimRODLookAndFeel.setCurrentTheme(nt);                UIManager.setLookAndFeel(nf);            }            else {                com.jgoodies.looks.plastic.PlasticXPLookAndFeel px = new com.jgoodies.looks.plastic.PlasticXPLookAndFeel();                if (theme.equals("PlasticBrownSugar")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.BrownSugar());                } else if (theme.equals("PlasticDarkStar")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DarkStar());                } else if (theme.equals("PlasticDesertBlue")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertBlue());                } else if (theme.equals("PlasticDesertBluer")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertBluer());                } else if (theme.equals("PlasticDesertGreen")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertGreen());                } else if (theme.equals("PlasticDesertRed")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertRed());                } else if (theme.equals("PlasticDesertYellow")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.DesertYellow());                } else if (theme.equals("PlasticExperienceBlue")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.ExperienceBlue());                } else if (theme.equals("PlasticExperienceGreen")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.ExperienceGreen());                } else if (theme.equals("PlasticSilver")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.Silver());                } else if (theme.equals("PlasticSkyBluer")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyBluer());                } else if (theme.equals("PlasticSkyBlue")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyBlue());                } else if (theme.equals("PlasticSkyGreen")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyGreen());                } else if (theme.equals("PlasticSkyKrupp")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyKrupp());                } else if (theme.equals("PlasticSkyPink")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyPink());                } else if (theme.equals("PlasticSkyRed")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyRed());                } else if (theme.equals("PlasticSkyYellow")) {                    com.jgoodies.looks.plastic.PlasticXPLookAndFeel.setCurrentTheme(new com.jgoodies.looks.plastic.theme.SkyYellow());                } else {                    return;                }                UIManager.setLookAndFeel(px);                UIManager.put("ComboBoxUI", "com.jgoodies.looks.plastic.PlasticComboBoxUI");            }        } catch (Exception ex) {            ex.printStackTrace(Constant.getPrintStream());        }    }    private static void setDefaultFont() {                UIManager.put("Button.font", LABEL_FONT);                UIManager.put("CheckBox.font", LABEL_FONT);                UIManager.put("CheckBoxMenuItem.font", LABEL_FONT);                UIManager.put("ColorChooser.font", LABEL_FONT);                UIManager.put("ComboBox.font", LABEL_FONT);                UIManager.put("DesktopIcon.font", LABEL_FONT);                UIManager.put("EditorPane.font", LABEL_FONT);                UIManager.put("FormattedTextField.font", LABEL_FONT);                UIManager.put("Label.font", LABEL_FONT);                UIManager.put("List.font", LABEL_FONT);                UIManager.put("Menu.font", LABEL_FONT);                UIManager.put("MenuBar.font", LABEL_FONT);                UIManager.put("MenuItem.font", LABEL_FONT);                UIManager.put("OptionPane.font", LABEL_FONT);                UIManager.put("Panel.font", LABEL_FONT);                UIManager.put("PasswordField.font", LABEL_FONT);                UIManager.put("PopupMenu.font", LABEL_FONT);                UIManager.put("ProgressBar.font", LABEL_FONT);                UIManager.put("RadioButton.font", LABEL_FONT);                UIManager.put("RadioButtonMenuItem.font", LABEL_FONT);                UIManager.put("ScrollPane.font", LABEL_FONT);                UIManager.put("Spinner.font", LABEL_FONT);                UIManager.put("TabbedPane.font", LABEL_FONT);                UIManager.put("Table.font", LABEL_FONT);                UIManager.put("TableHeader.font", LABEL_FONT);                UIManager.put("TextArea.font", LABEL_FONT);                UIManager.put("TextField.font", LABEL_FONT);                UIManager.put("TextPane.font", LABEL_FONT);                UIManager.put("TitledBorder.font", LABEL_FONT);                UIManager.put("ToggleButton.font", LABEL_FONT);                UIManager.put("ToolBar.font", LABEL_FONT);                UIManager.put("ToolTip.font", LABEL_FONT);                UIManager.put("Tree.font", LABEL_FONT);                UIManager.put("Viewport.font", LABEL_FONT);    }}