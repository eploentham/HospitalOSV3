/*
 * DialogConfig.java
 *
 * Created on 9 พฤศจิกายน 2546, 23:5656 น.
 */
package com.hosv3.utility;

import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JFrame;
import java.util.*;
import java.awt.*;
import javax.swing.*;

import com.hospital_os.object.*; 
import com.hospital_os.utility.IOStream;
import com.hospital_os.utility.Secure;
import com.hospital_os.usecase.connection.EnableGUIInf;
/**
 *
 * @author  Administrator
 */
public class DialogChoosePrinter extends javax.swing.JDialog 
{
    
    /** Creates new form DialogConfig */
    public boolean actionCommand = false;

    private PrintService[] thePrintService;

    private int ret;

    private String filename;
    //for dialog show
    public DialogChoosePrinter(JFrame parent) {
        super(parent,true);
        parent.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/hospital_os/images/Icon.gif")));
        initComponents();
        //PrintService pservices = PrintServiceLookup.lookupDefaultPrintService();
//        Constant.println("defult Print Service : "+pservices.getName());
        PrinterJob pj = PrinterJob.getPrinterJob();
        // ตรวจสอบ PrintService ในเครื่องทั้งหมด โดยการ loopupPrintService()
        thePrintService = pj.lookupPrintServices();
        DefaultListModel df = new DefaultListModel();
        for(int i = 0; i < thePrintService.length; i ++)
            df.add(i,thePrintService[i].getName());

        jList1.setModel(df);
        this.setSize(220, 200);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        jButtonCabcel = new javax.swing.JButton();
        jCheckBoxRemember = new javax.swing.JCheckBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e1e\u0e34\u0e21\u0e1e\u0e4c", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonOK.setFont(defaultFont1);
        jButtonOK.setText("\u0e15\u0e01\u0e25\u0e07");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanel2.add(jButtonOK, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jPanel2, gridBagConstraints);

        jButtonCabcel.setFont(defaultFont1);
        jButtonCabcel.setText("\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01");
        jButtonCabcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCabcelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jButtonCabcel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(jPanel3, gridBagConstraints);

        jCheckBoxRemember.setFont(defaultFont1);
        jCheckBoxRemember.setSelected(true);
        jCheckBoxRemember.setText("\u0e08\u0e33\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e44\u0e27\u0e49");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        getContentPane().add(jCheckBoxRemember, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    private void jButtonCabcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCabcelActionPerformed
        dispose();
    }                                                 private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jButtonCabcelActionPerformed
//GEN-FIRST:event_jButtonOKActionPerformed
        actionCommand = true;
        if(jCheckBoxRemember.isSelected())
            this.saveFilePrint(filename,thePrintService[jList1.getSelectedIndex()]);
        dispose();        
     
    }//GEN-LAST:event_jButtonOKActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        dispose();
    }//GEN-LAST:event_closeDialog
    

    public PrintService showDialog(JFrame frm,String file)
    {
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/hospital_os/images/Icon.gif")));
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width-getSize().width)/2
            , (screenSize.height-getSize().height)/2);
        
        
        this.setTitle(file);
        filename = file;
        setVisible(true);
        if(actionCommand)
            return thePrintService[jList1.getSelectedIndex()];
        else
            return null;
    }
    
    public static PrintService readFilePrint(String filename) 
    {
        Constant.println("public static PrintService readFilePrint(String filename) {" + filename);
        try {
            PrinterJob pj = PrinterJob.getPrinterJob();
            PrintService[] thePrintService = pj.lookupPrintServices();

            File file = new File("hprinting/map_printer.cfg");
            if(!file.isFile())
                return null;
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader (fr);
            String str = br.readLine();
            boolean have_file = false;
            while(str != null)
            {
                String arr[] = str.split(":");
                if(arr[0].equals(filename)){
                    for(int i=0;i<thePrintService.length;i++){
                        if(arr[1].equals(thePrintService[i].getName()))
                            return thePrintService[i];
                    }
                }
                str = br.readLine();
            }
            return null;
        } 
        catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
    }
    private static void saveFilePrint(String filename, PrintService service) 
    {
        Constant.println("private static void saveFilePrint(String filename, PrintService service) "+filename);
        try {
            File file = new File("hprinting/map_printer.cfg");
            if(!file.isFile())
                file.createNewFile();
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader (fr);
            StringBuffer sb = new StringBuffer();
            boolean have_file = false;
            String str = br.readLine();
            while(str != null)
            {
                String[] arr = str.split(":");
                if(arr.length>0 && arr[0].equals(filename))
                {
                    have_file = true;
                    str = filename + ":" + service.getName();
                }
                sb.append(str + "\n");
                str = br.readLine();
            }
            if(!have_file){
                str = filename + ":" + service.getName();
                sb.append(str + "\n");
            }
            FileWriter fw = new FileWriter(file);
            fw.write(sb.toString());
            fw.close();
        } 
        catch (IOException ex) {
            ex.printStackTrace();
        }
    }
        /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        PrintService ps = DialogChoosePrinter.showDialog(new JFrame());
//        Constant.println(ps.getName());
        DialogChoosePrinter d = new DialogChoosePrinter(new JFrame());
        d.showDialog(null,"visitslipt");
        Constant.println(readFilePrint("visitslipt").getName());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonCabcel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBox jCheckBoxRemember;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    
    
}
