package com.hosv3.objdb;import java.sql.ResultSet;import java.util.Vector;import com.hospital_os.object.BillingGroupItem;import com.hospital_os.usecase.connection.ConnectionInf;import com.hospital_os.utility.ComboFix;import com.hospital_os.utility.Gutil;import com.hosv3.object.BillingGroupItem2;public class BillingGroupItem2DB{    public ConnectionInf theConnectionInf;    public BillingGroupItem dbObj;    final private String idtable = "121";    /**     * @param ConnectionInf db     * @roseuid 3F65897F0326     */    public BillingGroupItem2DB(ConnectionInf db)    {        theConnectionInf=db;        dbObj = new BillingGroupItem();        initConfig();    }    public boolean initConfig()    {        dbObj.table="b_item_billing_subgroup";        dbObj.pk_field="b_item_billing_subgroup_id";        dbObj.billing_group_item_id   ="item_billing_subgroup_number";        dbObj.description   ="item_billing_subgroup_description";        dbObj.billing_group_code   ="f_item_billing_group_id";        dbObj.active ="item_billing_subgroup_active";        /*        dbObj.table = "billing_group_item";        dbObj.pk_field = "key_id";        dbObj.billing_group_item_id = "billing_group_item_id";        dbObj.description = "description";        dbObj.billing_group_code = "billing_group_code";        dbObj.active = "active";         */        return true;    }    /**     * @param cmd     * @param o     * @return int     * @roseuid 3F6574DE0394     */    public int insert(BillingGroupItem o) throws Exception    {        String sql="";        BillingGroupItem p=o;        p.generateOID(idtable);        sql="insert into " + dbObj.table + " ("        + dbObj.pk_field        + " ,"	+ dbObj.billing_group_item_id        + " ,"	+ dbObj.description        + " ,"	+ dbObj.billing_group_code        + " ,"	+ dbObj.active        + " ) values ('"        + p.getObjectId()        + "','" + p.billing_group_item_id        + "','" + p.description        + "','" + p.billing_group_code        + "','" + p.active        + "')";        sql = Gutil.convertSQLToMySQL(sql,theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }    public int update(BillingGroupItem o) throws Exception    {        String sql="update " + dbObj.table + " set ";        BillingGroupItem p=o;        String field =""        + "', " + dbObj.billing_group_item_id + "='" + p.billing_group_item_id        + "', " + dbObj.description + "='" + p.description        + "', " + dbObj.billing_group_code + "='" + p.billing_group_code        + "', " + dbObj.active + "='" + p.active        + "' where " + dbObj.pk_field + "='" + p.getObjectId() +"'";        sql = Gutil.convertSQLToMySQL(sql+field.substring(2),theConnectionInf.gettypeDatabase());        return theConnectionInf.eUpdate(sql);    }        public int delete(BillingGroupItem o) throws Exception    {        String sql="delete from " + dbObj.table        + " where " + dbObj.pk_field + "='" + o.getObjectId() +"'";        return theConnectionInf.eUpdate(sql);    }        public BillingGroupItem selectByPK(String pk) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.pk_field        + " = '" + pk + "'";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (BillingGroupItem)v.get(0);    }        public BillingGroupItem selectByCode(String code) throws Exception    {        String sql="select * from " + dbObj.table        + " where " + dbObj.billing_group_item_id        + " = '" + code + "'";        Vector v=eQuery(sql);        if(v.size()==0)            return null;        else            return (BillingGroupItem)v.get(0);    }        public Vector selectAllByName(String pk,String active) throws Exception    {        String sql="select * from " + dbObj.table        + " where ";        if(pk.trim().length() !=0)        {            sql = sql +"(" +  dbObj.billing_group_item_id            + " like '%" + pk + "%'" + " or UPPER("            + dbObj.description + ") like UPPER('%" + pk + "%')" + ") and ";        }        sql = sql + dbObj.active + " like '%" + active + "%'" + "order by "        + dbObj.billing_group_item_id;        return eQuery(sql);    }    public Vector selectEqName(String pk,String active) throws Exception    {        String sql="select * from " + dbObj.table        + " where ";        if(pk.trim().length() !=0)        {            sql = sql +"(" +  dbObj.billing_group_item_id            + " like '" + pk + "'" + " or UPPER("            + dbObj.description + ") like UPPER('" + pk + "')" + ") and ";        }        sql = sql + dbObj.active + " like '" + active + "'" + "order by "        + dbObj.billing_group_item_id;        return eQuery(sql);    }//    public Vector selectAll() throws Exception//    {//        Vector vc = new Vector();//        String sql ="select * from " + dbObj.table + " order by "+//        dbObj.description;//        vc = veQuery(sql);//        if(vc.size()==0)//            return null;//        else//            return vc;//    }        public Vector selectBgiAll() throws Exception    {        Vector vc = new Vector();        String sql ="select * from " + dbObj.table + " order by "+        dbObj.description;        vc = eQuery(sql);        if(vc.size()==0)            return null;        else            return vc;    }            public Vector veQuery(String sql) throws Exception    {        ComboFix p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new ComboFix();            p.code = rs.getString(dbObj.pk_field);            p.name = rs.getString(dbObj.description);            list.add(p);        }        rs.close();        return list;    }        public Vector eQuery(String sql) throws Exception    {        BillingGroupItem2 p;        Vector list = new Vector();        ResultSet rs = theConnectionInf.eQuery(sql);        while(rs.next())        {            p = new BillingGroupItem2();            p.setObjectId(rs.getString(dbObj.pk_field));            p.billing_group_item_id = rs.getString(dbObj.billing_group_item_id);            p.description = rs.getString(dbObj.description);            p.billing_group_code = rs.getString(dbObj.billing_group_code);            p.active = rs.getString(dbObj.active);            list.add(p);        }        rs.close();        return list;    }    }