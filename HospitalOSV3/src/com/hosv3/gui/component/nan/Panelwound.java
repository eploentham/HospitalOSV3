/*
 * Panelwound.java
 *
 * Created on 14 มิถุนายน 2549, 11:37 น.
 */
/**/
package com.hosv3.gui.component.nan;
import com.hosv3.utility.Constant;
import com.hosv3.utility.ThreadStatus;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.Color;
import java.util.*;
import javax.swing.*;

import com.hosv3.control.HosControl;
import com.hosv3.utility.ImageCanvas;
import com.hosv3.utility.ImagePoint;
import com.hosv3.utility.connection.*;
import com.hospital_os.object.*;

import com.hosv3.object.HosObject;
/**
 *
 * @author  henbe
 */
public class Panelwound extends javax.swing.JPanel implements java.awt.event.MouseListener,java.awt.event.MouseMotionListener,UpdateStatus{
    HosControl theHC;
    ImageCanvas theImageCanvas;
    Vector [] vPointOfPiture = new Vector[WoundPicture.WOUND_PICTURE.length]; //เวคเตอร์ที่ใช้ในการเก็บจุดที่อยู่บนตัวของรูป
    ImagePoint theImagePoint ;
    Wound theWound;
    Wound theWoundSelect;
    JDialog theJD;
    HosObject theHO;
    UpdateStatus theUS;
    
    int CURRENT_WOUND_SELECT = -1;
    /** Creates new form Panelwound */
    public Panelwound() {
        initComponents();
        initDialog();
        theImageCanvas = new ImageCanvas();      
        initPicture();
        theImageCanvas.addMouseListener(this);
        theImageCanvas.addMouseMotionListener(this);
        this.setStatus("", UpdateStatus.NORMAL);
    }
    /**
     * 
     * @param  HosControl
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
     public Panelwound(HosControl hc) {
        theHC = hc;
        theHO = hc.theHO;
        theUS = hc.theUS;
        initComponents();
        initDialog();
        theImageCanvas = new ImageCanvas();
        initPicture();
        theImageCanvas.addMouseListener(this);
        theImageCanvas.addMouseMotionListener(this);
        this.setStatus("", UpdateStatus.NORMAL);
    }
    
    /**
     * เซตค่า HosControl ให้กับ Panel
     * @param  HosControl
     * @return void
     * @author kingland
     * @date 15/06/2549
     */
    public void setHosControl(HosControl hc){
        theHC = hc;
    }
    
     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Panelwound().setVisible(true);
            }
        });
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel16 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jPanelPicture = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jToggleButtonMark = new javax.swing.JToggleButton();
        jToggleButtonNormal = new javax.swing.JToggleButton();
        jPanel28 = new javax.swing.JPanel();
        jToggleButtonFont = new javax.swing.JToggleButton();
        jToggleButtonBack = new javax.swing.JToggleButton();
        jPanel41 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jTextFieldContussionWidth = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jTextFieldContussionLong = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jTextFieldContussionDeep = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jTextFieldContussionPosition = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jCheckBoxContussion = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jTextFieldSwellingWidth = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jTextFieldSwellingLong = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jTextFieldSwellingDeep = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jTextFieldSwellingPosition = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jCheckBoxSwelling = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jTextFieldAbrasionWidth = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jTextFieldAbrasionLong = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jTextFieldAbrasionDeep = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        jTextFieldAbrasionPosition = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jCheckBoxAbrasion = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jTextFieldCutwoundWidth = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        jTextFieldCutwoundLong = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        jTextFieldCutwoundDeep = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        jTextFieldCutwoundPosition = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jCheckBoxCutwound = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jTextFieldLacerationWidth = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        jTextFieldLacerationLong = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        jTextFieldLacerationDeep = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        jTextFieldLacerationPosition = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jCheckBoxLaceration = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jCheckBoxFracture = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jLabel75 = new javax.swing.JLabel();
        jTextFieldFracturePosition = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jCheckBoxDislocation = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        jLabel76 = new javax.swing.JLabel();
        jTextFieldDislocationPosition = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jCheckBoxOther = new javax.swing.JCheckBox();
        jTextFieldOtherDescribe = new javax.swing.JTextField();
        jPanel26 = new javax.swing.JPanel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jTextFieldOtherWidth = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        jTextFieldOtherLong = new javax.swing.JTextField();
        jLabel80 = new javax.swing.JLabel();
        jTextFieldOtherDeep = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jTextFieldOtherPosition = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel27.setFont(new java.awt.Font("MS Sans Serif", 1, 13));
        jLabel27.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e1a\u0e32\u0e14\u0e41\u0e1c\u0e25");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel16.add(jLabel27, gridBagConstraints);

        jPanel21.setLayout(new java.awt.BorderLayout());

        jPanel21.setBorder(new javax.swing.border.EtchedBorder());
        jPanelPicture.setLayout(new java.awt.BorderLayout());

        jPanelPicture.setMinimumSize(new java.awt.Dimension(311, 535));
        jPanelPicture.setPreferredSize(new java.awt.Dimension(311, 535));
        jPanel21.add(jPanelPicture, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        jPanel16.add(jPanel21, gridBagConstraints);

        jPanel17.setLayout(new java.awt.GridBagLayout());

        jPanel17.setBorder(new javax.swing.border.EtchedBorder());
        jPanel17.setMinimumSize(new java.awt.Dimension(30, 10));
        jPanel17.setPreferredSize(new java.awt.Dimension(30, 10));
        buttonGroup2.add(jToggleButtonMark);
        jToggleButtonMark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/111.gif")));
        jToggleButtonMark.setMaximumSize(new java.awt.Dimension(25, 25));
        jToggleButtonMark.setMinimumSize(new java.awt.Dimension(25, 25));
        jToggleButtonMark.setPreferredSize(new java.awt.Dimension(25, 25));
        jToggleButtonMark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMarkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        jPanel17.add(jToggleButtonMark, gridBagConstraints);

        buttonGroup2.add(jToggleButtonNormal);
        jToggleButtonNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/222.gif")));
        jToggleButtonNormal.setMaximumSize(new java.awt.Dimension(25, 25));
        jToggleButtonNormal.setMinimumSize(new java.awt.Dimension(25, 25));
        jToggleButtonNormal.setPreferredSize(new java.awt.Dimension(25, 25));
        jToggleButtonNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonNormalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel17.add(jToggleButtonNormal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel16.add(jPanel17, gridBagConstraints);

        jPanel28.setLayout(new java.awt.GridBagLayout());

        jPanel28.setMinimumSize(new java.awt.Dimension(10, 26));
        jPanel28.setPreferredSize(new java.awt.Dimension(10, 26));
        buttonGroup1.add(jToggleButtonFont);
        jToggleButtonFont.setText("\u0e14\u0e49\u0e32\u0e19\u0e2b\u0e19\u0e49\u0e32");
        jToggleButtonFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonFontActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanel28.add(jToggleButtonFont, gridBagConstraints);

        buttonGroup1.add(jToggleButtonBack);
        jToggleButtonBack.setText("\u0e14\u0e49\u0e32\u0e19\u0e2b\u0e25\u0e31\u0e07");
        jToggleButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonBackActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel28.add(jToggleButtonBack, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel16.add(jPanel28, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jPanel16, gridBagConstraints);

        jPanel41.setLayout(new java.awt.GridBagLayout());

        jPanel41.setBorder(new javax.swing.border.TitledBorder("\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e1a\u0e32\u0e14\u0e41\u0e1c\u0e25"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.setMinimumSize(new java.awt.Dimension(334, 45));
        jPanel15.setLayout(new java.awt.GridBagLayout());

        jLabel43.setText("\u0e02\u0e19\u0e32\u0e14 \u0e01\u0e27\u0e49\u0e32\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jLabel43, gridBagConstraints);

        jLabel45.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jLabel45, gridBagConstraints);

        jTextFieldContussionWidth.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldContussionWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldContussionWidthKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jTextFieldContussionWidth, gridBagConstraints);

        jLabel46.setText("\u0e22\u0e32\u0e27");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jLabel46, gridBagConstraints);

        jTextFieldContussionLong.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldContussionLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldContussionLongKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jTextFieldContussionLong, gridBagConstraints);

        jLabel47.setText("\u0e25\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jLabel47, gridBagConstraints);

        jTextFieldContussionDeep.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldContussionDeep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldContussionDeepKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jTextFieldContussionDeep, gridBagConstraints);

        jLabel48.setText("\u0e0b\u0e21.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jLabel48, gridBagConstraints);

        jTextFieldContussionPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldContussionPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jTextFieldContussionPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jPanel15, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jCheckBoxContussion.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxContussion.setText("Contussion");
        jCheckBoxContussion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxContussionActionPerformed(evt);
            }
        });

        jPanel4.add(jCheckBoxContussion, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jPanel2.setMinimumSize(new java.awt.Dimension(327, 74));
        jPanel18.setLayout(new java.awt.GridBagLayout());

        jLabel50.setText("\u0e02\u0e19\u0e32\u0e14 \u0e01\u0e27\u0e49\u0e32\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jLabel50, gridBagConstraints);

        jLabel51.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jLabel51, gridBagConstraints);

        jTextFieldSwellingWidth.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldSwellingWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSwellingWidthKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jTextFieldSwellingWidth, gridBagConstraints);

        jLabel52.setText("\u0e22\u0e32\u0e27");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jLabel52, gridBagConstraints);

        jTextFieldSwellingLong.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldSwellingLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSwellingLongKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jTextFieldSwellingLong, gridBagConstraints);

        jLabel53.setText("\u0e25\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jLabel53, gridBagConstraints);

        jTextFieldSwellingDeep.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldSwellingDeep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSwellingDeepKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jTextFieldSwellingDeep, gridBagConstraints);

        jLabel54.setText("\u0e0b\u0e21.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jLabel54, gridBagConstraints);

        jTextFieldSwellingPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSwellingPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel18.add(jTextFieldSwellingPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jPanel18, gridBagConstraints);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jCheckBoxSwelling.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxSwelling.setText("Swelling");
        jCheckBoxSwelling.setMaximumSize(new java.awt.Dimension(89, 25));
        jCheckBoxSwelling.setMinimumSize(new java.awt.Dimension(89, 25));
        jCheckBoxSwelling.setPreferredSize(new java.awt.Dimension(89, 25));
        jCheckBoxSwelling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSwellingActionPerformed(evt);
            }
        });

        jPanel5.add(jCheckBoxSwelling, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jLabel55.setText("\u0e02\u0e19\u0e32\u0e14 \u0e01\u0e27\u0e49\u0e32\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jLabel55, gridBagConstraints);

        jLabel56.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jLabel56, gridBagConstraints);

        jTextFieldAbrasionWidth.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldAbrasionWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldAbrasionWidthKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jTextFieldAbrasionWidth, gridBagConstraints);

        jLabel57.setText("\u0e22\u0e32\u0e27");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jLabel57, gridBagConstraints);

        jTextFieldAbrasionLong.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldAbrasionLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldAbrasionLongKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jTextFieldAbrasionLong, gridBagConstraints);

        jLabel58.setText("\u0e25\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jLabel58, gridBagConstraints);

        jTextFieldAbrasionDeep.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldAbrasionDeep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldAbrasionDeepKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jTextFieldAbrasionDeep, gridBagConstraints);

        jLabel59.setText("\u0e0b\u0e21.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jLabel59, gridBagConstraints);

        jTextFieldAbrasionPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldAbrasionPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel22.add(jTextFieldAbrasionPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(jPanel22, gridBagConstraints);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jCheckBoxAbrasion.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxAbrasion.setText("Abrasion");
        jCheckBoxAbrasion.setMaximumSize(new java.awt.Dimension(89, 25));
        jCheckBoxAbrasion.setMinimumSize(new java.awt.Dimension(89, 25));
        jCheckBoxAbrasion.setPreferredSize(new java.awt.Dimension(89, 25));
        jCheckBoxAbrasion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAbrasionActionPerformed(evt);
            }
        });

        jPanel6.add(jCheckBoxAbrasion, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel3, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel8.setBorder(new javax.swing.border.EtchedBorder());
        jPanel23.setLayout(new java.awt.GridBagLayout());

        jLabel60.setText("\u0e02\u0e19\u0e32\u0e14 \u0e01\u0e27\u0e49\u0e32\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jLabel60, gridBagConstraints);

        jLabel61.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jLabel61, gridBagConstraints);

        jTextFieldCutwoundWidth.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldCutwoundWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCutwoundWidthKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jTextFieldCutwoundWidth, gridBagConstraints);

        jLabel62.setText("\u0e22\u0e32\u0e27");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jLabel62, gridBagConstraints);

        jTextFieldCutwoundLong.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldCutwoundLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCutwoundLongKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jTextFieldCutwoundLong, gridBagConstraints);

        jLabel68.setText("\u0e25\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jLabel68, gridBagConstraints);

        jTextFieldCutwoundDeep.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldCutwoundDeep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCutwoundDeepKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jTextFieldCutwoundDeep, gridBagConstraints);

        jLabel69.setText("\u0e0b\u0e21.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jLabel69, gridBagConstraints);

        jTextFieldCutwoundPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCutwoundPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel23.add(jTextFieldCutwoundPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel8.add(jPanel23, gridBagConstraints);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jCheckBoxCutwound.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxCutwound.setText("Cut wound");
        jCheckBoxCutwound.setMaximumSize(new java.awt.Dimension(89, 25));
        jCheckBoxCutwound.setMinimumSize(new java.awt.Dimension(89, 25));
        jCheckBoxCutwound.setPreferredSize(new java.awt.Dimension(89, 25));
        jCheckBoxCutwound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCutwoundActionPerformed(evt);
            }
        });

        jPanel9.add(jCheckBoxCutwound, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel8, gridBagConstraints);

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jPanel10.setBorder(new javax.swing.border.EtchedBorder());
        jPanel24.setLayout(new java.awt.GridBagLayout());

        jLabel70.setText("\u0e02\u0e19\u0e32\u0e14 \u0e01\u0e27\u0e49\u0e32\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jLabel70, gridBagConstraints);

        jLabel71.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jLabel71, gridBagConstraints);

        jTextFieldLacerationWidth.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldLacerationWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldLacerationWidthKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jTextFieldLacerationWidth, gridBagConstraints);

        jLabel72.setText("\u0e22\u0e32\u0e27");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jLabel72, gridBagConstraints);

        jTextFieldLacerationLong.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldLacerationLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldLacerationLongKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jTextFieldLacerationLong, gridBagConstraints);

        jLabel73.setText("\u0e25\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jLabel73, gridBagConstraints);

        jTextFieldLacerationDeep.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldLacerationDeep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldLacerationDeepKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jTextFieldLacerationDeep, gridBagConstraints);

        jLabel74.setText("\u0e0b\u0e21.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jLabel74, gridBagConstraints);

        jTextFieldLacerationPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldLacerationPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel24.add(jTextFieldLacerationPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel10.add(jPanel24, gridBagConstraints);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jCheckBoxLaceration.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxLaceration.setText("Laceration");
        jCheckBoxLaceration.setMaximumSize(new java.awt.Dimension(89, 25));
        jCheckBoxLaceration.setMinimumSize(new java.awt.Dimension(89, 25));
        jCheckBoxLaceration.setPreferredSize(new java.awt.Dimension(89, 25));
        jCheckBoxLaceration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLacerationActionPerformed(evt);
            }
        });

        jPanel11.add(jCheckBoxLaceration, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jPanel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel10, gridBagConstraints);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jPanel12.setBorder(new javax.swing.border.EtchedBorder());
        jCheckBoxFracture.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxFracture.setText("Fracture");
        jCheckBoxFracture.setMaximumSize(new java.awt.Dimension(89, 25));
        jCheckBoxFracture.setMinimumSize(new java.awt.Dimension(89, 25));
        jCheckBoxFracture.setPreferredSize(new java.awt.Dimension(89, 25));
        jCheckBoxFracture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFractureActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel12.add(jCheckBoxFracture, gridBagConstraints);

        jPanel19.setLayout(new java.awt.GridBagLayout());

        jLabel75.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel19.add(jLabel75, gridBagConstraints);

        jTextFieldFracturePosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldFracturePositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel19.add(jTextFieldFracturePosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel12.add(jPanel19, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel12, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());

        jPanel13.setBorder(new javax.swing.border.EtchedBorder());
        jCheckBoxDislocation.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxDislocation.setText("Dislocation");
        jCheckBoxDislocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDislocationActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel13.add(jCheckBoxDislocation, gridBagConstraints);

        jPanel20.setLayout(new java.awt.GridBagLayout());

        jLabel76.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel20.add(jLabel76, gridBagConstraints);

        jTextFieldDislocationPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldDislocationPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel20.add(jTextFieldDislocationPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel13.add(jPanel20, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel13, gridBagConstraints);

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jPanel14.setBorder(new javax.swing.border.EtchedBorder());
        jPanel25.setLayout(new java.awt.GridBagLayout());

        jCheckBoxOther.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        jCheckBoxOther.setText("Other (describe)");
        jCheckBoxOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxOtherActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel25.add(jCheckBoxOther, gridBagConstraints);

        jTextFieldOtherDescribe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldOtherDescribeKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel25.add(jTextFieldOtherDescribe, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel14.add(jPanel25, gridBagConstraints);

        jPanel26.setLayout(new java.awt.GridBagLayout());

        jLabel77.setText("\u0e02\u0e19\u0e32\u0e14 \u0e01\u0e27\u0e49\u0e32\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jLabel77, gridBagConstraints);

        jLabel78.setText("\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07 (\u0e23\u0e30\u0e1a\u0e38)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jLabel78, gridBagConstraints);

        jTextFieldOtherWidth.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldOtherWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldOtherWidthKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jTextFieldOtherWidth, gridBagConstraints);

        jLabel79.setText("\u0e22\u0e32\u0e27");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jLabel79, gridBagConstraints);

        jTextFieldOtherLong.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldOtherLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldOtherLongKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jTextFieldOtherLong, gridBagConstraints);

        jLabel80.setText("\u0e25\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jLabel80, gridBagConstraints);

        jTextFieldOtherDeep.setPreferredSize(new java.awt.Dimension(30, 24));
        jTextFieldOtherDeep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldOtherDeepKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jTextFieldOtherDeep, gridBagConstraints);

        jLabel81.setText("\u0e0b\u0e21.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jLabel81, gridBagConstraints);

        jTextFieldOtherPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldOtherPositionKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel26.add(jTextFieldOtherPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel14.add(jPanel26, gridBagConstraints);

        jPanel7.setMinimumSize(new java.awt.Dimension(89, 25));
        jPanel7.setPreferredSize(new java.awt.Dimension(89, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel14.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel41.add(jPanel14, gridBagConstraints);

        jPanel29.setLayout(new java.awt.GridBagLayout());

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel29.add(jButtonDelete, gridBagConstraints);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Save16.gif")));
        jButtonSave.setText("\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        jButtonSave.setToolTipText("\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e1a\u0e32\u0e14\u0e41\u0e1c\u0e25");
        jButtonSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSave.setMaximumSize(new java.awt.Dimension(62, 26));
        jButtonSave.setMinimumSize(new java.awt.Dimension(62, 26));
        jButtonSave.setPreferredSize(new java.awt.Dimension(62, 26));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel29.add(jButtonSave, gridBagConstraints);

        jButtonCancel.setText("\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01");
        jButtonCancel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonCancel.setMaximumSize(new java.awt.Dimension(62, 26));
        jButtonCancel.setMinimumSize(new java.awt.Dimension(62, 26));
        jButtonCancel.setPreferredSize(new java.awt.Dimension(62, 26));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel29.add(jButtonCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel41.add(jPanel29, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jPanel41, gridBagConstraints);

        jPanel27.setLayout(new java.awt.GridBagLayout());

        jPanel27.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabelStatus.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelStatus.setText("Test");
        jLabelStatus.setMaximumSize(new java.awt.Dimension(4, 24));
        jLabelStatus.setMinimumSize(new java.awt.Dimension(4, 20));
        jLabelStatus.setOpaque(true);
        jLabelStatus.setPreferredSize(new java.awt.Dimension(4, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel27.add(jLabelStatus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jPanel27, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.theJD.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jTextFieldOtherPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOtherPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound, this);
            if(i == 1){
                setColorImagPoint(theImagePoint, Color.GREEN);
                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
            }
            else{
                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
            }
        }
    }//GEN-LAST:event_jTextFieldOtherPositionKeyReleased

    private void jTextFieldDislocationPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDislocationPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound, this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
        }
    }//GEN-LAST:event_jTextFieldDislocationPositionKeyReleased

    private void jTextFieldFracturePositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFracturePositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound,this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
        }
    }//GEN-LAST:event_jTextFieldFracturePositionKeyReleased

    private void jTextFieldLacerationPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLacerationPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound,this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
        }
    }//GEN-LAST:event_jTextFieldLacerationPositionKeyReleased

    private void jTextFieldCutwoundPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCutwoundPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound,this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
        }
    }//GEN-LAST:event_jTextFieldCutwoundPositionKeyReleased

    private void jTextFieldAbrasionPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAbrasionPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound,this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
        }
    }//GEN-LAST:event_jTextFieldAbrasionPositionKeyReleased

    private void jTextFieldSwellingPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSwellingPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound, this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
        }
    }//GEN-LAST:event_jTextFieldSwellingPositionKeyReleased

    private void jTextFieldContussionPositionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContussionPositionKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            theWound = (Wound)theImagePoint.getObject();             
            if(theWound == null){                
                theWound = new Wound();
                updateGOWound();                
            }
            else{
                updateGOWound();                    
            }
            theImagePoint.setObject(theWound); 
            int i = theHC.theVitalControl.saveWound(theWound,this);
//            if(i == 1){
//                setColorImagPoint(theImagePoint, Color.GREEN);
//                setStatus("บันทึกข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
//            }
//            else{
//                setStatus("ไม่สามารถบันทึกข้อมูลบาดแผลได้",theUS.WARNING);
//            }
                
        }
    }//GEN-LAST:event_jTextFieldContussionPositionKeyReleased

    private void jTextFieldOtherDeepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOtherDeepKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldOtherPosition.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldOtherDeepKeyReleased

    private void jTextFieldOtherLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOtherLongKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldOtherDeep.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldOtherLongKeyReleased

    private void jTextFieldOtherWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOtherWidthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldOtherLong.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldOtherWidthKeyReleased

    private void jTextFieldOtherDescribeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOtherDescribeKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldOtherWidth.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldOtherDescribeKeyReleased

    private void jTextFieldLacerationDeepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLacerationDeepKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldLacerationPosition.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldLacerationDeepKeyReleased

    private void jTextFieldLacerationLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLacerationLongKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldLacerationDeep.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldLacerationLongKeyReleased

    private void jTextFieldLacerationWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLacerationWidthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldLacerationLong.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldLacerationWidthKeyReleased

    private void jTextFieldCutwoundDeepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCutwoundDeepKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldCutwoundPosition.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldCutwoundDeepKeyReleased

    private void jTextFieldCutwoundLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCutwoundLongKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldCutwoundDeep.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldCutwoundLongKeyReleased

    private void jTextFieldCutwoundWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCutwoundWidthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldCutwoundLong.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldCutwoundWidthKeyReleased

    private void jTextFieldAbrasionDeepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAbrasionDeepKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldAbrasionPosition.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldAbrasionDeepKeyReleased

    private void jTextFieldAbrasionLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAbrasionLongKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldAbrasionDeep.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldAbrasionLongKeyReleased

    private void jTextFieldAbrasionWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAbrasionWidthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldAbrasionLong.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldAbrasionWidthKeyReleased

    private void jTextFieldSwellingDeepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSwellingDeepKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldSwellingPosition.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldSwellingDeepKeyReleased

    private void jTextFieldSwellingLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSwellingLongKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldSwellingDeep.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldSwellingLongKeyReleased

    private void jTextFieldSwellingWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSwellingWidthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldSwellingLong.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldSwellingWidthKeyReleased

    private void jTextFieldContussionDeepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContussionDeepKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldContussionPosition.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldContussionDeepKeyReleased

    private void jTextFieldContussionLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContussionLongKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldContussionDeep.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldContussionLongKeyReleased

    private void jTextFieldContussionWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContussionWidthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldContussionLong.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldContussionWidthKeyReleased

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(theHC.theUS.getJFrame(),"ต้องการลบรายการบาดแผลหรือไม่ ?","ยืนยัน",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            Wound wound = (Wound)theImagePoint.getObject();        
            if(wound == null || "".equals(wound.getObjectId()) || wound.getObjectId() == null){
                theImageCanvas.removePoint(theImagePoint);
                setStatus("ลบข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
            }
            else{
                int result = theHC.theVitalControl.deleteWound(wound, theUS);
                if(result == 1 || wound.getObjectId()==null){
                    theImageCanvas.removePoint(theImagePoint);
                    setStatus("ลบข้อมูลบาดแผลเสร็จสิ้น",theUS.COMPLETE);
                }
                else{
                    setStatus("ลบข้อมูลบาดแผลผิดพลาด",theUS.ERROR);
                }
            }
            theImageCanvas.repaint();
            clearGui();
            setEnabledDescription(false);
            jCheckBoxContussion.setSelected(false);
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jCheckBoxOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxOtherActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.OTHER)clearGui();
        CURRENT_WOUND_SELECT = WoundType.OTHER;
        setEnabled(WoundType.OTHER);
        jTextFieldOtherDescribe.requestFocus();
    }//GEN-LAST:event_jCheckBoxOtherActionPerformed

    private void jCheckBoxDislocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDislocationActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.DISLOCATION)clearGui();
        CURRENT_WOUND_SELECT = WoundType.DISLOCATION;
        setEnabled(WoundType.DISLOCATION);
        jTextFieldDislocationPosition.requestFocus();
    }//GEN-LAST:event_jCheckBoxDislocationActionPerformed

    private void jCheckBoxFractureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFractureActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.FRACTURE)clearGui();
        CURRENT_WOUND_SELECT = WoundType.FRACTURE;
        setEnabled(WoundType.FRACTURE);
        jTextFieldFracturePosition.requestFocus();
    }//GEN-LAST:event_jCheckBoxFractureActionPerformed

    private void jCheckBoxLacerationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLacerationActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.LACERATION)clearGui();
        CURRENT_WOUND_SELECT = WoundType.LACERATION;
        setEnabled(WoundType.LACERATION);
        jTextFieldLacerationWidth.requestFocus();
    }//GEN-LAST:event_jCheckBoxLacerationActionPerformed

    private void jCheckBoxCutwoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCutwoundActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.CUTWOUND)clearGui();
        CURRENT_WOUND_SELECT = WoundType.CUTWOUND;
        setEnabled(WoundType.CUTWOUND);
        jTextFieldCutwoundWidth.requestFocus();
    }//GEN-LAST:event_jCheckBoxCutwoundActionPerformed

    private void jCheckBoxAbrasionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAbrasionActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.ABRASION)clearGui();
        CURRENT_WOUND_SELECT = WoundType.ABRASION;
        setEnabled(WoundType.ABRASION);
        jTextFieldAbrasionWidth.requestFocus();
    }//GEN-LAST:event_jCheckBoxAbrasionActionPerformed

    private void jCheckBoxSwellingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSwellingActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.SWELLING)clearGui();
        CURRENT_WOUND_SELECT = WoundType.SWELLING;
        setEnabled(WoundType.SWELLING);
        jTextFieldSwellingWidth.requestFocus();
    }//GEN-LAST:event_jCheckBoxSwellingActionPerformed

    private void jCheckBoxContussionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxContussionActionPerformed
        if(CURRENT_WOUND_SELECT != WoundType.CONTUSSION)clearGui();
        CURRENT_WOUND_SELECT = WoundType.CONTUSSION;
        setEnabled(WoundType.CONTUSSION);
        jTextFieldContussionWidth.requestFocus();
    }//GEN-LAST:event_jCheckBoxContussionActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(theImagePoint==null)
        {
            setStatus("กรุณาเลือกจุดในร่างกายก่อนที่จะทำการบันทึก",UpdateStatus.WARNING);
            return;
        }
        theWound = (Wound)theImagePoint.getObject();
        theWound = new Wound();
        theImagePoint.setObject(theWound);
        updateGOWound();
        //บันทึกทุกจุดที่ทำการ mark เอาไว้เลย
        theImagePoint.setObject(theWound);
        Vector v = theImageCanvas.getAllPoint();        
        for(int i=0,size=v.size();v!=null&&i<size;i++){
            int result = 0;            
            ImagePoint img = (ImagePoint)v.get(i);
            Wound wound = (Wound)img.getObject();              
            result = theHC.theVitalControl.saveWound(wound,this);            
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jToggleButtonNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonNormalActionPerformed
        theImageCanvas.setMode(ImageCanvas.NORMAL_MODE);
    }//GEN-LAST:event_jToggleButtonNormalActionPerformed

    private void jToggleButtonMarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMarkActionPerformed
        theImageCanvas.setMode(ImageCanvas.INSERT_MODE);
    }//GEN-LAST:event_jToggleButtonMarkActionPerformed

    private void jToggleButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonBackActionPerformed
        this.storePoint();
        theImageCanvas.loadImage(WoundPicture.BACK_PICTURE);
        theImageCanvas.setPoint(vPointOfPiture[WoundPicture.BACK_PICTURE]);
        clearGui();
    }//GEN-LAST:event_jToggleButtonBackActionPerformed

    private void jToggleButtonFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonFontActionPerformed
        storePoint();
        theImageCanvas.loadImage(WoundPicture.FRONT_PICTURE);
        theImageCanvas.setPoint(vPointOfPiture[WoundPicture.FRONT_PICTURE]);
        clearGui();
    }//GEN-LAST:event_jToggleButtonFontActionPerformed
    /**
     * บันทึกข้อมูล 
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void seveWound()
    {
        
    }
    /**
     * เซต Enabled เฉพาะในส่วนรายละเอียด
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
     public void setEnabledDescription(boolean boo)
     {
         Constant.println("setEnabledDescription"+boo);
        jTextFieldAbrasionWidth.setEnabled(boo);
        jTextFieldAbrasionLong.setEnabled(boo);
        jTextFieldAbrasionDeep.setEnabled(boo);
        jTextFieldAbrasionPosition.setEnabled(boo);
        jTextFieldContussionWidth.setEnabled(boo);
        jTextFieldContussionLong.setEnabled(boo);
        jTextFieldContussionDeep.setEnabled(boo);
        jTextFieldContussionPosition.setEnabled(boo);
        jTextFieldCutwoundWidth.setEnabled(boo);
        jTextFieldCutwoundLong.setEnabled(boo);
        jTextFieldCutwoundDeep.setEnabled(boo);
        jTextFieldCutwoundPosition.setEnabled(boo);
        jTextFieldDislocationPosition.setEnabled(boo);
        jTextFieldFracturePosition.setEnabled(boo);
        jTextFieldLacerationWidth.setEnabled(boo);
        jTextFieldLacerationLong.setEnabled(boo);
        jTextFieldLacerationDeep.setEnabled(boo);
        jTextFieldLacerationPosition.setEnabled(boo);
        jTextFieldOtherDescribe.setEnabled(boo);
        jTextFieldOtherWidth.setEnabled(boo);
        jTextFieldOtherLong.setEnabled(boo);
        jTextFieldOtherDeep.setEnabled(boo);
        jTextFieldOtherPosition.setEnabled(boo);
        jTextFieldSwellingWidth.setEnabled(boo);
        jTextFieldSwellingLong.setEnabled(boo);
        jTextFieldSwellingDeep.setEnabled(boo);
        jTextFieldSwellingPosition.setEnabled(boo);
        
        jCheckBoxAbrasion.setSelected(boo);
        jCheckBoxContussion.setSelected(boo);
        jCheckBoxCutwound.setSelected(boo);
        jCheckBoxDislocation.setSelected(boo);
        jCheckBoxFracture.setSelected(boo);
        jCheckBoxOther.setSelected(boo);
        jCheckBoxSwelling.setSelected(boo);
        jCheckBoxLaceration.setSelected(boo);
     }
    /**
     * เซต Enabled เฉพาะในส่วนที่ต้องการ
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void setEnabled(int woundtype)
    {
        jTextFieldAbrasionWidth.setEnabled(false);
        jTextFieldAbrasionLong.setEnabled(false);
        jTextFieldAbrasionDeep.setEnabled(false);
        jTextFieldAbrasionPosition.setEnabled(false);
        jTextFieldContussionWidth.setEnabled(false);
        jTextFieldContussionLong.setEnabled(false);
        jTextFieldContussionDeep.setEnabled(false);
        jTextFieldContussionPosition.setEnabled(false);
        jTextFieldCutwoundWidth.setEnabled(false);
        jTextFieldCutwoundLong.setEnabled(false);
        jTextFieldCutwoundDeep.setEnabled(false);
        jTextFieldCutwoundPosition.setEnabled(false);
        jTextFieldDislocationPosition.setEnabled(false);
        jTextFieldFracturePosition.setEnabled(false);
        jTextFieldLacerationWidth.setEnabled(false);
        jTextFieldLacerationLong.setEnabled(false);
        jTextFieldLacerationDeep.setEnabled(false);
        jTextFieldLacerationPosition.setEnabled(false);
        jTextFieldOtherDescribe.setEnabled(false);
        jTextFieldOtherWidth.setEnabled(false);
        jTextFieldOtherLong.setEnabled(false);
        jTextFieldOtherDeep.setEnabled(false);
        jTextFieldOtherPosition.setEnabled(false);
        jTextFieldSwellingWidth.setEnabled(false);
        jTextFieldSwellingLong.setEnabled(false);
        jTextFieldSwellingDeep.setEnabled(false);
        jTextFieldSwellingPosition.setEnabled(false);
        jCheckBoxAbrasion.setSelected(false);
        jCheckBoxContussion.setSelected(false);
        jCheckBoxCutwound.setSelected(false);
        jCheckBoxDislocation.setSelected(false);
        jCheckBoxFracture.setSelected(false);
        jCheckBoxLaceration.setSelected(false);
        jCheckBoxOther.setSelected(false);
        jCheckBoxSwelling.setSelected(false);        
        switch(woundtype)
        {
            case WoundType.ABRASION:{                
                jCheckBoxAbrasion.setSelected(true);
                jTextFieldAbrasionWidth.setEnabled(true);
                jTextFieldAbrasionLong.setEnabled(true);
                jTextFieldAbrasionDeep.setEnabled(true);
                jTextFieldAbrasionPosition.setEnabled(true);
                break;
            }
            case WoundType.CONTUSSION:{                
                jCheckBoxContussion.setSelected(true);
                jTextFieldContussionWidth.setEnabled(true);
                jTextFieldContussionLong.setEnabled(true);
                jTextFieldContussionDeep.setEnabled(true);
                jTextFieldContussionPosition.setEnabled(true);
                break;
            }
            case WoundType.CUTWOUND:{    
                jCheckBoxCutwound.setSelected(true);
                jTextFieldCutwoundWidth.setEnabled(true);
                jTextFieldCutwoundLong.setEnabled(true);
                jTextFieldCutwoundDeep.setEnabled(true);
                jTextFieldCutwoundPosition.setEnabled(true);
                break;
            }
            case WoundType.DISLOCATION:{   
                jCheckBoxDislocation.setSelected(true);
                jTextFieldDislocationPosition.setEnabled(true);
                break;
            }
            case WoundType.FRACTURE:{ 
                jCheckBoxFracture.setSelected(true);
                jTextFieldFracturePosition.setEnabled(true);
                break;
            }
            case WoundType.LACERATION:{                
                jCheckBoxLaceration.setSelected(true);
                jTextFieldLacerationWidth.setEnabled(true);
                jTextFieldLacerationLong.setEnabled(true);
                jTextFieldLacerationDeep.setEnabled(true);
                jTextFieldLacerationPosition.setEnabled(true);
                break;
            }
            case WoundType.OTHER:{    
                jCheckBoxOther.setSelected(true);
                jTextFieldOtherDescribe.setEnabled(true);
                jTextFieldOtherWidth.setEnabled(true);
                jTextFieldOtherLong.setEnabled(true);
                jTextFieldOtherDeep.setEnabled(true);
                jTextFieldOtherPosition.setEnabled(true);
                break;
            }
            case WoundType.SWELLING:{
                jCheckBoxSwelling.setSelected(true);   
                jTextFieldSwellingWidth.setEnabled(true);
                jTextFieldSwellingLong.setEnabled(true);
                jTextFieldSwellingDeep.setEnabled(true);
                jTextFieldSwellingPosition.setEnabled(true);
                break;
            }
        }
    }
    /**
     * นำข้อมูลไปแสดงที่ Gui
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void updateOGWound(Wound wound)
    {
        Constant.println("updateOGWound");
        setEnabledDescription(false);
//        Constant.println("wound"+wound);
        if(wound == null || wound.wound_type == null || "".equals(wound.wound_type)){
            CURRENT_WOUND_SELECT = -1;
            return;
        }  
//        Constant.println(" if "+wound.getObjectId());
//        Constant.println(" type "+wound.wound_type);
        switch(Integer.parseInt(wound.wound_type))
        {            
            case WoundType.ABRASION:{
                CURRENT_WOUND_SELECT = WoundType.ABRASION;
                jCheckBoxAbrasion.setSelected(true);
                jTextFieldAbrasionWidth.setText(wound.width);
                jTextFieldAbrasionLong.setText(wound.longs);
                jTextFieldAbrasionDeep.setText(wound.deep);
                jTextFieldAbrasionPosition.setText(wound.wound_position);
                jTextFieldAbrasionWidth.setEnabled(true);
                jTextFieldAbrasionLong.setEnabled(true);
                jTextFieldAbrasionDeep.setEnabled(true);
                jTextFieldAbrasionPosition.setEnabled(true);
                break;
            }
            case WoundType.CONTUSSION:{
                CURRENT_WOUND_SELECT = WoundType.CONTUSSION;
                jCheckBoxContussion.setSelected(true);
                jTextFieldContussionWidth.setText(wound.width);
                jTextFieldContussionLong.setText(wound.longs);
                jTextFieldContussionDeep.setText(wound.deep);
                jTextFieldContussionPosition.setText(wound.wound_position);
                jTextFieldContussionWidth.setEnabled(true);
                jTextFieldContussionLong.setEnabled(true);
                jTextFieldContussionDeep.setEnabled(true);
                jTextFieldContussionPosition.setEnabled(true);
                break;
            }
            case WoundType.CUTWOUND:{
                CURRENT_WOUND_SELECT = WoundType.CUTWOUND;
                jCheckBoxCutwound.setSelected(true);
                jTextFieldCutwoundWidth.setText(wound.width);
                jTextFieldCutwoundLong.setText(wound.longs);
                jTextFieldCutwoundDeep.setText(wound.deep);
                jTextFieldCutwoundPosition.setText(wound.wound_position);
                jTextFieldCutwoundWidth.setEnabled(true);
                jTextFieldCutwoundLong.setEnabled(true);
                jTextFieldCutwoundDeep.setEnabled(true);
                jTextFieldCutwoundPosition.setEnabled(true);
                break;
            }
            case WoundType.DISLOCATION:{
                CURRENT_WOUND_SELECT = WoundType.DISLOCATION;
                jCheckBoxDislocation.setSelected(true);
                jTextFieldDislocationPosition.setText(wound.wound_position);
                jTextFieldDislocationPosition.setEnabled(true);
                break;
            }
            case WoundType.FRACTURE:{
                CURRENT_WOUND_SELECT = WoundType.FRACTURE;
                jCheckBoxFracture.setSelected(true);
                jTextFieldFracturePosition.setText(wound.wound_position);
                jTextFieldFracturePosition.setEnabled(true);
                break;
            }
            case WoundType.LACERATION:{
                CURRENT_WOUND_SELECT = WoundType.LACERATION;
                jCheckBoxLaceration.setSelected(true);
                jTextFieldLacerationWidth.setText(wound.width);
                jTextFieldLacerationLong.setText(wound.longs);
                jTextFieldLacerationDeep.setText(wound.deep);
                jTextFieldLacerationPosition.setText(wound.wound_position);
                jTextFieldLacerationWidth.setEnabled(true);
                jTextFieldLacerationLong.setEnabled(true);
                jTextFieldLacerationDeep.setEnabled(true);
                jTextFieldLacerationPosition.setEnabled(true);
                break;
            }
            case WoundType.OTHER:{
                CURRENT_WOUND_SELECT = WoundType.OTHER;
                jCheckBoxOther.setSelected(true);
                jTextFieldOtherDescribe.setText(wound.describe);
                jTextFieldOtherWidth.setText(wound.width);
                jTextFieldOtherLong.setText(wound.longs);
                jTextFieldOtherDeep.setText(wound.deep);
                jTextFieldOtherPosition.setText(wound.wound_position);
                 jTextFieldOtherDescribe.setEnabled(true);
                jTextFieldOtherWidth.setEnabled(true);
                jTextFieldOtherLong.setEnabled(true);
                jTextFieldOtherDeep.setEnabled(true);
                jTextFieldOtherPosition.setEnabled(true);
                break;
            }
            case WoundType.SWELLING:{
                CURRENT_WOUND_SELECT = WoundType.SWELLING;
                jCheckBoxSwelling.setSelected(true);
                jTextFieldSwellingWidth.setText(wound.width);
                jTextFieldSwellingLong.setText(wound.longs);
                jTextFieldSwellingDeep.setText(wound.deep);
                jTextFieldSwellingPosition.setText(wound.wound_position);
                jTextFieldSwellingWidth.setEnabled(true);
                jTextFieldSwellingLong.setEnabled(true);
                jTextFieldSwellingDeep.setEnabled(true);
                jTextFieldSwellingPosition.setEnabled(true);
                break;
            }
        }
    }
    /**
     * นำข้อมูลจากGuiไปในObject
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void updateGOWound()
    {
        if(theWound != null)
        {
            switch(CURRENT_WOUND_SELECT){
                case WoundType.ABRASION:{
                    theWound.wound_type = String.valueOf(WoundType.ABRASION);
                    theWound.deep = jTextFieldAbrasionDeep.getText();
                    theWound.describe = "";
                    theWound.longs = jTextFieldAbrasionLong.getText();
                    theWound.width = jTextFieldAbrasionWidth.getText();
                    theWound.wound_position = jTextFieldAbrasionPosition.getText();
                    break;
                }
                case WoundType.CONTUSSION:{
                    theWound.wound_type = String.valueOf(WoundType.CONTUSSION);
                    theWound.deep = jTextFieldContussionDeep.getText();
                    theWound.describe = "";
                    theWound.longs = jTextFieldContussionLong.getText();
                    theWound.width = jTextFieldContussionWidth.getText();
                    theWound.wound_position = jTextFieldContussionPosition.getText();
                    break;
                }
                case WoundType.CUTWOUND:{
                    theWound.wound_type = String.valueOf(WoundType.CUTWOUND);
                    theWound.deep = jTextFieldCutwoundDeep.getText();
                    theWound.longs = jTextFieldCutwoundLong.getText();
                    theWound.width = jTextFieldCutwoundWidth.getText();
                    theWound.wound_position = jTextFieldCutwoundPosition.getText();
                    theWound.describe = "";
                    break;
                }
                case WoundType.DISLOCATION:{
                    theWound.wound_type = String.valueOf(WoundType.DISLOCATION);
                    theWound.deep = "";
                    theWound.longs = "";
                    theWound.width = "";
                    theWound.wound_position = jTextFieldDislocationPosition.getText();
                    theWound.describe = "";
                    break;
                }
                case WoundType.FRACTURE:{
                    theWound.wound_type = String.valueOf(WoundType.FRACTURE);
                    theWound.deep = "";
                    theWound.longs = "";
                    theWound.width = "";
                    theWound.wound_position = jTextFieldFracturePosition.getText();
                    theWound.describe = "";
                    break;
                }
                case WoundType.LACERATION:{
                    theWound.wound_type = String.valueOf(WoundType.LACERATION);
                    theWound.deep = jTextFieldLacerationDeep.getText();
                    theWound.longs = jTextFieldLacerationLong.getText();
                    theWound.width = jTextFieldLacerationWidth.getText();
                    theWound.wound_position = jTextFieldLacerationPosition.getText();
                    theWound.describe = "";
                    break;
                }
                case WoundType.OTHER:{
                    theWound.wound_type = String.valueOf(WoundType.OTHER);
                    theWound.deep = jTextFieldOtherDeep.getText();
                    theWound.longs = jTextFieldOtherLong.getText();
                    theWound.width = jTextFieldOtherWidth.getText();
                    theWound.wound_position = jTextFieldOtherPosition.getText();
                    theWound.describe = jTextFieldOtherDescribe.getText();
                    break;
                }
                case WoundType.SWELLING:{
                    theWound.wound_type = String.valueOf(WoundType.SWELLING);
                    theWound.deep = jTextFieldSwellingDeep.getText();
                    theWound.longs = jTextFieldSwellingLong.getText();
                    theWound.width = jTextFieldSwellingWidth.getText();
                    theWound.wound_position = jTextFieldSwellingPosition.getText();
                    theWound.describe = "";
                    break;
                }
            }
            theWound.patient_id = theHC.theHO.thePatient.getObjectId();
            theWound.visit_id = theHC.theHO.theVisit.getObjectId();
            theWound.picture = String.valueOf(theImageCanvas.getImageID());
            theWound.position_x = String.valueOf(theImagePoint.x);
            theWound.position_y = String.valueOf(theImagePoint.y);
        }
    }
    /**
     * เคลียร์ข้อมูลใน Gui
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void clearGui()
    {        
        CURRENT_WOUND_SELECT = -1;
        jCheckBoxAbrasion.setSelected(false);
        jCheckBoxContussion.setSelected(false);
        jCheckBoxCutwound.setSelected(false);
        jCheckBoxDislocation.setSelected(false);
        jCheckBoxFracture.setSelected(false);
        jCheckBoxLaceration.setSelected(false);
        jCheckBoxSwelling.setSelected(false);
        jTextFieldAbrasionWidth.setText("");
        jTextFieldAbrasionLong.setText("");
        jTextFieldAbrasionDeep.setText("");
        jTextFieldAbrasionPosition.setText("");
        jTextFieldContussionWidth.setText("");
        jTextFieldContussionLong.setText("");
        jTextFieldContussionDeep.setText("");
        jTextFieldContussionPosition.setText("");
        jTextFieldCutwoundWidth.setText("");
        jTextFieldCutwoundLong.setText("");
        jTextFieldCutwoundDeep.setText("");
        jTextFieldCutwoundPosition.setText("");
        jTextFieldDislocationPosition.setText("");
        jTextFieldFracturePosition.setText("");
        jTextFieldLacerationWidth.setText("");
        jTextFieldLacerationLong.setText("");
        jTextFieldLacerationDeep.setText("");
        jTextFieldLacerationPosition.setText("");
        jTextFieldSwellingWidth.setText("");
        jTextFieldOtherLong.setText("");
        jTextFieldOtherDeep.setText("");
        jTextFieldOtherPosition.setText("");
        jTextFieldSwellingDeep.setText("");
        jTextFieldSwellingLong.setText("");
        jTextFieldSwellingWidth.setText("");
        jTextFieldSwellingPosition.setText("");
    }
    /**
     * สร้าง Dialog
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */ 
    private void initDialog()
    {
        if(theHC != null)
        {
            theJD = new JDialog(theHC.theUS.getJFrame(),true);
            theJD.setTitle("");
            theJD.getContentPane().add(this,java.awt.BorderLayout.CENTER);  
            theJD.setSize(800,600);
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            theJD.setLocation((screenSize.width-theJD.getSize().width)/2
                    , (screenSize.height-theJD.getSize().height)/2);
        }
    }
    /**
     * เก็บจุดที่อยู่ในรูปแต่ละด้านไว้
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */ 
    public void storePoint()
    {
        switch(theImageCanvas.getImageID())
        {
            case WoundPicture.BACK_PICTURE:{                
                if(theImageCanvas.getAllPoint() != null && theImageCanvas.getAllPoint().size() > 0)
                {
                    vPointOfPiture[WoundPicture.BACK_PICTURE] = theImageCanvas.getAllPoint();
                }
                break;
            }
            case WoundPicture.FRONT_PICTURE:{                
                if(theImageCanvas.getAllPoint() != null && theImageCanvas.getAllPoint().size() > 0)
                {
                    vPointOfPiture[WoundPicture.FRONT_PICTURE] = theImageCanvas.getAllPoint();
                }
                break;
            }
        }
    }
    /**
     * เซตสีของรูป
     * @param  ImagPoint = คลาสที่เก็บจุดของรูป Color = สี
     * @return void
     * @author kingland
     * @date 15/06/2549
     */ 
    public void setColorImagPoint(ImagePoint img,Color color)
    {
        if(img!=null)
        {
            img.setColor(color);
            theImageCanvas.repaint();
        }
        
    }
    /**
     * เซตสีของรูป
     * @param  vImg = เวคเตอร์ที่เก็บจุดของรูป Color = สี
     * @return void
     * @author kingland
     * @date 15/06/2549
     */ 
     public void setColorImagPoint(Vector vImg,Color color){
         if(vImg==null)
             vImg = new Vector();
         for(int i =0,size=vImg.size();vImg!= null && i<size;i++){
             ImagePoint img = (ImagePoint)vImg.get(i);
             Wound wound = (Wound)img.getObject();
             if(wound != null &&!"".equals(wound.getObjectId()) )
             {
                img.setColor(color);
             }
         }
         theImageCanvas.repaint();
     }
    /**
     * เซต Enable ทั้ง Panel
     * @param  boolean true = ให้ทำงานได้ false = ไม่สามารถทำงานได้
     * @return void
     * @author kingland
     * @date 15/06/2549
     */
    public void setEnabled(boolean boo)
    {
        jCheckBoxAbrasion.setEnabled(boo);
        jCheckBoxContussion.setEnabled(boo);
        jCheckBoxCutwound.setEnabled(boo);;
        jCheckBoxDislocation.setEnabled(boo);
        jCheckBoxFracture.setEnabled(boo);
        jCheckBoxLaceration.setEnabled(boo);
        jCheckBoxOther.setEnabled(boo);
        jCheckBoxSwelling.setEnabled(boo);
        jTextFieldAbrasionDeep.setEnabled(boo);
        jTextFieldAbrasionLong.setEnabled(boo);
        jTextFieldAbrasionPosition.setEnabled(boo);
        jTextFieldAbrasionWidth.setEnabled(boo);
        jTextFieldContussionDeep.setEnabled(boo);
        jTextFieldContussionLong.setEnabled(boo);
        jTextFieldContussionPosition.setEnabled(boo);
        jTextFieldContussionWidth.setEnabled(boo);
        jTextFieldCutwoundDeep.setEnabled(boo);
        jTextFieldCutwoundLong.setEnabled(boo);
        jTextFieldCutwoundPosition.setEnabled(boo);
        jTextFieldCutwoundWidth.setEnabled(boo);
        jTextFieldDislocationPosition.setEnabled(boo);
        jTextFieldFracturePosition.setEnabled(boo);
        jTextFieldLacerationDeep.setEnabled(boo);
        jTextFieldLacerationLong.setEnabled(boo);
        jTextFieldLacerationPosition.setEnabled(boo);
        jTextFieldLacerationWidth.setEnabled(boo);
        jTextFieldOtherDeep.setEnabled(boo);
        jTextFieldOtherDescribe.setEnabled(boo);
        jTextFieldOtherLong.setEnabled(boo);
        jTextFieldOtherPosition.setEnabled(boo);
        jTextFieldOtherWidth.setEnabled(boo);
        jTextFieldSwellingDeep.setEnabled(boo);
        jTextFieldSwellingLong.setEnabled(boo);
        jTextFieldSwellingPosition.setEnabled(boo);
        jTextFieldSwellingWidth.setEnabled(boo);
        jToggleButtonBack.setEnabled(boo);
        jToggleButtonFont.setEnabled(boo);
        jToggleButtonMark.setEnabled(boo);
        jToggleButtonNormal.setEnabled(boo);
    }
    /**
     *  โหลดรูป
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    private void initPicture()
    {
        Toolkit tk = Toolkit.getDefaultToolkit();        
        theImageCanvas.addImage(tk.createImage(getClass().getResource(WoundPicture.WOUND_PICTURE[WoundPicture.FRONT_PICTURE])), 0); 
        theImageCanvas.addImage(tk.createImage(getClass().getResource(WoundPicture.WOUND_PICTURE[WoundPicture.BACK_PICTURE])), 1);         
        theImageCanvas.setPointWidth(3);
        jPanelPicture.add(theImageCanvas,java.awt.BorderLayout.CENTER);
        theImageCanvas.loadImage(0);        
    }
    /**
     * อ่านรูปจากฐานข้อมูล
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void listWound()
    {
        Vector v = theHC.theVitalControl.listWoundByVisitID(theHO.theVisit);
        Vector vBack = new Vector();
        Vector vFront = new Vector();
        for(int i=0,size=v.size();v!=null&&i<size;i++){
            Wound wound = (Wound)v.get(i);
            if(Integer.parseInt(wound.picture) == WoundPicture.FRONT_PICTURE){
                ImagePoint imp = new ImagePoint(Integer.parseInt(wound.position_x), Integer.parseInt(wound.position_y), Color.GREEN);
                imp.setObject(wound);
                vFront.add(imp);
            }
            else if(Integer.parseInt(wound.picture) == WoundPicture.BACK_PICTURE){
                ImagePoint imp = new ImagePoint(Integer.parseInt(wound.position_x), Integer.parseInt(wound.position_y), Color.GREEN);
                imp.setObject(wound);
                vBack.add(imp);
            }
        }
        vPointOfPiture[WoundPicture.FRONT_PICTURE] = vFront;
        vPointOfPiture[WoundPicture.BACK_PICTURE] = vBack;
    }
    /**
     * แสดง Dialog
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void showDialog(HosControl hc)
    {
        Constant.println("----------------showDialog GUI--------------theHC----");
        theHC = hc;
        theHO = hc.theHO;
        clearGui();//เคลียร์ Gui 
        listWound();        
        theImageCanvas.setPoint(vPointOfPiture[WoundPicture.FRONT_PICTURE]);
        theImageCanvas.loadImage(WoundPicture.FRONT_PICTURE);
        theImageCanvas.setMode(ImageCanvas.NORMAL_MODE);
        jToggleButtonFont.setSelected(true);
        jToggleButtonNormal.setSelected(true);
        setEnabledDescription(false);
        theJD.setVisible(true);        
    }
    public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {
        
    }

    public void mouseDragged(java.awt.event.MouseEvent mouseEvent) {
        
    }

    public void mouseEntered(java.awt.event.MouseEvent mouseEvent) {
    }

    public void mouseExited(java.awt.event.MouseEvent mouseEvent) {
    }

    public void mouseMoved(java.awt.event.MouseEvent mouseEvent) {        
    }

    public void mousePressed(java.awt.event.MouseEvent mouseEvent) {
    }

    public void mouseReleased(java.awt.event.MouseEvent mouseEvent) 
    {        
            if(theImageCanvas.getMode() == ImageCanvas.INSERT_MODE)
            {
                clearGui();
                int cpoint = theImageCanvas.countPoint();
                theImageCanvas.setPoint(theImageCanvas.getCurrentPoint().x,
                        theImageCanvas.getCurrentPoint().y, java.awt.Color.RED);                
                theImagePoint = theImageCanvas.getSelectImagePoint();
                if(cpoint >= 1 && theImagePoint != null){
//                    theWound = (Wound)theImagePoint.getObject();
//                    if(theWound == null)
                    theWound = new Wound();
                    this.updateGOWound();
                    theImagePoint.setObject(theWound);
                }
//                theImagePoint = theImageCanvas.getSelectImagePoint();
//                if(theImagePoint != null){
//                    theWound = (Wound)theImagePoint.getObject();
//                    if(theWound == null)theWound = new Wound();
//                    theImageCanvas.repaint();   
//                    clearGui();
//                }
            }
            else if(theImageCanvas.getMode() == ImageCanvas.SELECT_MODE)
            {
                int cpoint = theImageCanvas.countPoint();
                if(cpoint >= 1 && theImagePoint != null){
//                    Constant.println("#########cpoint#######");
                    theWound = (Wound)theImagePoint.getObject();
                    if(theWound == null )theWound = new Wound();
                    this.updateGOWound();
                    theImagePoint.setObject(theWound);
                }
                theImagePoint = theImageCanvas.getSelectImagePoint();
                Wound wound = (Wound)theImagePoint.getObject();
                theWoundSelect = wound;
                this.clearGui();
                this.updateOGWound(wound);
            }
        ////////////////////////////////////////////////////////////////////////
        Vector v = theImageCanvas.getAllPoint();
        for(int i=0,size=v.size();i<size;i++){
            ImagePoint ip = (ImagePoint)v.get(i);
            //Add by neung 18/07/49
            Wound wound = (Wound)ip.getObject();
            if(wound != null && wound.getObjectId() != null && !wound.getObjectId().equals("")){
                setColorImagPoint(ip, Color.GREEN);
            }
            else{
                setColorImagPoint(ip, Color.RED);
            }
            //End Add
        }
        theImagePoint = theImageCanvas.getSelectImagePoint();
        setColorImagPoint(theImagePoint, Color.BLUE);
        ////////////////////////////////////////////////////////////////////////     
    }
    /**
     *
     * @param
     * @return
     * @author kingland
     * @date 18/07/2549
     */
    public boolean confirmBox(String str, int status) {
        return  false;
    }
    /**
     *
     * @param
     * @return
     * @author kingland
     * @date 18/07/2549
     */
    public JFrame getJFrame() {
        return null;
    }
    /**
     * เซตสถานะโปรแกรม
     * @param str = ข้อความ status = สีของพื้นหลัง
     * @return -
     * @author kingland
     * @date 18/07/2549
     */
    public void setStatus(String str, int status) {
        str = Constant.getTextBundle(str);
        jLabelStatus.setText(" " + str);
        Constant.println("----SetStatusWound---- " + str);
        theUS.setStatus(str, status);
        ThreadStatus theTT = new ThreadStatus(theHC.theUS.getJFrame(),this.jLabelStatus);
        if(status == UpdateStatus.WARNING){
            jLabelStatus.setBackground(Color.YELLOW);
        }
        if(status == UpdateStatus.COMPLETE){
            jLabelStatus.setBackground(Color.GREEN);
        }
        if(status == UpdateStatus.ERROR){
            jLabelStatus.setBackground(Color.RED);
        }
        theTT.start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxAbrasion;
    private javax.swing.JCheckBox jCheckBoxContussion;
    private javax.swing.JCheckBox jCheckBoxCutwound;
    private javax.swing.JCheckBox jCheckBoxDislocation;
    private javax.swing.JCheckBox jCheckBoxFracture;
    private javax.swing.JCheckBox jCheckBoxLaceration;
    private javax.swing.JCheckBox jCheckBoxOther;
    private javax.swing.JCheckBox jCheckBoxSwelling;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelPicture;
    private javax.swing.JTextField jTextFieldAbrasionDeep;
    private javax.swing.JTextField jTextFieldAbrasionLong;
    private javax.swing.JTextField jTextFieldAbrasionPosition;
    private javax.swing.JTextField jTextFieldAbrasionWidth;
    private javax.swing.JTextField jTextFieldContussionDeep;
    private javax.swing.JTextField jTextFieldContussionLong;
    private javax.swing.JTextField jTextFieldContussionPosition;
    private javax.swing.JTextField jTextFieldContussionWidth;
    private javax.swing.JTextField jTextFieldCutwoundDeep;
    private javax.swing.JTextField jTextFieldCutwoundLong;
    private javax.swing.JTextField jTextFieldCutwoundPosition;
    private javax.swing.JTextField jTextFieldCutwoundWidth;
    private javax.swing.JTextField jTextFieldDislocationPosition;
    private javax.swing.JTextField jTextFieldFracturePosition;
    private javax.swing.JTextField jTextFieldLacerationDeep;
    private javax.swing.JTextField jTextFieldLacerationLong;
    private javax.swing.JTextField jTextFieldLacerationPosition;
    private javax.swing.JTextField jTextFieldLacerationWidth;
    private javax.swing.JTextField jTextFieldOtherDeep;
    private javax.swing.JTextField jTextFieldOtherDescribe;
    private javax.swing.JTextField jTextFieldOtherLong;
    private javax.swing.JTextField jTextFieldOtherPosition;
    private javax.swing.JTextField jTextFieldOtherWidth;
    private javax.swing.JTextField jTextFieldSwellingDeep;
    private javax.swing.JTextField jTextFieldSwellingLong;
    private javax.swing.JTextField jTextFieldSwellingPosition;
    private javax.swing.JTextField jTextFieldSwellingWidth;
    private javax.swing.JToggleButton jToggleButtonBack;
    private javax.swing.JToggleButton jToggleButtonFont;
    private javax.swing.JToggleButton jToggleButtonMark;
    private javax.swing.JToggleButton jToggleButtonNormal;
    // End of variables declaration//GEN-END:variables
    
}
