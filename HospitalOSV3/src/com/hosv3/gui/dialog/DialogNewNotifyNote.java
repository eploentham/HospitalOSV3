/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DialogNewNotifyNote.java
 *
 * Created on 7 ต.ค. 2553, 13:52:38
 */
package com.hosv3.gui.dialog;

import com.hospital_os.object.NotifyNote;
import com.hosv3.control.HosControl;
import java.awt.Dimension;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import sd.util.LengthDocument;

/**
 *
 * @author HospitalOS
 */
public class DialogNewNotifyNote extends javax.swing.JDialog implements DocumentListener{

    private HosControl theHC;
    private NotifyNote notifyNote;

    /** Creates new form DialogNewNotifyNote */
    @SuppressWarnings("LeakingThisInConstructor")
    public DialogNewNotifyNote(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        txtDetail.getDocument().addDocumentListener(this);
        txtSubject.getDocument().addDocumentListener(this);
    }

    public void setControl(HosControl theHC) {
        this.theHC = theHC;
        comboType.addKeyValues(this.theHC.theNotifyNoteControl.getNotifyType());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblType = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        lblDetail = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDetail = new javax.swing.JTextPane();
        btnSave = new javax.swing.JButton();
        comboType = new sd.comp.idandcombobox.JKeyValueCombobox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblType.setFont(lblType.getFont().deriveFont(lblType.getFont().getStyle() | java.awt.Font.BOLD, lblType.getFont().getSize()+2));
        lblType.setText("ประเภทการเตือน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblType, gridBagConstraints);

        lblSubject.setFont(lblSubject.getFont().deriveFont(lblSubject.getFont().getStyle() | java.awt.Font.BOLD, lblSubject.getFont().getSize()+2));
        lblSubject.setText("หัวเรื่อง");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblSubject, gridBagConstraints);

        txtSubject.setDocument(new LengthDocument(255));
        txtSubject.setFont(txtSubject.getFont().deriveFont(txtSubject.getFont().getSize()+2f));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtSubject, gridBagConstraints);

        lblDetail.setFont(lblDetail.getFont().deriveFont(lblDetail.getFont().getStyle() | java.awt.Font.BOLD, lblDetail.getFont().getSize()+2));
        lblDetail.setText("ข้อความ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblDetail, gridBagConstraints);

        txtDetail.setFont(txtDetail.getFont().deriveFont(txtDetail.getFont().getSize()+2f));
        jScrollPane1.setViewportView(txtDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        btnSave.setText("บันทึก");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnSave, gridBagConstraints);

        comboType.setFont(comboType.getFont().deriveFont(comboType.getFont().getSize()+2f));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(comboType, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.saveAction();
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private sd.comp.idandcombobox.JKeyValueCombobox comboType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDetail;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblType;
    private javax.swing.JTextPane txtDetail;
    private javax.swing.JTextField txtSubject;
    // End of variables declaration//GEN-END:variables

    public void openDialog(String stringId) {
        initGui(stringId);
        this.setTitle(stringId == null ? "" : stringId.equals("") ? "สร้างบันทึกข้อความ" : "แก้ไขบันทึกข้อความ");
        Dimension dimension = new Dimension(400, 300);
        this.setMinimumSize(dimension);
        this.setMaximumSize(dimension);
        this.setPreferredSize(dimension);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    private void clearGui() {
        comboType.setSelectedIndex(0);
        txtSubject.setText("");
        txtDetail.setText("");
        btnSave.setEnabled(false);
        this.validateFiled();
    }

    private void initGui(String stringId) {
        this.clearGui();
        if (stringId == null || stringId.equals("")) {
            notifyNote = new NotifyNote();
        } else {
            notifyNote = theHC.theNotifyNoteControl.getNotifyNote(stringId);
            comboType.setSelectedItemKey(notifyNote.notify_type_id);
            txtSubject.setText(notifyNote.note_subject);
            txtDetail.setText(notifyNote.note_detail);
        }
    }

    private void saveAction() {
        notifyNote.notify_type_id = (String) comboType.getSelectedItemKey();
        notifyNote.note_subject = txtSubject.getText();
        notifyNote.note_detail = txtDetail.getText();

        theHC.theNotifyNoteControl.saveOrUpdateNotifyNote(notifyNote);
        this.dispose();
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        this.validateFiled();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        this.validateFiled();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        this.validateFiled();
    }

    private void validateFiled() {
        boolean result = true;
        if (!txtSubject.getText().isEmpty()) {
            txtSubject.setBorder(
                    javax.swing.BorderFactory.createLineBorder(
                    new java.awt.Color(0, 0, 255), 1));

        } else {
            txtSubject.setBorder(
                    javax.swing.BorderFactory.createLineBorder(
                    new java.awt.Color(255, 0, 0), 1));
            result = false;
        }
        if (!txtDetail.getText().isEmpty()) {
            txtDetail.setBorder(
                    javax.swing.BorderFactory.createLineBorder(
                    new java.awt.Color(0, 0, 255), 1));

        } else {
            txtDetail.setBorder(
                    javax.swing.BorderFactory.createLineBorder(
                    new java.awt.Color(255, 0, 0), 1));
            result = false;
        }
        btnSave.setEnabled(result);
    }
}
