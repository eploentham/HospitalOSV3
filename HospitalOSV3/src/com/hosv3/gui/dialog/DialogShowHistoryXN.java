/*
 * DialogShowHistoryXN.java
 *
 * Created on 18 เมษายน 2549, 10:28 น.
 */

package com.hosv3.gui.dialog;

import java.util.Vector;
import java.awt.*;

import com.hosv3.control.*;
import com.hosv3.object.*;
import com.hosv3.utility.*;
import com.hosv3.utility.connection.*;
//import com.hosv3.gui.panel.setup.*;
//import com.hosv3.gui.panel.transaction.*;

import com.hospital_os.object.*;
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.*;
/**
 *
 * @author  tong(Padungrat)
 */
public class DialogShowHistoryXN extends javax.swing.JDialog {
    
    String headTable[] = {"เลข XN","ปี พ.ศ."};
    String headTableinactive[] = {"เลข XN","ปี พ.ศ.","สถานะ"};
    PatientXN thePatientXN,thePatientXNTemp;
    Patient thePatient;
    TaBleModel theTableModel;
    HosControl theHosControl;
    UpdateStatus theUpdateStatus;
    javax.swing.table.DefaultTableCellRenderer renderer;
    boolean bactive = true;
    /** Creates new form DialogShowHistoryXN */
    public DialogShowHistoryXN(HosControl hc,UpdateStatus us) {
        super(us.getJFrame(), true);
        theUpdateStatus = us;
        theHosControl = hc;
        
        renderer = new javax.swing.table.DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        
        initComponents();
        setLanguage();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanelTop = new javax.swing.JPanel();
        jPanelShowActive = new javax.swing.JPanel();
        jCheckBoxShowActive = new javax.swing.JCheckBox();
        jScrollPaneShowXN = new javax.swing.JScrollPane();
        jTableShowHistoryXN = new javax.swing.JTable();
        jPanelControl = new javax.swing.JPanel();
        jButtonClose = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanelTop.setLayout(new java.awt.GridBagLayout());

        jPanelShowActive.setLayout(new java.awt.GridBagLayout());

        jCheckBoxShowActive.setText("\u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01");
        jCheckBoxShowActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShowActiveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanelShowActive.add(jCheckBoxShowActive, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanelTop.add(jPanelShowActive, gridBagConstraints);

        jTableShowHistoryXN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPaneShowXN.setViewportView(jTableShowHistoryXN);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelTop.add(jScrollPaneShowXN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jPanelTop, gridBagConstraints);

        jPanelControl.setLayout(new java.awt.GridBagLayout());

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanelControl.add(jButtonClose, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 2);
        jPanel1.add(jPanelControl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jCheckBoxShowActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowActiveActionPerformed
        showDataActive(jCheckBoxShowActive.isSelected());
    }//GEN-LAST:event_jCheckBoxShowActiveActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        closeDialogShowHistoryXN();
    }//GEN-LAST:event_jButtonCloseActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new DialogShowHistoryXN(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JCheckBox jCheckBoxShowActive;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelShowActive;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JScrollPane jScrollPaneShowXN;
    private javax.swing.JTable jTableShowHistoryXN;
    // End of variables declaration//GEN-END:variables
    
    /**
     * ใช้ในการแสดงข้อมูลหลังจากที่เลือก CheckBox โดยถ้ามีการติ๊กถูกคือให้แสดงรายการที่ถูกยกเลิก
     * ถ้าไม่ได้ติ๊กถูกแสดงว่าไม่ต้องแสดงรายการที่ถูกยกเลิก
     * @param selected เป็น boolean 
     * @author padungrat(tong)
     * @date 21/04/2549,11:40
     */
    public void showDataActive(boolean selected)
    {   bactive = !selected;
        setTableShowHistoryXN(getHistoryXN());
    }
    
    /**
     * ใช้ในการรับข้อมูลของประวัติของเลข XN
     * @return เป็น Vector ของ Object PatientXN
     * @author padungrat(tong)
     * @date 18/04/2549,11:40
     */
    private Vector getHistoryXN()
    {   
            return this.theHosControl.theResultControl.listPatientXnByPatientID(this.thePatient.getObjectId(),bactive);
        
    }
    
    /**ใช้ในการ run Dialog 
     * @param visit เป็น Object ของ visit
     * @return เป็น boolean
     * @author padungrat(tong)
     * @date 18/04/2549,11:01
     */
    public boolean showDialog(HosObject hosObject)
    {
        this.thePatient = hosObject.thePatient;
        setSize(250,350);
        bactive = true;
        setTitle(GuiLang.setLanguage("ประวัติ XN"));
        Toolkit thekit = getToolkit();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();//thekit.getScreenSize();
      //  dlg.setBounds((screenSize.width + dlg.getSize().width + 200 )/4,(screenSize.height + dlg.getSize().height + 50)/4, dlg.getSize().width,dlg.getSize().height);
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);
        setTableShowHistoryXN(getHistoryXN());
        this.jCheckBoxShowActive.setSelected(false);
        setVisible(true);
        return true;
    }
    
    /**ใช้ในการปิด Dialog นี้
      * @author padungrat(tong)
     * @date 18/04/2549,11:40
     */
    public void closeDialogShowHistoryXN()
    {
        this.dispose();
    }
    /**
     * ใช้ในการแสดงข้อมูลลงบนตาราง ตามค่าข้อมูลที่รับเข้ามา
     * @param vc เป็น Vector ของ Object PatientXN
     * @author padungrat(tong)
     * @date 18/04/2549,11:40
     */
    public void setTableShowHistoryXN(Vector vc)
    {
        this.theTableModel =  new TaBleModel(headTable,0);
        if(vc !=null)
        {   
            
            if(bactive)
            {   this.theTableModel =  new TaBleModel(headTable,vc.size());
                for(int i=0;i< vc.size();i++)
                {
                    thePatientXNTemp = (PatientXN)vc.get(i);
                    this.theTableModel.setValueAt(thePatientXNTemp.patient_xray_number,i,0);
                    this.theTableModel.setValueAt(thePatientXNTemp.patient_xn_year,i,1);
                    thePatientXNTemp = null;
                }
                 
            }
            else
            {   this.theTableModel =  new TaBleModel(headTableinactive,vc.size());
                for(int i=0;i< vc.size();i++)
                {
                    thePatientXNTemp = (PatientXN)vc.get(i);
                    this.theTableModel.setValueAt(thePatientXNTemp.patient_xray_number,i,0);
                    this.theTableModel.setValueAt(thePatientXNTemp.patient_xn_year,i,1);
                    this.theTableModel.setValueAt(getStringName(thePatientXNTemp.patient_xn_active),i,2);
                    thePatientXNTemp = null;
                }
            }
            thePatientXNTemp = null;
        }
        this.jTableShowHistoryXN.setModel(theTableModel); 
        this.jTableShowHistoryXN.getColumnModel().getColumn(0).setPreferredWidth(120);     
        this.jTableShowHistoryXN.getColumnModel().getColumn(0).setCellRenderer(renderer);
        this.jTableShowHistoryXN.getColumnModel().getColumn(1).setPreferredWidth(100);
        this.jTableShowHistoryXN.getColumnModel().getColumn(1).setCellRenderer(renderer);
        
       if(!bactive && vc != null)
       {
            this.jTableShowHistoryXN.getColumnModel().getColumn(2).setPreferredWidth(100);
            this.jTableShowHistoryXN.getColumnModel().getColumn(2).setCellRenderer(renderer);
       }
            
    }
    
    /**ใช้ในการให้ค่าจากเลข 1 เป็น ใช้งาน และ 0 เป็น ยกเลิก
     * @value เป็น String ที่เป็นเลข 0 กับ 1
     * @return เป็น String ผลของเลข 1 ให้ค่าเป็น ใช้งาน 0 ให้ค่าเป็น ยกเลิก
     * @author padungrat(tong)
     * @date 18/04/2549,11:40
     */
    public String getStringName(String value)
    {
        if(Gutil.isSelected(value))
        { 
            value ="ใช้งาน";
        }
        else
        {
            value ="ยกเลิก";
        }
        return GuiLang.setLanguage(value);
    }
    
    /**
     * ใช้ในการกำหนดภาษา
     */
    public void setLanguage()
    {
        
        GuiLang.setLanguage(headTable);
        GuiLang.setLanguage(headTableinactive);
        GuiLang.setLanguage(jCheckBoxShowActive);
        jButtonClose.setText(GuiLang.setLanguage(jButtonClose.getText()));
    }
    
    
    
}
