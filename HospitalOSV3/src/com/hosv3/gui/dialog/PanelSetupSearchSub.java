
/*
 * PanelSetupSearchSub.java
 *
 * Created on 12 ตุลาคม 2546, 18:24 น.
 */
package com.hosv3.gui.dialog;
import java.awt.*;
import java.util.Vector;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.*;
import com.hosv3.control.*;
import com.hosv3.utility.*;
import com.hosv3.object.*;
import com.hosv3.subject.*;
import com.hosv3.utility.connection.*;
import com.hospital_os.object.*; 
import com.hospital_os.utility.TaBleModel;
import com.hosv3.utility.Constant;
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.ComboboxModel;
import com.pcu.object.*;
/**
 * @not deprecated henbe unused bad pattern
 * @panel author : amp
 * @panel update : tong
 */
public class PanelSetupSearchSub extends javax.swing.JDialog{

    static final long serialVersionUID=0;
    HosObject theHO;
    HosControl theHC;
    HosSubject theHS;
    UpdateStatus theUS;
    Vector vDxTemplate;
    Vector itemSearch = new Vector();
    Object theObject;
    JTable jti =new JTable();
    Vector drugV = new Vector();
    Vector labV = new Vector();
    Vector doseMapV = new Vector();
    
    
    int offset = 20;
    int now = 0;
    int next = 0;
    int prev = 0;
    int saved = 0; // 0 คือ ไม่สามารถ insertได้ 1 คือ insert ได้   
    private int show = 0;
   public String pkDrug = "";
    private Component component;
    private Component componentN;
    private Component componentT;
    private Component componentC;
    private Component componentTC; 
    long firstClickTime = 0;
    public Vector vGetItem = new Vector();
    public static boolean closePanel = false;
    private DialogLabReferIn theDialogLabReferIn;
    
    String[] column_jTableListPhyEx = {
        Constant.getTextBundle("Column_Vital_BodyPart"),
        Constant.getTextBundle("Column_Vital_ExResult")
    };  //deus
    String[] col_jTableVitalSign = {"วันและเวลาที่บันทึก"};
    public static String[] col_jTableAllergy = {"ชื่อยา","อาการที่แพ้"};
    private String[] col_Participate ={"ชื่อ","สกุล"};
    private String[] column = {"รหัส","ชื่อ"};
    private String[] columnLabReferIn = {"ชื่อรายการแลบ"};
    private String[] col = {"ชื่อ"};
    private String[] col_Item = {"รหัส","ชื่อ","กลุ่ม"};
    private String[] col_AddItem={"ชื่อรายการ"};
    private String[] col_drugStandard = {"รหัส","ชื่อ"};//amp:28/03/2549
    //add code by noom 18/12/2548
    private String[] col_AddDrugDose={"จำนวนตัวเลข","ข้อความ"};
    private String b_item_drug_uom_id;
   
    public PanelSetupSearchSub(HosControl hc,UpdateStatus us,int sh){   
        super(us.getJFrame(),true);
        initComponents();
        this.jTable1.setGuiMode(true);
        setLanguage("");
        setControl(hc,us);
        setShow();
       // setEnableAll(false);
        if(sh == 7 ||  sh == 8){
            jComboBoxServicePoint.setVisible(true); //ตัวอื่นไม่สามารถมองเห็น ยกเว้น อาการที่พบบ่อย
        }
        else{
            jComboBoxServicePoint.setVisible(false); 
        }
        ComboboxModel.initComboBox(jComboBoxServicePoint, theHC.theLookupControl.listServicePoint());
        ComboboxModel.setCodeComboBox(jComboBoxServicePoint, theHO.theServicePoint.getObjectId());
        /*jButtonDel.setVisible(false);*/
        show = sh;
    }
    ServicePoint theServicePoint;
    public void setServicePoint(ServicePoint sp){
        theServicePoint = sp;
    }
    public void setControl(HosControl hc, UpdateStatus us) {   
        theHC = hc;
        theHO = hc.theHO;
        theHS = hc.theHS;
        theUS = us;
    }
   public void setLanguage(String msg)
    {
        GuiLang.setLanguage(jButtonSearch);
        GuiLang.setLanguage(jButtonClose);
        GuiLang.setLanguage(this.jLabelICD9code);
        GuiLang.setLanguage(col_jTableVitalSign);
        GuiLang.setLanguage(col_jTableAllergy);//
        GuiLang.setLanguage(col_Participate);
        GuiLang.setLanguage(columnLabReferIn);
        GuiLang.setLanguage(col);
        GuiLang.setLanguage(col_Item);
        GuiLang.setLanguage(col_AddItem);
        GuiLang.setLanguage(col_AddDrugDose);
    }    
    public void setComponent(Component compo){
        component = compo;
    }
    public void setTextConponent(Component txtC,Component compoC,Component compoT,Component txtN)
    {
        componentTC = txtC;
        componentC = compoC;
	componentT = compoT;
        componentN = txtN;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelICD9code = new javax.swing.JLabel();
        jTextFieldSCode = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jButtonPrev = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.hosv3.gui.component.HJTableSort();
        jComboBoxServicePoint = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setMinimumSize(new java.awt.Dimension(350, 450));
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 450));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(200, 96));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 154));
        jLabelICD9code.setText(java.util.ResourceBundle.getBundle("com/hospital_os/property/thai").getString("SEARCH"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 12);
        jPanel3.add(jLabelICD9code, gridBagConstraints);

        jTextFieldSCode.setMaximumSize(new java.awt.Dimension(150, 24));
        jTextFieldSCode.setMinimumSize(new java.awt.Dimension(150, 24));
        jTextFieldSCode.setPreferredSize(new java.awt.Dimension(150, 24));
        jTextFieldSCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSCodeActionPerformed(evt);
            }
        });
        jTextFieldSCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSCodeKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel3.add(jTextFieldSCode, gridBagConstraints);

        jButtonSearch.setText(java.util.ResourceBundle.getBundle("com/hospital_os/property/thai").getString("SEARCH"));
        jButtonSearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSearch.setMaximumSize(new java.awt.Dimension(160, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(60, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(70, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel3.add(jButtonSearch, gridBagConstraints);

        jButtonPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Back16.gif")));
        jButtonPrev.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonPrev.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrevActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 2);
        jPanel3.add(jButtonPrev, gridBagConstraints);

        jButtonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Forward16.gif")));
        jButtonNext.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonNext.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonNext.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel3.add(jButtonNext, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 22));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 80));
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jComboBoxServicePoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxServicePointActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel3.add(jComboBoxServicePoint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel3, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setText("");
		jButtonAdd.setIcon(new ImageIcon(getClass().getResource("/com/hospital_os/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setText("");
		jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/minus16.gif")));
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDel.setEnabled(false);
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jButtonDel, gridBagConstraints);

        jButtonClose.setText("\u0e1b\u0e34\u0e14");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jPanel1.add(jButtonClose, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel2.add(jPanel1, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        closePanel = true;
        dispose(); 
       // System.exit(0);
    }//GEN-LAST:event_exitForm
    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        // TODO add your handling code here:
        closePanel = true;
        dispose();      
        
    }//GEN-LAST:event_jButtonCloseActionPerformed
    private void jComboBoxServicePointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxServicePointActionPerformed
        searchSub();
    }//GEN-LAST:event_jComboBoxServicePointActionPerformed
    private void jTextFieldSCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSCodeKeyReleased
        int enter_key = evt.getKeyCode();
        if(enter_key == java.awt.event.KeyEvent.VK_ENTER){
            jButtonSearchActionPerformed(null);
        }
        if(enter_key == java.awt.event.KeyEvent.VK_DOWN){
            this.jTable1.requestFocus();
        }
//        if(jTextFieldSCode.getText().length()>1){
//            searchSub();
//        }
        if(enter_key == java.awt.event.KeyEvent.VK_ESCAPE){
            dispose();
        }
    }//GEN-LAST:event_jTextFieldSCodeKeyReleased
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
       
    }//GEN-LAST:event_jButtonDelActionPerformed
    private void jTextFieldSCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSCodeActionPerformed
       
    }//GEN-LAST:event_jTextFieldSCodeActionPerformed
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        addSub();
    }//GEN-LAST:event_jButtonAddActionPerformed
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        searchSub(1);
    }//GEN-LAST:event_jButtonNextActionPerformed
    private void jButtonPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrevActionPerformed
        searchSub(0);
    }//GEN-LAST:event_jButtonPrevActionPerformed
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchSub();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        try{
            long clickTime = System.currentTimeMillis();
            long clickInterval = clickTime - firstClickTime;
            if(clickInterval < 400)
            {
              firstClickTime = 0;
              addSub();
            }
            else
            {
              firstClickTime = clickTime;
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace(Constant.getPrintStream());
        }
    }//GEN-LAST:event_jTable1MouseReleased
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_SPACE) {
            addSub();
        }    
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            addSub();
        }    
        if(evt.getKeyCode()==KeyEvent.VK_ESCAPE) {
            this.dispose();
        }    
        
    }//GEN-LAST:event_jTable1KeyReleased
    
    private void searchSub(int i)
    {
        if(show == 1)    setTableEmployee(itemSearch,i);
        if(show == 2)   setTableItemLab(itemSearch,i);
        if(show == 3) 
        {
            setTableItemDrug(itemSearch,i);
//            //amp:28/03/2549
//            if("0".equals(theHC.theLookupControl.readOption().drug_standard_allergy))
//            {
//                setTableItemDrug(itemSearch,i);
//            }
//            else
//            {
//                setTableDrugStandard(itemSearch,i);
//            }
        }
        if(show == 4)   setTableDx(itemSearch,i);
        if(show == 5)
            if(itemSearch!=null)
                setTableEmployeeOr(itemSearch,i);    
        if(show == 6 || show == 12 || show == 13)   setTableItemDrug(itemSearch,i);
        if(show == 7 || show == 8)
            setTableVital(itemSearch,i);
        if(show == 9)   setTableLabReferOut(itemSearch,i);
        if(show == 10)  setTableGuideAfterDx(itemSearch,i);
        if(show == 11)  setTableEPI(itemSearch,i);
        if(show == 14)  setTableItemLabReferIn(itemSearch,i);
        
        //add code by noom 18/12/2548 
        if(show == 15)  setTableDoseMapUom(itemSearch,i);
    }
    private boolean updateOGLabV(JTable jTable4,Vector vLabSet)
    {
        String[] col = {Constant.getTextBundle("Item"),Constant.getTextBundle("ลำดับ"),Constant.getTextBundle("กลุ่ม")};
        
        TaBleModel tm = new TaBleModel(col,vLabSet.size());
        for(int i=0 ;i<vLabSet.size(); i++)
        {
            LabSet ls = (LabSet)vLabSet.get(i);
            tm.setValueAt(ls.item_common_name,i,0);
            tm.setValueAt(new Integer(ls.item_name),i,1);
            tm.setValueAt(ls.has_sub,i,2);
        }
        tm.setEditingCol(1);
        jTable4.setModel(tm);
        
        jTable4.getColumnModel().getColumn(0).setPreferredWidth(300);
        jTable4.getColumnModel().getColumn(1).setCellRenderer(TableRenderer.getRendererRight());
        jTable4.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTable4.getColumnModel().getColumn(2).setCellRenderer(TableRenderer.getRendererRight());
        jTable4.getColumnModel().getColumn(2).setPreferredWidth(100);
        return true;
    }
    /////////////////////////////////////////////////////////////
    private void updateOGLabV1(JTable jt,Vector labi)
    {
        if(labi == null || labi.size()==0)
        {
            TaBleModel tm= new TaBleModel(column,0);
            jt.setModel(tm); 
            return;
        }
        TaBleModel tm = new TaBleModel(column,labi.size());
        for(int i=0 ;i<labi.size(); i++)
        {
                LabSet ls = (LabSet)labi.get(i);
                tm.setValueAt(ls.item_id,i,0);
                if(!ls.item_name.equals(""))
                    tm.setValueAt(ls.item_name,i,1);
                //for older version not have this field
                else 
                {
                    Constant.println("__________2row:" + ls.item_id );
                    Item it = theHC.theSetupControl.listItemByPk(ls.item_id);
                    if(it!= null)
                        tm.setValueAt(it.common_name,i,1);
                    else
                        tm.setValueAt("ไม่พบข้อมูล",i,1);
                }
        }
         jt.setModel(tm);
         jt.getColumnModel().getColumn(0).setPreferredWidth(150);
         jt.getColumnModel().getColumn(1).setPreferredWidth(300);
    }
    /////////////////////////////////////////////////////////////
    private void updateOGLabReferInV(JTable jt,Vector labi)
    {
        if(labi == null || labi.size()==0){
            TaBleModel tm= new TaBleModel(columnLabReferIn,0);
            jt.setModel(tm); 
            return;
        }
        TaBleModel tm = new TaBleModel(columnLabReferIn,labi.size());
        for(int i=0 ;i<labi.size(); i++){
            OrderItemLabreferin ls = (OrderItemLabreferin)labi.get(i);
            tm.setValueAt(ls.common_name,i,0);
        }
         jt.setModel(tm);
    }
    /////////////////////////////////////////////////////////////
    private void updateOGItemV(JTable jt,Vector drugs)
    {
        if(drugs == null || drugs.size()==0)
        {
            TaBleModel tm= new TaBleModel(col_AddItem,0);
            jt.setModel(tm); 
            return;
        }
        TaBleModel tm = new TaBleModel(col_AddItem,drugs.size());
        for(int i=0 ;i<drugs.size(); i++)
        {  
            DrugSet ds = (DrugSet)drugs.get(i);
            String item_code = ds.item_code;
            Item it = theHC.theSetupControl.listItemByPk(item_code);
            tm.setValueAt(it.common_name,i,0);
        }
        jt.setModel(tm);
        jt.getColumnModel().getColumn(0).setPreferredWidth(100);
    }
    
    private void updateOGEpiV(JTable jt,Vector drugs)
    {
        if(drugs == null || drugs.size()==0)
        {
            TaBleModel tm= new TaBleModel(col_AddItem,0);
            jt.setModel(tm); 
            return;
        }
        TaBleModel tm = new TaBleModel(col_AddItem,drugs.size());
        for(int i=0 ;i<drugs.size(); i++){  
            EpiSet ds = (EpiSet)drugs.get(i);
            String item_code = ds.item_code;
            Item it = theHC.theSetupControl.listItemByPk(item_code);
            tm.setValueAt(it.common_name,i,0);
        }
         jt.setModel(tm);
         jt.getColumnModel().getColumn(0).setPreferredWidth(100);
    }
    
 
    
    private void updateOGParticipateOrV(JTable jt,Vector participateor){
        if(participateor == null || participateor.size()==0){
            TaBleModel tm= new TaBleModel(col_Participate,0);
            jt.setModel(tm); 
            return;
        }     
        TaBleModel tm = new TaBleModel(col_Participate,participateor.size());
        for(int i=0;i<participateor.size();i++){
            ParticipateOr po = (ParticipateOr)participateor.get(i);
            Employee parOr = theHC.theLookupControl.readEmployeeById(po.employee);
            if(parOr!=null){
                tm.setValueAt(parOr.fname, i, 0);
                tm.setValueAt(parOr.lname,i, 1);
            }else{
                tm.setValueAt("", i, 0);
                tm.setValueAt("", i, 1);
            }
        }   
        jt.setModel(tm);
        jt.getColumnModel().getColumn(0).setPreferredWidth(100);
        jt.getColumnModel().getColumn(1).setPreferredWidth(200);
    }
    
    private void updateOGDrugAllergyV(Vector allergy)
    {
        TaBleModel tm;
        if(vDrugAllergy == null  || vDrugAllergy.size()==0)
        {
            tm= new TaBleModel(col_jTableAllergy,0);
            jTableAllergy.setModel(tm); 
            return;
        }
        tm= new TaBleModel(col_jTableAllergy,vDrugAllergy.size());
        for(int i=0 ;i<vDrugAllergy.size(); i++)
        {  
            DrugAllergy da = (DrugAllergy)vDrugAllergy.get(i);
            if("".equals(da.drug_standard_id))//amp:29/03/2549
            {
                tm.setValueAt(da.common_name,i,0);
            }
            else
            {
                tm.setValueAt(da.drug_standard_description,i,0);
            }
            tm.setValueAt(da.symptom,i,1);
        }
        jTableAllergy.setModel(tm); 
        int row = jTableAllergy.getSelectedRow();
        if(row==-1 || row>=vDrugAllergy.size()) 
        {
            row = 0;
        }
        tm.setEditingCol(1,1);
        jTableAllergy.setEditingColumn(1);  
        jTableAllergy.setRowSelectionInterval(row,row);
    }

    private void addSub()
    {   
        String of = new String();
        if(show == 1)
        {   
            int row = jTable1.getSelectedRow();
            of = (String)jTable1.getValueAt(row, 0);
           
            Employee bgi = new Employee();
            for(int i =0 ; i< itemSearch.size() ; i++){           
                if(of == ((Employee)itemSearch.get(i)).employee_id)
                    bgi = (Employee)itemSearch.get(i);
            }
            theHC.theSetupControl.addEmployeeInServicePoint(theServicePoint,bgi);
            bgi = null;
            dispose();
        }
        /***********************************************/
        if(show == 2){
           int[] row = jTable1.getSelectedRows();
           //labV.removeAllElements();
           if(labV!=null)
           for(int i=0;i<row.length;i++){ 
                Item item =(Item)itemSearch.get(row[i]+prev);
                LabSet ls = new LabSet();
                ls.item_id = item.getObjectId();
                ls.item_common_name = item.common_name;
                ls.item_name = "0";
                labV.add(ls);
           }
           updateOGLabV(jti,labV);
        }
        /************************************************/
        /*เพิ่มรายการยาที่แพ้ pu*/
        if(show == 3)
        {         
            int a[] = jTable1.getSelectedRows();
//            if("0".equals(theHC.theLookupControl.readOption().drug_standard_allergy))//amp:28/03/2549 ไม่ใช้แพ้ยามาตรฐาน
//            {
                for(int i =0 ; i < a.length ;i++)
                {   
                     /*เปลี่ยนค่า index ที่อยู่ใน array มาเป็น object pu*/
                     of = (String)jTable1.getValueAt((a[i]), 0); 
                     Item item = null;                 
                     for(int j=0 ; j< itemSearch.size(); j++)
                     { 
                        item = (Item)itemSearch.get(j);
                        if(item.item_id.equals(of))
                            break;
                     }
                    DrugAllergy da = new DrugAllergy();
                    da.item_code = item.getObjectId();
                    da.common_name = item.common_name;
                    da.patient_id = theHO.thePatient.getObjectId();
                    vDrugAllergy.add(da);
                }
            updateOGDrugAllergyV(vDrugAllergy);            
         }
        /************************************************/
        if(show == 4){
            /*เพิ่มการวินิจฉัยโรค ยังไม่เพิ่มในฐานข้อมูล pu*/
            DxTemplate dx ;
            int row = jTable1.getSelectedRow();
            JTextComponent jTextFieldDx = (JTextComponent)component;
            dx = (DxTemplate)itemSearch.get(row+prev);
            vDxTemplate.add(dx);
            if(!jTextFieldDx.getText().equals("")) 
                    jTextFieldDx.setText(jTextFieldDx.getText() + "," + dx.description);
            else    jTextFieldDx.setText(dx.description);             

            theHC.theVitalControl.addDxTemplate(dx);  
        }
        /************************************************/
        if(show == 5){    
           int[] row = jTable1.getSelectedRows();
           for(int i=0;i<row.length;i++){
               Employee em =(Employee)itemSearch.get(row[i] + prev);     
               ParticipateOr po = new ParticipateOr();
               po.employee = em.getObjectId();
               if(checkParticipateSame(po,theParticipateOrV))
                {
                    theUS.setStatus(Constant.getTextBundle("เลือกพยาบาลเข้าร่วมผ่าตัดซ้ำ"),UpdateStatus.WARNING);
                    return;
                }
                theParticipateOrV.add(po);
           }
           updateOGParticipateOrV(jtPar,theParticipateOrV);
        }
        /************************************************/
        if(show == 6)
        {  
           /*int[] row = jTable1.getSelectedRows();
           for(int i=0;i<row.length;i++)
           { 
                Item item =(Item)itemSearch.get(row[i]+prev);
                DrugSet ds = new DrugSet();
                ds.item_code =item.getObjectId();
                drugV.add(ds);
           }*/
           int[] row = jTable1.getSelectedRows();
           DrugSet ds=null;
           Item item=null;
           boolean found_item = false;
           for(int i=0;i<row.length;i++)
           { 
                found_item = false;
                item =(Item)itemSearch.get(row[i]+prev);
                for(int j=0;j<drugV.size();j++)
                 {
                     ds = (DrugSet)drugV.get(j);
                     if(item.getObjectId().equals(ds.item_code))
                     {
                        found_item = true;
                     }
                 }
                 if(!found_item)//ถ้าไม่พบที่ซ้ำกัน
                 {
                    ds = new DrugSet();
                    ds.item_code =item.getObjectId();
                    drugV.add(ds);
                 }
           }
           ds=null;
           item=null;
           updateOGItemV(jti,drugV);
        }
        /************************************************/
        if(show == 7 || show == 8){
            /*อาการสำคัญ*/
            int row = jTable1.getSelectedRow();
            int select = row+prev;
            if(select == -1){
                theUS.setStatus(Constant.getTextBundle("กรุณาเลือกรายการ"), UpdateStatus.WARNING);
                return;
            }
            JTextComponent jtextarea = (JTextComponent)component;
            //theHO.theVitalTemplate = (VitalTemplate)itemSearch.get(row+prev);
            VitalTemplate theVitalTemplate = (VitalTemplate)itemSearch.get(select);
            String text = jtextarea.getText();
            if(!text.equals("")){
                jtextarea.setText(text+","+theVitalTemplate.description);
            }
            else{
                jtextarea.setText(theVitalTemplate.description);
            }
             //theHC.theSetupControl.addPrimarySymptom(show);
            
        }
        /************************************************/
        if(show == 9){    
            if(itemSearch == null || itemSearch.size() == 0){
                theUS.setStatus(Constant.getTextBundle("กรุณาเลือกรายการแลปหรือค้นหารายการแลปก่อนทำการเพิ่ม"), UpdateStatus.WARNING);
                return;
            }
            //int row = jTable1.getSelectedRow();
            //OrderItem ori = (OrderItem)itemSearch.get(row+prev);
            Vector vLabRefer = new Vector();
            int a[] = jTable1.getSelectedRows();
            for(int i = 0 ; i < a.length ;i++){
                // of = (String)jTable1.getValueAt((a[i]), 0); 
                 vLabRefer.add(itemSearch.get(a[i]));
            }
            /*ตรวจสอบว่ามี vLabReferOut ใน theHO มีค่าแล้วหรือไม่*/
            if(vLabRefer != null && vLabRefer.size() > 0){
                theHC.theLabReferControl.addLabReferOut(vLabRefer);
            }
        }  
        /************************************************/
        if(show == 10){  
           int row = jTable1.getSelectedRow();
           GuideAfterDx gad = new GuideAfterDx(); 
           gad.description = (String)jTable1.getValueAt(row, 0);             
        }
        /************************************************/
        if(show == 11){
            //Epi
            //int row = jTable1.getSelectedRow();
           //EpiSetGroup ori = new EpiSetGroup();
           //ori =(EpiSetGroup)itemSearch.get(row+prev);
        }       
        /************************************************/
        if(show == 12)
        {    
           int[] row = jTable1.getSelectedRows();
           for(int i=0;i<row.length;i++){ 
            Item item =(Item)itemSearch.get(row[i]+prev);
            EpiSet ds = new EpiSet();
            ds.item_code =item.getObjectId();
            drugV.add(ds);
           }
           updateOGEpiV(jti,drugV);
        }
        /************************************************/
         if(show == 13)
        {
            int row = jTable1.getSelectedRow();
            int select = row+prev;
            if(select == -1)
            {
                theUS.setStatus(Constant.getTextBundle("กรุณาเลือกรายการ"), UpdateStatus.WARNING);
                return;
            }
            JTextField jtextcode = (JTextField)componentTC;
            JTextArea jtextareaC = (JTextArea)componentC;
            JTextArea jtextareaT = (JTextArea)componentT;
            JTextField jtextN = (JTextField)componentN;
            Item item = (Item)itemSearch.get(select);
            //String text = jtextcode.getText();
            //String texta = jtextareaC.getText(); 
            //String textb = jtextareaT.getText();
            //String textc = jtextN.getText();
            jtextcode.setText(item.item_id);
            jtextareaC.setText(item.common_name);       
            jtextareaT.setText(item.trade_name);
            jtextN.setText(item.nick_name);
        }
         /************************************************/
        if(show == 14){
            int[] row = jTable1.getSelectedRows();
            for(int i=0;i<row.length;i++){ 
            Item item =(Item)itemSearch.get(row[i]+prev);
            if(theDialogLabReferIn != null){
                theDialogLabReferIn.updateOGOrderItem(item);
            }
            else{
                OrderItemLabreferin ls = new OrderItemLabreferin();
                ls.item_id = item.getObjectId();
                ls.common_name = item.common_name;
                labV.add(ls);
            }
           }
           updateOGLabReferInV(jti,labV);
        }
        /************************************************/
        //add code by noom 17/12/2548
        if(show == 15)
        {    
           int[] row = jTable1.getSelectedRows();
           for(int i=0;i<row.length;i++){ 
            DrugDosePrint item =(DrugDosePrint)itemSearch.get(row[i]+prev);
            DrugDoseMapUom ds = new DrugDoseMapUom();
            ds.b_item_drug_uom_id = b_item_drug_uom_id;
            ds.b_item_drug_dose_id =item.getObjectId();
            //check same value
            if(theHC.theSetupControl.readDrugDoseMapUomFromDrugUomAndDoseId(ds.b_item_drug_uom_id,ds.b_item_drug_dose_id) == null){
               theHC.theSetupControl.saveDrugDoseMapUom(ds);
               //doseMapV.add(ds);
            }else{
              theUS.setStatus(Constant.getTextBundle("ไม่สามารถเพิ่มจำนวนยาที่ใช้สำหรับพิมพ์ซ้ำได้"),UpdateStatus.WARNING);
            }
            doseMapV  = theHC.theSetupControl.listDrugDoseMapUomByDrugUomId(ds.b_item_drug_uom_id);
           }
          updateOGDoseMapV(jti,doseMapV);
        }
    }
    
    private void searchSub()
    {   
        next = 0;
        prev = 0;
        String search = jTextFieldSCode.getText();
        String active = "1"; 
        if(show ==1){    itemSearch =  theHC.theSetupControl.listEmployeeAll(search, active,"3");
             setTableEmployee(itemSearch,1);
        }
        if(show == 2){
            //itemSearch = theHC.theSetupControl.listSearchItem(search ,2,"2");
            itemSearch = theHC.theSetupControl.listSearchItemLabNotSecret(search);//amp:27/02/2549 เพื่อไม่ให้ add แลปปกปิดเข้าแลปกรุ๊ปได้
            setTableItemLab(itemSearch,1);
        }
        if(show == 3)
        {   
            //amp:28/03/2549
//            if("0".equals(theHC.theLookupControl.readOption().drug_standard_allergy))
            {//ไม่ใช้แพ้ยามาตรฐาน
                itemSearch = theHC.theSetupControl.listSearchItemDrug(search);
                setTableItemDrug(itemSearch,1);
            }
//            else
//            {//ใช้แพ้ยามาตรฐาน
//                itemSearch = theHC.theSetupControl.listDrugStandardByCodeName(search,"1");
//                setTableDrugStandard(itemSearch,1);
//            }
        }
        if(show == 4){   
            itemSearch = theHC.theLookupControl.listDxTemplateByName(search);
            setTableDx(itemSearch,1);
        }
        if(show == 5){   
            itemSearch = theHC.theSetupControl.listEmployeeOr(search);
            if(itemSearch!=null)
            { 
                setTableEmployeeOr(itemSearch,1);    
            }
        }
        if(show == 6 || show == 12){
            itemSearch = theHC.theSetupControl.listItemByGroup("",search,"1");
            setTableItemDrug(itemSearch,1);
        } 
        if(show == 7 || show == 8){   
            String point = new String();//ใช้กับอาการที่พบบ่อย
            point = Gutil.getGuiData(jComboBoxServicePoint); 
            itemSearch = theHC.theSetupControl.listVitalTemplate(search,point);
            setTableVital(itemSearch,1);
        }
        if(show == 9){    
            itemSearch = theHC.theOrderControl.listLabReferOutByVId(theHO.theVisit.getObjectId(),search);
            setTableLabReferOut(itemSearch,1);
        }
        if(show == 10){
            itemSearch = theHC.theLookupControl.listGuide(search);
            setTableGuideAfterDx(itemSearch,1);
        }
        if(show == 11){
            //EPI
            itemSearch = theHC.theSetupControl.listEpiSetGroup(search);
            setTableEPI(itemSearch,1);
        }
        if(show == 13)
        {    itemSearch = theHC.theSetupControl.listItemByGroup("",search,"1");
             setTableItemDrug(itemSearch,1);
        }
        if(show == 14){
            //EPI
            itemSearch = theHC.theSetupControl.listSearchItem(search ,2,"2");
            setTableItemLab(itemSearch,1);
        }
        //add code by noom 17/12/2548 
        if(show == 15){
            itemSearch = theHC.theLookupControl.listDrugDosePrint(search,"1");
            setTableDoseMapUom(itemSearch,1);
        }
    }
   
    
    private void setTableEmployee(Vector voffice,int off){
        Employee of = new Employee();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(column,count);
            for(int i=0 ;i<count;i++){  
                of = (Employee)voffice.get(i+prev);
                tm.setValueAt(of.employee_id,i,0);
                tm.setValueAt(of.fname + " " + of.lname,i,1);
            }
            jTable1.setModel(tm);
        }
        else{
            TaBleModel tm = new TaBleModel(column,0);
            jTable1.setModel(tm);
        }
    } 
    
     private void setTableEmployeeOr(Vector voffice,int off){
        Employee of = new Employee();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null) {
            if(off == 1){
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++){         
                of = (Employee)voffice.get(i+prev);
                tm.setValueAt(of.fname + " " + of.lname,i,0);   
            }
            jTable1.setModel(tm);
            
        }
        else{
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
    }  
    
    private void setTableItemLabReferIn(Vector voffice,int off){  
        Item of = new Item();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(column,count);
            for(int i=0 ;i<count;i++){  
                of = (Item)voffice.get(i+prev);
                tm.setValueAt(of.item_id,i,0);
                tm.setValueAt(of.common_name, i, 1);
            }
            jTable1.setModel(tm);
        }
        else{
            TaBleModel tm = new TaBleModel(column,0);
            jTable1.setModel(tm);
        }
    } 
    
    private void setTableItemLab(Vector voffice,int off)
    {  
        Item of = new Item();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(column,count);
            for(int i=0 ;i<count;i++)
            {  
                of = (Item)voffice.get(i+prev);
                tm.setValueAt(of.item_id,i,0);
                tm.setValueAt(of.common_name, i, 1);
            }
            jTable1.setModel(tm);
        }
        else{
            TaBleModel tm = new TaBleModel(column,0);
            jTable1.setModel(tm);
        }
    } 
    
    private void setTableItemDrug(Vector voffice,int off)
    {   
        Item of = new Item();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null)
        {
            if(off == 1)
            {
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size())
                {
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0)
                {
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else
            {
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size())
                {
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col_Item,count);
            
            for(int i=0 ;i<count;i++)
            {  
                of = (Item)voffice.get(i+prev);
                CategoryGroupItem ci = theHC.theLookupControl
                    .readCategoryGroupItemById(of.item_group_code_category);
                tm.setValueAt(of.item_id,i,0);
                tm.setValueAt(of.common_name, i, 1);
                //20051116 henbe_mod
                if(ci!=null)
                    tm.setValueAt(ci.description, i, 2);
                else
                {
                    tm.setValueAt("ไม่มีข้อมูล", i, 2);
                    Constant.println("DataNotFound:of.item_group_code_category" + of.item_group_code_category);
                }
                //20051116 henbe_mod
            }
            jTable1.setModel(tm);
        }
        else
        {
            TaBleModel tm = new TaBleModel(col_Item,0);
            jTable1.setModel(tm);
        }
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);     
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(400);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
    } 
    
    /**
     *@Author: amp
     *@date: 28/03/2549
     */
    private void setTableDrugStandard(Vector voffice,int off)
    {           
        DrugStandard of = new DrugStandard();
        int count = offset;
        int p =0;
        int n =0;
        if(voffice != null)
        {
            if(off == 1)
            {
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size())
                {
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0)
                {
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else
            {
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size())
                {
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col_drugStandard,count);
            for(int i=0 ;i<count;i++)
            {  
                of = (DrugStandard)voffice.get(i+prev);   
                tm.setValueAt(of.number, i, 0);
                tm.setValueAt(of.description, i, 1);                
            }
            jTable1.setModel(tm);
        }
        else
        {
            TaBleModel tm = new TaBleModel(col_drugStandard,0);
            jTable1.setModel(tm);
        }
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(400);     
    } 
    
    private void setTableDx(Vector vItem,int off){   
        DxTemplate dx = new DxTemplate();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(vItem != null){
            if(off == 1){
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++){  
                dx = (DxTemplate)vItem.get(i+prev);
                //tm.setValueAt(of.pk_field,i,0);
                tm.setValueAt(dx.description, i, 0);
            }
            jTable1.setModel(tm);
            
        }
        else{
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
    }  
    
    private void setTableVital(Vector voffice,int off){   
        VitalTemplate of = new VitalTemplate();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){   
                p = prev;
                n = next;            
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){   
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){   
                    prev = p;
                    next = n;
                    count = n - p;
                }               
            }
            else{   
                next = prev;
                prev = prev - offset;
                if(prev <=0){    
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){   
                    next= itemSearch.size();
                    count = next;
                }              
            }
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++){  
                of = (VitalTemplate)voffice.get(i+prev);
                tm.setValueAt(of.description, i, 0);
            }
            jTable1.setModel(tm);               
        }
        else{   
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }        
    } 
    
    /** 11 Show EPI */
    private void setTableEPI(Vector voffice,int off){   
        EpiSetGroup of = new EpiSetGroup();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){   
                p = prev;
                n = next;            
                
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){   
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){   
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{   
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++){  
                of = (EpiSetGroup)voffice.get(i+prev);
                tm.setValueAt(of.description, i, 0);
            }
            jTable1.setModel(tm);            
        }
        else{   
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
    }  
    
    
    private void setTableLabReferOut(Vector voffice,int off){   
        OrderItem of = new OrderItem();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){   
                p = prev;
                n = next;            
                
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){   
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){   
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{   
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++){  
                of = (OrderItem)voffice.get(i+prev);
                tm.setValueAt(of.common_name, i, 0);
            }
            jTable1.setModel(tm);            
        }
        else{   
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
    }  
    
    private void setTableGuideAfterDx(Vector voffice,int off){   
        GuideAfterDx of = new GuideAfterDx();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){   
                p = prev;
                n = next;            
                
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){   
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){   
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{   
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++){  
                of = (GuideAfterDx)voffice.get(i+prev);                
                tm.setValueAt(of.description, i, 0);
            }
            jTable1.setModel(tm);            
        }
        else{   
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
    }     
    
    /*** add code by noom 17/12/2548 สำหรับนำจำนวนยาที่ใช้ สำหรับการพิมพ์มาแสดงในตาราง***/ 
    private void setTableDoseMapUom(Vector voffice,int off){  
        DrugDosePrint of = new DrugDosePrint();
        int count = offset;
        int p =0;
        int n =0;
        //int c =0;
        if(voffice != null){
            if(off == 1){
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= itemSearch.size()){
                    next = itemSearch.size();
                    count = next - prev;
                }
                if(count == 0){
                    prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else{
                next = prev;
                prev = prev - offset;
                if(prev <=0){
                    prev = 0;
                    next = offset;
                }
                if(next >= itemSearch.size()){
                    next= itemSearch.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col_AddDrugDose,count);
            for(int i=0 ;i<count;i++){  
                of = (DrugDosePrint)voffice.get(i+prev);
                tm.setValueAt(of.item_drug_dose_value,i,0);
                tm.setValueAt(of.item_drug_dose_description, i, 1);
            }
            jTable1.setModel(tm);
        }
        else{
            TaBleModel tm = new TaBleModel(col_AddDrugDose,0);
            jTable1.setModel(tm);
        }
    } 
    
    
    /*** แสดง Dialog สำหรับค้นหาจำนวนยาที่ใช้สำหรับการพิมพ์ขึ้นมาแสดง ***/
    public boolean showSearchDrugDoseMapUom(JTable jt,Vector drug,Uom theUom){   
        jti = jt;
        doseMapV = drug;
        b_item_drug_uom_id = theUom.getObjectId();
        Constant.println("--- In PanelSetupSearchSub have Uom id is ="+theUom.getObjectId()+" "+theUom.uom_id);
        setVisible(true);
        setTableEmployee(null,0);
        return closePanel;
    }
    
    /*** นำค่าที่เลือกจากใน Dialog จำนวนยาที่ใช้สำหรับการพิมพ์มาใส่ในตาราง ****/
     private void updateOGDoseMapV(JTable jt,Vector drugDoseMapUom)
    {
          if(drugDoseMapUom == null || drugDoseMapUom.size()==0){
            TaBleModel tm= new TaBleModel(col_AddDrugDose,0);
            jt.setModel(tm); 
            return;
        }     
        TaBleModel tm = new TaBleModel(col_AddDrugDose,drugDoseMapUom.size());
        
        for(int i=0;i<drugDoseMapUom.size();i++){
            DrugDoseMapUom ds = (DrugDoseMapUom)drugDoseMapUom.get(i);
            String item_code = ds.b_item_drug_dose_id;
            DrugDosePrint it = theHC.theSetupControl.listDrugDosePrintByPk(item_code);
            tm.setValueAt(it.item_drug_dose_value,i,0);
            tm.setValueAt(it.item_drug_dose_description,i,1); 
        }   
        jt.setModel(tm);
        jt.getColumnModel().getColumn(0).setPreferredWidth(100);
        jt.getColumnModel().getColumn(1).setPreferredWidth(200);
    }
    
    /*** end add code by noom ***/
        
    /**กำหนด คุณสมบัติต่างๆก่อนการแสดงข้อมูล*/
    public void setShow(){   
        setSize(450,450);
        setResizable(false);
        pack();
        closePanel = false;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - this.getSize().width)/2, (screenSize.height - this.getSize().height)/2);//-(28+dlg.getSize().height/2));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
    }
    /**ใช้เมื่อต้องการแสดง Dialog หลังการ new Instant ขึ้นมา*/
    
    
    /**
     *@deprecated henbe มีการเขียนข้อมูลลง HO โดย GUI ซึ่งผิด pattern
     */
    Vector vDrugAllergy;
    JTable jTableAllergy;
    public boolean showSearchAllergy(JTable jt,Vector parv)
    {   
        jTableAllergy = jt;
        vDrugAllergy = parv;
        setVisible(true);
        setTableEmployee(null,0);      

        return closePanel;
    }
    
    public boolean showSearch()
    {   
        setVisible(true);
        setTableEmployee(null,0);
        searchSub(show);
        return closePanel;
    }
    
    JTable jtPar;
    Vector theParticipateOrV;
    public boolean showSearch(JTable jt,Vector parv)
    {   
        jtPar = jt;
        theParticipateOrV = parv;
        setVisible(true);
        setTableEmployee(null,0);
        return closePanel;
    }
    
    public boolean showSearchDrug(JTable jt,Vector drug)
    {   
        jti = jt;
        drugV = drug;
        setVisible(true);
        setTableEmployee(null,0);
        return closePanel;
    }
    
    public boolean showSearchLabGroup(JTable jt,Vector lab,DialogLabReferIn dlr){    
        jti = jt;
        labV = lab;
        theDialogLabReferIn = dlr;
        setVisible(true);
        setTableEmployee(null,0);
        return closePanel;
    }
    
    public boolean isClose(){
        return closePanel;
    }
    
    public static boolean showDialog(HosControl hc,UpdateStatus us,int mode,String title,Component component){
        PanelSetupSearchSub pss = new PanelSetupSearchSub(hc,us,mode);
        pss.setComponent(component);
        pss.setTitle(title);
        pss.showSearch(); 
        return true;
    }
    public static boolean showDialogDx(HosControl hc,UpdateStatus us,int mode
    ,String title,JTextComponent component,Vector vdx)
    {
        PanelSetupSearchSub pss = new PanelSetupSearchSub(hc,us,mode);
        pss.vDxTemplate = vdx;
        pss.setComponent(component);
        pss.setTitle(title);
        pss.showSearch(); 
        return true;
    }
    public static boolean showDialog(HosControl hc,UpdateStatus us,int mode,String title){
        PanelSetupSearchSub pss = new PanelSetupSearchSub(hc,us,mode);
        pss.setTitle(title);
        pss.showSearch(); 
        return true;
    }
    public boolean checkParticipateSame(ParticipateOr po,Vector thePart)
    {   
        String part = po.employee.trim();
        if(thePart==null){
            return false;
        }
        ParticipateOr participate = null;
        boolean same = false;
        if(po.getObjectId() == null)
        {
            for(int i = 0 ; i < thePart.size() ; i++)
            {
                participate = (ParticipateOr)thePart.get(i);
                if(part.equalsIgnoreCase(participate.employee.trim()))
                {   
                    same = true;
                    break;
                }
                participate = null;
            }
        }
        part = null;
        participate = null;
        return same;
    }
     // Variables declaration - do not modify
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrev;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox jComboBoxServicePoint;
    private javax.swing.JLabel jLabelICD9code;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private com.hosv3.gui.component.HJTableSort jTable1;
    private javax.swing.JTextField jTextFieldSCode;
    // End of variables declaration    
}
