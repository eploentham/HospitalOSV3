/*
 * DialogAdmit.java
 *
 * Created on 8 พฤศจิกายน 2546, 14:14 น.
 */
package com.hosv3.gui.dialog;
import com.hosv3.utility.Constant;
import java.util.*;
import java.awt.*;

import com.hosv3.control.*;
import com.hosv3.utility.*;
import com.hosv3.utility.connection.*;
import com.hosv3.object.*;

import com.hospital_os.object.*; 
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;

/**
 *
 * @author  tong
 */
public class DialogDischarge extends javax.swing.JDialog {
    HosObject theHO;
    UpdateStatus theUS;
    HosControl theHC;
    public static boolean actionCommand = false;
    public static boolean checkButton = false;
    private LookupControl theLookupControl;
    private VisitControl theVisitControl;
    private DiagnosisControl theDiagnosisControl;
    private SystemControl theSystemControl;
    private Visit theVisit;
    private Chronic theChronic;
    private Office theOffice;
    private Vector vDateTime;
    /** Creates new form DialogAdmit */

    public DialogDischarge(HosControl hc,UpdateStatus us,Visit theVisit1)
    {
        super(us.getJFrame(), true);
        theUS = us;
        theHC = hc;
        theHO = hc.theHO;
        theLookupControl = theHC.theLookupControl;
        theVisitControl = theHC.theVisitControl;
        theDiagnosisControl = theHC.theDiagnosisControl;
        theSystemControl = theHC.theSystemControl;
        theVisit = theVisit1;
        initComponents();
        setLanguage("");
        setTitle(Constant.getTextBundle("บันทึกข้อมูลการจำหน่ายผู้ป่วย"));
        setSize(380,230);
        Toolkit thekit = getToolkit();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dateComboBoxDischargeDate = new com.hospital_os.utility.DateComboBox();
        jLabel2 = new javax.swing.JLabel();
        timeTextFieldDischargeTime = new com.hospital_os.utility.TimeTextField();
        jLabelDateDischarge = new javax.swing.JLabel();
        jPanelHide = new javax.swing.JPanel();
        jLabelType = new javax.swing.JLabel();
        jComboBoxDischargeStatus = new javax.swing.JComboBox();
        jComboBoxDischargeType = new javax.swing.JComboBox();
        jLabelCauseDischarge = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabelRefer = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jButtonReferOut = new javax.swing.JButton();
        jTextFieldRefer = new javax.swing.JTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        jButtonSave.setMaximumSize(new java.awt.Dimension(72, 26));
        jButtonSave.setMinimumSize(new java.awt.Dimension(72, 26));
        jButtonSave.setPreferredSize(new java.awt.Dimension(72, 26));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButtonSave, gridBagConstraints);

        jButtonCancel.setText("\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01");
        jButtonCancel.setMaximumSize(new java.awt.Dimension(72, 26));
        jButtonCancel.setMinimumSize(new java.awt.Dimension(72, 26));
        jButtonCancel.setPreferredSize(new java.awt.Dimension(72, 26));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButtonCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jLabel1.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 5, 0, 0);
        jPanel3.add(jLabel1, gridBagConstraints);

        dateComboBoxDischargeDate.setEditable(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 11, 0);
        jPanel3.add(dateComboBoxDischargeDate, gridBagConstraints);

        jLabel2.setText("\u0e40\u0e27\u0e25\u0e32");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 11, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        timeTextFieldDischargeTime.setMinimumSize(new java.awt.Dimension(40, 21));
        timeTextFieldDischargeTime.setPreferredSize(new java.awt.Dimension(40, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 11, 5);
        jPanel3.add(timeTextFieldDischargeTime, gridBagConstraints);

        jLabelDateDischarge.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 5, 0, 0);
        jPanel3.add(jLabelDateDischarge, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanelHide.setLayout(new java.awt.GridBagLayout());

        jLabelType.setText("Discharge_status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanelHide.add(jLabelType, gridBagConstraints);

        jComboBoxDischargeStatus.setMinimumSize(new java.awt.Dimension(31, 24));
        jComboBoxDischargeStatus.setPreferredSize(new java.awt.Dimension(31, 24));
        jComboBoxDischargeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDischargeStatusActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 5);
        jPanelHide.add(jComboBoxDischargeStatus, gridBagConstraints);

        jComboBoxDischargeType.setMinimumSize(new java.awt.Dimension(31, 24));
        jComboBoxDischargeType.setPreferredSize(new java.awt.Dimension(31, 24));
        jComboBoxDischargeType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDischargeTypeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 5);
        jPanelHide.add(jComboBoxDischargeType, gridBagConstraints);

        jLabelCauseDischarge.setText("Discharge_type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanelHide.add(jLabelCauseDischarge, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabelRefer.setText("Refer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 5);
        jPanel4.add(jLabelRefer, gridBagConstraints);

        jTextFieldCode.setMinimumSize(new java.awt.Dimension(40, 24));
        jTextFieldCode.setPreferredSize(new java.awt.Dimension(40, 24));
        jTextFieldCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodeFocusLost(evt);
            }
        });
        jTextFieldCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCodeKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel4.add(jTextFieldCode, gridBagConstraints);

        jButtonReferOut.setText("jButton1");
        jButtonReferOut.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonReferOut.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonReferOut.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonReferOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReferOutActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel4.add(jButtonReferOut, gridBagConstraints);

        jTextFieldRefer.setMinimumSize(new java.awt.Dimension(4, 24));
        jTextFieldRefer.setPreferredSize(new java.awt.Dimension(4, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanel4.add(jTextFieldRefer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        jPanelHide.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanelHide, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodeKeyReleased
         if(jTextFieldCode.getText().length()==5){
            Office office = theHC.theLookupControl.readHospitalByCode(jTextFieldCode.getText());
            if(office == null){  
                jTextFieldCode.setText("");
                jTextFieldRefer.setText("");
                return;
            }
            if(office.getObjectId()!=null){
                jTextFieldRefer.setText(office.name);                
            }
            else{
                jTextFieldRefer.setText("");
            }
        }
    }//GEN-LAST:event_jTextFieldCodeKeyReleased

    private void jTextFieldCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodeFocusLost
        Office office = null;
        if(jTextFieldCode.getText().length()==5)
        {
            office = theHC.theLookupControl.readHospitalByCode(jTextFieldCode.getText());
        }      
        if(office!=null)
        {          
             jTextFieldRefer.setText(office.name);
        }
        else
        {
            jTextFieldRefer.setText("");
            jTextFieldCode.setText("");
        }
        if(jTextFieldRefer.getText().equals(""))
        {
            jTextFieldCode.setText("");
        }
    }//GEN-LAST:event_jTextFieldCodeFocusLost
    private void jComboBoxDischargeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDischargeStatusActionPerformed
        editRefer(1);
        if(theVisit.visit_type.equals("1"))
        {
            checkStatus();
        }
    }//GEN-LAST:event_jComboBoxDischargeStatusActionPerformed
  
    private void jComboBoxDischargeTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDischargeTypeActionPerformed
        editRefer(2);
    }//GEN-LAST:event_jComboBoxDischargeTypeActionPerformed
    private void jButtonReferOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReferOutActionPerformed
       Office Off=new Office();
       Off.setObjectId(theVisit.refer_out);
       if(DialogOffice.showDialog(theHC,theUS,Off))
       {
            theVisit.refer_out = Off.getObjectId();
            jTextFieldRefer.setText(Off.getName());   
            jTextFieldCode.setText(Off.getObjectId()); 
       }
    }//GEN-LAST:event_jButtonReferOutActionPerformed
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        actionCommand = false; 
        checkButton = false;        
        dispose();    
    }//GEN-LAST:event_jButtonCancelActionPerformed
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(this.jPanelHide.isVisible()){
            getVisit();
        }
        else{
            String ddt = dateComboBoxDischargeDate.getText() + "," 
            + timeTextFieldDischargeTime.getText() + ":01";
            vDateTime.add(ddt);
        }
        String ddt = dateComboBoxDischargeDate.getText();
        if(theLookupControl.isDateFuture(ddt))
        {
            theUS.setStatus("กรุณาระบุวันที่ในอดีตเท่านั้น",UpdateStatus.WARNING);
            return;
        }
        if(theVisit.discharge_opd_status.equals(DischargeOpd.REFER)
         && theVisit.refer_out.equals(""))
        {
            theUS.setStatus("กรุณากรอกรหัสสถานพยาบาลที่ส่งต่อ",UpdateStatus.WARNING);
            return;
        }
        actionCommand = true;
        checkButton = true;
        dispose();  
    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      //  new DialogAdmit(new javax.swing.JFrame(), true).setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxDischargeDate;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonReferOut;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxDischargeStatus;
    private javax.swing.JComboBox jComboBoxDischargeType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCauseDischarge;
    private javax.swing.JLabel jLabelDateDischarge;
    private javax.swing.JLabel jLabelRefer;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelHide;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldRefer;
    private com.hospital_os.utility.TimeTextField timeTextFieldDischargeTime;
    // End of variables declaration//GEN-END:variables
    private Visit getVisit()
    {       
        String discharge_date_time = dateComboBoxDischargeDate.getText() + "," 
                + timeTextFieldDischargeTime.getText()
                + ":01";//amp:8/8/2549
        if(theVisit.visit_type.equals(VisitType.IPD))
        {
            theVisit.discharge_ipd_status = ComboboxModel.getCodeComboBox(jComboBoxDischargeStatus);
            theVisit.discharge_ipd_type = ComboboxModel.getCodeComboBox(jComboBoxDischargeType);
            theVisit.discharge_opd_status = ""; 
        }
        else
        {
            theVisit.discharge_opd_status = ComboboxModel.getCodeComboBox(jComboBoxDischargeStatus);
            theVisit.discharge_ipd_type = "";
            theVisit.discharge_ipd_status = "";
        }   
        theVisit.doctor_discharge_time = discharge_date_time;
        theVisit.refer_out = this.jTextFieldCode.getText();
        return theVisit;
    }
    private void setVisit(Visit v)
    {
        theVisit = v;
        boolean is_ipd = theVisit.visit_type.equals(VisitType.IPD);
        if(is_ipd){
            ComboboxModel.initComboBox(jComboBoxDischargeType, theLookupControl.listDischargeType());
            ComboboxModel.initComboBox(jComboBoxDischargeStatus, theLookupControl.listDischargeIpd());
        }
        else
            ComboboxModel.initComboBox(jComboBoxDischargeStatus, theLookupControl.listDischargeOpd()); 

        jComboBoxDischargeType.setEnabled(is_ipd);
        jLabelCauseDischarge.setEnabled(is_ipd);
        jTextFieldRefer.setText("");
        jTextFieldCode.setText("");
        dateComboBoxDischargeDate.setText("");
        timeTextFieldDischargeTime.setText("");
        jLabelDateDischarge.setText("ไม่มีข้อมูล");
        jButtonReferOut.setEnabled(false);
        jTextFieldRefer.setEnabled(false);
        jTextFieldCode.setEnabled(false);
        ///////////////////////////////////////////////////////////////////////////////////////////
        //ตัวช่วยหากเป็นค่าว่าง
        if(theVisit.doctor_discharge_time.length()<11){
            if(theVisit.visit_type.equals(VisitType.IPD)){
                dateComboBoxDischargeDate.setText(DateUtil.convertFieldDate(theHO.date_time));
                timeTextFieldDischargeTime.setText(theHO.date_time.substring(11));
            }
            else{
                dateComboBoxDischargeDate.setText(DateUtil.convertFieldDate(theVisit.begin_visit_time));
                timeTextFieldDischargeTime.setText(theHO.date_time.substring(11));
            }
        }
        else{
            jLabelDateDischarge.setText(DateUtil.convertFieldDate(theVisit.doctor_discharge_time));
            dateComboBoxDischargeDate.setText(DateUtil.convertFieldDate(theVisit.doctor_discharge_time));
            timeTextFieldDischargeTime.setText(theVisit.doctor_discharge_time.substring(11));
        }
            
        if(theVisit.discharge_opd_status.equals(""))
            theVisit.discharge_opd_status = DischargeOpd.BACK_HOME;
        //ถ้าไม่มีข้อมูลการจำหน่าย(กรณีผู้ป่วยใน)ให้ Default ใน Combobox ประเภทของการจำหน่ายเป็น ดีขึ้น sumo 04/09/2549
        if(theVisit.discharge_ipd_type.equals(""))
            theVisit.discharge_ipd_status = DischargeIpd.IMPROVE;  
        
        if(is_ipd)
        {
            Gutil.setGuiData(jComboBoxDischargeStatus,theVisit.discharge_ipd_status);
            Gutil.setGuiData(jComboBoxDischargeType,theVisit.discharge_ipd_type);    
        }
        else{
            Gutil.setGuiData(jComboBoxDischargeStatus,theVisit.discharge_opd_status);
        }    
        
        Office off = theLookupControl.readHospitalByCode(theVisit.refer_out);
        if(off!=null)
        {
            jTextFieldRefer.setText(off.getName());
            this.jTextFieldCode.setText(theVisit.refer_out);
        }
   }
   /*
    * เพื่อทำการตรวจสอบว่าเป็นมีการลงรหัสโรคในกลุ่ม chronic หรือไม่
    * input DiagIcd10
    * output ผลกาการตรวจสอบ
    */
    private void checkChronic()
    {
        //GroupIcd10 gicd = theDiagnosisControl.listGroupIcd10ByIcdCode(the
    }
    
    
    private void editRefer(int ch)
    {
          String a = new String();
          if(ch == 1)
          {
            a = ComboboxModel.getCodeComboBox(jComboBoxDischargeStatus);
          }
          else
          {
              a  = ComboboxModel.getCodeComboBox(jComboBoxDischargeType);
          }
           //a = ComboboxModel.getCodeComboBox(jComboBoxDischargeType);
           if((a.equals("54"))||(a.equals("4")))
           {
               jButtonReferOut.setEnabled(true);
               jTextFieldRefer.setEnabled(true);
               jTextFieldCode.setEnabled(true);
           }
           else
           {
               jButtonReferOut.setEnabled(false);
               jTextFieldRefer.setEnabled(false);
               jTextFieldCode.setEnabled(false);
           }
          a = null;
    }
    
    private void checkStatus()
    {
        String discharge_status_id = new String();
        discharge_status_id = ComboboxModel.getCodeComboBox(jComboBoxDischargeStatus);
        if((discharge_status_id.equals("8"))||(discharge_status_id.equals("9")))//ลงสถานะว่าตาย
        {
            //แสดงบางตัว
            Vector vDischargeType = new Vector();
            com.hospital_os.utility.ComboFix cf = new com.hospital_os.utility.ComboFix();
            cf.code = "8";
            cf.name = Constant.getTextBundle("ตาย ได้ทำ autopsy");
            vDischargeType.add(cf);
            cf = new com.hospital_os.utility.ComboFix();
            cf.code = "9";
            cf.name = Constant.getTextBundle("ตาย ไม่ได้ทำ autopsy");
            vDischargeType.add(cf);            
            ComboboxModel.initComboBox(jComboBoxDischargeType, vDischargeType);
        }
        else
        {
            //แสดงทุกตัว
            ComboboxModel.initComboBox(jComboBoxDischargeType, theLookupControl.listDischargeType());
        }
    }
/*-----------------------------------------------------------*/    
    public static boolean showDialog(HosControl hc, UpdateStatus us,Visit theVisit)
    {
        DialogDischarge dlg = new DialogDischarge(hc,us,theVisit);
        return dlg.showDialog(theVisit);
    }        
    
    public void setLanguage(String msg)
    {
        GuiLang.setLanguage(jLabelCauseDischarge);
	GuiLang.setLanguage(jLabelType);
	GuiLang.setLanguage(jLabelRefer);
	GuiLang.setLanguage(jButtonReferOut);
	GuiLang.setLanguage(jButtonSave);
	GuiLang.setLanguage(jButtonCancel);
        GuiLang.setLanguage(jLabel1);
        GuiLang.setLanguage(jLabel2);
        GuiLang.setLanguage(jLabelDateDischarge);
    }  
     
    public boolean showDialogIPD(Vector v)
    {
        vDateTime = v;
        this.jPanelHide.setVisible(false);
        setVisible(true);
        if(actionCommand)
        {     
              return true;
        }
       return false;
    }
    public boolean showDialog(Visit v)
    {
        this.jPanelHide.setVisible(true);
        setVisit(v);
        this.jTextFieldCodeFocusLost(null);
        setVisible(true);
        if(actionCommand)
        {     
              return true;
        }
       return false;
    } 
}

