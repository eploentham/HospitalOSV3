/*
 * DialogHistoryPatient.java
 *
 * Created on 16 กุมภาพันธ์ 2547, 16:00 น.
 */
package com.hosv3.gui.dialog;
import com.hosv3.control.*;
import com.hosv3.utility.*;

import com.hospital_os.object.*; 
import com.hospital_os.utility.TaBleModel;
import com.hosv3.utility.Constant;
import com.hospital_os.utility.CellRendererHos;
import java.util.*;
import java.awt.*;
import com.hosv3.utility.connection.*;
/**
 *
 * @author  amp
 */
public class DialogHistoryPatient extends javax.swing.JDialog 
{    
    public boolean actionCommand = false;
    //PatientControl thePatientControl;
    //SetupControl theSetupControl;
    //VisitControl theVisitControl;
    //VisitSubject theVisitSubject;
    HosControl theHC;
    public Transfer theTransfer;
    public Vector transfer = new Vector();
    public Vector visit = new Vector();
    public Patient thePatient;
    public Visit theVisit;
    /** ใช้ในการตรวจสอบการ Double-Click */
    public long firstClickTime = 0;
    private String[] col_jTableHistoryPatient = {Constant.getTextBundle("เลข VN"),
                                         Constant.getTextBundle("เวลาเข้าสู่ระบบ"),
                                        Constant.getTextBundle("เวลาจำหน่าย"),
                                         Constant.getTextBundle("Status"),
                                        Constant.getTextBundle("DX"),
                                        Constant.getTextBundle("DX Note")};
    private String[] col_jTableHistoryVn = {Constant.getTextBundle("จุดบริการ"),
                                    Constant.getTextBundle("ส่งให้แพทย์"),
                                    Constant.getTextBundle("เวลาที่ส่ง"),
                                    Constant.getTextBundle("สถานะ"),
                                    Constant.getTextBundle("เริ่ม"),
                                    Constant.getTextBundle("จบ")};
    CellRendererHos vnRender = new CellRendererHos(CellRendererHos.VN);
    CellRendererHos dateRender = new CellRendererHos(CellRendererHos.DATE_TIME);
    CellRendererHos timeRender = new CellRendererHos(CellRendererHos.TIME);
    /** Creates new form DialogHistoryPatient */ 
    public DialogHistoryPatient(HosControl hc,UpdateStatus us) 
    {   
        super(us.getJFrame(),true);
        theHC = hc;
    vnRender = new CellRendererHos(CellRendererHos.VN,theHC.theLookupControl.getSequenceDataVN().pattern);
        //setIconImage(us.getJFrame().getIconImage());
        initComponents();
        setDialog();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHistoryPatient = new com.hosv3.gui.component.HJTableSort();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableHistoryVn = new com.hosv3.gui.component.HJTableSort();
        jPanel2 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Diag_VisitHist_History"));
        jTableHistoryPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableHistoryPatient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableHistoryPatientKeyReleased(evt);
            }
        });
        jTableHistoryPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableHistoryPatientMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableHistoryPatient);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 2);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder("Diag_VisitHist_Detail"));
        jTableHistoryVn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableHistoryVn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonOK.setText("OK");
        jButtonOK.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonOK.setMaximumSize(new java.awt.Dimension(72, 24));
        jButtonOK.setMinimumSize(new java.awt.Dimension(72, 24));
        jButtonOK.setPreferredSize(new java.awt.Dimension(72, 24));
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(jButtonOK, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 2);
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jTableHistoryPatientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableHistoryPatientKeyReleased
        if(evt.getKeyCode()==evt.VK_UP||evt.getKeyCode()==evt.VK_DOWN)
            jTableHistoryPatientMouseReleased(null);
    }//GEN-LAST:event_jTableHistoryPatientKeyReleased
    private void jTableHistoryPatientMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableHistoryPatientMouseReleased
        int row = jTableHistoryPatient.getSelectedRow();
        theVisit = (Visit)visit.get(row);
        transfer = theHC.theVisitControl.listHistoryVisit(theVisit.getObjectId());
        setTransferV(transfer);
        doubleClickList();
    }//GEN-LAST:event_jTableHistoryPatientMouseReleased
    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt){//GEN-FIRST:event_jButtonOKActionPerformed
        if(theVisit == null){
            return;
        }
        actionCommand = true;
        theHC.theVisitControl.readVisitPatientByVid(theVisit.getObjectId());
        dispose();
    }//GEN-LAST:event_jButtonOKActionPerformed
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        dispose();
    }//GEN-LAST:event_closeDialog
    
/*-----------------------------------------------------------*/            
    /** เรียกใช้เมื่อ Double-Click ที่รายการ */
    private void doubleClickList()
    {
        try
        {
            long clickTime = System.currentTimeMillis();
            long clickInterval = clickTime - firstClickTime;
            if(clickInterval < 400)
            {
              firstClickTime = 0;
              jButtonOKActionPerformed(null);
            }
            else
            {
              firstClickTime = clickTime;
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace(Constant.getPrintStream());
        }
    }
    
    private void setVisitV(Vector visit)
    {                 
        TaBleModel tm ;
        if(visit != null && !visit.isEmpty())
        {   
            tm = new TaBleModel(col_jTableHistoryPatient,visit.size());
            for(int i=0 ;i<visit.size(); i++)
            {  
                Visit theVisit = (Visit)visit.get(i);
                tm.setValueAt(theVisit.vn,i,0);
                tm.setValueAt(DateUtil.getDateFromText(
                        theVisit.begin_visit_time),i,1);
                tm.setValueAt(DateUtil.getDateFromText(
                        theVisit.financial_discharge_time),i,2);
                VisitStatus vs = theHC.theLookupControl.readVisitStatusById(theVisit.visit_status);
                if(vs != null)
                        tm.setValueAt(vs.description,i,3);
                else    tm.setValueAt("",i,3);
                tm.setValueAt(theVisit.doctor_dx,i,4);
                tm.setValueAt(theVisit.diagnosis_note,i,5);
            }
            jTableHistoryPatient.setModel(tm, null);
            jTableHistoryPatient.setRowSelectionInterval(0,0);
            jTableHistoryPatientMouseReleased(null);
            if(visit.isEmpty()) setTransferV(null);
        }
        else
        {   
            tm= new TaBleModel(col_jTableHistoryPatient,0);
            jTableHistoryPatient.setModel(tm, null);
            setTransferV(null);
            theVisit = null;
        }
        jTableHistoryPatient.getColumnModel().getColumn(0).setPreferredWidth(200);
        jTableHistoryPatient.getColumnModel().getColumn(0).setCellRenderer(vnRender);
        jTableHistoryPatient.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTableHistoryPatient.getColumnModel().getColumn(1).setCellRenderer(dateRender);
        jTableHistoryPatient.getColumnModel().getColumn(2).setPreferredWidth(300);
        jTableHistoryPatient.getColumnModel().getColumn(2).setCellRenderer(dateRender);
        jTableHistoryPatient.getColumnModel().getColumn(3).setPreferredWidth(200);
        jTableHistoryPatient.getColumnModel().getColumn(4).setPreferredWidth(300);
        jTableHistoryPatient.getColumnModel().getColumn(5).setPreferredWidth(300);
    }
     public String getServicePointName(Transfer tran)
    {
        ServicePoint sp = (ServicePoint)theHC.theLookupControl.readServicePointById(tran.service_point_id);   
        if(sp!=null){
            if(!ServicePoint.IPD.equals(sp.getObjectId()))
                return sp.name;
        }
        else{
            Ward ward = theHC.theSetupControl.readWardByPk(tran.ward_id);
            if(ward!=null)
                return ward.description;
        }
        return "ไม่มีข้อมูล";
    }
    private void setTransferV(Vector transfer)
    {
        //private String[] col = {"จุดบริการ","แพทย์","วันและเวลา"};
        TaBleModel tm;
        if(transfer == null)
        { 
            tm = new TaBleModel(col_jTableHistoryVn,0);
            jTableHistoryVn.setModel(tm, null);
            return;
        }
        tm = new TaBleModel(col_jTableHistoryVn,transfer.size());
        for(int i=0 ;i<transfer.size(); i++)
        {  
            Transfer theTransfer = (Transfer)transfer.get(i);
            //incase  10:18:38
            String begin = theTransfer.service_start_time;
            String finish = theTransfer.service_finish_time;
            try{
                //incase  2548-11-24,22:45:57
                if(begin.length()>=19)
                {
                    begin = begin.substring(11);
                    finish = finish.substring(11);
                }
                //incase  2548-11-24
                else if(begin.length()>=10)
                {
                    begin = "";
                    finish = "";
                }
            }
            catch(Exception e){
                Constant.println(begin);
                Constant.println(finish);
            }
            String emp = theHC.theLookupControl.readEmployeeNameById(theTransfer.doctor_code);
            String sp_name = getServicePointName(theTransfer);
            tm.setValueAt(sp_name,i,0);
            tm.setValueAt(emp,i,1);
            tm.setValueAt(DateUtil.getDateFromText(theTransfer.assign_time),i,2);
            tm.setValueAt(theTransfer.status,i,3);
            tm.setValueAt(begin,i,4);
            tm.setValueAt(finish,i,5);
        }
        jTableHistoryVn.setModel(tm, null);
        jTableHistoryVn.getColumnModel().getColumn(0).setPreferredWidth(200);
        jTableHistoryVn.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTableHistoryVn.getColumnModel().getColumn(2).setPreferredWidth(340);
        jTableHistoryVn.getColumnModel().getColumn(2).setCellRenderer(dateRender);
        jTableHistoryVn.getColumnModel().getColumn(3).setPreferredWidth(80);
        jTableHistoryVn.getColumnModel().getColumn(3).setCellRenderer(TableRenderer.getRendererCenter());
        jTableHistoryVn.getColumnModel().getColumn(4).setPreferredWidth(120);
        jTableHistoryVn.getColumnModel().getColumn(4).setCellRenderer(timeRender);
        jTableHistoryVn.getColumnModel().getColumn(5).setPreferredWidth(120);
        jTableHistoryVn.getColumnModel().getColumn(5).setCellRenderer(timeRender);
        
    }
    
    
    public void showDialog(Patient pt)
    {
        theVisit = null;
        thePatient = pt;
        visit = theHC.theVisitControl.listVisitByPid(thePatient.getObjectId());
        setVisitV(visit);  
        setVisible(true);
    }
    private void setDialog()
    {
        setSize(600,400);
        setTitle(Constant.getTextBundle("Diag_VisitHist_Title"));      
        setLanguage("");
        Toolkit thekit = getToolkit();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);
        //setVisible(true);
    }

    public void setLanguage(String msg)
    {
      // jButtonSend.setText(Constant.getTextBundle(jButtonSend.getText()));
    	GuiLang.setLanguage(jButtonOK);
        GuiLang.setTextBundle(jPanel3);
        GuiLang.setTextBundle(jPanel4);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.hosv3.gui.component.HJTableSort jTableHistoryPatient;
    private com.hosv3.gui.component.HJTableSort jTableHistoryVn;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] argc){
        Constant.println(
                DateUtil.getDateToString(
                DateUtil.getDateFromText("2548-12-12,11:31"),true));
    }
}
