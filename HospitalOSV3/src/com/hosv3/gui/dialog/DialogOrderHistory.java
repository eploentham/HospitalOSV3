/*
 * DialogOrderHistory.java
 *
 * Created on 28 เมษายน 2547, 11:10 น.
 */
package com.hosv3.gui.dialog;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.hosv3.object.*;
import com.hosv3.control.*;
import com.hosv3.utility.*;
import com.hosv3.utility.connection.*;
//import com.hosv3.gui.panel.transaction.*;

import com.hospital_os.object.*;
import com.hospital_os.object.specialQuery.*;
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.Gutil;
import com.hosv3.utility.Constant;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.CellRendererHos;
/**
 *
 * @author amp
 *
 */
public class DialogOrderHistory extends javax.swing.JFrame
        implements UpdateStatus
{
    
    HosObject theHO;
    UpdateStatus theUS;
    public boolean actionCommand = false;
    /**ใช้ในการ query ข้อมูลของ รายการ order*/
    private OrderControl theOrderControl;
    /**ใช้ในการ query ข้อมูลของ รายการ combobox*/
    LookupControl theLookupControl;
    /**ใช้ในการ query ข้อมูลของ รายการ order*/
    private VisitControl theVisitControl;
    /**ใช้ในการ query ข้อมูลของ รายการ system*/
    private SystemControl theSystemControl;
    private PatientControl thePatientControl;
    private HosControl theHC;
    /**เก็บ Object ของ patient*/
    private Patient thePatient;
    /**เก็บ Object ของ patient*/
    private OrderItem theOrderItem;
    /**เก็บ Object ของ OrderItem*/
    private Vector vOrderHistory;
    /** ใช้ในการตรวจสอบการ Double-Click */
    public long firstClickTime = 0;
    
    private SpecialQueryOrderHistoryDrug theSpecialQueryOrderHistoryDrug;
    private Uom theUom;
    private DrugFrequency theDrugFrequency;
    private DrugInstruction theDrugInstruction;
    
    public SetupControl theSetupControl;
    private Visit theVisit;
    public static boolean closeDialog = false;
    private String[] col_jTableListOrder = {"Vn","วันที่สั่ง","ชื่อสามัญ","จำนวน","สถานะ","Dose การใช้ยา"};
    CellRendererHos vnRender = new CellRendererHos(CellRendererHos.VN);
    /** Creates new form DialogOrderHistory */
    public DialogOrderHistory(HosControl hc,UpdateStatus us)
    {
        setIconImage(us.getJFrame().getIconImage());
        theUS = us;
        theHC = hc;
        theLookupControl = hc.theLookupControl;
        theOrderControl = hc.theOrderControl;
        theVisitControl = hc.theVisitControl;
        theSystemControl = hc.theSystemControl;
        theSetupControl = hc.theSetupControl;
        thePatientControl = hc.thePatientControl;
        vnRender = new CellRendererHos(CellRendererHos.VN);
        theHO = hc.theHO;
        initComponents();
        ComboboxModel.initComboBox(jComboBoxGroup, theLookupControl.listCategoryGroup());
        dateComboBoxDateFrom.setEditable(true);
        dateComboBoxDateTo.setEditable(true);
        jComboBoxGroup.setEnabled(false);
        setLanguage("");
        setDialog();
    }
    
    //////////////////////////////////////////////////////////////////////////
    /**
     *dialog ที่ใช้ในการส่งข้อความเตื่อนผู้ใช้
     */
    public void setStatus(String str, int status)
    {
        str = Constant.getTextBundle(str);
        JOptionPane.showMessageDialog(this, str, Constant.getTextBundle("เตือน"), JOptionPane.ERROR_MESSAGE);
    }
    //////////////////////////////////////////////////////////////////////////
    /**
     *dialog ที่ใข้ในการให้ผู้ใข้ทำการยีนยันสิ่งต่าง
     */
    public boolean confirmBox(String str, int status)
    {
        int i = JOptionPane.showConfirmDialog(this,str,Constant.getTextBundle("เตือน")
        ,JOptionPane.YES_NO_OPTION);
        return (i==JOptionPane.YES_OPTION);
    }
    public JFrame getJFrame()
    {
        return this;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanelSearch = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldName = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxGroup = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        dateComboBoxDateTo = new com.hospital_os.utility.DateComboBox();
        dateComboBoxDateFrom = new com.hospital_os.utility.DateComboBox();
        jLabel8 = new javax.swing.JLabel();
        jCheckBoxDateSearch = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxAllGroup = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListOrder = new com.hosv3.gui.component.HJTableSort();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setMinimumSize(new java.awt.Dimension(400, 107));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 165));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Diag_OrderHist_History"));
        jPanel3.setMinimumSize(new java.awt.Dimension(400, 107));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 165));
        jPanelSearch.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTextFieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNameActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jTextFieldName, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel1.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanelSearch.add(jPanel1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jComboBoxGroup.setMinimumSize(new java.awt.Dimension(150, 21));
        jComboBoxGroup.setPreferredSize(new java.awt.Dimension(150, 21));
        jComboBoxGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxGroupActionPerformed(evt);
            }
        });
        jComboBoxGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBoxGroupMouseReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 2);
        jPanel4.add(jComboBoxGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanelSearch.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 2);
        jPanel5.add(dateComboBoxDateTo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel5.add(dateComboBoxDateFrom, gridBagConstraints);

        jLabel8.setText("DateEnd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 2);
        jPanel5.add(jLabel8, gridBagConstraints);

        jCheckBoxDateSearch.setSelected(true);
        jCheckBoxDateSearch.setText("DateStart");
        jCheckBoxDateSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDateSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel5.add(jCheckBoxDateSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanelSearch.add(jPanel5, gridBagConstraints);

        jLabel3.setText("NormalName");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 1, 1);
        jPanelSearch.add(jLabel3, gridBagConstraints);

        jCheckBoxAllGroup.setText("GROUP");
        jCheckBoxAllGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllGroupActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanelSearch.add(jCheckBoxAllGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel3.add(jPanelSearch, gridBagConstraints);

        jLabel2.setText("LIST_ORDER");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 22));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 80));
        jTableListOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableListOrderKeyReleased(evt);
            }
        });
        jTableListOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListOrderMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableListOrder);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(jPanel2, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-612)/2, (screenSize.height-436)/2, 612, 436);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jCheckBoxDateSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDateSearchActionPerformed
        this.dateComboBoxDateFrom.setEnabled(jCheckBoxDateSearch.isSelected());
        this.dateComboBoxDateTo.setEnabled(jCheckBoxDateSearch.isSelected());
    }//GEN-LAST:event_jCheckBoxDateSearchActionPerformed
    
    private void jComboBoxGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGroupActionPerformed
        jButtonSearchActionPerformed(null);
    }//GEN-LAST:event_jComboBoxGroupActionPerformed
    
    private void jComboBoxGroupMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxGroupMouseReleased
        jButtonSearchActionPerformed(null);
    }//GEN-LAST:event_jComboBoxGroupMouseReleased
    
	private void jTextFieldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNameActionPerformed
            jButtonSearchActionPerformed(null);
    }//GEN-LAST:event_jTextFieldNameActionPerformed
        
	private void jCheckBoxAllGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllGroupActionPerformed
            jComboBoxGroup.setEnabled(jCheckBoxAllGroup.isSelected());
    }//GEN-LAST:event_jCheckBoxAllGroupActionPerformed
        
	private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
            long start = System.currentTimeMillis();
            long finish = 0;
            
            if(thePatient ==null) return;
            vOrderHistory = theOrderControl.listOrderHistoryByNameGroupDatePatientId(
                    this.jTextFieldName.getText()
                    ,jCheckBoxAllGroup.isSelected()
                    ,Gutil.getGuiData(jComboBoxGroup)
                    ,jCheckBoxDateSearch.isSelected()
                    ,dateComboBoxDateFrom.getText()
                    ,dateComboBoxDateTo.getText()
                    ,thePatient.getObjectId());
            updateOGOrderItemV(vOrderHistory);
    }//GEN-LAST:event_jButtonSearchActionPerformed
        
	private void comboBoxClinic1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClinic1ActionPerformed
                }//GEN-LAST:event_comboBoxClinic1ActionPerformed
        
	private void jTableListOrderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListOrderMouseReleased
            doubleClickList();
            //showResult();
    }//GEN-LAST:event_jTableListOrderMouseReleased
        
	private void jTableListOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListOrderKeyReleased
            if(evt.getKeyCode()==KeyEvent.VK_SPACE)
            {
                showResult();
            }
    }//GEN-LAST:event_jTableListOrderKeyReleased
        
        /** เรียกใช้เมื่อ Double-Click ที่รายการ */
        private void doubleClickList()
        {
            try
            {
                long clickTime = System.currentTimeMillis();
                long clickInterval = clickTime - firstClickTime;
                if(clickInterval < 400)
                {
                    firstClickTime = 0;
                    showResult();
                    //jButtonOKActionPerformed(null);
                }
                else
                {
                    firstClickTime = clickTime;
                }
            }
            catch(Exception ex)
            {
                ex.printStackTrace(Constant.getPrintStream());
            }
        }
        /**
         *set table OrderHistory ที่ได้จากการค้นหาตาม case ต่างๆ
         *@deprecated ฟังชันมีการ คิวรีหลายครั้งให้ทำให้เป็น special query เพียงครั้งเดียวพอ
         */
        private void updateOGOrderItemV(Vector vOrderHistory)
        {
            TaBleModel tm ;
            if(vOrderHistory != null)
            {
                tm= new TaBleModel(col_jTableListOrder,vOrderHistory.size());
                for(int i=0 ;i<vOrderHistory.size(); i++)
                {
                    //ดีแล้ว แก้ให้เป็นคีวรีซับซ้อน special_query ดีกว่า
                    OrderItem oi = (OrderItem)vOrderHistory.get(i);
                    Visit v = theVisitControl.readVisitByVidRet(oi.visit_id);
                    tm.setValueAt(v.vn,i,0);
                    tm.setValueAt(DateUtil.getDateToString(DateUtil.getDateFromText(oi.vertify_time),false),i,1);
                    tm.setValueAt(oi.common_name,i,2);
                    tm.setValueAt(oi.qty,i,3);
                    OrderItemStatus ois = (OrderItemStatus)theLookupControl
                            .readOrderItemStatus(oi.status);
                    tm.setValueAt(ois.description,i,4);
                    
                    if(oi.isDrug())
                        theSpecialQueryOrderHistoryDrug = theOrderControl.selectOrderItemDrugByOrderItemId(oi.getObjectId());
                    
                    String dose_all="";
                    if(theSpecialQueryOrderHistoryDrug != null)
                    {
                        if((theSpecialQueryOrderHistoryDrug.special).equals("0"))
                        {
                            dose_all = theSpecialQueryOrderHistoryDrug.instruction
                                    + " " + theSpecialQueryOrderHistoryDrug.dose
                                    + " " + theSpecialQueryOrderHistoryDrug.use_uom
                                    + " " + theSpecialQueryOrderHistoryDrug.frequency
                                    + " " + oi.qty
                                    + " " + theSpecialQueryOrderHistoryDrug.purch_uom;
                        }
                        else
                        {
                            dose_all = theSpecialQueryOrderHistoryDrug.special_text + " " + oi.qty + " " + theSpecialQueryOrderHistoryDrug.purch_uom;
                        }
                    }
                    tm.setValueAt(dose_all,i,5);
                }
            }
            else
            {
                tm= new TaBleModel(col_jTableListOrder,0);
            }
            jTableListOrder.setModel(tm);
            jTableListOrder.getColumnModel().getColumn(0).setPreferredWidth(58);
            jTableListOrder.getColumnModel().getColumn(0).setCellRenderer(vnRender);
            jTableListOrder.getColumnModel().getColumn(1).setPreferredWidth(90);
            jTableListOrder.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTableListOrder.getColumnModel().getColumn(3).setPreferredWidth(30);
            jTableListOrder.getColumnModel().getColumn(4).setPreferredWidth(50);
            jTableListOrder.getColumnModel().getColumn(5).setPreferredWidth(150);
        }
        
        /**
         *จะ show ผลของ Lab หรือ XRay ที่รายงานผลเรียบร้อยแล้ว
         *ข้อมูลเข้า: category_group,status ของตาราง OrderItem
         *ข้อมูลออก: ผลที่ได้จากการรายงาน
         */
        private void showResult()
        {
            int row = jTableListOrder.getSelectedRow();
            if(row == -1) return;
            theOrderItem = (OrderItem)vOrderHistory.get(row);
            if (theOrderItem.category_group.equals("2")
            && (theOrderItem.status.equals("4")
            || theOrderItem.status.equals("2")))
            {
                DialogShowLabResult theDialogShowLabResult = new DialogShowLabResult(this,theHC);
                theDialogShowLabResult.showDialog(theOrderItem);
            }
            else if (theOrderItem.category_group.equals("3") && (theOrderItem.status.equals("4") || theOrderItem.status.equals("2")))
            {
                PanelResultXray.showDialogResultXray(theHC.theUS.getJFrame(),theHC,theOrderItem);
            }
        }
        
        private void setDialog()
        {
            setSize(640,480);
            setTitle(Constant.getTextBundle("ประวัติการสั่งตรวจรักษา"));
            Toolkit thekit = getToolkit();
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);
        }
        
        public boolean showDialog(Patient p)
        {
            if(p == null)
            {
                theUS.setStatus("กรุณาเลือกผู้ป่วย", UpdateStatus.WARNING);
                return false;
            }
            thePatient = p;
            setVisible(true);
            updateOGOrderItemV(null);
            return closeDialog;
        }
        public boolean showDialog(Patient p,String datefrom,String dateto,String categoryGroupID)
        {
            if(p == null)
            {
                theUS.setStatus("กรุณาเลือกผู้ป่วย", UpdateStatus.WARNING);
                return false;
            }
            thePatient = p;
            setVisible(true);
            updateOGOrderItemV(null);
            setDate(datefrom, dateto);
            SetcategoryGroupByID(categoryGroupID);
            jButtonSearchActionPerformed(null);
            return closeDialog;
        }
        public void setLanguage(String msg)
        {
            GuiLang.setLanguage(this.jCheckBoxDateSearch);
            GuiLang.setLanguage(jLabel2);
            GuiLang.setLanguage(jLabel3);
            GuiLang.setLanguage(jCheckBoxAllGroup);
            GuiLang.setLanguage(jButtonSearch);
            GuiLang.setLanguage(jLabel8);
            GuiLang.setLanguage(col_jTableListOrder);
            GuiLang.setTextBundle(jPanel3);
            GuiLang.setTextBundle(jPanelSearch);
        }
        ////////////////////////////////////////////////////////////////////////////
        /**
         *เซตวันที่
         */
        private void setDate(String dateFrom,String dateTo)
        {
            if(dateFrom != null && !dateFrom.equals(""))
            {
                dateComboBoxDateFrom.setText(dateFrom);
            }
            if(dateTo != null && !dateTo.equals(""))
            {
                dateComboBoxDateTo.setText(dateTo);
            }
        }
        ///////////////////////////////////////////////////////////////////////////
        /**
         *เซตcategoryGroup
         */
        private void SetcategoryGroupByID(String categoryGroupID)
        {
            if(categoryGroupID != null && !categoryGroupID.equals(""))
            {
                jComboBoxGroup.setEnabled(true);
                jCheckBoxAllGroup.setSelected(true);
                Gutil.setGuiData(jComboBoxGroup, categoryGroupID);
            }
        }
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private com.hospital_os.utility.DateComboBox dateComboBoxDateFrom;
    private com.hospital_os.utility.DateComboBox dateComboBoxDateTo;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxAllGroup;
    private javax.swing.JCheckBox jCheckBoxDateSearch;
    private javax.swing.JComboBox jComboBoxGroup;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelSearch;
    protected javax.swing.JScrollPane jScrollPane1;
    protected com.hosv3.gui.component.HJTableSort jTableListOrder;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables
}
