/*
 * Panelwound.java
 *
 * Created on 14 ÁÔ¶Ø¹ÒÂ¹ 2549, 11:37 ¹.
 */
/**/
package com.hosv3.gui.dialog;
import com.hosv3.utility.Constant;
import com.hosv3.utility.GuiLang;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.Color;
import java.util.*;
import javax.swing.*;

import com.hosv3.control.HosControl;
import com.hosv3.utility.ImageCanvas;
import com.hosv3.utility.ImagePoint;
import com.hosv3.utility.connection.*;
import com.hospital_os.object.*;

import com.hosv3.object.HosObject;
import com.hosv3.utility.connection.ExecuteControlInf;
/**
 *
 * @author  henbe
 */
public class PanelWound extends javax.swing.JPanel implements ExecuteControlInf{
    HosControl theHC;
    DialogDetailWound theDialogDetailWound;
    Vector [] vPointOfPiture;
    ImagePoint theImagePoint;
    Wound theWound;
    Wound theWoundSelect;
    Accident theAccident;
    JDialog theJD;
    JFrame theJF;
    HosObject theHO;
    UpdateStatus theUS;
    String patient_id = "";
    String visit_id = "";
    
    String width;
    String longs;
    String deep;
    String wound_position;
    String describe;
        
    int CURRENT_WOUND_SELECT = -1;
    int imageCanvasSelected = 0;
    boolean accident_mode = true;

    private Vector theWoundV;
    /** Creates new form Panelwound */
    public PanelWound() {
        initComponents();
        initPicture();
        vPointOfPiture = new Vector[WoundPicture.WOUND_PICTURE.length];
        initDialog();
        this.imageCanvas1.setEC(this);
        this.imageCanvas2.setEC(this);
        //jToggleButtonNormal.setVisible(false);
    }
    /**
     * 
     * @param  HosControl
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
     public PanelWound(HosControl hc) {
        initComponents();
        initPicture();
        setControl(hc,hc.theUS);
        initDialog();
    }
     public void setControl(HosControl hc,UpdateStatus us){
        theHC = hc;
        theHO = hc.theHO;
        theUS = us;
     }
     public void setAccidentMode(boolean b){
         accident_mode = b;
     }
    /**
     * à«µ¤èÒ HosControl ãËé¡Ñº Panel
     * @param  HosControl
     * @return void
     * @author kingland
     * @date 15/06/2549
     */
    public void setHosControl(HosControl hc){
        theHC = hc;
    }
    public void setAccident(Accident ac){
        theAccident = ac;
    }
    public void setLanguage(String msg)
    {
        GuiLang.setTextBundle(jPanel16);
    }
    
     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelWound().setVisible(true);
            }
        });
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel16 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jToggleButtonNormal = new javax.swing.JToggleButton();
        jToggleButtonMark = new javax.swing.JToggleButton();
        jButtonDelete = new javax.swing.JButton();
        jPanelPicture = new javax.swing.JPanel();
        imageCanvas1 = new com.hosv3.utility.ImageCanvas();
        jPanelPicture1 = new javax.swing.JPanel();
        imageCanvas2 = new com.hosv3.utility.ImageCanvas();

        setLayout(new java.awt.GridBagLayout());

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jPanel28.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(jToggleButtonNormal);
        jToggleButtonNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/222.gif")));
        jToggleButtonNormal.setMaximumSize(new java.awt.Dimension(26, 26));
        jToggleButtonNormal.setMinimumSize(new java.awt.Dimension(26, 26));
        jToggleButtonNormal.setPreferredSize(new java.awt.Dimension(26, 26));
        jToggleButtonNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonNormalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel28.add(jToggleButtonNormal, gridBagConstraints);

        buttonGroup2.add(jToggleButtonMark);
        jToggleButtonMark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/111.gif")));
        jToggleButtonMark.setMaximumSize(new java.awt.Dimension(26, 26));
        jToggleButtonMark.setMinimumSize(new java.awt.Dimension(26, 26));
        jToggleButtonMark.setPreferredSize(new java.awt.Dimension(26, 26));
        jToggleButtonMark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMarkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        jPanel28.add(jToggleButtonMark, gridBagConstraints);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel28.add(jButtonDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        jPanel16.add(jPanel28, gridBagConstraints);

        jPanelPicture.setLayout(new java.awt.BorderLayout());

        jPanelPicture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelPicture.setMinimumSize(new java.awt.Dimension(231, 490));
        jPanelPicture.setPreferredSize(new java.awt.Dimension(231, 490));
        jPanelPicture.setRequestFocusEnabled(false);
        imageCanvas1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                imageCanvas1KeyReleased(evt);
            }
        });
        imageCanvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                imageCanvas1MouseReleased(evt);
            }
        });

        jPanelPicture.add(imageCanvas1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(jPanelPicture, gridBagConstraints);

        jPanelPicture1.setLayout(new java.awt.BorderLayout());

        jPanelPicture1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelPicture1.setMinimumSize(new java.awt.Dimension(231, 490));
        jPanelPicture1.setPreferredSize(new java.awt.Dimension(231, 490));
        jPanelPicture1.setRequestFocusEnabled(false);
        imageCanvas2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                imageCanvas2KeyReleased(evt);
            }
        });
        imageCanvas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                imageCanvas2MouseReleased(evt);
            }
        });

        jPanelPicture1.add(imageCanvas2, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(jPanelPicture1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel16, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void imageCanvas2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageCanvas2MouseReleased
        this.imageCanvasSelected = 2;
        String action;
        theDialogDetailWound = new DialogDetailWound(theJF,true);
        if(imageCanvas2.getMode() == ImageCanvas.INSERT_MODE)
        {
            theDialogDetailWound.showDialog();
            action = theDialogDetailWound.action();
            if(action.equals("save")){
                clearGui();
                int cpoint = imageCanvas2.countPoint();
                imageCanvas2.setPoint(imageCanvas2.getCurrentPoint().x,
                        imageCanvas2.getCurrentPoint().y, java.awt.Color.RED);                
                theImagePoint = imageCanvas2.getSelectImagePoint();
                if(cpoint >= 0 && theImagePoint != null){
    //                    theWound = (Wound)theImagePoint.getObject();
    //                    if(theWound == null)
                    theWound = new Wound();
                    getWound();
                    theImagePoint.setObject(theWound);
                    theWound.wound_type = String.valueOf(WoundType.OTHER);
                    theWound.visit_id = this.visit_id;
                    theHC.theVitalControl.saveWound(theWound, theUS);
                }
    //                theImagePoint = imageCanvas2.getSelectImagePoint();
    //                if(theImagePoint != null){
    //                    theWound = (Wound)theImagePoint.getObject();
    //                    if(theWound == null)theWound = new Wound();
    //                    imageCanvas2.repaint();   
    //                    clearGui();
    //                }
            }
        }
        else if(imageCanvas2.getMode() == ImageCanvas.SELECT_MODE)
        {
            int cpoint = imageCanvas2.countPoint();
            if(cpoint >= 1 && theImagePoint != null){
//                    Constant.println("#########cpoint#######");
                theWound = (Wound)theImagePoint.getObject();
                if(theWound == null )theWound = new Wound();
                getWound();
                theImagePoint.setObject(theWound);
            }
            theImagePoint = imageCanvas2.getSelectImagePoint();
            clearGui();
            setWound((Wound)theImagePoint.getObject());
            theDialogDetailWound.showDialog(CURRENT_WOUND_SELECT,width,longs,deep,wound_position,describe);
        }
        imageCanvas2.repaint();
        
        action = theDialogDetailWound.action();
        
        if(action.equals("save")){
            saveAction();
        }else if(action.equals("delete")){
            jButtonDeleteActionPerformed(null);
        }
        ////////////////////////////////////////////////////////////////////////
    }//GEN-LAST:event_imageCanvas2MouseReleased

    private void imageCanvas2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imageCanvas2KeyReleased
            if(evt.getKeyCode()==evt.VK_DELETE){
                if(this.imageCanvasSelected==2)
                    jButtonDeleteActionPerformed(null);
            }
    }//GEN-LAST:event_imageCanvas2KeyReleased

    private void imageCanvas1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imageCanvas1KeyReleased
        
        if(evt.getKeyCode()==evt.VK_DELETE){
            if(this.imageCanvasSelected==1)
                jButtonDeleteActionPerformed(null);
        }
    }//GEN-LAST:event_imageCanvas1KeyReleased

    private void imageCanvas1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageCanvas1MouseReleased
        this.imageCanvasSelected = 1;
        String action;
        theDialogDetailWound = new DialogDetailWound(theJF,true);
        if(imageCanvas1.getMode() == ImageCanvas.INSERT_MODE)
        {
            theDialogDetailWound.showDialog();
            action = theDialogDetailWound.action();
            if(action.equals("save")){
                clearGui();
                int cpoint = imageCanvas1.countPoint();
                imageCanvas1.setPoint(imageCanvas1.getCurrentPoint().x,
                        imageCanvas1.getCurrentPoint().y, java.awt.Color.RED);                
                theImagePoint = imageCanvas1.getSelectImagePoint();
                if(cpoint >= 0 && theImagePoint != null){
    //                    theWound = (Wound)theImagePoint.getObject();
    //                    if(theWound == null)
                    theWound = new Wound();
                    getWound();
                    theImagePoint.setObject(theWound);
                    theWound.wound_type = String.valueOf(WoundType.OTHER);
                    theWound.visit_id = this.visit_id;
                    theHC.theVitalControl.saveWound(theWound, theUS);
                }
//                theImagePoint = imageCanvas1.getSelectImagePoint();
//                if(theImagePoint != null){
//                    theWound = (Wound)theImagePoint.getObject();
//                    if(theWound == null)theWound = new Wound();
//                    imageCanvas1.repaint();   
//                    clearGui();
//                }
            }
        }
        else if(imageCanvas1.getMode() == ImageCanvas.SELECT_MODE)
        {
            int cpoint = imageCanvas1.countPoint();
            if(cpoint >= 1 && theImagePoint != null){
//                    Constant.println("#########cpoint#######");
                theWound = (Wound)theImagePoint.getObject();
                if(theWound == null )theWound = new Wound();
                getWound();
                theImagePoint.setObject(theWound);
            }
            theImagePoint = imageCanvas1.getSelectImagePoint();
            clearGui();
            setWound((Wound)theImagePoint.getObject());
            theDialogDetailWound.showDialog(CURRENT_WOUND_SELECT,width,longs,deep,wound_position,describe);
        }
        imageCanvas1.repaint();
        
        action = theDialogDetailWound.action();
        
        if(action.equals("save")){
            saveAction();
        }else if(action.equals("delete")){
            jButtonDeleteActionPerformed(null);
        }
        ////////////////////////////////////////////////////////////////////////
    }//GEN-LAST:event_imageCanvas1MouseReleased
    
    private void saveAction(){
            if(accident_mode && theAccident==null){
                setStatus("¡ÃØ³ÒºÑ¹·Ö¡¢éÍÁÙÅÍØºÑµÔàËµØ ËÃ×ÍàÅ×Í¡ÃÒÂ¡ÒÃÍØºÑµÔàËµØ¡èÍ¹·Õè¨Ð·Ó¡ÒÃºÑ¹·Ö¡",UpdateStatus.WARNING);
                return;
            }
            if(theImagePoint==null){
                setStatus("¡ÃØ³ÒàÅ×Í¡¨Ø´ã¹ÃèÒ§¡ÒÂ¡èÍ¹·Õè¨Ð·Ó¡ÒÃºÑ¹·Ö¡",UpdateStatus.WARNING);
                return;
            }
            getWoundDetail();
            //ºÑ¹·Ö¡·Ø¡¨Ø´·Õè·Ó¡ÒÃ mark àÍÒäÇéàÅÂ
            theImagePoint.setObject(theWound);
            if(this.imageCanvasSelected==1){
                Vector v = imageCanvas1.getAllPoint();        
                theHC.theVitalControl.saveWound(v,theUS);
            }else if(this.imageCanvasSelected==2){
                Vector v = imageCanvas2.getAllPoint();        
                theHC.theVitalControl.saveWound(v,theUS);
            }
    }
    

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        theWound = (Wound)theImagePoint.getObject();
        int result = theHC.theVitalControl.deleteWound(theWound,theUS);
        if(result > 0){
            theWound = null;
            if(this.imageCanvasSelected==1){
                imageCanvas1.removePoint(theImagePoint);
                imageCanvas1.repaint();
            }else if(this.imageCanvasSelected==2){
                imageCanvas2.removePoint(theImagePoint);
                imageCanvas2.repaint();
            }
            clearGui();
            setEnabledDescription(false);
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jToggleButtonNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonNormalActionPerformed
        imageCanvas1.setMode(ImageCanvas.NORMAL_MODE);
        imageCanvas2.setMode(ImageCanvas.NORMAL_MODE);
    }//GEN-LAST:event_jToggleButtonNormalActionPerformed

    private void jToggleButtonMarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMarkActionPerformed
        imageCanvas1.setMode(ImageCanvas.INSERT_MODE);
        imageCanvas2.setMode(ImageCanvas.INSERT_MODE);
    }//GEN-LAST:event_jToggleButtonMarkActionPerformed
    /**
     * ºÑ¹·Ö¡¢éÍÁÙÅ 
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void seveWound()
    {
        
    }
    /**
     * à«µ Enabled à©¾ÒÐã¹ÊèÇ¹ÃÒÂÅÐàÍÕÂ´
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
     public void setEnabledDescription(boolean boo)
     {
//         Constant.println("setEnabledDescription"+boo);
//        jTextFieldOtherWidth.setEnabled(boo);
//        jTextFieldOtherLong.setEnabled(boo);
//        jTextFieldOtherDeep.setEnabled(boo);
//        jTextFieldOtherPosition.setEnabled(boo);
     }
    /**
     * à«µ Enabled à©¾ÒÐã¹ÊèÇ¹·ÕèµéÍ§¡ÒÃ
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void setEnabled(int woundtype)
    {
//        jTextFieldOtherDescribe.setEnabled(false);
//        jTextFieldOtherWidth.setEnabled(false);
//        jTextFieldOtherLong.setEnabled(false);
//        jTextFieldOtherDeep.setEnabled(false);
//        jTextFieldOtherPosition.setEnabled(false);   
    }
    /**
     * ¹Ó¢éÍÁÙÅä»áÊ´§·Õè Gui
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void setWound(Wound wound)
    {
        theWoundSelect = wound;
        clearGui();
        setEnabledDescription(false);
        if(wound == null || wound.wound_type == null || "".equals(wound.wound_type)){
            CURRENT_WOUND_SELECT = -1;
            return;
        }  
        this.CURRENT_WOUND_SELECT = Integer.parseInt(wound.wound_type);
        this.width = wound.width;
        this.longs = wound.longs;
        this.deep = wound.deep;
        this.wound_position = wound.wound_position;
        this.describe = wound.describe;
        
        Vector v = new Vector();
        if(this.imageCanvasSelected==1){
            v = imageCanvas1.getAllPoint();
        }else if(this.imageCanvasSelected==2){
            v = imageCanvas2.getAllPoint();
        }
        for(int i=0,size=v.size();i<size;i++){
            ImagePoint ip = (ImagePoint)v.get(i);
            //Add by neung 18/07/49
            Wound wnd = (Wound)ip.getObject();
            if(wnd != null && wnd.getObjectId() != null)
                ip.setColor(Color.GREEN);
            else
                ip.setColor(Color.RED);
            //End Add
        }
         if(this.imageCanvasSelected==1){
            theImagePoint = imageCanvas1.getSelectImagePoint();
            theImagePoint.setColor(Color.BLUE);        
            imageCanvas1.repaint();
        }else if(this.imageCanvasSelected==2){
            theImagePoint = imageCanvas2.getSelectImagePoint();
            theImagePoint.setColor(Color.BLUE);        
            imageCanvas2.repaint();
        }
    }
    public Vector getWoundV()
    {
        return this.theWoundV;
    }
    /**
     * ¹Ó¢éÍÁÙÅ¨Ò¡Guiä»ã¹Object
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public Wound getWound()
    {
        theWound.patient_id = patient_id;
        theWound.visit_id = visit_id;
        if(this.imageCanvasSelected==1){
            theWound.picture = String.valueOf(imageCanvas1.getImageID());
        }else if(this.imageCanvasSelected==2){
            theWound.picture = String.valueOf(imageCanvas2.getImageID());
        }
        theWound.position_x = String.valueOf(theImagePoint.x);
        theWound.position_y = String.valueOf(theImagePoint.y);
        return theWound;
    }
    
    public Wound getWoundDetail()
    {
        theWound.wound_type = String.valueOf(theDialogDetailWound.CURRENT_WOUND_SELECT);
        theWound.width = theDialogDetailWound.width;
        theWound.longs = theDialogDetailWound.longs;
        theWound.deep = theDialogDetailWound.deep;
        theWound.wound_position = theDialogDetailWound.wound_position;
        theWound.describe = theDialogDetailWound.describe;
        return theWound;
    }
        
    /**
     * à¤ÅÕÂÃì¢éÍÁÙÅã¹ Gui
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void clearGui()
    {        
        CURRENT_WOUND_SELECT = -1;
//        jCheckBoxAbrasion.setSelected(false);
//        jCheckBoxContussion.setSelected(false);
//        jCheckBoxCutwound.setSelected(false);
//        jCheckBoxDislocation.setSelected(false);
//        jCheckBoxFracture.setSelected(false);
//        jCheckBoxLaceration.setSelected(false);
//        jCheckBoxSwelling.setSelected(false);
//        jTextFieldAbrasionWidth.setText("");
//        jTextFieldAbrasionLong.setText("");
//        jTextFieldAbrasionDeep.setText("");
//        jTextFieldAbrasionPosition.setText("");
//        jTextFieldContussionWidth.setText("");
//        jTextFieldContussionLong.setText("");
//        jTextFieldContussionDeep.setText("");
//        jTextFieldContussionPosition.setText("");
//        jTextFieldCutwoundWidth.setText("");
//        jTextFieldCutwoundLong.setText("");
//        jTextFieldCutwoundDeep.setText("");
//        jTextFieldCutwoundPosition.setText("");
//        jTextFieldDislocationPosition.setText("");
//        jTextFieldFracturePosition.setText("");
//        jTextFieldLacerationWidth.setText("");
//        jTextFieldLacerationLong.setText("");
//        jTextFieldLacerationDeep.setText("");
//        jTextFieldLacerationPosition.setText("");
//        jTextFieldSwellingWidth.setText("");
//        jTextFieldOtherDescribe.setText("");
//        jTextFieldSwellingDeep.setText("");
//        jTextFieldSwellingLong.setText("");
//        jTextFieldSwellingWidth.setText("");
//        jTextFieldSwellingPosition.setText("");
    }
    /**
     * ÊÃéÒ§ Dialog
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */ 
    private void initDialog()
    {
        if(theHC != null)
        {
            theJD = new JDialog(theHC.theUS.getJFrame(),true);
            theJD.setTitle("");
            theJD.getContentPane().add(this,java.awt.BorderLayout.CENTER);  
            //theJD.setSize(800,600);
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            theJD.setLocation((screenSize.width-theJD.getSize().width)/2
                    , (screenSize.height-theJD.getSize().height)/2);
        }
    }
    /**
     * à¡çº¨Ø´·ÕèÍÂÙèã¹ÃÙ»áµèÅÐ´éÒ¹äÇé
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */ 
    public void storePoint()
    {
//        switch(imageCanvas1.getImageID())
//        {
//            case WoundPicture.FRONT_PICTURE:{                
                if(imageCanvas1.getAllPoint() != null && imageCanvas1.getAllPoint().size() > 0)
                {
                    vPointOfPiture[WoundPicture.FRONT_PICTURE] = imageCanvas1.getAllPoint();
                }
//                break;
//            }
//            case WoundPicture.BACK_PICTURE:{                
//                if(imageCanvas1.getAllPoint() != null && imageCanvas1.getAllPoint().size() > 0)
                if(imageCanvas2.getAllPoint() != null && imageCanvas2.getAllPoint().size() > 0)
                {
                    vPointOfPiture[WoundPicture.BACK_PICTURE] = imageCanvas2.getAllPoint();
                }
//                break;
//            }
//        }
    }
    /**
     * à«µÊÕ¢Í§ÃÙ»
     * @param  ImagPoint = ¤ÅÒÊ·Õèà¡çº¨Ø´¢Í§ÃÙ» Color = ÊÕ
     * @return void
     * @author kingland
     * @date 15/06/2549
     */ 
    public void setColorImagPoint(ImagePoint img,Color color)
    {
        if(img!=null)
        {
            img.setColor(color);
            if(this.imageCanvasSelected==1){
                imageCanvas1.repaint();
            }else if(this.imageCanvasSelected==2){
                imageCanvas2.repaint();
            }
        }
        
    }
    /**
     * à«µÊÕ¢Í§ÃÙ»
     * @param  vImg = àÇ¤àµÍÃì·Õèà¡çº¨Ø´¢Í§ÃÙ» Color = ÊÕ
     * @return void
     * @author kingland
     * @date 15/06/2549
     */ 
     public void setColorImagPoint(Vector vImg,Color color){
         for(int i =0,size=vImg.size();vImg!= null && i<size;i++){
             ImagePoint img = (ImagePoint)vImg.get(i);
             Wound wound = (Wound)img.getObject();
             if(wound != null &&!"".equals(wound.getObjectId()) )
             {
                img.setColor(color);
             }
         }
         if(this.imageCanvasSelected==1){
             imageCanvas1.repaint();
         }else if(this.imageCanvasSelected==2){
             imageCanvas2.repaint();
         }
     }
    /**
     * à«µ Enable ·Ñé§ Panel
     * @param  boolean true = ãËé·Ó§Ò¹ä´é false = äÁèÊÒÁÒÃ¶·Ó§Ò¹ä´é
     * @return void
     * @author kingland
     * @date 15/06/2549
     */
    public void setEnabled(boolean boo)
    {
        jToggleButtonMark.setEnabled(boo);
        jToggleButtonNormal.setEnabled(boo);
    }
    /**
     *  âËÅ´ÃÙ»
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    private void initPicture()
    {
        Toolkit tk = Toolkit.getDefaultToolkit();        
        imageCanvas1.addImage(tk.createImage(getClass().getResource(WoundPicture.WOUND_PICTURE[WoundPicture.FRONT_PICTURE])), 0); 
//        imageCanvas1.addImage(tk.createImage(getClass().getResource(WoundPicture.WOUND_PICTURE[WoundPicture.BACK_PICTURE])), 1);
        imageCanvas2.addImage(tk.createImage(getClass().getResource(WoundPicture.WOUND_PICTURE[WoundPicture.BACK_PICTURE])), 1); 
        
        imageCanvas1.setPointWidth(3);
        imageCanvas1.loadImage(0);    
                
        imageCanvas2.setPointWidth(3);
        imageCanvas2.loadImage(1); 
    }
    /**
     * ÍèÒ¹ÃÙ»¨Ò¡°Ò¹¢éÍÁÙÅ
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void listWound()
    {
        Constant.println("public void listWound()");
        listWound(visit_id);
        clearGui();
    }
//    public void clearWound()
//    {
//        jTextFieldAbrasionWidth.setText("");
//        jTextFieldAbrasionLong.setText("");
//        jTextFieldAbrasionDeep.setText("");
//        jTextFieldAbrasionPosition.setText("");
//        jTextFieldContussionWidth.setText("");
//        jTextFieldContussionLong.setText("");
//        jTextFieldContussionDeep.setText("");
//        jTextFieldContussionPosition.setText("");
//        jTextFieldCutwoundWidth.setText("");
//        jTextFieldCutwoundLong.setText("");
//        jTextFieldCutwoundDeep.setText("");
//        jTextFieldCutwoundPosition.setText("");
//        jTextFieldDislocationPosition.setText("");
//        jTextFieldFracturePosition.setText("");
//        jTextFieldLacerationWidth.setText("");
//        jTextFieldLacerationLong.setText("");
//        jTextFieldLacerationDeep.setText("");
//        jTextFieldLacerationPosition.setText("");
//        jTextFieldOtherDescribe.setText("");
//        jTextFieldSwellingWidth.setText("");
//        jTextFieldSwellingLong.setText("");
//        jTextFieldSwellingDeep.setText("");
//        jTextFieldSwellingPosition.setText("");
//    }
    public void listWound(String visit_id)
    {
        Constant.println("public void listWound(String visit_id)");
        Vector v = theHC.theVitalControl.listWoundByVisitID(visit_id);
        setWoundV(v);
    }
    public void setWoundV(Vector v)
    {
        theWoundV = v;
        Vector vBack = new Vector();
        Vector vFront = new Vector();
        for(int i=0,size=v.size();v!=null&&i<size;i++){
            Wound wound = (Wound)v.get(i);
            if(Integer.parseInt(wound.picture) == WoundPicture.FRONT_PICTURE){
                ImagePoint imp = new ImagePoint(Integer.parseInt(wound.position_x), Integer.parseInt(wound.position_y), Color.GREEN);
                imp.setObject(wound);
                vFront.add(imp);
            }
            else if(Integer.parseInt(wound.picture) == WoundPicture.BACK_PICTURE){
                ImagePoint imp = new ImagePoint(Integer.parseInt(wound.position_x), Integer.parseInt(wound.position_y), Color.GREEN);
                imp.setObject(wound);
                vBack.add(imp);
            }
        }
        vPointOfPiture[WoundPicture.FRONT_PICTURE] = vFront;
        vPointOfPiture[WoundPicture.BACK_PICTURE] = vBack;
        
        imageCanvas1.setPoint(vPointOfPiture[WoundPicture.FRONT_PICTURE]);
        imageCanvas1.loadImage(WoundPicture.FRONT_PICTURE);
        imageCanvas1.setMode(ImageCanvas.NORMAL_MODE);
        
        imageCanvas2.setPoint(vPointOfPiture[WoundPicture.BACK_PICTURE]);
        imageCanvas2.loadImage(WoundPicture.BACK_PICTURE);
        imageCanvas2.setMode(ImageCanvas.NORMAL_MODE);
        
//        jToggleButtonFont.setSelected(true);
        jToggleButtonNormal.setSelected(true);
    }
    /**
     * áÊ´§ Dialog
     * @param  -
     * @return -
     * @author kingland
     * @date 15/06/2549
     */
    public void showDialog(HosControl hc)
    {
        theHC = hc;
        theHO = hc.theHO;
        clearGui();//à¤ÅÕÂÃì Gui 
        listWound();        
        
        imageCanvas1.setPoint(vPointOfPiture[WoundPicture.FRONT_PICTURE]);
        imageCanvas1.loadImage(WoundPicture.FRONT_PICTURE);
        imageCanvas1.setMode(ImageCanvas.NORMAL_MODE);
        
        imageCanvas2.setPoint(vPointOfPiture[WoundPicture.BACK_PICTURE]);
        imageCanvas2.loadImage(WoundPicture.BACK_PICTURE);
        imageCanvas2.setMode(ImageCanvas.NORMAL_MODE);
        
//        jToggleButtonFont.setSelected(true);
        jToggleButtonNormal.setSelected(true);
        setEnabledDescription(false);
        theJD.setVisible(true);        
    }
    public void setVisitId(String pid ,String vid){
        this.visit_id = vid;
        this.patient_id = pid;
        listWound(visit_id);
        setEnabledDescription(false);
    }
    /**
     *
     * @param
     * @return
     * @author kingland
     * @date 18/07/2549
     */
    public boolean confirmBox(String str, int status) {
        return  false;
    }
    /**
     *
     * @param
     * @return
     * @author kingland
     * @date 18/07/2549
     */
    public JFrame getJFrame() {
        return null;
    }
    /**
     * à«µÊ¶Ò¹Ðâ»Ãá¡ÃÁ
     * @param str = ¢éÍ¤ÇÒÁ status = ÊÕ¢Í§¾×é¹ËÅÑ§
     * @return -
     * @author kingland
     * @date 18/07/2549
     */
    public void setStatus(String str, int status) {   
        Constant.println("¤Óàµ×Í¹");
        Constant.println(str);
//        jLabelStatus.setText(" " + str);
//        Constant.println("----SetStatusWound---- " + str);
//        theUS.setStatus(str, status);
//        ThreadStatus theTT = new ThreadStatus(theHC.theUS.getJFrame(),this.jLabelStatus);
//        if(status == UpdateStatus.WARNING){
//            jLabelStatus.setBackground(Color.YELLOW);
//        }
//        if(status == UpdateStatus.COMPLETE){
//            jLabelStatus.setBackground(Color.GREEN);
//        }
//        if(status == UpdateStatus.ERROR){
//            jLabelStatus.setBackground(Color.RED);
//        }
//        theTT.start();
    }
    public void setShowImage(boolean b){
        this.imageCanvas1.setVisible(b);
        this.imageCanvas2.setVisible(b);
    }

    public boolean execute(Object str) {
        ImagePoint ip = (ImagePoint)str;
        if(ip!=null)
        {
            setWound((Wound)ip.getObject());
            return true;
        }
        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private com.hosv3.utility.ImageCanvas imageCanvas1;
    private com.hosv3.utility.ImageCanvas imageCanvas2;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanelPicture;
    private javax.swing.JPanel jPanelPicture1;
    private javax.swing.JToggleButton jToggleButtonMark;
    private javax.swing.JToggleButton jToggleButtonNormal;
    // End of variables declaration//GEN-END:variables
   

}
