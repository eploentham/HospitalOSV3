/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DialogListNotifyNote.java
 *
 * Created on 8 ต.ค. 2553, 0:19:50
 */
package com.hosv3.gui.dialog;

import com.hospital_os.object.NotifyNote;
import com.hosv3.control.HosControl;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Somprasong
 */
public class DialogListNotifyNote extends javax.swing.JDialog {

    private HosControl theHC;
    private NoteTableModel model = new NoteTableModel();
    private String hn;
    private HosDialog theHD;
    private boolean readOnly;
    private String visitId;

    /** Creates new form DialogListNotifyNote */
    public DialogListNotifyNote(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        table.setModel(model);
        TableColumnModel cm = table.getColumnModel();

        cm.getColumn(0).setCellRenderer(new DateCellRenderer(
                "yyyy-MM-dd,HH:mm:ss",
                new Locale("th", "TH"),
                "dd-MMM-yyyy",
                new Locale("th", "TH")));

        cm.getColumn(0).setPreferredWidth(75);
        cm.getColumn(1).setPreferredWidth(105);
        cm.getColumn(2).setPreferredWidth(300);
        cm.getColumn(2).setCellRenderer(new SubjectCellRenderer());
        cm.getColumn(3).setCellRenderer(new ImageCellRenderer(ImageCellRenderer.TYPE_1));
        cm.getColumn(3).setPreferredWidth(10);
        cm.getColumn(4).setCellRenderer(new ImageCellRenderer(ImageCellRenderer.TYPE_2));
        cm.getColumn(4).setPreferredWidth(10);


        jScrollPane1.setViewportView(table);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }

    public void setControl(HosControl theHC, HosDialog theHD) {
        this.theHC = theHC;
        this.theHD = theHD;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnAddNote = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "รายการบันทึกข้อความ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        btnAddNote.setFont(btnAddNote.getFont().deriveFont(btnAddNote.getFont().getStyle() | java.awt.Font.BOLD, btnAddNote.getFont().getSize()+2));
        btnAddNote.setText("+");
        btnAddNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNoteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(btnAddNote, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/refer_export.gif"))); // NOI18N
        jLabel1.setText("= แก้ไข");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/refer_cancel.gif"))); // NOI18N
        jLabel2.setText("= ลบ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jPanel1, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(600, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 150));

        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ข้อความ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextPane1.setEditable(false);
        jTextPane1.setMinimumSize(new java.awt.Dimension(600, 200));
        jTextPane1.setPreferredSize(new java.awt.Dimension(600, 200));
        jScrollPane2.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNoteActionPerformed
        theHD.showDialogNewNotifyNote("");
        this.refreshData();
    }//GEN-LAST:event_btnAddNoteActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        selectNoteAction(evt, table.getSelectedRow(), table.getSelectedColumn());
    }//GEN-LAST:event_tableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNote;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void openDialog(String hn) {
        readOnly = false;
        this.hn = hn;
        this.visitId = "";
        refreshData();
        this.setTitle("บันทึกข้อความ");
        this.pack();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    public void openDialog(String hn, String visitId) {
        readOnly = true;
        this.hn = hn;
        this.visitId = visitId;
        refreshData();
        if (model.getData().size() > 0) {
            this.setTitle("เตือนบันทึกข้อความ");
            this.pack();
            this.setResizable(false);
            this.setLocationRelativeTo(null);
            this.setVisible(true);
        } else {
            this.dispose();
        }
    }

    private void clearGui() {
        model.getData().clear();
        model.fireTableDataChanged();
        jTextPane1.setText("");
        btnAddNote.setEnabled(!readOnly);
    }

    private void refreshData() {
        this.clearGui();
        if (readOnly) {
            List<NotifyNote> list = theHC.theNotifyNoteControl.listNotifyNoteViewOnly(hn, visitId);
            for (NotifyNote notifyNote : list) {
                updateTableModel(notifyNote);
            }
        } else {
            List<NotifyNote> list = theHC.theNotifyNoteControl.listNotifyNote2(hn);
            for (NotifyNote notifyNote : list) {
                updateTableModel(notifyNote);
            }
        }
        if (table.getRowCount() > 0) {
            table.setRowSelectionInterval(0, 0);
            this.selectNoteAction(null, 0, 0);
        }
    }

    private void updateTableModel(NotifyNote notifyNote) {
        model.getData().add(notifyNote);
        model.fireTableDataChanged();
    }

    private void selectNoteAction(MouseEvent evt, int selectedRow, int selectedColumn) {
        String detail = (String) model.getValueAt(selectedRow, 5);
        String type = (String) model.getValueAt(selectedRow, 6);
        jTextPane1.setText(detail);
        if (type.equals("1")) {
            jTextPane1.setForeground(Color.red);
        } else {
            jTextPane1.setForeground(Color.blue);
        }
        if (!readOnly) {
            if (selectedColumn == 3) {
                String rec_staff = (String) model.getValueAt(selectedRow, selectedColumn);
                if (rec_staff.equals(theHC.theHO.theEmployee.getObjectId())) {
                    theHD.showDialogNewNotifyNote((String) table.getModel().getValueAt(selectedRow, 10));
                    this.refreshData();
                }
            } else if (selectedColumn == 4) {
                String rec_staff = (String) model.getValueAt(selectedRow, selectedColumn);
                if (rec_staff.equals(theHC.theHO.theEmployee.getObjectId())) {
                    int showConfirmDialog = JOptionPane.showConfirmDialog(this, "ต้องการลบบันทึกข้อความนี้ใช่ หรือไม่", "ยืนยันการลบ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (showConfirmDialog == JOptionPane.OK_OPTION) {
                        theHC.theNotifyNoteControl.deleteNotifyNote(model.getRow(selectedRow));
                        this.refreshData();
                    }
                }
            }
        }
    }

    private static class NoteTableModel extends AbstractTableModel {

        private String[] columns = {
            "วันที่บันทึก",
            "จาก",
            "เรื่อง",
            "",
            ""};
        @SuppressWarnings("UseOfObsoleteCollectionType")
        private Vector<NotifyNote> data = new Vector<NotifyNote>();

        public NotifyNote getRow(int row) {
            return data.get(row);
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            NotifyNote object = data.get(row);

            switch (col) {
                case 0:
                    return object.rec_datetime;
                case 1:
                    return object.noter;
                case 2:
                    return object.notify_type_id + object.note_subject;
                case 3:
                    return object.rec_staff;
                case 4:
                    return object.rec_staff;
                case 5:
                    return object.note_detail;
                case 6:
                    return object.notify_type_id;
                case 7:
                    return object.notify_count;
                case 8:
                    return object.visit_id_rec;
                case 9:
                    return object.visit_id_last_view;
                case 10:
                    return object.getObjectId();
                case 11:
                    return object.note_subject;
                default:
                    return "";
            }
        }

        @SuppressWarnings("UseOfObsoleteCollectionType")
        public Vector<NotifyNote> getData() {
            return data;
        }
    }

    private static class DateCellRenderer extends JLabel implements TableCellRenderer {

        private String orgFormat = "yyyy-MM-dd,HH:mm:ss";
        private Locale orgLocale = new Locale("th", "TH");
        private String toFormat = "dd MMM yyyy";
        private Locale toLocale = new Locale("th", "TH");

        /** Creates new StringCellRenderer */
        public DateCellRenderer(String orgFormat, Locale orgLocale, String toFormat, Locale toLocale) {
            this.orgFormat = orgFormat;
            this.orgLocale = orgLocale;
            this.toFormat = toFormat;
            this.toLocale = toLocale;
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.CENTER);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setFont(table.getFont());
            if (value instanceof String) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat(orgFormat, orgLocale);
                    Date date = sdf.parse(String.valueOf(value));
                    sdf = new SimpleDateFormat(toFormat, toLocale);
                    String strDate = sdf.format(date);
                    setText(strDate);
                    setToolTipText(strDate);
                } catch (ParseException ex) {
                    setText(String.valueOf(value));
                    setToolTipText(String.valueOf(value));
                }
            }


            if (isSelected) {
                this.setBackground(table.getSelectionBackground());
                this.setForeground(table.getSelectionForeground());
            } else {
                this.setBackground(table.getBackground());
                this.setForeground(table.getForeground());
            }
            return this;
        }
    }

    private static class ImageCellRenderer extends JLabel implements TableCellRenderer {

        public final static int TYPE_1 = 1;
        public final static int TYPE_2 = 2;
        private final int type;

        /** Creates new StringCellRenderer */
        public ImageCellRenderer(int type) {
            this.type = type;
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.CENTER);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setFont(table.getFont());
            if (value instanceof String) {

                switch (type) {
                    case TYPE_1:
                        setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/refer_export.gif")));
                        setToolTipText("แก้ไข");
                        this.setForeground(table.getForeground());
                        break;
                    case TYPE_2:
                        setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/refer_cancel.gif")));
                        setToolTipText("ลบ");
                        this.setForeground(table.getForeground());
                        break;
                    default:
                        setText(String.valueOf(value));
                        break;
                }
            }

            if (isSelected) {
                this.setBackground(table.getSelectionBackground());
                this.setForeground(table.getSelectionForeground());
            } else {
                this.setBackground(table.getBackground());
            }
            return this;
        }
    }

    private static class SubjectCellRenderer extends JLabel implements TableCellRenderer {

        /** Creates new StringCellRenderer */
        public SubjectCellRenderer() {
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.LEFT);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setFont(table.getFont());
            String type = "2";
            if (value instanceof String) {
                String string = value.toString();
                type = string.substring(0, 1);
                String subject = string.substring(1);
                setText(subject);
                setToolTipText(subject);
            }

            if (isSelected) {
                this.setBackground(table.getSelectionBackground());
                this.setForeground(table.getSelectionForeground());
            } else {
                this.setBackground(table.getBackground());
                if (type.equals("1")) {
                    this.setForeground(Color.red);
                } else {
                    this.setForeground(Color.blue);
                }
            }
            return this;
        }
    }
}
