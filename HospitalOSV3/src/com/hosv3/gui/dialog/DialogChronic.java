
/*
 * DialogAdmit.java
 *
 * Created on 8 พฤศจิกายน 2546, 14:14 น.
 */
package com.hosv3.gui.dialog;

import java.util.*;
import java.awt.*;
import javax.swing.*;

import com.hosv3.control.*;
import com.hosv3.utility.connection.*;
import com.hosv3.subject.*;
import com.hosv3.utility.*;
import com.hosv3.object.*;
import com.hosv3.usecase.transaction.*;

import com.hospital_os.object.*;
import com.hosv3.utility.Constant;
import com.hospital_os.object.specialQuery.*; 
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.CellRendererHos;

/**
 *
 * @author  tong
 */
public class DialogChronic extends javax.swing.JFrame
implements ManagePrintResp,UpdateStatus {
	
	public static final long  serialVersionUID = 0;
    HosObject theHO;
    HosControl theHC;
    HosSubject theHS;
    public boolean actionCommand = false;
    LookupControl theLookupControl;
    VisitControl theVisitControl;
    DiagnosisControl theDiagnosisControl;
    PatientControl thePatientControl;
    Visit theVisit;
    Chronic theChronic;
    Vector vChronic;
    Patient thePatient;
    
    Vector vListChronic;
    int row=0;
    public static boolean closeDialog = false;
    String[] col_ListChronic = {"HN","VN","ICD","วันที่เริ่มป่วย"};
    String[] col_ListChronicReport = {"HN","Fname","Lname","ICD_Code","SickDate","Status","ADDRESS"}; 
    CellRendererHos hnRender = new CellRendererHos(CellRendererHos.HN);
    CellRendererHos vnRender = new CellRendererHos(CellRendererHos.VN);
    /** Creates new form DialogAdmit */
    public DialogChronic(HosControl hc,UpdateStatus us) 
    {
    //   super(us.getJFrame(), modal);
        theHC = hc;
        theHO = theHC.theHO;
        theHS = theHC.theHS;
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/hospital_os/images/chronic.gif")));
        theLookupControl = hc.theLookupControl;
        theVisitControl = hc.theVisitControl;
        theDiagnosisControl = hc.theDiagnosisControl;
        thePatientControl = hc.thePatientControl;
        hnRender = new CellRendererHos(CellRendererHos.HN,theLookupControl.getSequenceDataHN().pattern);
        vnRender = new CellRendererHos(CellRendererHos.VN,theLookupControl.getSequenceDataVN().pattern);
        theHS.thePrintSubject.attachManagePrint(this);
        initComponents();
        this.jTableListChronic.setGuiMode(true);
        this.jTableListChronic1.setGuiMode(true);
        setLanguage("");    
        ComboboxModel.initComboBox(jComboBoxSearchStatusChronic, theLookupControl.listTypeDish());    
        ComboboxModel.initComboBox(jComboBoxTypeDish, theLookupControl.listTypeDish()); 
//        setDataAll();
        setEnable();
        dateComboBoxFrom.setEditable(true);
        dateComboBoxTo.setEditable(true);
        dateComboBoxDateDish.setEditable(true);
        dateComboBoxSickDate.setEditable(true);
        jTextFieldDateUpdate.setEnabled(false);
        //jButtonDel.setVisible(false);
        setDialog();   
    }
    
    private void setDataAll()
    {  
        dateComboBoxSickDate.setText("");
        jLabelHn.setText("");
        jLabelIcdCode.setText("");
        jTextAreaDetail.setText("");
        jTextFieldDateUpdate.setText("");   
        hNTextFieldSearchHn.setText("");
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        dateComboBoxFrom = new com.hospital_os.utility.DateComboBox();
        dateComboBoxTo = new com.hospital_os.utility.DateComboBox();
        jPanel15 = new javax.swing.JPanel();
        jButtonSearch = new javax.swing.JButton();
        hNTextFieldSearchHn = new com.hospital_os.utility.HNTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListChronic1 = new com.hosv3.gui.component.HJTableSort();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabelHn = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelIcdCode = new javax.swing.JLabel();
        dateComboBoxSickDate = new com.hospital_os.utility.DateComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabelPatientStatus = new javax.swing.JLabel();
        jLabelCaseInfection = new javax.swing.JLabel();
        jLabelDateDish = new javax.swing.JLabel();
        jComboBoxTypeDish = new javax.swing.JComboBox();
        dateComboBoxDateDish = new com.hospital_os.utility.DateComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDateUpdate = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDetail = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButtonDel = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jComboBoxSearchStatusChronic = new javax.swing.JComboBox();
        jCheckBoxSearch = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        dateComboBoxSearchStart = new com.hospital_os.utility.DateComboBox();
        dateComboBoxSearchEnd = new com.hospital_os.utility.DateComboBox();
        jButtonSearchListChronic = new javax.swing.JButton();
        jButtonPrintListChronic = new javax.swing.JButton();
        jLabelDateSearchChronic = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonPreviewPrint = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPaneShowListChronic = new javax.swing.JScrollPane();
        jTableListChronic = new com.hosv3.gui.component.HJTableSort();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(570, 300));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(570, 300));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(570, 300));

        jPanel1.setMaximumSize(new java.awt.Dimension(570, 300));
        jPanel1.setMinimumSize(new java.awt.Dimension(570, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(570, 300));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Diag_Chronic_Search"));
        jPanel4.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel4.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setRequestFocusEnabled(false);
        jPanel5.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(dateComboBoxFrom, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 3);
        jPanel5.add(dateComboBoxTo, gridBagConstraints);

        jPanel15.setLayout(new java.awt.GridBagLayout());

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel15.add(jButtonSearch, gridBagConstraints);

        hNTextFieldSearchHn.setColumns(9);
        hNTextFieldSearchHn.setMinimumSize(new java.awt.Dimension(70, 21));
        hNTextFieldSearchHn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hNTextFieldSearchHnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel15.add(hNTextFieldSearchHn, gridBagConstraints);

        jLabel1.setText("HN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel15.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jPanel15, gridBagConstraints);

        jLabel5.setSelected(true);
        jLabel5.setText("วันที่");
        jLabel5.setToolTipText("วันที่รับบริการ");
        jLabel5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabel5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel5, gridBagConstraints);

        jLabel6.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel5.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jPanel5, gridBagConstraints);

        jPanel6.setMaximumSize(new java.awt.Dimension(270, 200));
        jPanel6.setMinimumSize(new java.awt.Dimension(270, 200));
        jPanel6.setPreferredSize(new java.awt.Dimension(270, 200));
        jPanel6.setRequestFocusEnabled(false);
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMaximumSize(new java.awt.Dimension(300, 400));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 400));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 400));

        jTableListChronic1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableListChronic1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListChronic1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListChronic1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Diag_Chronic_Detail"));
        jPanel7.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel7.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel7.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel7.setRequestFocusEnabled(false);
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("HN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel9.add(jLabelHn, gridBagConstraints);

        jLabel7.setText("SickDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel7, gridBagConstraints);

        jLabel8.setText("CodeIcd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel9.add(jLabelIcdCode, gridBagConstraints);

        dateComboBoxSickDate.setBackground(new java.awt.Color(204, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(dateComboBoxSickDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jPanel9, gridBagConstraints);

        jPanel3.setMaximumSize(new java.awt.Dimension(300, 150));
        jPanel3.setMinimumSize(new java.awt.Dimension(300, 150));
        jPanel3.setPreferredSize(new java.awt.Dimension(300, 205));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelPatientStatus.setText("TypeDish");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelPatientStatus, gridBagConstraints);

        jLabelCaseInfection.setText("DetailChronic");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelCaseInfection, gridBagConstraints);

        jLabelDateDish.setText("DateDish");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelDateDish, gridBagConstraints);

        jComboBoxTypeDish.setMinimumSize(new java.awt.Dimension(31, 21));
        jComboBoxTypeDish.setPreferredSize(new java.awt.Dimension(31, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jComboBoxTypeDish, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(dateComboBoxDateDish, gridBagConstraints);

        jLabel4.setText("DateUpdate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jTextFieldDateUpdate.setMinimumSize(new java.awt.Dimension(11, 24));
        jTextFieldDateUpdate.setPreferredSize(new java.awt.Dimension(11, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jTextFieldDateUpdate, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(62, 62));

        jTextAreaDetail.setLineWrap(true);
        jTextAreaDetail.setWrapStyleWord(true);
        jTextAreaDetail.setMinimumSize(new java.awt.Dimension(60, 60));
        jTextAreaDetail.setPreferredSize(new java.awt.Dimension(200, 200));
        jScrollPane2.setViewportView(jTextAreaDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jPanel3, gridBagConstraints);

        jPanel2.setMaximumSize(new java.awt.Dimension(300, 30));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 30));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 30));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.setMaximumSize(new java.awt.Dimension(72, 26));
        jButtonSave.setMinimumSize(new java.awt.Dimension(72, 26));
        jButtonSave.setPreferredSize(new java.awt.Dimension(72, 26));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButtonSave, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.setMaximumSize(new java.awt.Dimension(72, 26));
        jButtonCancel.setMinimumSize(new java.awt.Dimension(72, 26));
        jButtonCancel.setPreferredSize(new java.awt.Dimension(72, 26));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButtonCancel, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });
        jPanel8.add(jButtonDel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel7, gridBagConstraints);

        jTabbedPane1.addTab("บันทึกข้อมูล", jPanel1);

        jPanel10.setMaximumSize(new java.awt.Dimension(570, 300));
        jPanel10.setMinimumSize(new java.awt.Dimension(570, 300));
        jPanel10.setPreferredSize(new java.awt.Dimension(570, 300));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jComboBoxSearchStatusChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSearchStatusChronicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jComboBoxSearchStatusChronic, gridBagConstraints);

        jCheckBoxSearch.setSelected(true);
        jCheckBoxSearch.setText("TreatmentStatus");
        jCheckBoxSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel14.add(jCheckBoxSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel11.add(jPanel14, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(dateComboBoxSearchStart, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(dateComboBoxSearchEnd, gridBagConstraints);

        jButtonSearchListChronic.setText("Search");
        jButtonSearchListChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchListChronicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonSearchListChronic, gridBagConstraints);

        jButtonPrintListChronic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/print24.gif"))); // NOI18N
        jButtonPrintListChronic.setToolTipText("Print");
        jButtonPrintListChronic.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonPrintListChronic.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonPrintListChronic.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonPrintListChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintListChronicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonPrintListChronic, gridBagConstraints);

        jLabelDateSearchChronic.setText("DateStart");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jLabelDateSearchChronic, gridBagConstraints);

        jLabel2.setText("DateEnd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jLabel2, gridBagConstraints);

        jButtonPreviewPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/preview24.gif"))); // NOI18N
        jButtonPreviewPrint.setToolTipText("PreviewPrint");
        jButtonPreviewPrint.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonPreviewPrint.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonPreviewPrint.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonPreviewPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviewPrintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonPreviewPrint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel11.add(jPanel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel10.add(jPanel11, gridBagConstraints);

        jPanel12.setMaximumSize(new java.awt.Dimension(250, 205));
        jPanel12.setMinimumSize(new java.awt.Dimension(250, 205));
        jPanel12.setPreferredSize(new java.awt.Dimension(250, 205));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jScrollPaneShowListChronic.setPreferredSize(new java.awt.Dimension(300, 404));

        jTableListChronic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneShowListChronic.setViewportView(jTableListChronic);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jScrollPaneShowListChronic, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel10.add(jPanel12, gridBagConstraints);

        jTabbedPane1.addTab("ค้นหารายชื่อ", jPanel10);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSearchActionPerformed
        this.jComboBoxSearchStatusChronic.setEnabled(jCheckBoxSearch.isSelected());
    }//GEN-LAST:event_jCheckBoxSearchActionPerformed

    private void jLabel5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabel5ActionPerformed
        boolean b = this.jLabel5.isSelected();
        this.dateComboBoxFrom.setEnabled(b);
        this.dateComboBoxTo.setEnabled(b);
        searchChronic();
    }//GEN-LAST:event_jLabel5ActionPerformed
    private void jButtonPreviewPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviewPrintActionPerformed
        // สั่งพิมพ์รายการที่ค้นหาได้นะคะ
            theHC.thePrintControl.printChronicList(dateComboBoxSearchEnd.getText()
                ,dateComboBoxSearchStart.getText()
                ,jComboBoxSearchStatusChronic.getSelectedItem().toString()
                ,vListChronic,1);
    }//GEN-LAST:event_jButtonPreviewPrintActionPerformed

    private void jComboBoxSearchStatusChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSearchStatusChronicActionPerformed
        getDataForSearchListChronic();
    }//GEN-LAST:event_jComboBoxSearchStatusChronicActionPerformed

    private void jButtonPrintListChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintListChronicActionPerformed

            theHC.thePrintControl.printChronicList(dateComboBoxSearchEnd.getText()
                ,dateComboBoxSearchStart.getText()
                ,jComboBoxSearchStatusChronic.getSelectedItem().toString()
                ,vListChronic,0);

    }//GEN-LAST:event_jButtonPrintListChronicActionPerformed
    private void jButtonSearchListChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchListChronicActionPerformed
        // นำข้อมูลจากที่ต้องการค้นหาไปค้นหาในฐานข้อมูล จากนั้นนำมาแสดงในตาราง
        getDataForSearchListChronic();
    }//GEN-LAST:event_jButtonSearchListChronicActionPerformed
    private void hNTextFieldSearchHnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hNTextFieldSearchHnActionPerformed
        searchChronic();
    }//GEN-LAST:event_hNTextFieldSearchHnActionPerformed
    private void jTableListChronic1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListChronic1MouseReleased
        selectListChronic();
    }//GEN-LAST:event_jTableListChronic1MouseReleased
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        //ลบไม่ได้หากต้องการลบต้องไปยกเลิกรายการ diagicd10 ที่โปรแกรมหลักเท่านั้น
        deleteChronic();
        
    }//GEN-LAST:event_jButtonDelActionPerformed
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchChronic();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
         
        if(!setDataToObject())
        {
            setStatus("กรุณาเลือกรายการก่อนการบันทึก",UpdateStatus.WARNING);
            return;
        }
        saveChronic();
//        searchChronic();

    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        //setVisible(false);
        closeDialog = true;
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      //  new DialogAdmit(new javax.swing.JFrame(), true).setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxDateDish;
    private com.hospital_os.utility.DateComboBox dateComboBoxFrom;
    private com.hospital_os.utility.DateComboBox dateComboBoxSearchEnd;
    private com.hospital_os.utility.DateComboBox dateComboBoxSearchStart;
    private com.hospital_os.utility.DateComboBox dateComboBoxSickDate;
    private com.hospital_os.utility.DateComboBox dateComboBoxTo;
    private com.hospital_os.utility.HNTextField hNTextFieldSearchHn;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonPreviewPrint;
    private javax.swing.JButton jButtonPrintListChronic;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSearchListChronic;
    private javax.swing.JCheckBox jCheckBoxSearch;
    private javax.swing.JComboBox jComboBoxSearchStatusChronic;
    private javax.swing.JComboBox jComboBoxTypeDish;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCaseInfection;
    private javax.swing.JLabel jLabelDateDish;
    private javax.swing.JLabel jLabelDateSearchChronic;
    private javax.swing.JLabel jLabelHn;
    private javax.swing.JLabel jLabelIcdCode;
    private javax.swing.JLabel jLabelPatientStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneShowListChronic;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.hosv3.gui.component.HJTableSort jTableListChronic;
    private com.hosv3.gui.component.HJTableSort jTableListChronic1;
    private javax.swing.JTextArea jTextAreaDetail;
    private javax.swing.JTextField jTextFieldDateUpdate;
    // End of variables declaration//GEN-END:variables
    /*
     *  เพื่อทำการ ค้นหาและส่งค่าไปแดงรายการผู้ป่วยที่เป็น Chronic 
     *  input  : ดึงค่าจากที่เลือก
     *  output :  
     */
    private void getDataForSearchListChronic()
    {   
        Chronic theChronic = new Chronic();
        ChronicReport theChronicReport = new ChronicReport();
        Patient thePatient = new Patient();
        
        String codeStatusList = ComboboxModel.getCodeComboBox(jComboBoxSearchStatusChronic);
        if(!jComboBoxSearchStatusChronic.isEnabled())
            codeStatusList = "0";
        String dateStartList = dateComboBoxSearchStart.getText();
        String dateEndList = dateComboBoxSearchEnd.getText();
        Vector vc = theDiagnosisControl.listChronicByStatusDate(dateStartList, dateEndList, codeStatusList);
        // ดึงค่าจัดเก็บใน Object ChronicReport
        setTableListChronicReport(vc);
    }
    
    // ตำบล, อำเภอ, จังหวัด
    private String getAddress(String tambon,String amphur,String changwat)
    {
        String address = new String();
        Address add;
        if(!tambon.equalsIgnoreCase(""))
        {               
            add = theHC.theLookupControl.readAddressById(tambon);
            if(add != null)
            {
                address = Constant.getTextBundle(" ต.") +add.description ;
            }            
            add = null;
        }
        else
        {   
            address = "";
        }
        if(!amphur.equalsIgnoreCase(""))
        {            
            add = theHC.theLookupControl.readAddressById(amphur);
            if(add != null)
            {
                address = address + Constant.getTextBundle(" อ.") + add.description;
            }            
            add = null;
        }
        else
        {   
            address = address +" ";
        }
        
        if(!changwat.equalsIgnoreCase(""))
        {               
            add = theHC.theLookupControl.readAddressById(changwat);
            if(add != null)
            {
                address = address + Constant.getTextBundle(" จ.") + add.description;
            }            
            add = null;
        }
        else
        {   
            address = address +" ";
        }
        
        return address;
    }
    
    /*
     *  เพื่อทำการ เซ็ทค่าที่ได้จากการค้นหาลงในตาราง
     *  input  : Vector ที่ส่งเข้ามาเป็น Vector ของ Chronic
     *  output :  แสดงผลในตาราง
     */
    private void setTableListChronicReport(Vector vc)
    {
        TaBleModel tm ;
          vListChronic = vc;
        ChronicReport theChronicReport;
        if(vListChronic !=null)
        {
            tm = new TaBleModel(col_ListChronicReport,vListChronic.size());
            for(int i=0; i<vListChronic.size(); i++ )
            {
                theChronicReport = (ChronicReport)vListChronic.get(i); 
                tm.setValueAt(theChronicReport.hn,i,0);
                tm.setValueAt(theChronicReport.fname, i, 1);
                tm.setValueAt(theChronicReport.lname, i, 2);
                tm.setValueAt(theChronicReport.icd10, i, 3);
                tm.setValueAt(theChronicReport.date_dx,i, 4); 
                //tm.setValueAt(Gutil.getDateToString(Gutil.getDateFromText(this.theVisit.begin_visit_time.substring(0,10)),false),i, 5); 
                tm.setValueAt(theChronicReport.status,i, 5); 
                tm.setValueAt(theChronicReport.patient_address,i, 6);
                
            }  
            
        }
        else
        {
            tm = new TaBleModel(col_ListChronicReport,0);
        }
        jTableListChronic.setModel(tm);
        jTableListChronic.getColumnModel().getColumn(0).setCellRenderer(hnRender);
    }
    
    /*
     *  เพื่อทำการ บังคับการทำงานของปุ่ม + และ -
     *  input  : Object theChronic
     *  output :  
     */
    private void setEnable()
    {
        if(theChronic==null)
        {
            jButtonDel.setEnabled(false);
            jButtonSave.setEnabled(false);
        }
        else
        {
            jButtonDel.setEnabled(true);
            jButtonSave.setEnabled(true);
    }
    }
    
     /*
      * เพื่อทำการดึงค่าข้อมูลที่ได้จาก ฟอร์มลงใน object 
      *inupt ข้อมูลจากฟอร์ม
      *output 
      */
       private boolean setDataToObject()
    {         
           if(theChronic==null)
               return false;
           
        theChronic.hn = theChronic.hn;
        theChronic.patient_id = theChronic.patient_id;
        theChronic.vn = theChronic.vn;
        theChronic.vn_id = theChronic.vn_id;
        //เช็คว่ามี family_id หรือเปล่า
        //ถ้าไม่มีให้ทำการบันทึก family_id ให้เลย
        String date_time = theLookupControl.getTextCurrentDateTime();
        if(thePatient.family_id.equals(""))
        {
            String age = DateUtil.calculateAge(thePatient.patient_birthday,date_time);
            if(thePatientControl != null)
                thePatientControl.savePatient(thePatient,age,null,null);
        }
//        //เพิ่มการเก็บ family_id ในตาราง t_chronic
//        theChronic.family_id = thePatient.family_id;
        theChronic.date_dx = dateComboBoxSickDate.getText();
        theChronic.chronic_icd = theChronic.chronic_icd;
        theChronic.detail = jTextAreaDetail.getText();
        theChronic.type_dish = ComboboxModel.getCodeComboBox(jComboBoxTypeDish);
        theChronic.date_dish = dateComboBoxDateDish.getText();
//        theChronic.date_update = theHC.theLookupControl.getTextCurrentDate();
        return true;
    }

    private void clearRightPanel() {
        jLabelHn.setText("");
        dateComboBoxSickDate.setText("");
        jLabelIcdCode.setText("");
        dateComboBoxDateDish.setText("");
        jTextAreaDetail.setText("");
        jTextFieldDateUpdate.setText("");
        jButtonDel.setEnabled(false);
        jButtonSave.setEnabled(false);
    }
    /*
     * แสดงค่า object ในแบบฟอร์ม
     *intup : object Chronic
     */   
    
    private void setObjectToDate(Patient pt,Chronic theChronic)
    {
        jLabelHn.setText(theLookupControl.getRenderTextHN(theChronic.hn));
        if(pt!=null){
            pt.hn = theLookupControl.getRenderTextHN(theChronic.hn);
            jLabelHn.setText(theLookupControl.getRenderTextHN(theChronic.hn) + " " + pt.patient_name + " " + pt.patient_last_name);
        }
        //jLabelDateDX.setText(DateUtil.convertFieldDate(theChronic.date_dx));
        dateComboBoxSickDate.setText(DateUtil.convertFieldDate(theChronic.date_dx));
        jLabelIcdCode.setText(theChronic.chronic_icd);
        Gutil.setGuiData(jComboBoxTypeDish, theChronic.type_dish);
        dateComboBoxDateDish.setText(DateUtil.convertFieldDate(theChronic.date_dish));
        jTextAreaDetail.setText(theChronic.detail);
        jTextFieldDateUpdate.setText(DateUtil.convertFieldDate(theChronic.date_update));
        
       
    } 
       
    /*
     *แสดงข้อมูลการค้นหาข้อโรคเรื้อรัง โดยนำ vector มาแสดง
     *input  :vector vChronic 
     *output :
     */
    private void setTableListChronic(Vector vchronic)
    {
        TaBleModel tm ;
        if(vchronic !=null)
        {
            tm = new TaBleModel(col_ListChronic,vchronic.size());
            for(int i=0; i<vchronic.size(); i++ )
            {
                Chronic chronic = (Chronic)vchronic.get(i);
                tm.setValueAt(chronic.hn,i,0);
                tm.setValueAt(chronic.vn, i,1);
                tm.setValueAt(chronic.chronic_icd, i,2);
                tm.setValueAt(DateUtil.convertFieldDate(chronic.date_dx),i, 3);
            }  
        }
        else
        {
            tm = new TaBleModel(col_ListChronic,0);
        }
        jTableListChronic1.setModel(tm);
        jTableListChronic1.getColumnModel().getColumn(0).setCellRenderer(hnRender);
        jTableListChronic1.getColumnModel().getColumn(1).setCellRenderer(vnRender);
    }  
    
    /*
     * เพื่อทำการดึงค่าข้อมูลจาก Table แสดงผลการค้นหาข้อมูล
     * input : ค่า row ที่ทำการเลือกข้อมูล
     */
    private void selectListChronic()
    {
        theChronic = new Chronic();
        row = jTableListChronic1.getSelectedRow();
        String of = (String)jTableListChronic1.getValueAt(row,0);
          for(int i =0 ; i< vChronic.size() ; i++)
        {           
             if(of == ((Chronic)vChronic.get(i)).hn)
                theChronic = (Chronic)vChronic.get(i);
               
        }
         thePatient = theHC.thePatientControl.readPatientByPatientIdRet(theChronic.patient_id);
//         theHC.theVisitControl.readVisitByVn(theChronic.vn);
         setEnable();
         setObjectToDate(thePatient,theChronic);
    }
    
    private void searchChronic()
    {
        clearRightPanel();
        String dateFrom = dateComboBoxFrom.getText();
        String dateTo = dateComboBoxTo.getText();
        String hn = hNTextFieldSearchHn.getText(); 
        if(this.jLabel5.isSelected())
            vChronic = theDiagnosisControl.listChronicByHnDate(dateFrom, dateTo, hn);
        else
            vChronic = theDiagnosisControl.listChronicByHn(hn);
        
        if(vChronic != null && vChronic.size() == 1 && theHO.thePatient != null)
        {
//            theChronic = new Chronic();
            theChronic = (Chronic)vChronic.get(0);
            thePatient = theHC.thePatientControl.readPatientByPatientIdRet(theChronic.patient_id);
            setEnable();
            setObjectToDate(thePatient,theChronic);
        }
        setTableListChronic(vChronic);
    }
       
    private void saveChronic()
    {   
        theDiagnosisControl.saveChronic(theChronic, 1);
//        theChronic=null;
//        setEnable();
    }
    
    /*
     * ให้ในการลบค่า Chronic
     * input : object Chronic*/
    private void deleteChronic()
    {
        if(!theDiagnosisControl.deleteChronic(theChronic,this))
            return;
        vChronic.remove(row);
        setTableListChronic(vChronic);
        theChronic=null;
        setEnable();
        setDataAll();
    }
/*-----------------------------------------------------------*/    
    private void setDialog()
    {
        setSize(640,480);
        setTitle(Constant.getTextBundle("Diag_Chronic_Title"));
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);
                
    }
    
    public boolean showDialog(Visit visit,Chronic cn)
    {
        clearRightPanel();
        setDataAll();
        theVisit = visit;
        theChronic = cn;
        String currentdate = theHO.date_time;
        dateComboBoxFrom.setText(DateUtil.getReverseDay(currentdate, 1));
        if(theHO.thePatient!=null)
        {
            this.hNTextFieldSearchHn.setText(theHO.thePatient.hn);
        }
        hNTextFieldSearchHnActionPerformed(null);
        setVisible(true);
        return closeDialog;
    }
   /* public static boolean showDialog(JFrame frm,LookupControl lc,VisitControl vc,DiagnosisControl vi,PatientControl pt, Visit visit,Chronic cn)//, Office off)
    {
        DialogChronic dlg = new DialogChronic(frm,true,lc,vc,vi,pt,visit,cn);//,off)
        dlg.setSize(680,380);
        dlg.setTitle("  บันทึกข้อมูลโรคเรื้อรัง ");
        dlg.setLanguage("");
        Toolkit thekit = dlg.getToolkit();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();//thekit.getScreenSize();
        dlg.setLocation((screenSize.width-dlg.getSize().width)/2, (screenSize.height-dlg.getSize().height)/2);
       
        
        
        dlg.setVisible(true);
        if(dlg.actionCommand)
        {     
              return true;
        }
       dlg=null;
       System.gc();
       return false;
    }   
    
*/
    
    public void setLanguage(String msg)
      {
        GuiLang.setLanguage(jLabel5);
	GuiLang.setLanguage(jLabel7);
	GuiLang.setLanguage(jButtonSearch);
	GuiLang.setLanguage(jLabel8);
	GuiLang.setLanguage(jButtonSave);
	GuiLang.setLanguage(jLabelPatientStatus);
	GuiLang.setLanguage(jLabelDateDish);
	GuiLang.setLanguage(jLabelCaseInfection);
        GuiLang.setLanguage(jLabel4);
	GuiLang.setLanguage(jButtonSearchListChronic);
        GuiLang.setLanguage(jButtonPrintListChronic);
	GuiLang.setLanguage(jButtonPreviewPrint);
        GuiLang.setLanguage(this.jCheckBoxSearch);
        GuiLang.setLanguage(jLabelDateSearchChronic);
        GuiLang.setLanguage(jLabel2);
        GuiLang.setLanguage(jLabel1);
        GuiLang.setLanguage(jLabel3);
        GuiLang.setLanguage(jButtonCancel);
        GuiLang.setLanguage(col_ListChronic);
        GuiLang.setLanguage(col_ListChronicReport);
        GuiLang.setTextBundle(jPanel4);
        GuiLang.setTextBundle(jPanel7);
        GuiLang.setLanguage(jTabbedPane1);
      }     
    
      public void notifyPreviewAppointmentList(String str, int status) {
          //not use
      }
      
      public void notifyPrintAppointmentList(String str, int status) {
          //not use
      }
      
      public void notifyPrintChronicList(String str, int status) {
      }
      
      public void notifyPrintDrugSticker(String str, int status) {
          //not use
      }
      
      public void notifyPrintOPDCard(String str, int status) {
          //not use
      }
      
      public void notifyPriviewChronicList(String str, int status) {
      }
      
      public void notifyPreviewSelectDrugList(String str, int status) {
      }
      
      public void notifyPreviewSumByBillingGroup(String str, int status) {
      }
      
      public void notifyPrintSelectDrugList(String str, int status) {
      }
      
      public void notifyPrintSumByBillingGroup(String str, int status) {
      }
      
      public boolean confirmBox(String str, int status) {
        int i = JOptionPane.showConfirmDialog(this,str,"เตือน",JOptionPane.YES_NO_OPTION);
        return (i==JOptionPane.YES_OPTION);
      }
      
      public JFrame getJFrame() {
          return this;
      }
      
      public void setStatus(String str, int status) {
        str = Constant.getTextBundle(str);
        JOptionPane.showMessageDialog(this,str);
      }
      
}
