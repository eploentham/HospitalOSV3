/*
 * DialogOffDrug.java
 *
 * Created on 13 พฤษภาคม 2547, 18:10 น.
 */

package com.hosv3.gui.dialog;
import com.hosv3.utility.Constant;
import java.awt.*;
import java.util.*;

import com.hosv3.control.*;
import com.hosv3.utility.*;
import com.hosv3.utility.connection.*;

import com.hospital_os.object.*; 
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.ComboboxModel;

/**
 * 
 * @author amp
 * ยกเลิก@deprecated ผิด pattern ต้องแก้ให้ dialog รับและแสดง
 * ข้อมูลอย่างเดียวไม่ควรมีการเขียนข้อมูลลง HosObject เพราะว่ามันจะมีการใช้ Object ใน HO ผิด Pattern
 */
public class DialogOffDrug extends javax.swing.JDialog 
{    
    private Vector vDoctorOff ,vClinic;   
    private LookupControl theLookupControl;    
    private ComboboxModel theComboboxModel;    
    DiagDoctorClinic theDiagDoctorClinic;  // for write only
    boolean actionperform = false;
    /** Creates new form DialogOrderSet */
    public DialogOffDrug(javax.swing.JFrame parent, boolean modal, HosControl hc, UpdateStatus us) 
    {  
        super(parent, modal);
        initComponents();
        setLanguage("");
        theLookupControl = hc.theLookupControl;
        //setSize(300, 100);
        setTitle(Constant.getTextBundle("เลือกแพทย์ผู้ OFF ยา"));
        Toolkit thekit = getToolkit();       
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();        
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);        
        this.setComboBox();        
        setClinicVisible(false);
        this.jCheckBoxMemValue.setVisible(false);
    }
    public DialogOffDrug(javax.swing.JFrame parent, boolean modal, LookupControl lc, UpdateStatus us) 
    {  
        super(parent, modal);
        initComponents();
        setLanguage("");
        theLookupControl = lc;
        //setSize(300, 100);
        setTitle(Constant.getTextBundle("เลือกแพทย์ผู้ OFF ยา"));
        Toolkit thekit = getToolkit();       
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();        
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);        
        this.setComboBox();        
        setClinicVisible(false);
        this.jCheckBoxMemValue.setVisible(false);
    }    
    public void setClinicVisible(boolean bool){
        this.jLabelClinicName.setVisible(bool);
        this.jComboBoxListClinic.setVisible(bool);
    }
    
    public void setDoctorVisible(boolean bool){
        this.jLabelDoctorName.setVisible(bool);
        this.jComboBoxListDoctor.setVisible(bool);
    }
    
    public void setLanguage(String msg)
    {
        GuiLang.setLanguage(jLabelDoctorName);
	GuiLang.setLanguage(jButtonOk);
        GuiLang.setLanguage(jLabelClinicName);
        GuiLang.setLanguage(jCheckBoxMemValue);
        
    }   
    /**
     * ใช้เมื่อต้องการจะใช้ในการให้รหัสโรค
     * @param use เป็น boolean ถ้าเป็น true จะใช้ ถ้าเป็น false ไม่ใช้
     * @author padungrat(tong)
     * @date 19/04/2549,10:52
     */
    public void setuseMapDXICD10(boolean use)
    {
        //จะใช้เมื่อมีการใช้รวมกับการให้รหัสโรค
        setClinicVisible(true);
        this.jCheckBoxMemValue.setVisible(true);
        vClinic = theLookupControl.listClinic();
        theComboboxModel.initComboBox(this.jComboBoxListClinic,vClinic);
    }
    
    /** ใช้ในการ กำหนดค่าให้กับ combobox ที่อยู่ใน panel
     *ข้อมูลเข้า ไม่มี
     ข้อมูลออก ไม่มี
     */
    private void setComboBox()
    {   
        vDoctorOff = theLookupControl.listDoctor();
        theComboboxModel.initComboBox(this.jComboBoxListDoctor,vDoctorOff);
    }   
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanelShowDoctor = new javax.swing.JPanel();
        jLabelDoctorName = new javax.swing.JLabel();
        jComboBoxListDoctor = new javax.swing.JComboBox();
        jLabelClinicName = new javax.swing.JLabel();
        jComboBoxListClinic = new javax.swing.JComboBox();
        jPanelControl = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jCheckBoxMemValue = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanelShowDoctor.setLayout(new java.awt.GridBagLayout());

        jLabelDoctorName.setText("\u0e41\u0e1e\u0e17\u0e22\u0e4c");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelShowDoctor.add(jLabelDoctorName, gridBagConstraints);

        jComboBoxListDoctor.setMinimumSize(new java.awt.Dimension(25, 24));
        jComboBoxListDoctor.setPreferredSize(new java.awt.Dimension(25, 24));
        jComboBoxListDoctor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBoxListDoctorKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelShowDoctor.add(jComboBoxListDoctor, gridBagConstraints);

        jLabelClinicName.setText("\u0e04\u0e25\u0e35\u0e19\u0e34\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelShowDoctor.add(jLabelClinicName, gridBagConstraints);

        jComboBoxListClinic.setMinimumSize(new java.awt.Dimension(25, 24));
        jComboBoxListClinic.setPreferredSize(new java.awt.Dimension(25, 24));
        jComboBoxListClinic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBoxListClinicKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelShowDoctor.add(jComboBoxListClinic, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(jPanelShowDoctor, gridBagConstraints);

        jPanelControl.setLayout(new java.awt.GridBagLayout());

        jButtonOk.setText("OK");
        jButtonOk.setMaximumSize(new java.awt.Dimension(67, 24));
        jButtonOk.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonOk.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelControl.add(jButtonOk, gridBagConstraints);

        jCheckBoxMemValue.setText("\u0e08\u0e33\u0e04\u0e48\u0e32\u0e19\u0e35\u0e49\u0e44\u0e27\u0e49");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanelControl.add(jCheckBoxMemValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel1.add(jPanelControl, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-326)/2, (screenSize.height-139)/2, 326, 139);
    }
    // </editor-fold>//GEN-END:initComponents

    private void jComboBoxListClinicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxListClinicKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            jButtonOkActionPerformed(null);
        }
    }//GEN-LAST:event_jComboBoxListClinicKeyReleased

    private void jComboBoxListDoctorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxListDoctorKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            jButtonOkActionPerformed(null);
        }
    }//GEN-LAST:event_jComboBoxListDoctorKeyReleased

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        //กรณีเป็นการบันทึก Diag ของแพทย์ให้ส่งผ่านทางตัวแปรตัวนี้
        actionperform = true;
        theDiagDoctorClinic.buseMemory = this.jCheckBoxMemValue.isSelected();
        theDiagDoctorClinic.clinic_id = Gutil.getGuiData(jComboBoxListClinic);
        
        if(this.jComboBoxListDoctor.isVisible())
            theDiagDoctorClinic.doctor_id = Gutil.getGuiData(jComboBoxListDoctor);
        else
            theDiagDoctorClinic.doctor_id = null;
        dispose();
        
    }//GEN-LAST:event_jButtonOkActionPerformed
    
    public void eventInComboBoxListDoctor(java.awt.event.KeyEvent evt)
    {
        if(java.awt.event.KeyEvent.VK_ENTER == evt.getKeyCode())
        {
            jButtonOkActionPerformed(null);
        }
    }
    /**ใช้ในการกำหนดให้แสดง label ว่าอะไรถ้าเป็น true ให้แสดงว่า แพทย์ผู้สั่งยาต่อเนื่อง
     * ถ้าเป็น false แพทย์ผู้สั่ง off ยา
     *@param usecontinue เป็น boolean ถ้าเป็น true ให้แสดงว่า แพทย์ผู้สั่งยาต่อเนื่อง
     * ถ้าเป็น false แพทย์ผู้สั่ง off ยา
     *@author padungrat(tong)
     *@date 14/02/49,15:08
     */
    public void setUseContinueOrOff(boolean usecontinue)
    {
//        if(usecontinue)
//        {       
//                jLabelDoctorName.setText(GuiLang.setLanguage("แพทย์ผู้สั่งยาต่อเนื่อง"));
//        }
//        else
//        {       
//                jLabelDoctorName.setText(GuiLang.setLanguage("แพทย์ผู้สั่ง off ยา"));
//        }
    }
    
    /**
     * ใช้สำหรับแสดงชื่อ label สำหรับให้แสดงข้อความที่ต้องการ
     */
    public void setUseDoctor()
    {
//        jLabelDoctorName.setText(GuiLang.setLanguage("เลือกแพทย์ผู้ให้รหัส"));
        setuseMapDXICD10(true);
    }
 
        /**
     * ใช้สำหรับแสดงชื่อ label สำหรับให้แสดงข้อความที่ต้องการ
     */
    public void setUseClinic()
    {
//        jLabelDoctorName.setText(GuiLang.setLanguage("เลือกคลีนิกที่ให้รหัส"));
        this.setDoctorVisible(false);
        setuseMapDXICD10(false);
    }
 
    
    /*
    public static boolean showDialog(HosControl hc, UpdateStatus us,Employee emp)
    {  
        DialogOffDrug dlg = 
            new DialogOffDrug(us.getJFrame(),true,hc,us);
        return dlg.showDialog(emp);
    }
 
   /**
     * ใช้สำหรับการให้รหัสโรคของการ map dx กับ ICD10
     * @param emp เป็น Object ของ Employee ที่ได้จากการเลือก (call by value)
     * @param clinic เป็น Object ของ Clinic ที่ได้จากการเลือก (call by value)
    * เป็นระบบเช็คอัตโนมัติ  คือจะแสดง combo แพทย์เองถ้าผู้เรียกไม่ใช่แพทย์
     * @author henbe
     * @date 5/09/2549,10:55
     */
    /*public boolean showDialog(Employee user,Clinic clinic)
    {
        jLabelDoctorName.setText(GuiLang.setLanguage("เลือกแพทย์ผู้ให้รหัส"));
        boolean is_doctor = user.authentication_id.equals(Authentication.DOCTOR);
        setDoctorVisible(!is_doctor);
        setuseMapDXICD10(true);

        setOGDiagDoctorClinic();
        setVisible(true);  
        return actionperform;
    }   
    /**
     * ใช้สำหรับการให้รหัสโรคของการ map dx กับ ICD10
     * @param emp เป็น Object ของ Employee ที่ได้จากการเลือก (call by value)
     * @param clinic เป็น Object ของ Clinic ที่ได้จากการเลือก (call by value)
     * @author padungrat(tong)
     * @date 19/04/2549,10:55
     * @deprecated ต้องแก้ให้ใช้งานกับ theDiagDoctorClinic ที่เป็น local และต้องไม่ส่ง employee กับ clinic ไปให้ด้วย
     */
    public boolean showDialog(DiagDoctorClinic ddc)
    {
        theDiagDoctorClinic = ddc;
        setOGDiagDoctorClinic();
        setVisible(true);  
//        jLabelDoctorName.setText(GuiLang.setLanguage("เลือกแพทย์ผู้ให้รหัส"));
        if(actionperform)
            return true;
        else 
            return false;
    }
    
    /**
     * ใช้ในการกำหนดค่าจากของเก่ามาแสดงใหม่
     * @author padungrat(tong)
     * @date 19/04/2549,16:30
     */
    private void setOGDiagDoctorClinic()
    {
        if(theDiagDoctorClinic.doctor_id !=null && !theDiagDoctorClinic.doctor_id.equals(""))
        {
            theComboboxModel.setCodeComboBox(this.jComboBoxListDoctor,theDiagDoctorClinic.doctor_id);
        }  
        if(theDiagDoctorClinic.clinic_id !=null && !theDiagDoctorClinic.clinic_id.equals(""))
        {
            theComboboxModel.setCodeComboBox(this.jComboBoxListClinic,theDiagDoctorClinic.clinic_id);
        }  
    }
    /*
    public boolean showDialog(Employee emp)
    {
        if(this.vDoctorOff.isEmpty())
            return false;
        theEmployee = emp;
        setVisible(true);  
        return actionperform;
    }*/
    public static boolean showDialog(HosControl hc,OrderContinue oc,String str)
    {
        DialogOffDrug theDialogContinueDrug = new DialogOffDrug(hc.theUS.getJFrame(),true,hc,hc.theUS);
        //theDialogContinueDrug.jLabelDoctorName.setText(GuiLang.setLanguage("แพทย์ผู้สั่งยาต่อเนื่อง"));
        theDialogContinueDrug.setVisible(true);  
        return theDialogContinueDrug.actionperform;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOk;
    private javax.swing.JCheckBox jCheckBoxMemValue;
    private javax.swing.JComboBox jComboBoxListClinic;
    private javax.swing.JComboBox jComboBoxListDoctor;
    private javax.swing.JLabel jLabelClinicName;
    private javax.swing.JLabel jLabelDoctorName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelShowDoctor;
    // End of variables declaration//GEN-END:variables
    
}
