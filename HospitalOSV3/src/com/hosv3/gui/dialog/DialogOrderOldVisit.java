/*
 * DialogListOrderSet.java
 *
 * Created on 24 เมษายน 2547, 14:48 น.
 */
package com.hosv3.gui.dialog;
import com.hosv3.utility.Constant;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import com.hosv3.control.*;
import com.hosv3.utility.connection.*;
import com.hosv3.utility.*;
import com.hosv3.object.*;
import com.hospital_os.object.*; 
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.CellRendererHos;
/**
 *
 * @author  amp
 */
public class DialogOrderOldVisit extends javax.swing.JDialog {
    
    HosControl theHC;
	HosObject theHO;
    
    /** Vector ของ visit ที่ list ตาม hn*/
    private Vector vVisit;
    /** Vector ของ object visit */
    private Vector vVn;
    /** Vector ของ date ที่ list ตาม vn*/
    private Vector vDate;
    /** Vector ของ object orderitem ที่ list ตาม vn*/
    private Vector vVnOrderItem = new Vector();
    private Vector vVnOrderItemTemp;
    /** Vector ของ object orderitem ที่ list ตาม date*/
    
    /**object ของ visit*/
    private Visit theVisit = new Visit();
    /**object ของ patient*/
    private Patient thePatient = new Patient();
    /**object ของ order_item*/
    private OrderItem theOrderItem = new OrderItem();
    /**
     *showVn true คือ สั่ง order เหมือนครั้งที่แล้ว
     *       false คือ สั่ง order เหมือนวันที่แล้ว
     */
    private boolean showVn;
    /**หัวตารางของ สั่งยาเหมือนครั้งที่*/
    private String[] colVn = {"VN","Date","Dx"};  
    /**หัวตารางของ สั่งยาเหมือนวันที่แล้ว*/
    private String[] colDate = {"วันที่"};
    private String[] col_Item = {"รายการItem"};
    CellRendererHos vnRender = new CellRendererHos(CellRendererHos.VN);
    CellRendererHos dateRender = new CellRendererHos(CellRendererHos.DATE);
    /** Creates new form DialogOrderSet */
    
    public DialogOrderOldVisit(HosControl hc, UpdateStatus us) 
    {
        super(us.getJFrame(),true);
        theHC = hc;
        theHO = hc.theHO;
    vnRender = new CellRendererHos(CellRendererHos.VN,theHC.theLookupControl.getSequenceDataVN().pattern);
        initComponents();
        setDialog();
        //setIconImage(us.getJFrame().getIconImage());
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListOrderSet = new com.hosv3.gui.component.HJTableSort();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jCheckBoxAll = new javax.swing.JCheckBox();
        jCheckBoxDrug = new javax.swing.JCheckBox();
        jCheckBoxService = new javax.swing.JCheckBox();
        jCheckBoxMedSupply = new javax.swing.JCheckBox();
        jCheckBoxLab = new javax.swing.JCheckBox();
        jCheckBoxXray = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableListDetailOrderSet = new com.hosv3.gui.component.HJTableSort();
        jPanel4 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(500, 86));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 466));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e0a\u0e38\u0e14\u0e15\u0e23\u0e27\u0e08\u0e23\u0e31\u0e01\u0e29\u0e32\u0e15\u0e32\u0e21\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48"));
        jPanel2.setMinimumSize(new java.awt.Dimension(200, 56));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 436));
        jTableListOrderSet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableListOrderSet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListOrderSetMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableListOrderSet);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e0a\u0e38\u0e14\u0e15\u0e23\u0e27\u0e08\u0e23\u0e31\u0e01\u0e29\u0e32"));
        jPanel3.setMinimumSize(new java.awt.Dimension(300, 86));
        jPanel3.setPreferredSize(new java.awt.Dimension(300, 466));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jCheckBoxAll.setText("\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14");
        jCheckBoxAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel5.add(jCheckBoxAll, gridBagConstraints);

        jCheckBoxDrug.setSelected(true);
        jCheckBoxDrug.setText("\u0e22\u0e32");
        jCheckBoxDrug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDrugActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jCheckBoxDrug, gridBagConstraints);

        jCheckBoxService.setText("\u0e04\u0e48\u0e32\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23");
        jCheckBoxService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxServiceActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jCheckBoxService, gridBagConstraints);

        jCheckBoxMedSupply.setText("\u0e40\u0e27\u0e0a\u0e20\u0e31\u0e13\u0e11\u0e4c");
        jCheckBoxMedSupply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMedSupplyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jCheckBoxMedSupply, gridBagConstraints);

        jCheckBoxLab.setText("Lab");
        jCheckBoxLab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLabActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel5.add(jCheckBoxLab, gridBagConstraints);

        jCheckBoxXray.setText("Xray");
        jCheckBoxXray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxXrayActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel5.add(jCheckBoxXray, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jPanel5, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(24, 200));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(454, 200));
        jTableListDetailOrderSet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableListDetailOrderSet);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setText("Add");
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jButtonAdd, gridBagConstraints);

        jButtonCancel.setText("Close");
        jButtonCancel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonCancel.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonCancel.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonCancel.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jButtonCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed
    private void jCheckBoxAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllActionPerformed
        jCheckBoxDrug.setSelected(jCheckBoxAll.isSelected());
        jCheckBoxLab.setSelected(jCheckBoxAll.isSelected());
        jCheckBoxService.setSelected(jCheckBoxAll.isSelected());
        jCheckBoxMedSupply.setSelected(jCheckBoxAll.isSelected());
        jCheckBoxXray.setSelected(jCheckBoxAll.isSelected());
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }//GEN-LAST:event_jCheckBoxAllActionPerformed
    private void jCheckBoxXrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxXrayActionPerformed
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }//GEN-LAST:event_jCheckBoxXrayActionPerformed
    private void jCheckBoxLabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLabActionPerformed
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }//GEN-LAST:event_jCheckBoxLabActionPerformed
    private void jCheckBoxMedSupplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMedSupplyActionPerformed
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }//GEN-LAST:event_jCheckBoxMedSupplyActionPerformed
    private void jCheckBoxServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxServiceActionPerformed
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }//GEN-LAST:event_jCheckBoxServiceActionPerformed
    private void jCheckBoxDrugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDrugActionPerformed
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }//GEN-LAST:event_jCheckBoxDrugActionPerformed
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        Vector vOrder = new Vector();
        int[] row = jTableListDetailOrderSet.getSelectedRows();
        for(int i=0;i<row.length ;i++)
        {
            vOrder.add(getOrderV().get(row[i]));
        }
        theHC.theOrderControl.saveVOrderItem(vOrder);
    }//GEN-LAST:event_jButtonAddActionPerformed
    private void jTableListOrderSetMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListOrderSetMouseReleased
        if(jTableListOrderSet.getSelectedRow() < 0) return;
        if(showVn)
            selectVn();        
        else
            selectDate();        
    }//GEN-LAST:event_jTableListOrderSetMouseReleased
    
    /**
     *เป็น fn เลือกว่าจะ Show Table ของ Vn หรือ Date
     */
    private void selectTable()
    {
        if(showVn)
        {   
            if(thePatient==null || "null".equals(thePatient)) return;
            vVisit = theHC.theVisitControl.listVisitByPid(thePatient.getObjectId());
            if(vVisit==null || vVisit.isEmpty()) return;            
            setVisitV(vVisit);            
        }
        else
        {
            if(theVisit==null || "null".equals(theVisit)) return;
            vDate = theHC.theOrderControl.listOrderItemByDate(theVisit.getObjectId());
            setDateOrderV(vDate);
        }
    } 
    /**
     *เป็น Table ลิสต์ Vn ทั้งหมดของผู้ป่วยคนนั้น
     *ข้อมูลเข้า : Object ของ OrderItem
     *ข้อมูลออก : ลิสต์ของ Vn
     */  
    private void setVisitV(Vector vVisit)
    {
        Visit vn = new Visit();
        TaBleModel tm;
        if(vVisit != null)
        {   
            tm = new TaBleModel(colVn,vVisit.size());
            for(int i=0 ;i<vVisit.size(); i++)
            {  
                vn = (Visit)vVisit.get(i);
                tm.setValueAt(vn.vn,i,0);
                tm.setValueAt(DateUtil.getDateFromText(vn.begin_visit_time.substring(0,10)),i,1);//amp:31/7/2549
                tm.setValueAt(vn.doctor_dx,i,2);//amp:31/7/2549
            }
        }
        else
        {  
            tm= new TaBleModel(colVn,0);
        }
        jTableListOrderSet.setModel(tm);    
        jTableListOrderSet.getColumnModel().getColumn(0).setCellRenderer(vnRender);
        jTableListOrderSet.getColumnModel().getColumn(1).setCellRenderer(dateRender);
    }    
    
    /**
     *เป็น Table ลิสต์ Date ทั้งหมดของการรับบริการครั้งนั้น
     *ข้อมูลเข้า : Object ของ OrderItem
     *ข้อมูลออก : ลิสต์ของ Date
     */
    private void setDateOrderV(Vector vDate)
    {
        TaBleModel tm;
        if(vDate != null)
        {   
            tm = new TaBleModel(colDate,vDate.size());
            for(int i=0 ;i<vDate.size(); i++)
            {  
                OrderItem oi = (OrderItem)vDate.get(i);
                tm.setValueAt(DateUtil.getDateFromText(oi.vertify_time),i,0);
             }
        }
        else
        {   
            tm= new TaBleModel(colDate,0);
        }
        jTableListOrderSet.setModel(tm); 
        jTableListOrderSet.getColumnModel().getColumn(0).setCellRenderer(dateRender);
    }  
    /**
     *เป็นการเลือก order ตาม vn
     *ข้อมูลเข้าคือ vn
     *ข้อมูลออกคือ list ของ order ตาม vn
     */
    private void selectVn()
    {
        int row = jTableListOrderSet.getSelectedRow();
        Visit vi = (Visit)vVisit.get(row);
        vVnOrderItemTemp = theHC.theOrderControl.listOrderItemByVidActive(vi.getObjectId());
        //amp:3/8/2549: ถ้าไม่ new จะมีการ ble record ทุกครั้งที่เลือก
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }
    public Vector getVectorCheckBox(Vector vVnOrderItemTemp){
        Vector vc = new Vector();
        for(int i=0; i<vVnOrderItemTemp.size();i++)
        {
            OrderItem oi = (OrderItem)vVnOrderItemTemp.get(i);
            if(oi.isDrug() && jCheckBoxDrug.isSelected())
                vc.add(oi);
            if(oi.isDental() && this.jCheckBoxAll.isSelected())
                vc.add(oi);
            if(oi.isLab() && this.jCheckBoxLab.isSelected())
                vc.add(oi);
            if(oi.isXray() && jCheckBoxXray.isSelected())
                vc.add(oi);
            if(oi.isService() && jCheckBoxService.isSelected())
                vc.add(oi);
            if(oi.isSupply() && this.jCheckBoxMedSupply.isSelected())
                vc.add(oi);
        }
        return vc;
    }
    /**
     *list ของ Order ตาม vn ที่เลือก
     */
    private Vector getOrderV(){
        return vVnOrderItem;
    }
    private void setOrderV(Vector vc)
    {
        vVnOrderItem = vc;
        TaBleModel tm ;
        if(vc == null || vc.isEmpty()){   
            tm= new TaBleModel(col_Item,0);
            jTableListDetailOrderSet.setModel(tm);  
            return;
        }
        tm= new TaBleModel(col_Item,vc.size());
        Item item;
        for(int i=0 ;i<vc.size(); i++)
        {  
            OrderItem oi = (OrderItem)vc.get(i);        
            String des = oi.common_name;
            if(oi.isDrug())
            {
                OrderItemDrug oid = theHC.theOrderControl.readOrderItemDrugByOid(oi.getObjectId());
                des += " " + theHC.theLookupControl.readShortDose(oi,oid);
                if(oi.order_home.equals("1"))
                    des = "home-med " + des;
            }
            tm.setValueAt(des,i,0);
            item = null;
        }
        jTableListDetailOrderSet.setModel(tm);   
        int row = jTableListDetailOrderSet.getRowCount();
        if(row > 0)
            jTableListDetailOrderSet.setRowSelectionInterval(0,row-1);
    }

    /**
     *นำข้อมูลจาก vector vn ที่เลือก ส่งไปยัง panelorder
     * @deprecated ไม่ใช้แล้วมั้ง
     */
    private void addOrderSetVnToPanelOrder(int oiw)
    {
        Vector vOrderItem = new Vector();
        Vector vOrderItemDrug = new Vector();    
        String date_time = theHC.theLookupControl.getTextCurrentDateTime();
        for(int i=0 ;i<vVnOrderItem.size(); i++)
        {  
            OrderItem oii = (OrderItem)vVnOrderItem.get(i);
            OrderItem oi = new OrderItem();
            Item item = theHC.theLookupControl.readItemById(oii.item_code);
            OrderItemDrug oid = null;//= new OrderItemDrug();        

            int resultmessage = 0;
            boolean result = theHC.theOrderControl.checkDrugAllergy(
                item.getObjectId(),theVisit.getObjectId());
            if(result)   
                resultmessage = messageBoxStatus(Constant.getTextBundle("ผู้ป่วย มีการแพ้ยา") + " " + item.common_name + " " + Constant.getTextBundle("ต้องการจะสั่งอีกหรือไม่ ?")); 
            oi.item_code = item.getObjectId();
            oi.common_name = item.common_name;
            oi.item_group_code_category = item.item_group_code_category;
            oi.item_group_code_billing = item.item_group_code_billing;
            CategoryGroupItem cgi = (CategoryGroupItem)theHC.theLookupControl
                .readCategoryGroupItemById(oi.item_group_code_category);
            oi.category_group = ((CategoryGroupItem)theHC.theLookupControl.readCategoryGroupItemById(item.item_group_code_category)).category_group_code;
            ItemPrice ip = theHC.theOrderControl.readItemPriceByItem(item.getObjectId()); 
            oi.price = ip.price;
            oi.order_cost = ip.price_cost;
            
            oi.status = OrderStatus.NOT_VERTIFY;
            oi.continue_order = "0";
            oi.charge_complete = "0";                 
            oi.secret = "0";                
            oi.discontinue = "";
            oi.discontinue_time = "";
            oi.dispense = "";
            oi.dispense_time = "";
            oi.vertifier = "";
            oi.vertify_time = "";
            oi.executer = "";
            oi.executed_time = "";
            oi.visit_id = theVisit.getObjectId();
            oi.hn = theVisit.patient_id;
            oi.order_user = theHO.theEmployee.getObjectId();
            oi.order_time = date_time;
            oi.clinic_code = theHO.theServicePoint.getObjectId();    
            String idGroup = oi.item_group_code_category;
            CategoryGroupItem theCategoryGroupItem = new CategoryGroupItem();
            theCategoryGroupItem = theHC.theLookupControl.readCategoryGroupItemById(idGroup);   
            if (theCategoryGroupItem.category_group_code.equals("1")) {    
                OrderItemDrug  orderItemDrug = theHC.theOrderControl
                    .readOrderItemDrugByItemId(oii.getObjectId());
                if(orderItemDrug!= null)
                {   
                    oid = new OrderItemDrug();
                    oi.qty = oii.qty;
                    oid.instruction = orderItemDrug.instruction;
                    oid.printing = orderItemDrug.printing;
                    oid.purch_uom = orderItemDrug.purch_uom;
                    oid.usage_special = orderItemDrug.usage_special;
                    oid.usage_text = orderItemDrug.usage_text;
                    oid.use_uom = orderItemDrug.use_uom;
                    oid.frequency  = orderItemDrug.frequency;
                    oid.caution = orderItemDrug.caution;
                    oid.day_time = orderItemDrug.day_time;
                    oid.description = orderItemDrug.description;
                    oid.dose = orderItemDrug.dose;
                    oid.item_id = orderItemDrug.item_id;
                    //vOrderItemDrug.add(oid);
                    if(resultmessage == 0)
                        vOrderItemDrug.add(oid);
                }  
                else{
                    oi.qty = "0";
                    oid.instruction = "1510000000001";
                    oid.printing = "1";
                    oid.purch_uom = "2520000000001";
                    oid.usage_special = "";
                    oid.usage_text = "";
                    oid.use_uom = "2520000000001";
                    oid.frequency  = "1500000000001";
                    oid.caution = "";
                    oid.day_time = "";
                    oid.description = "";
                    oid.dose = "0";
                    oid.item_id = ((OrderItem)vVnOrderItem.get(i)).item_code;

                    if(resultmessage == 0)
                        vOrderItemDrug.add(oid);
                }
            }
            else oi.qty = oii.qty;
            if(resultmessage == 0){
                vOrderItem.add(oi);
                theHC.theOrderControl.saveOrderItem(oi, oid);
            }   
        }  
    }
    
    private int  messageBoxStatus(String message)
    {   
        int i =0;
        i = JOptionPane.showConfirmDialog(this, message,Constant.getTextBundle("เตือน"),JOptionPane.YES_NO_OPTION);        
        message = null;
        return i;
    }
   
    /**
     *เป็นการเลือก order ตาม date
     *ข้อมูลเข้าคือ date
     *ข้อมูลออกคือ list ของ order ตาม date
     */
    private void selectDate()
    {
        int row = jTableListOrderSet.getSelectedRow();
        theOrderItem = (OrderItem)vDate.get(row);
        vVnOrderItemTemp = theHC.theOrderControl.listOrderItemByDay(theOrderItem.vertify_time,theVisit.getObjectId());
        setOrderV(getVectorCheckBox(vVnOrderItemTemp));
    }
    
    /**
     *นำข้อมูลจาก vector ที่ได้จากวันที่เลือก ส่งไปยัง panelorder
     * @deprecated ไม่ใช้แล้วมั้ง
     */

    private void addOrderSetDateToPanelOrder(int oqi)
    {
        String date_time = theHC.theLookupControl.getTextCurrentDateTime();
        OrderItem oi = new OrderItem();
        OrderItemDrug oid = null;//new OrderItemDrug();      
            
        Vector vOrderItem = new Vector();
        Vector vOrderItemDrug = new Vector();       
        
        Item item;
        OrderItem oii;
       
            for(int i=0 ;i<vVnOrderItem.size(); i++)
            {  
                oii = (OrderItem)vVnOrderItem.get(i);
                oi = new OrderItem();
                //oid = new OrderItemDrug();
                item = theHC.theLookupControl.readItemById(oii.item_code);
                int resultmessage = 0;
                boolean result = theHC.theOrderControl.checkDrugAllergy(
                    item.getObjectId(),theVisit.getObjectId());
                if(result)
                {   
                    resultmessage = messageBoxStatus(Constant.getTextBundle("ผู้ป่วย มีการแพ้ยา") + " " + item.common_name + " " + Constant.getTextBundle("ต้องการจะสั่งอีกหรือไม่ ?"));                    
                }
                oi.item_code = item.getObjectId();
                oi.common_name = item.common_name;
                oi.item_group_code_category = item.item_group_code_category;
                oi.item_group_code_billing = item.item_group_code_billing;
                oi.category_group = ((CategoryGroupItem)theHC.theLookupControl.readCategoryGroupItemById(item.item_group_code_category)).category_group_code;
                
                ItemPrice ip = theHC.theOrderControl.readItemPriceByItem(item.getObjectId()); 
                oi.price = ip.price;
                oi.order_cost = ip.price_cost;
                
                oi.status = OrderStatus.NOT_VERTIFY;
                oi.continue_order = "0";
                oi.charge_complete = "0";  
                oi.secret = "0";                
                oi.discontinue = "";
                oi.discontinue_time = "";
                oi.dispense = "";
                oi.dispense_time = "";
                oi.vertifier = "";
                oi.vertify_time = "";
                oi.executer = "";
                oi.executed_time = "";
                oi.visit_id = theVisit.getObjectId();
                oi.hn = theVisit.patient_id;
                oi.order_user = theHO.theEmployee.getObjectId();
                oi.order_time = date_time;
                oi.clinic_code = theHO.theServicePoint.getObjectId();    
                
                String idGroup = oi.item_group_code_category;
                CategoryGroupItem theCategoryGroupItem = new CategoryGroupItem();
                theCategoryGroupItem = theHC.theLookupControl
                    .readCategoryGroupItemById(idGroup);   
                 if (theCategoryGroupItem.category_group_code.equals("1")) 
                 {    
                    OrderItemDrug  orderItemDrug = theHC.theOrderControl
                        .readOrderItemDrugByItemId(oii.getObjectId());
                    
                    if(orderItemDrug!= null)
                    {   
                        oid = new OrderItemDrug();
                        oi.qty = ((OrderItem)vVnOrderItem.get(i)).qty;
                        oid.instruction = orderItemDrug.instruction;
                        oid.printing = orderItemDrug.printing;
                        oid.purch_uom = orderItemDrug.purch_uom;
                        oid.usage_special = orderItemDrug.usage_special;
                        oid.usage_text = orderItemDrug.usage_text;
                        oid.use_uom = orderItemDrug.use_uom;
                        oid.frequency  = orderItemDrug.frequency;
                        oid.caution = orderItemDrug.caution;
                        oid.day_time = orderItemDrug.day_time;
                        oid.description = orderItemDrug.description;
                        oid.dose = orderItemDrug.dose;
                        oid.item_id = orderItemDrug.item_id;
                        //vOrderItemDrug.add(oid);
                        if(resultmessage == 0)
                        {
                            vOrderItemDrug.add(oid);
                        }   
                    }
                    else
                    {
                        oi.qty = "0";
                        oid.instruction = "1510000000001";
                        oid.printing = "1";
                        oid.purch_uom = "2520000000001";
                        oid.usage_special = "";
                        oid.usage_text = "";
                        oid.use_uom = "2520000000001";
                        oid.frequency  = "1500000000001";
                        oid.caution = "";
                        oid.day_time = "";
                        oid.description = "";
                        oid.dose = "0";
                        oid.item_id = ((OrderItem)vVnOrderItem.get(i)).item_code;
                        if(resultmessage == 0)
                        {
                            vOrderItemDrug.add(oid);
                        }  
                    }
                    orderItemDrug = null;
                 }
                 else
                 {  
                     //oi.qty = "1";
                     oi.qty = ((OrderItem)vVnOrderItem.get(i)).qty;
                 }
                if(resultmessage == 0){
                    vOrderItem.add(oi);
                    theHC.theOrderControl.saveOrderItem(oi, oid);
                }  
            }       
    }
    
    private void setDialog()
    {
        setSize(550, 340);
        setTitle(Constant.getTextBundle("รายการสั่งตรวจรักษา"));
        setLanguage("");
        Toolkit thekit = getToolkit();       
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();//thekit.getScreenSize();
        setLocation((screenSize.width-getSize().width)/2, (screenSize.height-getSize().height)/2);
                
//        setVisible(true);  
    }
    
    public void showDialog(Patient p, Visit v, boolean a)
    {  
        thePatient = p;
        theVisit = v;
        showVn= a;
        setOrderV(null);
        selectTable(); 
        setVisible(true);
    }    
    
    public void setLanguage(String msg)
    {
        GuiLang.setLanguage(jButtonAdd);
	GuiLang.setLanguage(jButtonCancel);
	GuiLang.setLanguage(colVn);
	GuiLang.setLanguage(colDate);
        GuiLang.setLanguage(col_Item);
        GuiLang.setLanguage(jCheckBoxAll);
	GuiLang.setLanguage(jCheckBoxDrug);
	GuiLang.setLanguage(jCheckBoxService);
	GuiLang.setLanguage(jCheckBoxMedSupply);
        GuiLang.setLanguage(jCheckBoxLab);
        GuiLang.setLanguage(jCheckBoxXray);
	GuiLang.setTextBundle(jPanel2);
	GuiLang.setTextBundle(jPanel3); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JCheckBox jCheckBoxAll;
    private javax.swing.JCheckBox jCheckBoxDrug;
    private javax.swing.JCheckBox jCheckBoxLab;
    private javax.swing.JCheckBox jCheckBoxMedSupply;
    private javax.swing.JCheckBox jCheckBoxService;
    private javax.swing.JCheckBox jCheckBoxXray;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.hosv3.gui.component.HJTableSort jTableListDetailOrderSet;
    private com.hosv3.gui.component.HJTableSort jTableListOrderSet;
    // End of variables declaration//GEN-END:variables
    
}
