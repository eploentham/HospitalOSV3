/*
 * PanelOrder.java
 *
 * Created on 29 กันยายน 2546, 9:32 น.
 */
package com.hosv3.gui.panel.detail;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.border.*;

import com.hosv3.object.*;
import com.hosv3.control.*;
import com.hosv3.control.lookup.*;
import com.hosv3.utility.*;
import com.hosv3.utility.connection.*;

import com.hospital_os.object.*;
import com.hospital_os.utility.*;
import com.hosv3.utility.Constant;
import com.hospital_os.gui.connection.*;
import javax.swing.text.JTextComponent;

/**
 *
 * @author  Surachai Thowong
 * @modify amp
 * @modify pu
 *
 */
public class PDOrder extends javax.swing.JPanel implements InfPanelOrder,InfSelectList
{
    HosObject theHO;
    HosControl theHC;
    UpdateStatus theUS;
    
    public final static String CARD_BLANK = "CARD_BLANK";
    public final static String CARD_DRUG = "CARD_DRUG";
    static final long serialVersionUID=0;
    public final static String CARD_SERVICE = "CARD_SERVICE";
    public final static String CARD_SERVICE_DF = "CARD_SERVICE_DF";
    public final static String CARD_SERVICE_OPERATOR = "CARD_SERVICE_OPERATOR";
    public final static String CARD_SUPPLY = "CARD_SUPPLY";
    public final static String CARD_LAB = "CARD_LAB";
    public boolean show_cancel_order = true;

    /** ใช้ในการตรวจสอบการ Double-Click */
    /*วิธีการใช้ยา*/
    OrderItem theOrderItem;
    OrderItemDrug theOrderItemDrug;
    DrugDoseShortcut theDrugDoseShortcut;
    OrderLabSecret theOrderLabSecret;
    ComboFix theComboFix = null;
    ComboFix theEmployeeComboFix = null;
    /** Creates new form PanelOrder */
    CardLayout layoutOrder;
    CardLayout layoutDrug;
    private Item theItem;

    public PDOrder()
    {
        initComponents();
        setLanguage(null);
        layoutDrug = (CardLayout)jPanelSPU.getLayout();
        layoutOrder = (CardLayout)this.getLayout();
        setEnableCardBlank(false);
    }
    public void setControl(HosControl hc, UpdateStatus us)
    {
        theHC = hc;
        theHO = hc.theHO;
        theUS = us;
        jComboBoxInstruction.setControl(null,new DrugInstructionLookup(hc.theLookupControl),new DrugInstruction2());
        jComboBoxFrequency.setControl(null,new DrugFrequencyLookup(hc.theLookupControl),new DrugFrequency2());
        jComboBoxUse.setControl(null,new DoseUomLookup(hc.theLookupControl),new Uom2());
        jComboBoxDrugDoseShortcut.setControl(new DrugDoseShortcutLookup(hc.theLookupControl), false);
        jComboBoxDrugDoseShortcut.refresh();
        jCheckBoxSecret.setVisible(false);
        ComboboxModel.initComboBox(jComboBoxDoctor1,theHC.theLookupControl.listDoctor());
        jComboBoxDoctor1.insertItemAt(HosObject.getEmployeeUD(),0);
        jComboBoxDoctor1.setSelectedIndex(0);
        theHC.theLookupControl.listOrderSpecified();
    }
/** This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupaKeySearch = new javax.swing.ButtonGroup();
        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelDrug = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxSpecialUsage = new javax.swing.JCheckBox();
        jLabelDoseShortcut = new javax.swing.JLabel();
        jComboBoxDrugDoseShortcut = new com.hosv3.gui.component.HosComboBoxStd();
        jPanelSPU = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jComboBoxInstruction = new com.hosv3.gui.component.HosComboBox();
        jComboBoxFrequency = new com.hosv3.gui.component.HosComboBox();
        jComboBoxUse = new com.hosv3.gui.component.HosComboBox();
        jTextFieldUseUnit = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextAreaTextUsage = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabelDrugInstruction = new javax.swing.JLabel();
        jTextFieldCaution = new javax.swing.JTextField();
        jTextFieldDescription = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTotalDay = new com.hospital_os.utility.DoubleTextField();
        jButtonReturnDrug = new javax.swing.JButton();
        jTextFieldQtyReturn = new com.hospital_os.utility.DoubleTextField();
        jLabelReturnDrug = new javax.swing.JLabel();
        DayForUse = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButtonSaveOrderDrug = new javax.swing.JButton();
        jTextFieldQtyUnit = new javax.swing.JTextField();
        jLabelQtyUnit = new javax.swing.JLabel();
        jPanelLab = new javax.swing.JPanel();
        jCheckBoxSecret = new javax.swing.JCheckBox();
        jTextFieldCodeLabSecret = new javax.swing.JTextField();
        jButtonSaveLab = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelNote = new javax.swing.JLabel();
        jTextFieldCautionLab = new javax.swing.JTextField();
        jPanelSupply = new javax.swing.JPanel();
        jLabelQty = new javax.swing.JLabel();
        jTextFieldQty = new com.hospital_os.utility.DoubleTextField();
        jLabelQty1 = new javax.swing.JLabel();
        jButtonSaveOrderSupply = new javax.swing.JButton();
        jTextFieldCautionSupply = new javax.swing.JTextField();
        jLabelNote1 = new javax.swing.JLabel();
        jPanelBlank = new javax.swing.JPanel();
        jLabelCause = new javax.swing.JLabel();
        jLabelEmployee = new javax.swing.JLabel();
        jLabelEmployee1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabelCause1 = new javax.swing.JTextArea();
        jLabelNote3 = new javax.swing.JLabel();
        jTextFieldCautionBlank = new javax.swing.JTextField();
        jPanelService = new javax.swing.JPanel();
        jLabelServicePrice = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldServicePrice = new com.hospital_os.utility.DoubleTextField();
        jTextFieldServiceQty = new com.hospital_os.utility.DoubleTextField();
        jLabel61 = new javax.swing.JLabel();
        jTextFieldCautionService = new javax.swing.JTextField();
        jLabelNote2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxDoctor1 = new com.hosv3.gui.component.HosComboBox();
        jButtonSaveOrderService = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.CardLayout());

        jPanelDrug.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jCheckBoxSpecialUsage.setFont(defaultFont1);
        jCheckBoxSpecialUsage.setText("วิธีใช้แบบพิเศษ");
        jCheckBoxSpecialUsage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSpecialUsageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jCheckBoxSpecialUsage, gridBagConstraints);

        jLabelDoseShortcut.setFont(defaultFont1);
        jLabelDoseShortcut.setText("Dose ย่อ ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabelDoseShortcut, gridBagConstraints);

        jComboBoxDrugDoseShortcut.setFont(defaultFont1);
        jComboBoxDrugDoseShortcut.setMinimumSize(new java.awt.Dimension(75, 24));
        jComboBoxDrugDoseShortcut.setPreferredSize(new java.awt.Dimension(75, 24));
        jComboBoxDrugDoseShortcut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBoxDrugDoseShortcutMouseReleased(evt);
            }
        });
        jComboBoxDrugDoseShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDrugDoseShortcutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jComboBoxDrugDoseShortcut, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelDrug.add(jPanel1, gridBagConstraints);

        jPanelSPU.setLayout(new java.awt.CardLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jComboBoxInstruction.setFont(defaultFont1);
        jComboBoxInstruction.setMinimumSize(new java.awt.Dimension(121, 24));
        jComboBoxInstruction.setPreferredSize(new java.awt.Dimension(121, 24));
        jComboBoxInstruction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBoxInstructionMouseReleased(evt);
            }
        });
        jComboBoxInstruction.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxInstructionFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jComboBoxInstruction, gridBagConstraints);

        jComboBoxFrequency.setFont(defaultFont1);
        jComboBoxFrequency.setMinimumSize(new java.awt.Dimension(121, 24));
        jComboBoxFrequency.setPreferredSize(new java.awt.Dimension(121, 24));
        jComboBoxFrequency.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBoxFrequencyMouseReleased(evt);
            }
        });
        jComboBoxFrequency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxFrequencyFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        jPanel7.add(jComboBoxFrequency, gridBagConstraints);

        jComboBoxUse.setFont(defaultFont1);
        jComboBoxUse.setMinimumSize(new java.awt.Dimension(81, 24));
        jComboBoxUse.setPreferredSize(new java.awt.Dimension(81, 24));
        jComboBoxUse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBoxUseMouseReleased(evt);
            }
        });
        jComboBoxUse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxUseActionPerformed(evt);
            }
        });
        jComboBoxUse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxUseFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jComboBoxUse, gridBagConstraints);

        jTextFieldUseUnit.setMinimumSize(new java.awt.Dimension(40, 24));
        jTextFieldUseUnit.setPreferredSize(new java.awt.Dimension(40, 24));
        jTextFieldUseUnit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldUseUnitFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldUseUnitFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jTextFieldUseUnit, gridBagConstraints);

        jPanelSPU.add(jPanel7, "Normal");

        jPanel6.setMinimumSize(new java.awt.Dimension(156, 40));
        jPanel6.setPreferredSize(new java.awt.Dimension(156, 40));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jScrollPane11.setMinimumSize(new java.awt.Dimension(22, 45));
        jScrollPane11.setPreferredSize(new java.awt.Dimension(22, 45));

        jTextAreaTextUsage.setFont(defaultFont1);
        jTextAreaTextUsage.setLineWrap(true);
        jScrollPane11.setViewportView(jTextAreaTextUsage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jScrollPane11, gridBagConstraints);

        jPanelSPU.add(jPanel6, "Special");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanelDrug.add(jPanelSPU, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabelDrugInstruction.setFont(defaultFont1);
        jLabelDrugInstruction.setText("คำอธิบาย");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel5.add(jLabelDrugInstruction, gridBagConstraints);

        jTextFieldCaution.setFont(defaultFont1);
        jTextFieldCaution.setMinimumSize(new java.awt.Dimension(180, 24));
        jTextFieldCaution.setPreferredSize(new java.awt.Dimension(180, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        jPanel5.add(jTextFieldCaution, gridBagConstraints);

        jTextFieldDescription.setFont(defaultFont1);
        jTextFieldDescription.setMinimumSize(new java.awt.Dimension(180, 24));
        jTextFieldDescription.setPreferredSize(new java.awt.Dimension(180, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        jPanel5.add(jTextFieldDescription, gridBagConstraints);

        jLabel3.setFont(defaultFont1);
        jLabel3.setText("คำเตือน /");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        jPanel5.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelDrug.add(jPanel5, gridBagConstraints);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(defaultFont1);
        jLabel2.setText("ปริมาณ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel2, gridBagConstraints);

        jTextFieldTotalDay.setColumns(3);
        jTextFieldTotalDay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTotalDay.setFont(defaultFont1);
        jTextFieldTotalDay.setMinimumSize(new java.awt.Dimension(25, 23));
        jTextFieldTotalDay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldTotalDayFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTotalDayFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jTextFieldTotalDay, gridBagConstraints);

        jButtonReturnDrug.setFont(defaultFont1);
        jButtonReturnDrug.setText("คืนยา");
        jButtonReturnDrug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReturnDrugActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jButtonReturnDrug, gridBagConstraints);

        jTextFieldQtyReturn.setColumns(3);
        jTextFieldQtyReturn.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQtyReturn.setText("0");
        jTextFieldQtyReturn.setFont(defaultFont1);
        jTextFieldQtyReturn.setMinimumSize(new java.awt.Dimension(25, 23));
        jTextFieldQtyReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQtyReturnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jTextFieldQtyReturn, gridBagConstraints);

        jLabelReturnDrug.setFont(defaultFont1);
        jLabelReturnDrug.setText("จำนวนที่คืน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabelReturnDrug, gridBagConstraints);

        DayForUse.setFont(defaultFont1);
        DayForUse.setText("ระยะเวลา");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel9.add(DayForUse, gridBagConstraints);

        jLabel8.setFont(defaultFont1);
        jLabel8.setText("วัน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel8, gridBagConstraints);

        jButtonSaveOrderDrug.setFont(defaultFont1);
        jButtonSaveOrderDrug.setText("บันทึก");
        jButtonSaveOrderDrug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveOrderDrugActionPerformed(evt);
            }
        });
        jButtonSaveOrderDrug.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButtonSaveOrderDrugKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jButtonSaveOrderDrug, gridBagConstraints);

        jTextFieldQtyUnit.setFont(defaultFont1);
        jTextFieldQtyUnit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldQtyUnit.setMinimumSize(new java.awt.Dimension(50, 22));
        jTextFieldQtyUnit.setPreferredSize(new java.awt.Dimension(50, 22));
        jTextFieldQtyUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQtyUnitActionPerformed(evt);
            }
        });
        jTextFieldQtyUnit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtyUnitFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jTextFieldQtyUnit, gridBagConstraints);

        jLabelQtyUnit.setFont(defaultFont1);
        jLabelQtyUnit.setText("หน่วยจ่าย");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabelQtyUnit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        jPanelDrug.add(jPanel9, gridBagConstraints);

        add(jPanelDrug, "CARD_DRUG");

        jPanelLab.setLayout(new java.awt.GridBagLayout());

        jCheckBoxSecret.setFont(defaultFont1);
        jCheckBoxSecret.setText("เป็นความลับ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelLab.add(jCheckBoxSecret, gridBagConstraints);

        jTextFieldCodeLabSecret.setFont(defaultFont1);
        jTextFieldCodeLabSecret.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldCodeLabSecret.setMinimumSize(new java.awt.Dimension(100, 24));
        jTextFieldCodeLabSecret.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelLab.add(jTextFieldCodeLabSecret, gridBagConstraints);

        jButtonSaveLab.setFont(defaultFont1);
        jButtonSaveLab.setText("บันทึก");
        jButtonSaveLab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveLabActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelLab.add(jButtonSaveLab, gridBagConstraints);

        jLabel1.setFont(defaultFont1);
        jLabel1.setText("รหัสสิ่งส่งตรวจ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelLab.add(jLabel1, gridBagConstraints);

        jLabelNote.setFont(defaultFont1);
        jLabelNote.setText("หมายเหตุ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelLab.add(jLabelNote, gridBagConstraints);

        jTextFieldCautionLab.setFont(defaultFont1);
        jTextFieldCautionLab.setMinimumSize(new java.awt.Dimension(250, 21));
        jTextFieldCautionLab.setPreferredSize(new java.awt.Dimension(250, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanelLab.add(jTextFieldCautionLab, gridBagConstraints);

        add(jPanelLab, "CARD_LAB");

        jPanelSupply.setRequestFocusEnabled(false);
        jPanelSupply.setLayout(new java.awt.GridBagLayout());

        jLabelQty.setFont(defaultFont1);
        jLabelQty.setText("จำนวนวัสดุ ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelSupply.add(jLabelQty, gridBagConstraints);

        jTextFieldQty.setColumns(5);
        jTextFieldQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQty.setText("1");
        jTextFieldQty.setFont(defaultFont1);
        jTextFieldQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQtyFocusLost(evt);
            }
        });
        jTextFieldQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldQtyKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSupply.add(jTextFieldQty, gridBagConstraints);

        jLabelQty1.setFont(defaultFont1);
        jLabelQty1.setText("ชิ้น/อัน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSupply.add(jLabelQty1, gridBagConstraints);

        jButtonSaveOrderSupply.setFont(defaultFont1);
        jButtonSaveOrderSupply.setText("บันทึก");
        jButtonSaveOrderSupply.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jButtonSaveOrderSupply.setMaximumSize(new java.awt.Dimension(65, 25));
        jButtonSaveOrderSupply.setMinimumSize(new java.awt.Dimension(65, 25));
        jButtonSaveOrderSupply.setPreferredSize(new java.awt.Dimension(65, 25));
        jButtonSaveOrderSupply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveOrderSupplyActionPerformed(evt);
            }
        });
        jButtonSaveOrderSupply.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButtonSaveOrderSupplyKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelSupply.add(jButtonSaveOrderSupply, gridBagConstraints);

        jTextFieldCautionSupply.setFont(defaultFont1);
        jTextFieldCautionSupply.setMinimumSize(new java.awt.Dimension(250, 21));
        jTextFieldCautionSupply.setPreferredSize(new java.awt.Dimension(250, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelSupply.add(jTextFieldCautionSupply, gridBagConstraints);

        jLabelNote1.setFont(defaultFont1);
        jLabelNote1.setText("หมายเหตุ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelSupply.add(jLabelNote1, gridBagConstraints);

        add(jPanelSupply, "CARD_SUPPLY");

        jPanelBlank.setLayout(new java.awt.GridBagLayout());

        jLabelCause.setFont(defaultFont1);
        jLabelCause.setText("สาเหตุการยกเลิก");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelBlank.add(jLabelCause, gridBagConstraints);

        jLabelEmployee.setFont(defaultFont1);
        jLabelEmployee.setText("ผู้ยกเลิก");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanelBlank.add(jLabelEmployee, gridBagConstraints);

        jLabelEmployee1.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelBlank.add(jLabelEmployee1, gridBagConstraints);

        jLabelCause1.setEditable(false);
        jLabelCause1.setLineWrap(true);
        jLabelCause1.setWrapStyleWord(true);
        jLabelCause1.setEnabled(false);
        jScrollPane3.setViewportView(jLabelCause1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanelBlank.add(jScrollPane3, gridBagConstraints);

        jLabelNote3.setFont(defaultFont1);
        jLabelNote3.setText("หมายเหตุ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanelBlank.add(jLabelNote3, gridBagConstraints);

        jTextFieldCautionBlank.setFont(defaultFont1);
        jTextFieldCautionBlank.setMinimumSize(new java.awt.Dimension(250, 21));
        jTextFieldCautionBlank.setPreferredSize(new java.awt.Dimension(250, 21));
        jTextFieldCautionBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCautionBlankActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanelBlank.add(jTextFieldCautionBlank, gridBagConstraints);

        add(jPanelBlank, "CARD_BLANK");

        jPanelService.setLayout(new java.awt.GridBagLayout());

        jLabelServicePrice.setFont(defaultFont1);
        jLabelServicePrice.setText("ราคาค่าบริการ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelService.add(jLabelServicePrice, gridBagConstraints);

        jLabel5.setFont(defaultFont1);
        jLabel5.setText("จำนวน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelService.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(defaultFont1);
        jLabel6.setText("ครั้ง");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelService.add(jLabel6, gridBagConstraints);

        jTextFieldServicePrice.setColumns(5);
        jTextFieldServicePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldServicePrice.setText("0");
        jTextFieldServicePrice.setFont(defaultFont1);
        jTextFieldServicePrice.setMinimumSize(new java.awt.Dimension(61, 22));
        jTextFieldServicePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldServicePriceKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelService.add(jTextFieldServicePrice, gridBagConstraints);

        jTextFieldServiceQty.setColumns(5);
        jTextFieldServiceQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldServiceQty.setText("1");
        jTextFieldServiceQty.setFont(defaultFont1);
        jTextFieldServiceQty.setMinimumSize(new java.awt.Dimension(61, 22));
        jTextFieldServiceQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldServiceQtyFocusLost(evt);
            }
        });
        jTextFieldServiceQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldServiceQtyKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelService.add(jTextFieldServiceQty, gridBagConstraints);

        jLabel61.setFont(defaultFont1);
        jLabel61.setText("บาท");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelService.add(jLabel61, gridBagConstraints);

        jTextFieldCautionService.setFont(defaultFont1);
        jTextFieldCautionService.setMinimumSize(new java.awt.Dimension(250, 21));
        jTextFieldCautionService.setPreferredSize(new java.awt.Dimension(250, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelService.add(jTextFieldCautionService, gridBagConstraints);

        jLabelNote2.setFont(defaultFont1);
        jLabelNote2.setText("หมายเหตุ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelService.add(jLabelNote2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jComboBoxDoctor1.setMinimumSize(new java.awt.Dimension(150, 21));
        jComboBoxDoctor1.setPreferredSize(new java.awt.Dimension(150, 21));
        jComboBoxDoctor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDoctor1ActionPerformed(evt);
            }
        });
        jComboBoxDoctor1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBoxDoctor1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel4.add(jComboBoxDoctor1, gridBagConstraints);

        jButtonSaveOrderService.setFont(defaultFont1);
        jButtonSaveOrderService.setText("Save");
        jButtonSaveOrderService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveOrderServiceActionPerformed(evt);
            }
        });
        jButtonSaveOrderService.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButtonSaveOrderServiceKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jButtonSaveOrderService, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelService.add(jPanel4, gridBagConstraints);

        jLabel13.setFont(defaultFont1);
        jLabel13.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelService.add(jLabel13, gridBagConstraints);

        add(jPanelService, "CARD_SERVICE");
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxFrequencyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxFrequencyMouseReleased
        JTextComponent editor = (JTextComponent) jComboBoxFrequency.getEditor().getEditorComponent();
        editor.setSelectionStart(0);
        editor.setSelectionStart(editor.getText().length());
    }//GEN-LAST:event_jComboBoxFrequencyMouseReleased

    private void jComboBoxUseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxUseMouseReleased
        JTextComponent editor = (JTextComponent) jComboBoxUse.getEditor().getEditorComponent();
        editor.setSelectionStart(0);
        editor.setSelectionStart(editor.getText().length());
    }//GEN-LAST:event_jComboBoxUseMouseReleased

    private void jComboBoxInstructionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxInstructionMouseReleased
        JTextComponent editor = (JTextComponent) jComboBoxInstruction.getEditor().getEditorComponent();
        editor.setSelectionStart(0);
        editor.setSelectionStart(editor.getText().length());
    }//GEN-LAST:event_jComboBoxInstructionMouseReleased

    private void jComboBoxDrugDoseShortcutMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxDrugDoseShortcutMouseReleased
        JTextComponent editor = (JTextComponent) jComboBoxDrugDoseShortcut.getEditor().getEditorComponent();
        editor.setSelectionStart(0);
        editor.setSelectionStart(editor.getText().length());
    }//GEN-LAST:event_jComboBoxDrugDoseShortcutMouseReleased

    private void jTextFieldCautionBlankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCautionBlankActionPerformed
        this.saveOrderItem();
    }//GEN-LAST:event_jTextFieldCautionBlankActionPerformed

    private void jTextFieldUseUnitFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUseUnitFocusGained
        jTextFieldUseUnit.selectAll();
    }//GEN-LAST:event_jTextFieldUseUnitFocusGained

    private void jTextFieldUseUnitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUseUnitFocusLost
        calculateAmountByDate(theOrderItem,theOrderItemDrug,true);
    }//GEN-LAST:event_jTextFieldUseUnitFocusLost

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        this.jComboBoxDrugDoseShortcut.requestFocus();
    }//GEN-LAST:event_formFocusGained

    private void jTextFieldTotalDayFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTotalDayFocusGained
        jTextFieldTotalDay.selectAll();
    }//GEN-LAST:event_jTextFieldTotalDayFocusGained

    private void jComboBoxFrequencyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxFrequencyFocusGained
        
    }//GEN-LAST:event_jComboBoxFrequencyFocusGained

    private void jComboBoxUseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxUseFocusGained
        
    }//GEN-LAST:event_jComboBoxUseFocusGained

    private void jComboBoxInstructionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxInstructionFocusGained
        
    }//GEN-LAST:event_jComboBoxInstructionFocusGained

    private void jTextFieldQtyUnitFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtyUnitFocusGained
        jTextFieldQtyUnit.selectAll();
    }//GEN-LAST:event_jTextFieldQtyUnitFocusGained

    private void jTextFieldQtyReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQtyReturnActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQtyReturnActionPerformed

    private void jComboBoxDrugDoseShortcutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxDrugDoseShortcutActionPerformed
    {//GEN-HEADEREND:event_jComboBoxDrugDoseShortcutActionPerformed
        String code = Gutil.getGuiData(jComboBoxDrugDoseShortcut);        
        theDrugDoseShortcut =  theHC.theLookupControl.readDrugDoseShortcutByCode(code);
        setDrugDoseShortcut(theDrugDoseShortcut); 
    }//GEN-LAST:event_jComboBoxDrugDoseShortcutActionPerformed
                        
    private void jComboBoxUseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxUseActionPerformed
    {//GEN-HEADEREND:event_jComboBoxUseActionPerformed
        if(theOrderItemDrug!=null)
        {
            theOrderItemDrug.use_uom = jComboBoxUse.getText();
        }
    }//GEN-LAST:event_jComboBoxUseActionPerformed
    
    private void jButtonSaveLabActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveLabActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveLabActionPerformed
        theOrderLabSecret.specimen_code = Gutil.CheckReservedWords(jTextFieldCodeLabSecret.getText());
        saveOrderItem();
    }//GEN-LAST:event_jButtonSaveLabActionPerformed
                            
    private void jTextFieldQtyUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQtyUnitActionPerformed
        jButtonSaveOrderDrugActionPerformed(null);
    }//GEN-LAST:event_jTextFieldQtyUnitActionPerformed
                                
    private void jButtonSaveOrderDrugKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonSaveOrderDrugKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jButtonSaveOrderDrugActionPerformed(null);
        }
    }//GEN-LAST:event_jButtonSaveOrderDrugKeyReleased
        
    private void jButtonSaveOrderSupplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveOrderSupplyActionPerformed
        if(jTextFieldQty.getText().equals(""))
        {
            theUS.setStatus("กรุณากรอกจำนวนเวชภัณฑ์ก่อนทำการบันทึก",theUS.WARNING);
            return;
        }
        double qty = Double.parseDouble(jTextFieldQty.getText());
        if(qty < 1)
        {
            theUS.setStatus("กรุณากรอกจำนวนเวชภัณฑ์ที่มากกว่า 0 ก่อนทำการบันทึก",theUS.WARNING);
            return;
        }
        saveOrderItem();
    }//GEN-LAST:event_jButtonSaveOrderSupplyActionPerformed
    
    private void jCheckBoxSpecialUsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSpecialUsageActionPerformed
        String usagespacial = "";
        if(jCheckBoxSpecialUsage.isSelected())
        {
            usagespacial = "1";
            layoutDrug.show(jPanelSPU,"Special");
            jTextAreaTextUsage.requestFocus();
        }
        else
        {
            usagespacial = "0";
            layoutDrug.show(jPanelSPU,"Normal");
            this.jComboBoxInstruction.requestFocus();
        }
    }//GEN-LAST:event_jCheckBoxSpecialUsageActionPerformed
                            
    private void jButtonSaveOrderSupplyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonSaveOrderSupplyKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_UP)
            jTextFieldQty.requestFocus();

    }//GEN-LAST:event_jButtonSaveOrderSupplyKeyReleased
    
    private void jTextFieldServicePriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldServicePriceKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_DOWN)
            jTextFieldServiceQty.requestFocus();
    }//GEN-LAST:event_jTextFieldServicePriceKeyReleased
    
    private void jButtonSaveOrderServiceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonSaveOrderServiceKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_UP)
            jTextFieldServiceQty.requestFocus();
    }//GEN-LAST:event_jButtonSaveOrderServiceKeyReleased
    
    private void jTextFieldQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQtyKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_DOWN)
        {
            jButtonSaveOrderSupply.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldQtyKeyReleased
    
    private void jTextFieldServiceQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldServiceQtyKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_DOWN)
            jButtonSaveOrderService.requestFocus();
        if(evt.getKeyCode() == KeyEvent.VK_UP)
            jTextFieldServicePrice.requestFocus();
    }//GEN-LAST:event_jTextFieldServiceQtyKeyReleased
    
    private void jTextFieldServiceQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldServiceQtyFocusLost
//         if(jTextFieldQty.getText().equals("0")
//            ||jTextFieldQty.getText().equals("")){
//            jTextFieldQty.setText("1");
//        }
    }//GEN-LAST:event_jTextFieldServiceQtyFocusLost
    
    private void jTextFieldQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtyFocusLost
//        if(jTextFieldQty.getText().equals("0")
//            ||jTextFieldQty.getText().equals("")){
//            jTextFieldQty.setText("1");
//        }
    }//GEN-LAST:event_jTextFieldQtyFocusLost
        
    private void jButtonSaveOrderServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveOrderServiceActionPerformed
        if(jTextFieldServicePrice.getText().equals(""))
        {
            theUS.setStatus("กรุณากรอกราคาค่าบริการก่อนทำการบันทึก", theUS.WARNING);
            return;
        }
        if(jTextFieldServiceQty.getText().equals(""))
        {
            theUS.setStatus("กรุณากรอกจำนวนครั้งในการให้บริการก่อนทำการบันทึก", theUS.WARNING);
            return;
        }
        double qty = Double.parseDouble(jTextFieldServiceQty.getText());
        if(qty < 1)
        {
            theUS.setStatus("กรุณากรอกจำนวนครั้งในการให้บริการที่มากกว่า0ก่อนทำการบันทึก",theUS.WARNING);
            return;
        }
        saveOrderItem();
    }//GEN-LAST:event_jButtonSaveOrderServiceActionPerformed
        
    private void jTextFieldTotalDayFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTotalDayFocusLost
        calculateAmountByDate(theOrderItem,theOrderItemDrug,true);
    }//GEN-LAST:event_jTextFieldTotalDayFocusLost
    
    private void jButtonReturnDrugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReturnDrugActionPerformed
        theHC.theOrderControl.saveReturnDrug(theOrderItem,jTextFieldQtyReturn.getText());
    }//GEN-LAST:event_jButtonReturnDrugActionPerformed
    
    private void jButtonSaveOrderDrugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveOrderDrugActionPerformed
        if(jCheckBoxSpecialUsage.isSelected() && jTextAreaTextUsage.getText().equals(""))
        {
            theUS.setStatus("กรุณากรอกวิธีการใช้เป็นพิเศษก่อนทำการบันทึก", theUS.WARNING);
            return;
        }
        saveOrderItem();
    }//GEN-LAST:event_jButtonSaveOrderDrugActionPerformed

    private void jComboBoxDoctor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDoctor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDoctor1ActionPerformed

    private void jComboBoxDoctor1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxDoctor1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDoctor1KeyReleased
                /**
     *กำหนดรายละเอียดของการใช้ยา ตามรายการ Dose ย่อที่เลือกจาก ComboBox
     *@Author pu
     *@Date 07/08/2549
     */
    public boolean saveOrderItem(){
        return theHC.theOrderControl.saveOrderItem(getOrderItem(),getOrderItemDrug(),theOrderLabSecret);
    }
    private void setDrugDoseShortcut(DrugDoseShortcut ddsc)
    {        
        theDrugDoseShortcut = ddsc;
        if(theDrugDoseShortcut == null) 
            return;
        Gutil.setGuiData(jComboBoxInstruction,theDrugDoseShortcut.drug_instruction_id);
        Gutil.setGuiData(jComboBoxFrequency,theDrugDoseShortcut.drug_frequency_id);
        jTextFieldUseUnit.setText(theDrugDoseShortcut.qty);
    }
    
    private void calculateAmountByDate(OrderItem oi,OrderItemDrug oid,boolean alert)
    {
//        //Constant.println("private void calculateAmountByDate(OrderItem oi,OrderItemDrug oid,boolean alert)");
        //String use_uom = Gutil.getGuiData(this.jComboBoxUse);
        //Uom2 uom2 = theHC.theLookupControl.readUomByDes(jLabelQtyUnit.getText());
        if(alert && !oid.purch_uom.equals(oid.use_uom))
        {
            Constant.println(oid.purch_uom + ":" + oid.use_uom);
            theUS.setStatus(Constant.getTextBundle("หน่วยยาที่ใช้และจ่ายต่างกัน") + " "+
                    Constant.getTextBundle("ไม่สามารถคำนวณจำนวนยาได้"),UpdateStatus.WARNING);
            return;
        }
        DrugFrequency df = (DrugFrequency)jComboBoxFrequency.getSelectedItem();
        try
        {
            double freq = Double.parseDouble(df.factor);
            double use_qty = Double.parseDouble(this.jTextFieldUseUnit.getText());
            double day = Double.parseDouble(this.jTextFieldTotalDay.getText());
            if(day ==0)
                return ;
            this.jTextFieldQtyUnit.setText(String.valueOf(freq*use_qty*day));
        }
        catch(Exception e)
        {
            if(alert)
                theUS.setStatus(Constant.getTextBundle("การคำนวณจำนวนยาเกิดความผิดพลาด"),UpdateStatus.WARNING);
            Constant.println("exception df:" + df.factor +" qty:"+ jTextFieldUseUnit.getText()
            +" day:"+ jTextFieldTotalDay.getText());
        }
    }
    public static int countWaitDispense(Vector theOrderItemV)
    {
        int queueDespense = 0;
        for(int i = 0 ; i< theOrderItemV.size() ; i++)
        {
            OrderItem theOrderItemVs = (OrderItem)theOrderItemV.get(i);
            if(theOrderItemVs.category_group.equals("1")
            && theOrderItemVs.charge_complete.equals(Active.isEnable())
            && theOrderItemVs.dispense != null
                    && !theOrderItemVs.dispense.equals(""))
            {
                queueDespense = queueDespense + 1;
            }
        }
        return queueDespense;
    }
    
    /*
     *ทำการดึงค่าจาก keyword มาเก็บเป็นค่า string
     *  input String keyword
     *  output String (ค่าของ string)
     */
    public OrderItem getOrderItem()
    {
        if(theOrderItem.isService()){
            theOrderItem.qty = jTextFieldServiceQty.getText();
            theOrderItem.price = jTextFieldServicePrice.getText();
            theOrderItem.note = this.jTextFieldCautionService.getText();
            theOrderItem.specified_data = Gutil.getGuiData(jComboBoxDoctor1);
        }
        else if(theOrderItem.isDrug()){ 
            theOrderItem.qty = jTextFieldQtyUnit.getText();
        }
        else if(theOrderItem.isSupply()){ 
            theOrderItem.qty = jTextFieldQty.getText();
            theOrderItem.note = this.jTextFieldCautionSupply.getText();
        }
        else{ 
            theOrderItem.note = this.jTextFieldCautionBlank.getText();
        }
        return theOrderItem;
    }
    public OrderItemDrug getOrderItemDrug()
    {
        if(theOrderItemDrug==null)
            return null;
        /*เต็มส่วนของ dose*/
        if(jCheckBoxSpecialUsage.isSelected())
        {/*dose แบบพิเศษ*/
            theOrderItemDrug.usage_special = "1";
            theOrderItemDrug.usage_text = Gutil.CheckReservedWords(jTextAreaTextUsage.getText());
            theOrderItemDrug.instruction = "1510000000001";
            theOrderItemDrug.frequency = "1500000000001";
            theOrderItemDrug.dose = "";
            theOrderItemDrug.use_uom = "2520000000001";
        }
        else
        {/*dose ปกติ*/
            theOrderItemDrug.usage_special = "0";
            theOrderItemDrug.usage_text = "";
            theOrderItemDrug.instruction = jComboBoxInstruction.getText();
            theOrderItemDrug.frequency = jComboBoxFrequency.getText();
            theOrderItemDrug.dose = jTextFieldUseUnit.getText();
            theOrderItemDrug.use_uom = jComboBoxUse.getText();
            theOrderItemDrug.status = theOrderItem.status;
        }
        theOrderItemDrug.caution = Gutil.CheckReservedWords(jTextFieldCaution.getText());
        theOrderItemDrug.description = Gutil.CheckReservedWords(jTextFieldDescription.getText());
        return theOrderItemDrug;
    }
    
    /**
     *เก็บข้อมูลรายการสั่งตรวจ(รายการยา) ที่ต้องการพิมพ์สติ๊กเกอร์
     *โดยไม่ต้องเลือกผู้ป่วย
     *@param item เป็น Object ของรายการสั่งตรวจที่เลือกจากรายการ Item
     *@param drug เป็น Object ของรายการสั่งตรวจที่เป็นรายการยา Drug
     *@return OrderItemDrug เป็น Object ของรายการตรวจรักษาที่สั่งพิมพ์
     *@Author pu
     *@date 20/07/2549
     */
    public OrderItemDrug getOrderItemDrug(Item item,Drug drug)
    {
        CategoryGroupItem cgi = theHC.theLookupControl.readCategoryGroupItemById(item.item_group_code_category);
        if(!cgi.category_group_code.equals(CategoryGroup.isDrug()))
        {
            return null;
        }
        OrderItemDrug oid = new OrderItemDrug();
        /*เต็มส่วนของ dose*/
        if(jCheckBoxSpecialUsage.isSelected())
        {/*dose แบบพิเศษ*/
            oid.usage_special = "1";
            oid.usage_text = Gutil.CheckReservedWords(jTextAreaTextUsage.getText());
            oid.instruction = "1510000000001";
            oid.frequency = "1500000000001";
            oid.dose = "";
            oid.use_uom = "2520000000001";
        }
        else
        {/*dose ปกติ*/
            oid.usage_special = "0";
            oid.usage_text = "";
            oid.instruction = jComboBoxInstruction.getText();
            oid.frequency = jComboBoxFrequency.getText();
            oid.dose = jTextFieldUseUnit.getText();
            oid.use_uom = jComboBoxUse.getText();
        }
        oid.caution = Gutil.CheckReservedWords(jTextFieldCaution.getText());
        oid.description = Gutil.CheckReservedWords(jTextFieldDescription.getText());
        oid.printing = drug.printting;
        oid.purch_uom = Gutil.CheckReservedWords(jLabelQtyUnit.getText());
        return oid;
    }
    
    
 
    /*
     *เป็นการเลือกรายการ item แล้วโปรแกรมจะแสดงรายละเอียดของ item นั้นและค่า default order
     *
     */
    public boolean setItem(Item item_order)
    {
        theItem = item_order;
        if(item_order==null)
        {
            layoutOrder.show(this,CARD_BLANK);
            return false;
        }
        String date_time = theHO.date_time;
        setBorder(new TitledBorder(null, item_order.common_name
                , TitledBorder.DEFAULT_JUSTIFICATION
                , TitledBorder.DEFAULT_POSITION, defaultFont1));
        CategoryGroupItem cgi = theHC.theLookupControl.readCategoryGroupItemById(item_order.item_group_code_category);
        Drug drug = theHC.theOrderControl.listDrugByItem(item_order.getObjectId());
//        System.err.println("drug.usage_text " + drug.usage_text);
//        if(!drug.usage_text.equals(""))
//        {
//            jCheckBoxSpecialUsage.setSelected(true);
//            jTextAreaTextUsage.setText(drug.usage_text);
//            jCheckBoxSpecialUsageActionPerformed(null);
//        }
        ItemPrice ip = theHC.theOrderControl.readItemPriceByItem(item_order.getObjectId()); 
        theOrderItem = theHO.initOrderItem(item_order,cgi,ip,date_time);

        OrderItemDrug oid=null;
        if(cgi.category_group_code.equals(CategoryGroup.isDrug()))
        {
            layoutOrder.show(this,CARD_DRUG);
            if(drug == null){
                theUS.setStatus(Constant.getTextBundle("ไม่พบรายละเอียดการใช้ยา") + " " +
                        Constant.getTextBundle("กรุณาตรวจสอบรายการยานี้ในหน้า Admin"), UpdateStatus.WARNING);
                theOrderItem.qty = "1";
            }
            else {
                theOrderItem.qty = drug.qty;
                oid = theHO.initOrderItemDrug(item_order,drug);
            }
        }
        setObject(theOrderItem,oid,null);
        if(drug!= null && !drug.usage_text.equals(""))
        {
            jCheckBoxSpecialUsage.setSelected(true);
            jTextAreaTextUsage.setText(drug.usage_text);
            jCheckBoxSpecialUsageActionPerformed(null);
        }
        return true;
    }
    
    /* จะโชว์รายการของยา วิธีการใช้ยา เอาจาก theDrug มา ซึ่งเป็น Object*/
    public boolean setOrderItem(OrderItem oi)
    {
        //Constant.println("public boolean setOrderItem(OrderItem oi)");
        theOrderItem = oi;
        OrderItemDrug oid = null;
        OrderLabSecret ols = null;
        if(oi!=null){
            setBorder(new TitledBorder(null, oi.common_name
                , TitledBorder.DEFAULT_JUSTIFICATION
                , TitledBorder.DEFAULT_POSITION, defaultFont1));
            if(oi.isDrug()){
                oid = oi.theOrderItemDrug;
                if(oid==null)
                    oid = theHC.theOrderControl.readOrderItemDrugByOid(oi.getObjectId());
            }
            if(oi.isLab() && oi.secret.equals("1"))
                ols = theHC.theOrderControl.readOrderLabSecret(oi.getObjectId());
        }
        setObject(oi,oid,ols);
        return true;
    }
    
    private void setObject(OrderItem oi,OrderItemDrug oid,OrderLabSecret ois)
    {
        
        //Constant.println("private void setObject(OrderItem oi,OrderItemDrug oid,OrderLabSecret ois)");
        theOrderLabSecret = ois;
        boolean is_charge = false;
        boolean is_lock = false;
        boolean is_dispense = false;
        boolean is_cancel = true;
        setEnableCardBlank(false);
        layoutOrder.show(this,CARD_BLANK);
        this.jTextFieldCautionBlank.setText("");
        this.jTextFieldCautionBlank.setVisible(false);
        this.jLabelNote3.setVisible(false);
        if(oi==null)
            return;

        this.jTextFieldCautionBlank.setVisible(true);
        this.jLabelNote3.setVisible(true);

        is_charge = oi.charge_complete.equals(Active.isEnable());
        is_cancel = theOrderItem.status.equals(OrderStatus.DIS_CONTINUE);
        is_dispense = oi.status.equals(OrderStatus.DISPENSE);
        
        if(theHO.theVisit != null)
        {
            is_lock = theHO.theVisit.locking.equals("1")
                && !theHO.theVisit.lock_user.equals(theHO.theEmployee.getObjectId());
        }
        setEnabledOther(!is_dispense && !is_lock && !is_cancel && !is_charge);
        setEnabledDrug(!is_lock&& !is_cancel);
        ////lab//////////////////////////////////////////////////\
        if(oi.isLab())
        {
            if(oi.status.equals(OrderStatus.DIS_CONTINUE))
            {
                layoutOrder.show(this,CARD_BLANK);
                setEnableCardBlank(true);
                if(oi.cause_cancel_resultlab.equals(""))
                {
                    jLabelCause1.setText("");
                    theUS.setStatus("กรุณาตรวจสอบสาเหตุการยกเลิกแลปอีกครั้งในฐานข้อมูล", UpdateStatus.WARNING);
                }
                else
                {
                    jLabelCause1.setText(oi.cause_cancel_resultlab);
                }
                Employee em = theHC.theLookupControl.readEmployeeById(oi.discontinue);
                if(em!=null)
                    jLabelEmployee1.setText(em.fname + " " + em.lname);
                else
                    jLabelEmployee1.setText(Constant.getTextBundle("ผู้ใช้งานบางคนถูกลบออกจากฐานข้อมูล"));
            }
            else
            {
                //amp:02/03/2549 เก็บรหัสสิ่งส่งตรวจในกรณีเป็น Lab ปกปิด
                if("1".equals(theOrderItem.secret))
                {
                    this.theOrderLabSecret = null;
                    theOrderLabSecret = new OrderLabSecret();
                    layoutOrder.show(this,CARD_LAB);
                    jTextFieldCodeLabSecret.setText("");
                    if(ois!=null)
                    {
                        if("3".equals(theHO.theEmployee.authentication_id)
                        || oi.vertifier.equals(theHO.theEmployee.getObjectId())
                        || oi.order_user.equals(theHO.theEmployee.getObjectId()))
                        {
                            jTextFieldCodeLabSecret.setText(ois.specimen_code);
                        }
                        else
                        {
                            jTextFieldCodeLabSecret.setText("*********");
                        }
                    }
                }
                else
                {
                    layoutOrder.show(this,CARD_BLANK);
                }
            }
            this.jTextFieldCautionBlank.setText(oi.note);
        }
        ////xray//////////////////////////////////////////////////
        if(oi.isXray())
        {
            layoutOrder.show(this,CARD_BLANK);
            this.jTextFieldCautionBlank.setText(oi.note);
        }
        ////supply//////////////////////////////////////////////////
        if(oi.isSupply())
        {
            layoutOrder.show(this,CARD_SUPPLY);
            jTextFieldQty.setText(oi.qty);
            ////////////////////////////////////////////////
            jTextFieldQty.setEditable(!is_charge && !is_lock);
            this.jTextFieldCautionSupply.setText(oi.note);
            
        }
        ////service//////////////////////////////////////////////////
        if(oi.isService())
        {
            
            layoutOrder.show(this,CARD_SERVICE);
            jTextFieldServicePrice.setText(oi.price);
            jTextFieldServiceQty.setText(oi.qty);
            this.jTextFieldCautionService.setText(oi.note);
            jLabel13.setVisible(false);
            jComboBoxDoctor1.setVisible(false);
            if((oi.specified!=null)&&(!oi.specified.equals("")) && oi.specified!=null && !oi.specified.equals("null"))
            {
                int index = Integer.parseInt(oi.specified);
                if(index <= (theHC.theLO.theOrderSpecified.size()-1))
                {
                    ComboFix comboFix = (ComboFix) theHC.theLO.theOrderSpecified.get(index);
                    jLabel13.setText(comboFix.name);
                }
                jLabel13.setVisible(true);
                jComboBoxDoctor1.setVisible(true);
            }
            Gutil.setGuiData(jComboBoxDoctor1,oi.specified_data);
            ////////////////////////////////////////////////
        }
        ////drug//////////////////////////////////////////////////
        if(oi.isDrug())
        {
            layoutOrder.show(this,CARD_DRUG);
            jTextFieldQtyUnit.setText(oi.qty);
            setOrderItemDrug(oid);
            
            //ถ้าเป็นยาที่คืนได้จะต้อง   สถานะจ่าย และ เป็นผู้ป่วยใน//////////////////
            boolean is_return = oi.status.equals(OrderStatus.DISPENSE)
            && theHO.theVisit.visit_type.equals(VisitType.IPD);
            jTextFieldQtyReturn.setVisible(is_return);
            jLabelReturnDrug.setVisible(is_return);
            jButtonReturnDrug.setVisible(is_return);
            ///////////////////////////////////////////////////////////
        }
    }
    
    private void setOrderItemDrug(OrderItemDrug oid)
    {
        Constant.println("private void setOrderItemDrug(OrderItemDrug oid)");
        
        theOrderItemDrug = oid;
        if(oid==null)
        {
            theUS.setStatus("ไม่มีรายละเอียดข้อมูลการสั่งยา",UpdateStatus.WARNING);
            return;
        }
        if(oid.usage_special.equals(Active.isEnable()))
        {
            layoutDrug.show(jPanelSPU, "Special");
            jCheckBoxSpecialUsage.setSelected(true);
            jTextAreaTextUsage.setText(oid.usage_text);
            jComboBoxInstruction.setText("");
            jComboBoxFrequency.setText("");
            jTextFieldUseUnit.setText("");
            //jComboBoxUse.setSelectedIndex(0);
            jComboBoxUse.setText("");//pu:07/08/2549 : เกิด Exception
        }
        else
        {
            layoutDrug.show(jPanelSPU, "Normal");
//        Constant.println("private void setOrderItemDrug(OrderItemDrug oid)11");
            if(Constant.toDouble(oid.dose)==0)
                oid.dose = "";
            jCheckBoxSpecialUsage.setSelected(false);
//        Constant.println("private void setOrderItemDrug(OrderItemDrug oid)12");
            jComboBoxInstruction.setText(oid.instruction);
            jComboBoxFrequency.setText(oid.frequency);
            jTextFieldUseUnit.setText(oid.dose);
//        Constant.println("private void setOrderItemDrug(OrderItemDrug oid)13");
            jComboBoxUse.setText(oid.use_uom);
            jTextAreaTextUsage.setText("");
        }
        
//        Constant.println("private void setOrderItemDrug(OrderItemDrug oid)1");
        jTextFieldCaution.setText(oid.caution);
        jTextFieldDescription.setText(oid.description);
        Uom2 uom2 = theHC.theLookupControl.readUomById(oid.purch_uom);
        jLabelQtyUnit.setText(uom2.description);
        jTextFieldTotalDay.setText("");
        jTextFieldQtyReturn.setText("");
    }
    
    private void setEnabledDrug(boolean b)
    { // pu : 25/07/2549 : แก้ไข Dose ใช้ได้ แต่ไม่สามารถแก้ไข Dose จ่าย
        jButtonSaveOrderDrug.setEnabled(b);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DayForUse;
    private javax.swing.ButtonGroup buttonGroupaKeySearch;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonReturnDrug;
    private javax.swing.JButton jButtonSaveLab;
    public javax.swing.JButton jButtonSaveOrderDrug;
    public javax.swing.JButton jButtonSaveOrderService;
    public javax.swing.JButton jButtonSaveOrderSupply;
    private javax.swing.JCheckBox jCheckBoxSecret;
    private javax.swing.JCheckBox jCheckBoxSpecialUsage;
    private com.hosv3.gui.component.HosComboBox jComboBoxDoctor1;
    private com.hosv3.gui.component.HosComboBoxStd jComboBoxDrugDoseShortcut;
    private com.hosv3.gui.component.HosComboBox jComboBoxFrequency;
    private com.hosv3.gui.component.HosComboBox jComboBoxInstruction;
    private com.hosv3.gui.component.HosComboBox jComboBoxUse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCause;
    private javax.swing.JTextArea jLabelCause1;
    private javax.swing.JLabel jLabelDoseShortcut;
    private javax.swing.JLabel jLabelDrugInstruction;
    private javax.swing.JLabel jLabelEmployee;
    private javax.swing.JLabel jLabelEmployee1;
    private javax.swing.JLabel jLabelNote;
    private javax.swing.JLabel jLabelNote1;
    private javax.swing.JLabel jLabelNote2;
    private javax.swing.JLabel jLabelNote3;
    private javax.swing.JLabel jLabelQty;
    private javax.swing.JLabel jLabelQty1;
    private javax.swing.JLabel jLabelQtyUnit;
    private javax.swing.JLabel jLabelReturnDrug;
    private javax.swing.JLabel jLabelServicePrice;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelBlank;
    private javax.swing.JPanel jPanelDrug;
    private javax.swing.JPanel jPanelLab;
    private javax.swing.JPanel jPanelSPU;
    private javax.swing.JPanel jPanelService;
    private javax.swing.JPanel jPanelSupply;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaTextUsage;
    private javax.swing.JTextField jTextFieldCaution;
    private javax.swing.JTextField jTextFieldCautionBlank;
    private javax.swing.JTextField jTextFieldCautionLab;
    private javax.swing.JTextField jTextFieldCautionService;
    private javax.swing.JTextField jTextFieldCautionSupply;
    private javax.swing.JTextField jTextFieldCodeLabSecret;
    private javax.swing.JTextField jTextFieldDescription;
    private com.hospital_os.utility.DoubleTextField jTextFieldQty;
    private com.hospital_os.utility.DoubleTextField jTextFieldQtyReturn;
    private javax.swing.JTextField jTextFieldQtyUnit;
    private com.hospital_os.utility.DoubleTextField jTextFieldServicePrice;
    private com.hospital_os.utility.DoubleTextField jTextFieldServiceQty;
    private com.hospital_os.utility.DoubleTextField jTextFieldTotalDay;
    private javax.swing.JTextField jTextFieldUseUnit;
    // End of variables declaration//GEN-END:variables

    
    public void setEnabled(boolean b)
    {
        setEnabledOther(b);
        setEnabledDrug(b);
    }
    public void setEnabledOther(boolean b)
    {
        jButtonSaveOrderSupply.setEnabled(b);
        jTextFieldServicePrice.setEnabled(b);
        jTextFieldServiceQty.setEnabled(b);
        jButtonSaveOrderService.setEnabled(b);
        jTextFieldTotalDay.setEnabled(b);
        jTextFieldCodeLabSecret.setEnabled(b);
        jButtonSaveLab.setEnabled(b);
        jTextFieldCautionService.setEditable(b);
        jTextFieldQtyUnit.setEnabled(b);
        jComboBoxDoctor1.setEnabled(b);
    }
    private void setLanguage(String msg)
    {
        GuiLang.setLanguage(DayForUse);
        GuiLang.setLanguage(jButtonReturnDrug);
        GuiLang.setLanguage(jButtonSaveOrderDrug);
        GuiLang.setLanguage(jButtonSaveOrderService);
        GuiLang.setLanguage(jButtonSaveOrderSupply);
        GuiLang.setLanguage(jCheckBoxSecret);
        GuiLang.setLanguage(jCheckBoxSpecialUsage);
        GuiLang.setLanguage(jLabel2);
        GuiLang.setLanguage(jLabel3);
        GuiLang.setLanguage(jLabel5);
        GuiLang.setLanguage(jLabel6);
        GuiLang.setLanguage(jLabel61);
        GuiLang.setLanguage(jLabel8);
        GuiLang.setLanguage(jLabelDoseShortcut);
        GuiLang.setLanguage(jLabelDrugInstruction);
        GuiLang.setLanguage(jLabelNote);
        GuiLang.setLanguage(jLabelNote1);
        GuiLang.setLanguage(jLabelNote2);
        GuiLang.setLanguage(jLabelNote3);
        GuiLang.setLanguage(jLabelQty);
        GuiLang.setLanguage(jLabelQtyUnit);
        GuiLang.setLanguage(jLabelReturnDrug);
        GuiLang.setLanguage(jLabelServicePrice);
        GuiLang.setLanguage(this.jLabel1);
        GuiLang.setLanguage(this.jLabelQty1);


    }
    
    private void setEnableCardBlank(boolean a)
    {
        jLabelCause1.setVisible(a);
        this.jScrollPane3.setVisible(a);
        jLabelCause.setVisible(a);
        jLabelEmployee.setVisible(a);
        jLabelEmployee1.setVisible(a);
    }

    public Item getItem() {
        return theItem;
    }

    public void setDrug(Drug drug) {
        theOrderItem.qty = drug.qty;
        OrderItemDrug oid = theHO.initOrderItemDrug(theItem,drug);
        setObject(theOrderItem,oid,null);
    }

    @Override
    public int selectList(String id) {
        Drug drug = theHC.theOrderControl.readDrugById(id);
        setDrug(drug);
        return 1;
    }

}
