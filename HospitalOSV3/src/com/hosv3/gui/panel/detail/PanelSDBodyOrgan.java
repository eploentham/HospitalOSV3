/*
 * PanelSDSetupBodyOrgan.java
 *
 * Created on March 31, 2009, 9:28 AM
 */

package com.hosv3.gui.panel.detail;

import com.hospital_os.object.BodyOrgan;
import com.hospital_os.usecase.connection.Persistent;
import com.hosv3.utility.Constant;
import com.hosv3.control.HosControl;
import com.hosv3.control.SetupControl;
import com.hosv3.gui.component.PanelSetupImp;
import com.hosv3.utility.GuiLang;
import com.hosv3.utility.connection.UpdateStatus;
import java.awt.event.KeyEvent;
import java.util.Vector;

/**
 *
 * @author  Administrator
 */
public class PanelSDBodyOrgan extends javax.swing.JPanel  implements PanelSetupImp{
     UpdateStatus theUS;
    SetupControl theSetupControl;
    private BodyOrgan theBodyOrgan = new BodyOrgan();
    Vector vBodyOrgan = new Vector();
    int offset = 23;
    int next = 0;
    int prev = 0;
    int saved = 0;
    /** pu : 01/09/2549 : เก็บ Index ของ อวัยวะร่างกาย ตัวล่างสุดของหน้าปัจจุบัน*/
    int curNext = 0;
    /** pu : 01/09/2549 : เก็บ Index ของ อวัยวะร่างกาย ตัวล่างสุดของหน้าก่อนหน้าปัจจุบัน*/
    int curPrev = 0;
    String[] col = {"รหัส","ชื่อ"};
    
    /** Creates new form PanelSDSetupBodyOrgan */
    public PanelSDBodyOrgan() {
        initComponents();
        setLanguage();
    }
    
    public PanelSDBodyOrgan(HosControl hc,UpdateStatus us)
    {
        initComponents();
        setLanguage();
        setControl(hc,us);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaName = new javax.swing.JTextArea();
        jTextFieldCode = new com.hospital_os.utility.IntegerTextField();

        setLayout(new java.awt.GridBagLayout());

        jPanel2.setMaximumSize(new java.awt.Dimension(300, 120));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 120));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 120));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(defaultFont1);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/hosv3/property/thai"); // NOI18N
        jLabel1.setText(bundle.getString("CODE")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(defaultFont1);
        jLabel2.setText(bundle.getString("NAME")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel2.add(jLabel2, gridBagConstraints);

        jCheckBox1.setFont(defaultFont1);
        jCheckBox1.setText(bundle.getString("ACTIVE")); // NOI18N
        jCheckBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCheckBox1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(150, 48));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(150, 48));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(150, 48));

        jTextAreaName.setLineWrap(true);
        jTextAreaName.setFont(defaultFont1);
        jTextAreaName.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jTextFieldCode.setColumns(5);
        jTextFieldCode.setFont(defaultFont1);
        jTextFieldCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCodeKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel2.add(jTextFieldCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox1KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_UP) {
            jTextAreaName.requestFocus();
        }
        //if(evt.getKeyCode() == KeyEvent.VK_DOWN) {
        //    jButtonAdd.requestFocus();
        //}
    }//GEN-LAST:event_jCheckBox1KeyReleased

    private void jTextFieldCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodeKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_DOWN) {
            jTextAreaName.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldCodeKeyReleased
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaName;
    private com.hospital_os.utility.IntegerTextField jTextFieldCode;
    // End of variables declaration//GEN-END:variables

    public void clearAll() {
        this.setTheBodyOrgan(new BodyOrgan());
    }

    public Persistent getXPer() {
        return this.getTheBodyOrgan();
    }

    public void setXPer(Persistent x) {
        this.setTheBodyOrgan((BodyOrgan)x);
    }

    public void setLanguage() {
        // GuiLang.setLanguage(jLabel3);
        //GuiLang.setLanguage(jLabelICD9code);
        //GuiLang.setLanguage(jButtonSearch);
        GuiLang.setLanguage(jLabel1);
        GuiLang.setLanguage(jLabel2);
        //GuiLang.setLanguage(jCheckBoxS);
        //GuiLang.setLanguage(jButtonSave);
        GuiLang.setLanguage(jCheckBox1);
        GuiLang.setLanguage(col);
    }

    public void setControl(HosControl hc, UpdateStatus us) {
          theUS = us;
        theSetupControl = hc.theSetupControl;
        hc.theHS.theSetupSubject.addpanelrefrash(this);
        hc.theHS.theSetupSubject.addForLiftAttach(this);
        setEnabled(false);
    }

     public void setEnabled(boolean var)
    {
        jTextFieldCode.setEditable(var);
        jTextAreaName.setEditable(var);
        //jButtonSave.setEnabled(var);
        jCheckBox1.setEnabled(var);
        //jButtonDel.setEnabled(var);
    }
    
    
    public void setupLookup() {
    //    throw new UnsupportedOperationException("Not supported yet.");
    }

    public boolean deleteXPer(Persistent x) {
         boolean confirm = theUS.confirmBox(Constant.getTextBundle("ยืนยันที่จะลบรายการนี้ อาจเกิดผลกระทบกับข้อมูลในฐานข้อมูลได้"), UpdateStatus.WARNING);
        if(!confirm) 
            return false;
        return (this.theSetupControl.deleteBodyOrgan((BodyOrgan)x)>0);
    }

    public boolean saveXPer(Persistent x) {
        return (this.theSetupControl.saveBodyOrgan((BodyOrgan)x)>0);
    }

    public Vector listXPer(String key, String active, int offset) {
        return theSetupControl.listBodyOrgan(key,active);
    }

    public boolean isActiveVisible() {
        return true;
    }

    public static String TITLE = Constant.getTextBundle("อวัยวะร่างกาย");
    public String getTitle() {
        return TITLE;
    }

    public BodyOrgan getTheBodyOrgan() {
         if(theBodyOrgan==null)
        {
            theBodyOrgan = new BodyOrgan();
        }
        theBodyOrgan.number = jTextFieldCode.getText();
        theBodyOrgan.description = jTextAreaName.getText();
        if(jCheckBox1.isSelected())
            theBodyOrgan.active = "1";
        else
            theBodyOrgan.active = "0";
        return theBodyOrgan;
    }

    public void setTheBodyOrgan(BodyOrgan item) {
        theBodyOrgan = item;
        jTextFieldCode.setText(theBodyOrgan.number);
        jTextAreaName.setText(theBodyOrgan.description);
        
        if((theBodyOrgan.active)!=null&&(theBodyOrgan.active).equals("1"))
        jCheckBox1.setSelected(true);
        else
        jCheckBox1.setSelected(false);

    }
    
    public boolean isStartVisible() {
        return false;
    }

    

}
