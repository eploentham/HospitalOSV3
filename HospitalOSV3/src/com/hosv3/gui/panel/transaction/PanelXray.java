/*
 * PanelXray.java
 *
 * Created on 19 ตุลาคม 2546, 17:07 น.
 */
package com.hosv3.gui.panel.transaction;
import java.util.*;
import javax.swing.table.*;

import com.hosv3.control.*;
import com.hosv3.utility.connection.*;
import com.hosv3.utility.*;
import com.hosv3.object.*;
import com.hosv3.subject.*;
import com.hosv3.gui.dialog.*;
import com.hosv3.usecase.transaction.*;
import com.hosv3.gui.component.*;

import com.hospital_os.object.*;
//import com.hospital_os.utility.ComboFix;
import com.hospital_os.utility.ComboboxModel;
//import com.hospital_os.utility.CelRendererDespen;
import com.hospital_os.utility.Gutil;
import com.hosv3.utility.Constant;
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.CellRendererHos;


/**
 *
 *
 * @author  tong
 */ 
public class PanelXray extends javax.swing.JPanel 
implements ManagePatientResp,ManageVisitResp,ManageLabXrayResp,ManageOrderResp

{
    HosDialog theHD;
    HosObject theHO;
    HosControl theHC;
    HosSubject theHS;
    UpdateStatus theUS;
    
    
    protected boolean bresult = false;
    private static String[] jTablePosition_col = {"ด้าน","ท่า"};
    private static String[] jTableListOrderXray_col = {"รายการเอ็กซเรย์"};
    private static String[] jTableListOrderXrayWait_col = {"รอลงผล"};
    private static String[] jTableFilmXray_col = {"ขนาด","ใช้","เสีย","Price"};
    private static String[] jTableListOrderXrayReported_col = {"ดำเนินการแล้ว"};
    private static String[] jTableXrayHistory_col = {"Vn","วันที่"};
    
    public UpdateStatus theUpdateStatus;  
    javax.swing.JFrame aMain;
    public SystemControl theSystemControl;
    
    private Patient thePatient;        
    public Visit theVisit;
    private OrderItem theOrderItem;
    private ResultXRay theResultXRay;
    private ResultXraySize theResultXraySize;
    private ResultXrayPosition theResultXrayPosition;
    private Vector vResultXrayPosition; //เป็น Vector ของ ResultXrayPosition
    private Vector orderxrayV; //รายการorder ของ Xray
    private Vector orderxrayreportedV;//รายการorder ของ Xray
    private Vector vResultXraySize;//รายการจำนวน film และ จำนวนเป็ก Object ResultXraySize
    
    private Vector visitHistoryV ;
    private Vector orderItemHistoryV;
    private Vector itemHistoryV;
 
    private boolean isHistory = false;
    private double priceFilmXray = 0.00;    
    private CellRendererDayOrder cellRendererDayOrder;
    CellRendererHos vnRender = new CellRendererHos(CellRendererHos.VN);
    
    
   /*
    *constructor ของ panelxray
    */ 
    public PanelXray()
    {
        initComponents();
    }    

   
 /*
  *เซตค่าControlต่างๆ
  *ทำการลงทะเบียนกับ Subject เพื่อใช้ในการ Notify
  */
    public void setControl(HosControl hc, UpdateStatus us)
    {   
        theHC = hc;
        theHO = hc.theHO;
        theHS = hc.theHS;
        theUS = us;
    vnRender = new CellRendererHos(CellRendererHos.VN,theHC.theLookupControl.getSequenceDataVN().pattern);
        cellRendererDayOrder = new CellRendererDayOrder(true);
        cellRendererDayOrder.setFont(this.defaultFont1);
        theHS.theOrderSubject.attachManageOrder(this);
        theHS.theVisitSubject.attachManageVisit(this);
        theHS.thePatientSubject.attachManagePatient(this);
        theHS.theResultSubject.attachManageXray(this);
        initComboBox();
        setUserInExecute();
        jPanel2.setVisible(false);
        setLanguage(null);
        setPatientVisit(null,null);    
    }
    public void initComboBox(){
        ComboboxModel.initComboBox(jComboBoxLeteral, theHC.theLookupControl.listXrayLeteral());
        ComboboxModel.initComboBox(jComboBoxPosition, theHC.theLookupControl.listXrayPosition());
        ComboboxModel.initComboBox(jComboBoxFilmSize, theHC.theLookupControl.listFilmSize());
        ComboboxModel.initComboBox(jComboBoxExecuter, theHC.theLookupControl.listEmployeeXray());
    }
    /*
     *เซตค่า Hotdialog
     */
    public void setDialog(HosDialog hd)
    {
        theHD = hd;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanelListXray = new javax.swing.JPanel();
        jPanelControl = new javax.swing.JPanel();
        jButtonAddItemXray = new javax.swing.JButton();
        jButtonDelItemXray = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListOrderXray = new com.hosv3.gui.component.HJTableSort();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableListOrderXrayReported = new com.hosv3.gui.component.HJTableSort();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabelTo1 = new javax.swing.JLabel();
        dateComboBoxHistoryStart = new com.hospital_os.utility.DateComboBox();
        dateComboBoxHistoryEnd = new com.hospital_os.utility.DateComboBox();
        jButtonSend1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableXrayHistory = new com.hosv3.gui.component.HJTableSort();
        jRadioButtonSelectAll = new javax.swing.JCheckBox();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableOrderXrayHistory = new com.hosv3.gui.component.HJTableSort();
        jPanel14 = new javax.swing.JPanel();
        jPanelDetail = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFilmXray = new com.hosv3.gui.component.HJTableSort();
        jComboBoxFilmSize = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jLabelFilmNo = new javax.swing.JLabel();
        jLabelFilmNo1 = new javax.swing.JLabel();
        integerTextFieldNum = new com.hospital_os.utility.IntegerTextField();
        integerTextFieldDamagefilm = new com.hospital_os.utility.IntegerTextField();
        jPanel13 = new javax.swing.JPanel();
        doubleTextFieldPrice = new com.hospital_os.utility.DoubleTextField();
        jCheckBoxInOrder = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabelKV = new javax.swing.JLabel();
        jLabelMA = new javax.swing.JLabel();
        jLabelMAS = new javax.swing.JLabel();
        jLabelSecond = new javax.swing.JLabel();
        jLabelFFD = new javax.swing.JLabel();
        doubleTextFieldKV = new com.hospital_os.utility.DoubleTextField();
        doubleTextFieldMA = new com.hospital_os.utility.DoubleTextField();
        doubleTextFieldSecond = new com.hospital_os.utility.DoubleTextField();
        doubleTextFieldMAS = new com.hospital_os.utility.DoubleTextField();
        doubleTextFieldFFD = new com.hospital_os.utility.DoubleTextField();
        jPanel16 = new javax.swing.JPanel();
        jComboBoxLeteral = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxPosition = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePosition = new com.hosv3.gui.component.HJTableSort();
        jButtonInsertXrayPosition = new javax.swing.JButton();
        jButtonDelXrayPosition = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jButtonInsertFilmXray = new javax.swing.JButton();
        jButtonInsertXrayPosition1 = new javax.swing.JButton();
        jButtonDelFilmXray = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldXn = new javax.swing.JTextField();
        jButtonHistoryXN = new javax.swing.JButton();
        jPanelOrderPrice = new javax.swing.JPanel();
        jLabelOrderPrice = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        doubleTextFieldOrderPrice = new com.hospital_os.utility.DoubleTextField();
        doubleTextFieldTotalprice = new com.hospital_os.utility.DoubleTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabelXrayExecuter = new javax.swing.JLabel();
        jComboBoxExecuter = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        timeTextFieldXraytime = new com.hospital_os.utility.TimeTextField();
        jPanelResult = new javax.swing.JPanel();
        jScrollPaneResult = new javax.swing.JScrollPane();
        jTextAreaResult = new javax.swing.JTextArea();
        jPanelButton = new javax.swing.JPanel();
        jButtonSaveXray = new javax.swing.JButton();
        jButtonDelectQueueLab = new javax.swing.JButton();
        jButtonSend = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPanePosition = new javax.swing.JScrollPane();
        jTextAreaPosition = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(200, 72));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setFont(defaultFont1);
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(240, 72));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(240, 72));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseReleased(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "รายการ X-Ray", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanel2.setMinimumSize(new java.awt.Dimension(200, 72));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanelListXray.setLayout(new java.awt.GridBagLayout());

        jPanelControl.setLayout(new java.awt.GridBagLayout());

        jButtonAddItemXray.setFont(defaultFont1);
        jButtonAddItemXray.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddItemXray.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddItemXray.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonAddItemXray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItemXrayActionPerformed(evt);
            }
        });
        jPanelControl.add(jButtonAddItemXray, new java.awt.GridBagConstraints());

        jButtonDelItemXray.setFont(defaultFont1);
        jButtonDelItemXray.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelItemXray.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelItemXray.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelItemXray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelItemXrayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelControl.add(jButtonDelItemXray, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelListXray.add(jPanelControl, gridBagConstraints);

        jTableListOrderXray.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableListOrderXray.setFont(defaultFont1);
        jTableListOrderXray.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListOrderXrayMouseReleased(evt);
            }
        });
        jTableListOrderXray.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableListOrderXrayKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListOrderXray);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelListXray.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanelListXray, gridBagConstraints);

        jPanel8.setMinimumSize(new java.awt.Dimension(200, 175));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jTableListOrderXrayReported.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableListOrderXrayReported.setFont(defaultFont1);
        jTableListOrderXrayReported.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableListOrderXrayReportedKeyReleased(evt);
            }
        });
        jTableListOrderXrayReported.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListOrderXrayReportedMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTableListOrderXrayReported);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel8, gridBagConstraints);

        jPanel17.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        jPanel2.add(jPanel17, gridBagConstraints);

        jTabbedPane1.addTab("รายการ\n", jPanel2);

        jPanel18.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ประวัติเอ็กซเรย์", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanel19.setLayout(new java.awt.GridBagLayout());

        jPanel20.setLayout(new java.awt.GridBagLayout());

        jLabelTo1.setFont(defaultFont1);
        jLabelTo1.setText("to");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 5);
        jPanel20.add(jLabelTo1, gridBagConstraints);

        dateComboBoxHistoryStart.setEnabled(false);
        dateComboBoxHistoryStart.setFont(defaultFont1);
        dateComboBoxHistoryStart.setMinimumSize(new java.awt.Dimension(93, 24));
        dateComboBoxHistoryStart.setPreferredSize(new java.awt.Dimension(93, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 5);
        jPanel20.add(dateComboBoxHistoryStart, gridBagConstraints);

        dateComboBoxHistoryEnd.setEnabled(false);
        dateComboBoxHistoryEnd.setFont(defaultFont1);
        dateComboBoxHistoryEnd.setMinimumSize(new java.awt.Dimension(93, 24));
        dateComboBoxHistoryEnd.setPreferredSize(new java.awt.Dimension(93, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel20.add(dateComboBoxHistoryEnd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel19.add(jPanel20, gridBagConstraints);

        jButtonSend1.setFont(defaultFont1);
        jButtonSend1.setText("ค้นหา");
        jButtonSend1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSend1.setMaximumSize(new java.awt.Dimension(50, 24));
        jButtonSend1.setMinimumSize(new java.awt.Dimension(50, 24));
        jButtonSend1.setPreferredSize(new java.awt.Dimension(50, 24));
        jButtonSend1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSend1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel19.add(jButtonSend1, gridBagConstraints);

        jTableXrayHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableXrayHistory.setFont(defaultFont1);
        jTableXrayHistory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableXrayHistoryKeyReleased(evt);
            }
        });
        jTableXrayHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableXrayHistoryMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jTableXrayHistory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel19.add(jScrollPane5, gridBagConstraints);

        jRadioButtonSelectAll.setFont(defaultFont1);
        jRadioButtonSelectAll.setSelected(true);
        jRadioButtonSelectAll.setText("ทั้งหมด");
        jRadioButtonSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSelectAllActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel19.add(jRadioButtonSelectAll, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanel19);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jTableOrderXrayHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableOrderXrayHistory.setFont(defaultFont1);
        jTableOrderXrayHistory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableOrderXrayHistoryKeyReleased(evt);
            }
        });
        jTableOrderXrayHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableOrderXrayHistoryMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(jTableOrderXrayHistory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel21.add(jScrollPane6, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel21);

        jPanel18.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("ประวัติ\n\n", jPanel18);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTabbedPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jPanelDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "รายละเอียด", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelDetail.setMinimumSize(new java.awt.Dimension(300, 280));
        jPanelDetail.setPreferredSize(new java.awt.Dimension(300, 280));
        jPanelDetail.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ฟิล์ม ท่า-ด้าน", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanel5.setMinimumSize(new java.awt.Dimension(200, 130));
        jPanel5.setPreferredSize(new java.awt.Dimension(300, 520));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 130));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(454, 500));

        jTableFilmXray.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableFilmXray.setFont(defaultFont1);
        jTableFilmXray.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableFilmXrayMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableFilmXray);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane2, gridBagConstraints);

        jComboBoxFilmSize.setFont(defaultFont1);
        jComboBoxFilmSize.setMinimumSize(new java.awt.Dimension(32, 21));
        jComboBoxFilmSize.setPreferredSize(new java.awt.Dimension(32, 21));
        jComboBoxFilmSize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBoxFilmSizeMouseReleased(evt);
            }
        });
        jComboBoxFilmSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilmSizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel5.add(jComboBoxFilmSize, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabelFilmNo.setFont(defaultFont1);
        jLabelFilmNo.setText("เสีย");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel7.add(jLabelFilmNo, gridBagConstraints);

        jLabelFilmNo1.setFont(defaultFont1);
        jLabelFilmNo1.setText("ฟิล์มที่ใช้");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel7.add(jLabelFilmNo1, gridBagConstraints);

        integerTextFieldNum.setColumns(3);
        integerTextFieldNum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        integerTextFieldNum.setText("integerTextField1");
        integerTextFieldNum.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanel7.add(integerTextFieldNum, gridBagConstraints);

        integerTextFieldDamagefilm.setColumns(3);
        integerTextFieldDamagefilm.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        integerTextFieldDamagefilm.setText("integerTextField1");
        integerTextFieldDamagefilm.setFont(defaultFont1);
        integerTextFieldDamagefilm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                integerTextFieldDamagefilmKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jPanel7.add(integerTextFieldDamagefilm, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel5.add(jPanel7, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());

        doubleTextFieldPrice.setColumns(5);
        doubleTextFieldPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldPrice.setText("0");
        doubleTextFieldPrice.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        doubleTextFieldPrice.setEnabled(false);
        doubleTextFieldPrice.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel13.add(doubleTextFieldPrice, gridBagConstraints);

        jCheckBoxInOrder.setFont(defaultFont1);
        jCheckBoxInOrder.setText("บวกราคาฟิล์ม");
        jCheckBoxInOrder.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxInOrderStateChanged(evt);
            }
        });
        jCheckBoxInOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxInOrderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanel13.add(jCheckBoxInOrder, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 3, 5);
        jPanel5.add(jPanel13, gridBagConstraints);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanel9.setMinimumSize(new java.awt.Dimension(220, 520));
        jPanel9.setPreferredSize(new java.awt.Dimension(220, 520));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel15.setLayout(new java.awt.GridBagLayout());

        jLabelKV.setFont(defaultFont1);
        jLabelKV.setText("KV");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(jLabelKV, gridBagConstraints);

        jLabelMA.setFont(defaultFont1);
        jLabelMA.setText("MA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(jLabelMA, gridBagConstraints);

        jLabelMAS.setFont(defaultFont1);
        jLabelMAS.setText("MAS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(jLabelMAS, gridBagConstraints);

        jLabelSecond.setFont(defaultFont1);
        jLabelSecond.setText("Sec.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(jLabelSecond, gridBagConstraints);

        jLabelFFD.setFont(defaultFont1);
        jLabelFFD.setText("FFD");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(jLabelFFD, gridBagConstraints);

        doubleTextFieldKV.setColumns(5);
        doubleTextFieldKV.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldKV.setText("0.0");
        doubleTextFieldKV.setFont(defaultFont1);
        doubleTextFieldKV.setMinimumSize(new java.awt.Dimension(35, 20));
        doubleTextFieldKV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleTextFieldKVActionPerformed(evt);
            }
        });
        doubleTextFieldKV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doubleTextFieldKVKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(doubleTextFieldKV, gridBagConstraints);

        doubleTextFieldMA.setColumns(5);
        doubleTextFieldMA.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldMA.setText("0.0");
        doubleTextFieldMA.setFont(defaultFont1);
        doubleTextFieldMA.setMinimumSize(new java.awt.Dimension(35, 20));
        doubleTextFieldMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleTextFieldMAActionPerformed(evt);
            }
        });
        doubleTextFieldMA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doubleTextFieldMAKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(doubleTextFieldMA, gridBagConstraints);

        doubleTextFieldSecond.setColumns(5);
        doubleTextFieldSecond.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldSecond.setText("0.0");
        doubleTextFieldSecond.setFont(defaultFont1);
        doubleTextFieldSecond.setMinimumSize(new java.awt.Dimension(35, 20));
        doubleTextFieldSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleTextFieldSecondActionPerformed(evt);
            }
        });
        doubleTextFieldSecond.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                doubleTextFieldSecondFocusLost(evt);
            }
        });
        doubleTextFieldSecond.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doubleTextFieldSecondKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(doubleTextFieldSecond, gridBagConstraints);

        doubleTextFieldMAS.setColumns(5);
        doubleTextFieldMAS.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldMAS.setText("0.0");
        doubleTextFieldMAS.setFont(defaultFont1);
        doubleTextFieldMAS.setMinimumSize(new java.awt.Dimension(35, 20));
        doubleTextFieldMAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleTextFieldMASActionPerformed(evt);
            }
        });
        doubleTextFieldMAS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doubleTextFieldMASKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(doubleTextFieldMAS, gridBagConstraints);

        doubleTextFieldFFD.setColumns(5);
        doubleTextFieldFFD.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldFFD.setText("0.0");
        doubleTextFieldFFD.setFont(defaultFont1);
        doubleTextFieldFFD.setMinimumSize(new java.awt.Dimension(35, 20));
        doubleTextFieldFFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleTextFieldFFDActionPerformed(evt);
            }
        });
        doubleTextFieldFFD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doubleTextFieldFFDKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel15.add(doubleTextFieldFFD, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 3);
        jPanel9.add(jPanel15, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jComboBoxLeteral.setFont(defaultFont1);
        jComboBoxLeteral.setMinimumSize(new java.awt.Dimension(32, 21));
        jComboBoxLeteral.setPreferredSize(new java.awt.Dimension(32, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel16.add(jComboBoxLeteral, gridBagConstraints);

        jLabel2.setFont(defaultFont1);
        jLabel2.setText("ด้าน");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel16.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(defaultFont1);
        jLabel3.setText("ท่าที่ฉาย");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel16.add(jLabel3, gridBagConstraints);

        jComboBoxPosition.setFont(defaultFont1);
        jComboBoxPosition.setMinimumSize(new java.awt.Dimension(32, 21));
        jComboBoxPosition.setPreferredSize(new java.awt.Dimension(32, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel16.add(jComboBoxPosition, gridBagConstraints);

        jScrollPane4.setFont(defaultFont1);
        jScrollPane4.setMinimumSize(new java.awt.Dimension(24, 130));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(350, 402));

        jTablePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTablePosition.setFont(defaultFont1);
        jTablePosition.setPreferredScrollableViewportSize(new java.awt.Dimension(400, 400));
        jTablePosition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTablePositionMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTablePositionMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jTablePosition);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel16.add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 3);
        jPanel9.add(jPanel16, gridBagConstraints);

        jButtonInsertXrayPosition.setFont(defaultFont1);
        jButtonInsertXrayPosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonInsertXrayPosition.setToolTipText("เพิ่มท่า-ด้านเอ็กซ์เรย์");
        jButtonInsertXrayPosition.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonInsertXrayPosition.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonInsertXrayPosition.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonInsertXrayPosition.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonInsertXrayPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertXrayPositionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanel9.add(jButtonInsertXrayPosition, gridBagConstraints);

        jButtonDelXrayPosition.setFont(defaultFont1);
        jButtonDelXrayPosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelXrayPosition.setToolTipText("ลบท่า-ด้านเอ็กซ์เรย์");
        jButtonDelXrayPosition.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelXrayPosition.setMaximumSize(new java.awt.Dimension(20, 20));
        jButtonDelXrayPosition.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelXrayPosition.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelXrayPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelXrayPositionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanel9.add(jButtonDelXrayPosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel9, gridBagConstraints);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jButtonInsertFilmXray.setFont(defaultFont1);
        jButtonInsertFilmXray.setText("บันทึก");
        jButtonInsertFilmXray.setToolTipText("เพิ่มฟิล์มเอ็กซ์เรย์");
        jButtonInsertFilmXray.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonInsertFilmXray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertFilmXrayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel12.add(jButtonInsertFilmXray, gridBagConstraints);

        jButtonInsertXrayPosition1.setFont(defaultFont1);
        jButtonInsertXrayPosition1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonInsertXrayPosition1.setToolTipText("เพิ่มท่า-ด้านเอ็กซ์เรย์");
        jButtonInsertXrayPosition1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonInsertXrayPosition1.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonInsertXrayPosition1.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonInsertXrayPosition1.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonInsertXrayPosition1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertXrayPosition1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel12.add(jButtonInsertXrayPosition1, gridBagConstraints);

        jButtonDelFilmXray.setFont(defaultFont1);
        jButtonDelFilmXray.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelFilmXray.setToolTipText("ลบฟิล์มเอ็กซ์เรย์");
        jButtonDelFilmXray.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelFilmXray.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDelFilmXray.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelFilmXray.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelFilmXray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelFilmXrayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel12.add(jButtonDelFilmXray, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel5.add(jPanel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelDetail.add(jPanel5, gridBagConstraints);

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(defaultFont1);
        jLabel1.setText("Xn");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
        jPanel11.add(jLabel1, gridBagConstraints);

        jTextFieldXn.setFont(defaultFont1);
        jTextFieldXn.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldXn.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel11.add(jTextFieldXn, gridBagConstraints);

        jButtonHistoryXN.setFont(defaultFont1);
        jButtonHistoryXN.setText("XN เดิม");
        jButtonHistoryXN.setMargin(new java.awt.Insets(1, 4, 1, 4));
        jButtonHistoryXN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHistoryXNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel11.add(jButtonHistoryXN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        jPanelDetail.add(jPanel11, gridBagConstraints);

        jPanelOrderPrice.setPreferredSize(new java.awt.Dimension(182, 21));
        jPanelOrderPrice.setLayout(new java.awt.GridBagLayout());

        jLabelOrderPrice.setFont(defaultFont1);
        jLabelOrderPrice.setText("ราคา");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelOrderPrice.add(jLabelOrderPrice, gridBagConstraints);

        jLabelTotal.setFont(defaultFont1);
        jLabelTotal.setText("รวมฟิล์ม");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelOrderPrice.add(jLabelTotal, gridBagConstraints);

        doubleTextFieldOrderPrice.setColumns(6);
        doubleTextFieldOrderPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldOrderPrice.setText("0");
        doubleTextFieldOrderPrice.setFont(defaultFont1);
        doubleTextFieldOrderPrice.setMinimumSize(new java.awt.Dimension(32, 23));
        doubleTextFieldOrderPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                doubleTextFieldOrderPriceFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelOrderPrice.add(doubleTextFieldOrderPrice, gridBagConstraints);

        doubleTextFieldTotalprice.setColumns(6);
        doubleTextFieldTotalprice.setEditable(false);
        doubleTextFieldTotalprice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldTotalprice.setText("0");
        doubleTextFieldTotalprice.setFont(defaultFont1);
        doubleTextFieldTotalprice.setMinimumSize(new java.awt.Dimension(32, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelOrderPrice.add(doubleTextFieldTotalprice, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelDetail.add(jPanelOrderPrice, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabelXrayExecuter.setFont(defaultFont1);
        jLabelXrayExecuter.setText("ผู้ฉายรังสี");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabelXrayExecuter, gridBagConstraints);

        jComboBoxExecuter.setFont(defaultFont1);
        jComboBoxExecuter.setMinimumSize(new java.awt.Dimension(102, 21));
        jComboBoxExecuter.setPreferredSize(new java.awt.Dimension(102, 21));
        jComboBoxExecuter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxExecuterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jComboBoxExecuter, gridBagConstraints);

        jLabel5.setFont(defaultFont1);
        jLabel5.setText("เวลาฉายรังสี");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel4.add(jLabel5, gridBagConstraints);

        timeTextFieldXraytime.setFont(defaultFont1);
        timeTextFieldXraytime.setMinimumSize(new java.awt.Dimension(42, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel4.add(timeTextFieldXraytime, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 3);
        jPanelDetail.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 4);
        jPanel14.add(jPanelDetail, gridBagConstraints);

        jPanelResult.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ผลการ X-Ray", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelResult.setMinimumSize(new java.awt.Dimension(269, 80));
        jPanelResult.setPreferredSize(new java.awt.Dimension(269, 80));
        jPanelResult.setLayout(new java.awt.GridBagLayout());

        jScrollPaneResult.setPreferredSize(new java.awt.Dimension(259, 50));

        jTextAreaResult.setFont(defaultFont1);
        jScrollPaneResult.setViewportView(jTextAreaResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelResult.add(jScrollPaneResult, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jPanelResult, gridBagConstraints);
        jPanelResult.getAccessibleContext().setAccessibleName("ผลการเอกซเรย์");

        jPanelButton.setLayout(new java.awt.GridBagLayout());

        jButtonSaveXray.setFont(defaultFont1);
        jButtonSaveXray.setText("บันทึกผล");
        jButtonSaveXray.setToolTipText("บันทึกข้อมูลเอ็กซ์เรย์");
        jButtonSaveXray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveXrayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanelButton.add(jButtonSaveXray, gridBagConstraints);

        jButtonDelectQueueLab.setFont(defaultFont1);
        jButtonDelectQueueLab.setText("ลบคิว");
        jButtonDelectQueueLab.setToolTipText("ลบคิวแลป");
        jButtonDelectQueueLab.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonDelectQueueLab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelectQueueLabActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelButton.add(jButtonDelectQueueLab, gridBagConstraints);

        jButtonSend.setFont(defaultFont1);
        jButtonSend.setText("ส่งผล");
        jButtonSend.setToolTipText("ส่งผลแลป");
        jButtonSend.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        jPanelButton.add(jButtonSend, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 5, 5);
        jPanel14.add(jPanelButton, gridBagConstraints);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "รายละเอียดเพิ่มเติม", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanel10.setMinimumSize(new java.awt.Dimension(269, 80));
        jPanel10.setPreferredSize(new java.awt.Dimension(269, 80));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jScrollPanePosition.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPanePosition.setMinimumSize(new java.awt.Dimension(30, 40));
        jScrollPanePosition.setPreferredSize(new java.awt.Dimension(63, 63));

        jTextAreaPosition.setFont(defaultFont1);
        jTextAreaPosition.setLineWrap(true);
        jTextAreaPosition.setWrapStyleWord(true);
        jTextAreaPosition.setMinimumSize(new java.awt.Dimension(40, 2));
        jTextAreaPosition.setPreferredSize(new java.awt.Dimension(40, 2));
        jScrollPanePosition.setViewportView(jTextAreaPosition);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel10.add(jScrollPanePosition, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel14.add(jPanel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel14, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInsertXrayPosition1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertXrayPosition1ActionPerformed
        setResultXraySize(null);
        this.jTableFilmXray.clearSelection();
        
    }//GEN-LAST:event_jButtonInsertXrayPosition1ActionPerformed

    private void jComboBoxFilmSizeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxFilmSizeMouseReleased
        int index = this.jComboBoxFilmSize.getSelectedIndex();
        this.setResultXraySize(null);
        jComboBoxFilmSize.setSelectedIndex(index);
    }//GEN-LAST:event_jComboBoxFilmSizeMouseReleased

    private void jTableListOrderXrayReportedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListOrderXrayReportedKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN || evt.getKeyCode()==evt.VK_UP)
             jTableListOrderXrayReportedMouseReleased(null);
    }//GEN-LAST:event_jTableListOrderXrayReportedKeyReleased

    private void jTableXrayHistoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableXrayHistoryKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN || evt.getKeyCode()==evt.VK_UP)
             jTableXrayHistoryMouseReleased(null);
    }//GEN-LAST:event_jTableXrayHistoryKeyReleased

    private void jTablePositionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePositionMouseReleased
        int row = jTablePosition.getSelectedRow();
        setResultXrayPosition((ResultXrayPosition)vResultXrayPosition.get(row));
    }//GEN-LAST:event_jTablePositionMouseReleased

    private void jTableListOrderXrayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListOrderXrayKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN || evt.getKeyCode()==evt.VK_UP)
            jTableListOrderXrayMouseReleased(null);
    }//GEN-LAST:event_jTableListOrderXrayKeyReleased

    private void jComboBoxExecuterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExecuterActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxExecuterActionPerformed

    private void jTabbedPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseReleased
       setOrderItem(null);
       jTableListOrderXray.clearSelection();
       jTableListOrderXrayReported.clearSelection();
       jTableXrayHistory.clearSelection();
       jTableOrderXrayHistory.clearSelection();
       setEnabled(jTabbedPane1.getSelectedIndex()==0);
    }//GEN-LAST:event_jTabbedPane1MouseReleased

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        theHC.theOrderControl.saveXrayReportComplete(orderxrayreportedV);
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jButtonDelectQueueLabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelectQueueLabActionPerformed
        if(theHO.theVisit == null || theHO.theVisit.getObjectId() == null)
        {
            theUS.setStatus("ยังไม่เลือกผู้ป่วย",UpdateStatus.WARNING);
            return;
        }
        if(!theUS.confirmBox("คุณต้องการที่จะลบคิวใช่หรือไม่ ?",UpdateStatus.WARNING))
            return;
        {
            theHC.theResultControl.deleteQueueXrayByVisitID(theHO.theVisit.getObjectId());
        }
    }//GEN-LAST:event_jButtonDelectQueueLabActionPerformed

    private void jButtonHistoryXNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHistoryXNActionPerformed
        showHistoryXN();
    }//GEN-LAST:event_jButtonHistoryXNActionPerformed

    private void jButtonDelItemXrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelItemXrayActionPerformed
        delItemXray();
    }//GEN-LAST:event_jButtonDelItemXrayActionPerformed

    private void jButtonAddItemXrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddItemXrayActionPerformed
        addItemXray();
    }//GEN-LAST:event_jButtonAddItemXrayActionPerformed

    private void integerTextFieldDamagefilmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_integerTextFieldDamagefilmKeyReleased
        checkDamageFilm();
    }//GEN-LAST:event_integerTextFieldDamagefilmKeyReleased

    private void doubleTextFieldOrderPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doubleTextFieldOrderPriceFocusLost
        
        
    }//GEN-LAST:event_doubleTextFieldOrderPriceFocusLost

    private void jComboBoxFilmSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilmSizeActionPerformed
        if(theResultXraySize==null){
            FilmSize fs = (FilmSize)this.jComboBoxFilmSize.getSelectedItem();
            try{
                double film_num = Double.parseDouble(integerTextFieldNum.getText());
                double price = Double.parseDouble(fs.price)*film_num;
                doubleTextFieldPrice.setText(String.valueOf(price));
            }
            catch(Exception e){
                theUS.setStatus("ฟิล์มที่เลือกมีการกำหนดราคาไม่ถูกต้องกรุณากำหนดราคาฟิล์ม",UpdateStatus.WARNING);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jComboBoxFilmSizeActionPerformed

    private void doubleTextFieldFFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleTextFieldFFDActionPerformed
        this.jButtonInsertXrayPositionActionPerformed(null);
    }//GEN-LAST:event_doubleTextFieldFFDActionPerformed

    private void doubleTextFieldMASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleTextFieldMASActionPerformed
        doubleTextFieldMAS.transferFocus();
    }//GEN-LAST:event_doubleTextFieldMASActionPerformed

    private void doubleTextFieldSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleTextFieldSecondActionPerformed
        doubleTextFieldSecond.transferFocus();
    }//GEN-LAST:event_doubleTextFieldSecondActionPerformed

    private void doubleTextFieldMAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleTextFieldMAActionPerformed
        doubleTextFieldMA.transferFocus();
    }//GEN-LAST:event_doubleTextFieldMAActionPerformed

    private void doubleTextFieldKVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleTextFieldKVActionPerformed
        doubleTextFieldKV.transferFocus();

    }//GEN-LAST:event_doubleTextFieldKVActionPerformed

    private void doubleTextFieldFFDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleTextFieldFFDKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN)
            jButtonInsertXrayPosition.requestFocus();
        if(evt.getKeyCode()==evt.VK_UP)
            doubleTextFieldMAS.requestFocus();
    }//GEN-LAST:event_doubleTextFieldFFDKeyReleased

    private void doubleTextFieldMASKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleTextFieldMASKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN)
            doubleTextFieldMAS.transferFocus();
        if(evt.getKeyCode()==evt.VK_UP)
            doubleTextFieldSecond.requestFocus();
    }//GEN-LAST:event_doubleTextFieldMASKeyReleased

    private void doubleTextFieldSecondKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleTextFieldSecondKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN)
            doubleTextFieldSecond.transferFocus();
        if(evt.getKeyCode()==evt.VK_UP)
            doubleTextFieldMA.requestFocus();
    }//GEN-LAST:event_doubleTextFieldSecondKeyReleased

    private void doubleTextFieldMAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleTextFieldMAKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN)
            doubleTextFieldMA.transferFocus();
        if(evt.getKeyCode()==evt.VK_UP)
            doubleTextFieldKV.requestFocus();
    }//GEN-LAST:event_doubleTextFieldMAKeyReleased

    private void doubleTextFieldKVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleTextFieldKVKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN)
            doubleTextFieldKV.transferFocus();
    }//GEN-LAST:event_doubleTextFieldKVKeyReleased

    private void jTableOrderXrayHistoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableOrderXrayHistoryKeyReleased
        if(evt.getKeyCode()==evt.VK_DOWN || evt.getKeyCode()==evt.VK_UP)
            jTableOrderXrayHistoryMouseReleased(null);
    }//GEN-LAST:event_jTableOrderXrayHistoryKeyReleased

    private void jRadioButtonSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSelectAllActionPerformed
        if(jRadioButtonSelectAll.isSelected()){
            dateComboBoxHistoryStart.setEnabled(false);
            dateComboBoxHistoryEnd.setEnabled(false);
            jButtonSend1ActionPerformed(null);
        }
        else{
            dateComboBoxHistoryStart.setEnabled(true);
            dateComboBoxHistoryEnd.setEnabled(true);
            jButtonSend1ActionPerformed(null);
        }
    }//GEN-LAST:event_jRadioButtonSelectAllActionPerformed

    private void dateComboBoxHistoryEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxHistoryEndFocusLost
        jButtonSend1ActionPerformed(null);
    }//GEN-LAST:event_dateComboBoxHistoryEndFocusLost


    private void jTableOrderXrayHistoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOrderXrayHistoryMouseReleased
        isHistory = true;
        int row = jTableOrderXrayHistory.getSelectedRow();
        setOrderItem((OrderItem)this.orderItemHistoryV.get(row));
    }//GEN-LAST:event_jTableOrderXrayHistoryMouseReleased

    private void jTableXrayHistoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableXrayHistoryMouseReleased
        isHistory = true;
        int select = jTableXrayHistory.getSelectedRow();
        Visit vi = (Visit) visitHistoryV.get(select);
        this.orderItemHistoryV = theHC.theOrderControl.listOrderXrayAllByVN(vi.getObjectId());
        setOrderXrayHistoryV(orderItemHistoryV);
    }//GEN-LAST:event_jTableXrayHistoryMouseReleased

    private void jButtonSend1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSend1ActionPerformed
        String from = dateComboBoxHistoryStart.getText();
        String to = dateComboBoxHistoryEnd.getText();
        boolean all = jRadioButtonSelectAll.isSelected();
        if(theHO.thePatient != null)
        {   visitHistoryV = theHC.theVisitControl.listVisitXrayByDatePid(all,from,to,theHO.thePatient.getObjectId());
            setPatientVisitHistoryV(visitHistoryV);
        }
    }//GEN-LAST:event_jButtonSend1ActionPerformed

    private void jTableListOrderXrayReportedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListOrderXrayReportedMouseReleased
        isHistory = false;
        jTableListOrderXray.clearSelection();
        int row = jTableListOrderXrayReported.getSelectedRow();
        setOrderItem((OrderItem)orderxrayreportedV.get(row));  
    }//GEN-LAST:event_jTableListOrderXrayReportedMouseReleased

    private void jTableListOrderXrayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListOrderXrayMouseReleased
        isHistory = false;
        this.jTableListOrderXrayReported.clearSelection();
        int row = jTableListOrderXray.getSelectedRow();
        setOrderItem((OrderItem)orderxrayV.get(row));
    }//GEN-LAST:event_jTableListOrderXrayMouseReleased
    private void doubleTextFieldSecondFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doubleTextFieldSecondFocusLost
        double ma = 0.00;
        double sec = 0.00;
        double result = 0.00;
        ma  = Double.parseDouble(doubleTextFieldMA.getText());
        sec= Double.parseDouble(doubleTextFieldSecond.getText());
        result = ma*sec;
        if(sec <= 0)
        {    
            result = 0;
        }
        doubleTextFieldMAS.setText(Constant.dicimal(String.valueOf(result)));
        ///doubleTextFieldMAS.setToolTipText(String.valueOf(result));
    }//GEN-LAST:event_doubleTextFieldSecondFocusLost
    private void jCheckBoxInOrderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxInOrderStateChanged

    }//GEN-LAST:event_jCheckBoxInOrderStateChanged
    private void jCheckBoxInOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxInOrderActionPerformed
        doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
    }//GEN-LAST:event_jCheckBoxInOrderActionPerformed
    private void jTablePositionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePositionMousePressed

    }//GEN-LAST:event_jTablePositionMousePressed
    private void jButtonDelXrayPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelXrayPositionActionPerformed
        /*
         *ลบรายการท่า
         */
        int row = jTablePosition.getSelectedRow();
        if(theResultXRay == null){
            theUS.setStatus("ยังไม่ได้เลือกรายการเอ็กซ์เรย์",UpdateStatus.WARNING);
            return;
        }
        if(row == -1){
            theUS.setStatus("ยังไม่ได้เลื่อกท่า-ด้านที่ต้องการลบ",UpdateStatus.WARNING);
            return;
        }
        if(theResultXRay.result_complete.equals("1")){
            theUS.setStatus("ไม่สามารถลบท่า-ด้านได้เนื่องจากรายงานผลเอ็กซเรย์แล้ว",UpdateStatus.WARNING);
            return;
        } 
        vResultXrayPosition.remove(row);
        this.setResultXrayPositionV(vResultXrayPosition);
//        if(theResultXrayPosition.getObjectId() != null){   
//            theHC.theOrderControl.deleteResultXrayPosition(theResultXrayPosition);
//            //neung -เรียกใช้ notifyDeleteXrayPosition
//        }              
    }//GEN-LAST:event_jButtonDelXrayPositionActionPerformed
    private void jButtonInsertXrayPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertXrayPositionActionPerformed
        /*
         *เพิ่มรายการท่า
         */
        if(theResultXRay == null){
            theUS.setStatus("ยังไม่ได้เลือกรายการเอ็กซ์เรย์",UpdateStatus.WARNING);
            return;
        }
        if(theResultXRay.result_complete.equals("1")){
            theUS.setStatus("ไม่สามารถเพิ่มท่า-ด้านได้เนื่องจากรายงานผลเอ็กซเรย์แล้ว",UpdateStatus.WARNING);
            return;
        }
        theResultXrayPosition = new ResultXrayPosition();
        getResultXrayPosition(theResultXrayPosition);
        vResultXrayPosition.add(theResultXrayPosition);
        setResultXrayPositionV(vResultXrayPosition);
        //neung -มีการใช้contron 2 ตัว
//        theHC.theOrderControl.saveResultXrayPosition(theResultXrayPosition
//                ,theResultXraySize,theResultXRay);     
        
    }//GEN-LAST:event_jButtonInsertXrayPositionActionPerformed
    private void jTableFilmXrayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilmXrayMouseReleased
        int row = jTableFilmXray.getSelectedRow();
        setResultXraySize((ResultXraySize)vResultXraySize.get(row));
    }    private void jButtonDelFilmXrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jTableFilmXrayMouseReleased
        /*//GEN-FIRST:event_jButtonDelFilmXrayActionPerformed
         *ลบรายการฟิลม์
         */
        int select = jTableFilmXray.getSelectedRow();
        if(theHO.theVisit == null){
            theUS.setStatus("ยังไม่ได้ทำการเลือกผู้ป่วย",UpdateStatus.WARNING);
            return;
        }
        if(theResultXRay == null){
            theUS.setStatus("ยังไม่ได้เลือกรายการเอ็กซ์เรย์",UpdateStatus.WARNING);
            return;
        }
        if(select < 0){
            theUS.setStatus("ยังไม่ได้เลือกฟิล์มเอ็กซ์เรย์",UpdateStatus.WARNING);
            return;
        }
        if(theResultXRay.result_complete.equals("1")){
            theUS.setStatus("ไม่สามารถลบฟิล์มได้เนื่องจากรายงานผลเอ็กซเรย์แล้ว",UpdateStatus.WARNING);
            return;
        }
        ResultXraySize rsXraySize = (ResultXraySize)vResultXraySize.get(select);
        if(Gutil.isSelected(theOrderItem.charge_complete)    && Gutil.isSelected(rsXraySize.add_order))
        {
            theUS.setStatus(Constant.getTextBundle("รายการนี้ได้มีการรวมค่าใช้จ่ายและถูกคำนวณค่าใช้จ่ายไปแล้ว") + " " +
                    Constant.getTextBundle("ไม่สามารถลบฟิล์มได้"),UpdateStatus.WARNING);
            return;
        }
         if(theVisit.isDischargeDoctor()){
            theUS.setStatus(Constant.getTextBundle("ผู้ป่วยจำหน่ายทางการแพทย์แล้ว") + " " +
                    Constant.getTextBundle("ไม่สามารถลบฟิล์มได้"),UpdateStatus.WARNING);
            return;
        }
        if(theResultXRay.result_complete.equals("1")){
            theUS.setStatus(Constant.getTextBundle("เจ้าหน้าที่ได้ทำการส่งผลแล้ว") + " " +
                    Constant.getTextBundle("ไม่สามารถลบฟิล์มได้"),UpdateStatus.WARNING);
            return;
        }
        rsXraySize = (ResultXraySize)vResultXraySize.remove(select);
        if(rsXraySize.getObjectId() != null){  
            theHC.theOrderControl.deleteResultXraySizeByKeyID(rsXraySize,theResultXRay,theOrderItem);
        }
        //ใช้ notifyDeleteFilmXray
    }    private void jButtonAddXRayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jButtonDelFilmXrayActionPerformed

       /*//GEN-FIRST:event_jButtonAddXRayActionPerformed
        *เพิ่มผลการxray
        *ไม่รู้ว่ามันจะกดปุ่มตรงใหนแล้วทำงานอย่างไร -neung
        */
        //enableButton(true);
        //enableButtonFilmSize(true);
        //setResultXrayPositionV(vResultXraySize);
       // setEnableAll(true);
        //TextFieldFilmNO.requestFocus();
     
    }//GEN-LAST:event_jButtonAddXRayActionPerformed
    private void jButtonSaveXrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveXrayActionPerformed
        //isSaveReport = true;
//        if(theHO.theVisit == null){
//            theUS.setStatus("ยังไม่ได้เลือกผู้ป่วย",UpdateStatus.WARNING);
//            return;
//        }
//         if(theResultXRay == null){
//            theUS.setStatus("ยังไม่ได้เลือกรายการเอ็กซ์เรย์",UpdateStatus.WARNING);
//            return;
//        }
//        if(vResultXraySize == null || vResultXraySize.size() == 0){
//            theUS.setStatus("ไม่พบข้อมูลของฟิล์มเอ็กซ์เรย์",UpdateStatus.WARNING);
//            return;
//        }
//        if(vResultXrayPosition == null || vResultXrayPosition.size()==0){
//            theUS.setStatus("ไม่พบข้อมูลของด้าน-ท่าในการเอ็กซ์เรย์",UpdateStatus.WARNING);
//            return;
//        }
        if(this.jTableListOrderXray.getSelectedRow()==-1
                && this.jTableListOrderXrayReported.getSelectedRow()==-1){
            theUS.setStatus("กรุณาเลือกรายการ Xray ที่ต้องการลงผลก่อนกดปุ่มบันทึก",UpdateStatus.WARNING);
            return;
        }       
        boolean save = theHC.theOrderControl.intCheckSaveXrayResult(theResultXRay,vResultXraySize,vResultXrayPosition);
        if(!save)
            return;
        if(getResultXRay(theResultXRay))
        {
            bresult = theHC.theResultControl.savePatientXn(jTextFieldXn.getText(),true);
            theHC.theOrderControl.saveXrayResult(theResultXRay,theOrderItem);
        }
        jCheckBoxInOrder.setSelected(false);
        doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
    }    private void jButtonInsertFilmXrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jButtonSaveXrayActionPerformed

        /*//GEN-FIRST:event_jButtonInsertFilmXrayActionPerformed
         */
        if(vResultXrayPosition.isEmpty()){
            theResultXrayPosition = new ResultXrayPosition();
            getResultXrayPosition(theResultXrayPosition);
            vResultXrayPosition.add(theResultXrayPosition);
            setResultXrayPositionV(vResultXrayPosition);
        }
        theResultXraySize = theHC.theOrderControl.saveResultXraySize(getResultXraySize()
                ,theOrderItem,theResultXRay,vResultXrayPosition);
        if(theResultXraySize==null)
            return;
        
        if(!theHO.theVisit.isDischargeMoney())
        {
            ItemPrice itemprice = theHC.theOrderControl.readItemPriceByItem(theOrderItem.item_code);
            double film_price = 0;
            for(int i=0;i<this.vResultXraySize.size();i++){
                ResultXraySize p = (ResultXraySize)vResultXraySize.get(i);
                film_price += Double.parseDouble(p.price);
            }
            doubleTextFieldTotalprice.setText(String.valueOf(Double.parseDouble(itemprice.price)+film_price));
            theOrderItem.price = doubleTextFieldTotalprice.getText();
            theHC.theOrderControl.saveOrderXrayPrice(theOrderItem);
        }
    }//GEN-LAST:event_jButtonInsertFilmXrayActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxHistoryEnd;
    private com.hospital_os.utility.DateComboBox dateComboBoxHistoryStart;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldFFD;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldKV;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldMA;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldMAS;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldOrderPrice;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldPrice;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldSecond;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldTotalprice;
    private com.hospital_os.utility.IntegerTextField integerTextFieldDamagefilm;
    private com.hospital_os.utility.IntegerTextField integerTextFieldNum;
    private javax.swing.JButton jButtonAddItemXray;
    private javax.swing.JButton jButtonDelFilmXray;
    private javax.swing.JButton jButtonDelItemXray;
    private javax.swing.JButton jButtonDelXrayPosition;
    private javax.swing.JButton jButtonDelectQueueLab;
    private javax.swing.JButton jButtonHistoryXN;
    private javax.swing.JButton jButtonInsertFilmXray;
    private javax.swing.JButton jButtonInsertXrayPosition;
    private javax.swing.JButton jButtonInsertXrayPosition1;
    private javax.swing.JButton jButtonSaveXray;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JButton jButtonSend1;
    private javax.swing.JCheckBox jCheckBoxInOrder;
    private javax.swing.JComboBox jComboBoxExecuter;
    private javax.swing.JComboBox jComboBoxFilmSize;
    private javax.swing.JComboBox jComboBoxLeteral;
    private javax.swing.JComboBox jComboBoxPosition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelFFD;
    private javax.swing.JLabel jLabelFilmNo;
    private javax.swing.JLabel jLabelFilmNo1;
    private javax.swing.JLabel jLabelKV;
    private javax.swing.JLabel jLabelMA;
    private javax.swing.JLabel jLabelMAS;
    private javax.swing.JLabel jLabelOrderPrice;
    private javax.swing.JLabel jLabelSecond;
    private javax.swing.JLabel jLabelTo1;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JLabel jLabelXrayExecuter;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelButton;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JPanel jPanelListXray;
    private javax.swing.JPanel jPanelOrderPrice;
    private javax.swing.JPanel jPanelResult;
    private javax.swing.JCheckBox jRadioButtonSelectAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPanePosition;
    private javax.swing.JScrollPane jScrollPaneResult;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.hosv3.gui.component.HJTableSort jTableFilmXray;
    private com.hosv3.gui.component.HJTableSort jTableListOrderXray;
    private com.hosv3.gui.component.HJTableSort jTableListOrderXrayReported;
    private com.hosv3.gui.component.HJTableSort jTableOrderXrayHistory;
    private com.hosv3.gui.component.HJTableSort jTablePosition;
    private com.hosv3.gui.component.HJTableSort jTableXrayHistory;
    private javax.swing.JTextArea jTextAreaPosition;
    private javax.swing.JTextArea jTextAreaResult;
    private javax.swing.JTextField jTextFieldXn;
    private com.hospital_os.utility.TimeTextField timeTextFieldXraytime;
    // End of variables declaration//GEN-END:variables
   
    /**
     * ใช้ในการแสดง Dialog ของประวัติของเลข xn
     */
    public void showHistoryXN()
    {
       theHD.showDialogShowHistoryXN(this.theHO);
    }
    
    
    public void setUserInExecute()
    {
        ComboboxModel.setCodeComboBox(jComboBoxExecuter, this.theHO.theEmployee.getObjectId());
    }
    
    public void delItemXray()
   {
       int[] a = jTableListOrderXray.getSelectedRows();
       theHC.theOrderControl.cancelOrderItem(orderxrayV,a);
   }
    
    public void addItemXray()
    {
        if(theHO.thePatient == null){
            theUS.setStatus("ยังไม่เลือกผู้ป่วย",UpdateStatus.WARNING);     
            return;
        }
        if(theHO.theVisit == null ){      
            theUS.setStatus("ยังไม่เลือกผู้ป่วย",UpdateStatus.WARNING);     
            return;
        }        
        if(theVisit.is_discharge_money.equals("1")){
            theUS.setStatus("ผู้ป่วยจำหน่ายทางการเงินแล้ว ไม่สามารถเพิ่มรายการเอ็กซเรย์ได้",UpdateStatus.WARNING);
            return;
        }
        theHD.showDialogOrderItemXrayByXray(this.orderxrayV,theVisit); 

    }
    
    /**ใช้ในการตรวจสอบ ว่าฟิล์มเสียต้องไม่มากกว่า ฟิล์มที่ใช้
     *@return boolean ถ้าไม่เกินจะ return เป็น true ถ้าเกินจะ return เป็น false
     *@author padungrat(tong)
     */
    public boolean checkDamageFilm()
    {   boolean result = true;
        
        int damage = Gutil.convertStringToInt(integerTextFieldDamagefilm.getText());
        int use  = Gutil.convertStringToInt(integerTextFieldNum.getText());
        if((use - damage) <0 )
        {
            integerTextFieldDamagefilm.selectAll();
            integerTextFieldDamagefilm.requestFocus();
            theUS.setStatus("จำนวนฟิล์มเสียต้องน้อยกว่าจำนวนฟิล์มที่ใช้",theUS.WARNING);
            result= false;
        }
        return result;
    }
    
    /**ใช้ในการupdate ข้อมูลของราคาของ Item
     *  โดยจะทำการตรวจสอบว่ามีราคาของ ฟิล์มหรือยังถ้ามีให้ทำงานหักลบ และแสดงราคา Item พร้อมกับราคารวมฟิล์ม Xray
     *  
     */
    public void setOrderItem(OrderItem oi)
    {
        theOrderItem = oi;
        doubleTextFieldOrderPrice.setText("0");
        doubleTextFieldTotalprice.setText("0");
        if(oi==null)
        {
//            Constant.println("________________________________________________1_");
            this.setResultXRay(null);
//            Constant.println("________________________________________________2_");
            this.setResultXrayPositionV(null);
//            Constant.println("________________________________________________3_");
            this.setResultXraySizeV(null);
//            Constant.println("________________________________________________4_");
            return;
        }
        double value = 0.0;
        if(vResultXraySize != null && vResultXraySize.size() >0) {
               value = (Constant.toDouble(theOrderItem.price) - this.priceFilmXray);
               if(value <0)
                   value = 0.0;
        }
        else {
            value = Constant.toDouble(theOrderItem.price);
        }
        ItemPrice itemprice = theHC.theOrderControl.readItemPriceByItem(theOrderItem.item_code);
        doubleTextFieldOrderPrice.setText(itemprice.price);
        doubleTextFieldTotalprice.setText(theOrderItem.price);
        jCheckBoxInOrder.setEnabled(!Gutil.isSelected(theOrderItem.charge_complete));
        doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
        jCheckBoxInOrder.setEnabled(!Gutil.isSelected(theOrderItem.charge_complete));
        //pu :ตรวจสอบการบวกราคาฟิล์ม เมื่อจำหน่ายทางการเงินแล้ว
        if(theHO.theVisit != null)
        {
            if(theHO.theVisit.is_discharge_money.equals("1"))
                this.jCheckBoxInOrder.setEnabled(false);
            else //amp:04/01/2550:ต้องเพิ่มเรื่องการตรวจสอบการบวกราคาฟิล์มด้วย
                this.jCheckBoxInOrder.setEnabled(!theHO.isLockingByOther());
        }
        doubleTextFieldOrderPrice.setEditable(!Gutil.isSelected(theOrderItem.charge_complete));        
        
        ResultXRay rx = theHC.theOrderControl.readOrderXrayByVNItemId(theOrderItem.getObjectId()
            ,theOrderItem.visit_id);
        this.setResultXRay(rx);
    }
    
    
    
    /**
     *ใช้ในการตรวจสอบและกำหนดการแสดง checkboxของการเพิ่ม ราคา film ลงใน order
     *ยกเลิกการใช้งาน
     *@author โต้ง
     *@date 17/03/49,15:45
     */
    ////////////////////////////////////////////////////////////////////////////
    /**
     * นำข้อมูลจาก Object resultXrayPosition มาเซตให้Gui
     */
    private void setResultXrayPosition(ResultXrayPosition resultXrayPosition)
    {
        if(resultXrayPosition!=null)
        {
            doubleTextFieldKV.setText(resultXrayPosition.kv);
            doubleTextFieldFFD.setText(resultXrayPosition.ffd);
            doubleTextFieldMA.setText(resultXrayPosition.ma);
            doubleTextFieldMAS.setText(resultXrayPosition.mas);
            doubleTextFieldSecond.setText(resultXrayPosition.second);
            Gutil.setGuiData(jComboBoxLeteral,resultXrayPosition.xray_leteral_id);
            Gutil.setGuiData(jComboBoxPosition,resultXrayPosition.xray_position_id);
        }
        else
        {
            doubleTextFieldFFD.setText("0.0");
            doubleTextFieldKV.setText("0.0");
            doubleTextFieldSecond.setText("0.0");
            doubleTextFieldMA.setText("0.0");
            doubleTextFieldMAS.setText("0.0");
            jComboBoxLeteral.setSelectedIndex(0);
            jComboBoxLeteral.setSelectedIndex(0);
        }   
    }
    
    ////////////////////////////////////////////////////////////////////////////
    /**
     * นำข้อมูลจาก Gui เข้าไปไว้ใน Object resultXrayPosition
     */
    private void getResultXrayPosition(ResultXrayPosition obResultXrayPosition)
    {
        if(obResultXrayPosition  == null){
            obResultXrayPosition = new ResultXrayPosition();
        }        
        obResultXrayPosition.xray_leteral_id = Gutil.getGuiData(jComboBoxLeteral);
        obResultXrayPosition.xray_position_id = Gutil.getGuiData(jComboBoxPosition);
        obResultXrayPosition.visit_id = theHO.theVisit.getObjectId();
        obResultXrayPosition.kv = doubleTextFieldKV.getText();
        obResultXrayPosition.ma = doubleTextFieldMA.getText();
        obResultXrayPosition.second = doubleTextFieldSecond.getText();
        obResultXrayPosition.mas = doubleTextFieldMAS.getText();
        obResultXrayPosition.ffd = doubleTextFieldFFD.getText();
    }
    
    ///////////////////////////////////////////////////////////////////////////
    /**
     * เซตข้อมูลในตาราง Position
     */
    private void setResultXrayPositionV(Vector vc)
    {
        vResultXrayPosition = vc;
        setEnabledPosition(!isHistory);
        if(vResultXrayPosition==null)
            vResultXrayPosition = new Vector();
        
        TaBleModel tm = new TaBleModel(jTablePosition_col,vResultXrayPosition.size());
        for(int i = 0,size=vResultXrayPosition.size(); i < size; i++)
        {
            ResultXrayPosition rxp = (ResultXrayPosition)vResultXrayPosition.get(i);
            tm.setValueAt(Gutil.getVectorName(
                    theHC.theLookupControl.listAllXrayLeteral(),rxp.xray_leteral_id),i,0);
            tm.setValueAt(Gutil.getVectorName(
                    theHC.theLookupControl.listAllXrayPosition(),rxp.xray_position_id),i,1);
        }
        jTablePosition.setModel(tm);
        //javax.swing.table.DefaultTableCellRenderer renderer = new javax.swing.table.DefaultTableCellRenderer();
        //renderer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //jTablePosition.getColumnModel().getColumn(0).setCellRenderer(renderer);
        //jTablePosition.getColumnModel().getColumn(1).setCellRenderer(renderer);
        if(vResultXrayPosition.size()>0){
            this.jTablePosition.setRowSelectionInterval(0, 0);
            setResultXrayPosition((ResultXrayPosition)vResultXrayPosition.get(0));
        }
        else{
            setResultXrayPosition(null);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    /**
     *เซตVisit ในตาราง History
     */
    private void setPatientVisitHistoryV(Vector v)
    { 
        TaBleModel tm;
        if(v == null)
            v = new Vector();
        
        tm = new TaBleModel(jTableXrayHistory_col,v.size());
        for(int i=0,size = v.size();i<size;i++){
            Visit vi = (Visit) v.get(i);
            tm.setValueAt(vi.vn, i, 0);
            tm.setValueAt(DateUtil.getDateToString(
                    DateUtil.getDateFromText(vi.begin_visit_time),true),i,1);
        }
        jTableXrayHistory.setModel(tm);
        jTableXrayHistory.getColumnModel().getColumn(0).setPreferredWidth(15);
        jTableXrayHistory.getColumnModel().getColumn(0).setCellRenderer(vnRender);
        //jTableXrayHistory.getColumnModel().getColumn(0).setCellRenderer(TableRenderer.getRendererCenter());
        jTableXrayHistory.getColumnModel().getColumn(1).setCellRenderer(TableRenderer.getRendererCenter());
    }
    
    ////////////////////////////////////////////////////////////////////////////
    /**
     *  นำค่าใน Objectresult XraySize มาแสดงบน GUI
     */
    private void setResultXraySize(ResultXraySize resultXraySize)
    {
        theResultXraySize = resultXraySize;
        if(theResultXraySize == null)
        {
            integerTextFieldNum.setText("1");
            integerTextFieldDamagefilm.setText("0");
            doubleTextFieldPrice.setText("0");
            //checkInCheckBoxInOrder();
            //jCheckBoxInOrder.setSelected(true);
            //doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
//            jCheckBoxInOrderActionPerformed(null);
            setResultXrayPositionV(null);
            return ;
        }
        integerTextFieldNum.setText(theResultXraySize.num_film);
        integerTextFieldDamagefilm.setText(theResultXraySize.damaging_film);
        doubleTextFieldPrice.setText(theResultXraySize.price);
        Gutil.setGuiData(jComboBoxFilmSize,theResultXraySize.film_size);
        //jCheckBoxInOrder.setSelected(Gutil.isSelected(theResultXraySize.add_order));
        doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
        doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
        ////////////////////////////////////////////////////////////////////////////////
        vResultXrayPosition = theHC.theOrderControl.listResultXrayPositionByResultXraySizeID(
                theResultXraySize.getObjectId());
        setResultXrayPositionV(vResultXrayPosition); 
    }
    
    /////////////////////////////////////////////////////////////////////////////
    /**
     *ทำการ เพิ่มข้อมูลลงตารางขนาดของ filmXray
     */
     private ResultXraySize getResultXraySize()
     {
         if(theResultXraySize==null)
             theResultXraySize = new ResultXraySize();
         
        theResultXraySize.film_size = ComboboxModel.getCodeComboBox(jComboBoxFilmSize);
        theResultXraySize.num_film  = integerTextFieldNum.getText();
        theResultXraySize.user = theHO.theEmployee.getObjectId();
        theResultXraySize.add_order = Gutil.isSelected(jCheckBoxInOrder);
        theResultXraySize.price = "0";
        //ถ้าไม่ได้รวมราคาเข้ากับ Order ให้กำหนดเป็น 0
        if(jCheckBoxInOrder.isSelected())
        {
            theResultXraySize.price = doubleTextFieldPrice.getText();
            theResultXraySize.add_order = "1";
        }
        
        theResultXraySize.visit_id = theHO.theVisit.getObjectId();
        //ตรวจสอบว่ามีการกรอกหรือไม่ถ้าไม่มีให้กำหนดเป็น 0
        theResultXraySize.damaging_film = "0";
        if(integerTextFieldDamagefilm.getText().trim().length() != 0)
            theResultXraySize.damaging_film  = integerTextFieldDamagefilm.getText();
        
        return theResultXraySize;
     }
     
   ////////////////////////////////////////////////////////////////////////////   
   /**
    *ลบResultXrayที่รายงานผลแล้ว
    */
    private void deleteResultXRayReported(ResultXRay rx)
    {
        
        int row = jTableListOrderXrayReported.getSelectedRow();
        if(row==-1){
            theUS.setStatus("กรุณาเลือกเลือกรายการเอ็กซเรย์",UpdateStatus.WARNING);
            return;
        }
        boolean resultConfirm = false;
        if(theResultXRay == null){
            theUS.setStatus("ยังไม่ได้เลือกรายการเอ็กซ์เรย์",UpdateStatus.WARNING);
            return;
        }
        if(!theResultXRay.reporter.equals("")) {
            theUS.setStatus("ไม่สามารถเปลี่ยนแปลงข้อมูลที่รายงานผลแล้วได้",UpdateStatus.WARNING);
            return ;
        }
        if(theVisit.isDischargeDoctor()){
            theUS.setStatus(Constant.getTextBundle("ผู้ป่วยจำหน่ายทางการแพทย์แล้ว") + " " +
                    Constant.getTextBundle("ไม่สามารถลบผลเอ็กซเรย์ได้"),UpdateStatus.WARNING);
            return;
        }
        if(theResultXRay.result_complete.equals("0")){
             if(!theUS.confirmBox("รายการนี้เสร็จสมบูรณ์แล้ว ยืนยันที่จะลบหรือไม่",UpdateStatus.WARNING)){  
                 return;
            }
        }
        resultConfirm = true;
        theResultXRay.active = "1";
        theResultXRay.description = "";
        theResultXRay.reporter = "";
        theResultXRay.xray_point = "";
        theHC.theOrderControl.deleteResultXray(rx,theOrderItem);
    }
   ////////////////////////////////////////////////////////////////////////////
    /**
     *  ตรวจสอบว่า เลือกรายการไหน
     *  หา item จาก orderitem
     *  หา ResultXrayFilmSize 
     *  หา ResultXrayPosition
     * theResultXRay
     * theResultXraySize
     * vResultXrayPosition
     */
    private void setResultXRay(ResultXRay rx)
    {   
        theResultXRay = rx;
        //////////////////////////////////////////////////////////////////////////
        if(theResultXRay == null){ 
            Constant.println("setResultXRay(null)");
            theResultXRay = new ResultXRay();
        }
        jTextAreaPosition.setText(theResultXRay.xray_point);
        jTextAreaResult.setText(theResultXRay.description);
        timeTextFieldXraytime.setText(theResultXRay.xray_time);
        ComboboxModel.setCodeComboBox(jComboBoxExecuter, theResultXRay.excetue_film);
        vResultXraySize = theHC.theOrderControl.listResultXraySizeByRxid(theResultXRay.getObjectId());
        setResultXraySizeV(vResultXraySize);
    }
    ///////////////////////////////////////////////////////////////////////////
    /**
     *  กำหนดให้สามารถทำงานได้หรือไม่สามารถทำงานได้ของข้อมูล Position
     */
    private void setEnabledPosition(boolean bool)
    {
        jComboBoxLeteral.setEnabled(bool);
        jComboBoxPosition.setEnabled(bool);
        doubleTextFieldFFD.setEnabled(bool);
        doubleTextFieldKV.setEnabled(bool);
        doubleTextFieldMA.setEnabled(bool);
        doubleTextFieldMAS.setEnabled(bool);
        doubleTextFieldSecond.setEnabled(bool);
        jButtonDelXrayPosition.setEnabled(bool);
        jButtonInsertXrayPosition.setEnabled(bool);
    }
  
    

    ////////////////////////////////////////////////////////////////////////////
    /**
     *เซตปุ่มต่างๆ
     */
    public void setEnabled(boolean isSetButton)
    {
        boolean locked = false;
        boolean is_fdischarge = false;
        locked = theHO.isLockingByOther();
            jButtonSaveXray.setEnabled(isSetButton);
            //jButtonAddItemXray.setEnabled(isSetButton);
            //jButtonDelItemXray.setEnabled(isSetButton);
            jButtonAddItemXray.setEnabled(!theHO.isLockingByOther());
            jButtonDelItemXray.setEnabled(!theHO.isLockingByOther());
            //doubleTextFieldOrderPrice.setEnabled(isSetButton);
            doubleTextFieldOrderPrice.setEnabled(!theHO.isLockingByOther());
//            jCheckBoxInOrder.setEnabled(!theHO.isLockingByOther());
//            jCheckBoxInOrder.setSelected(!theHO.isLockingByOther());
//            doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
            jButtonHistoryXN.setEnabled(isSetButton);
            jTextAreaPosition.setEnabled(isSetButton);
            jTextAreaResult.setEnabled(isSetButton);
            jComboBoxFilmSize.setEnabled(isSetButton);
            jComboBoxExecuter.setEnabled(isSetButton);
            timeTextFieldXraytime.setEnabled(isSetButton);
            integerTextFieldNum.setEnabled(isSetButton);
            integerTextFieldDamagefilm.setEnabled(isSetButton);            
            if(theHO.theVisit!=null)
                is_fdischarge = theHO.theVisit.is_discharge_money.equals("1");
            
            jButtonInsertXrayPosition.setEnabled(isSetButton);
            jButtonDelFilmXray.setEnabled(isSetButton);
            jButtonInsertFilmXray.setEnabled(isSetButton);
            /*แก้ไขเพิ่ม*/
            jComboBoxLeteral.setEnabled(isSetButton);
            jComboBoxPosition.setEnabled(isSetButton);
            jButtonDelXrayPosition.setEnabled(isSetButton);
            
            if(locked || is_fdischarge)
            {                
                jCheckBoxInOrder.setEnabled(false);
                jCheckBoxInOrder.setSelected(false);
                doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
            }
            else
            {
//                jCheckBoxInOrder.setEnabled(true);
//                jCheckBoxInOrder.setSelected(true);
//                doubleTextFieldPrice.setEnabled(jCheckBoxInOrder.isSelected());
            }

            /******************************************/
            //tuk: 25/08/2549 ให้มัน Enabled หรือ Disable ตามการเลือก visit
            /*doubleTextFieldPrice.setEnabled(isSetButton);
            jCheckBoxInOrder.setEnabled(isSetButton);
            if(isSetButton)
            {
                if(jCheckBoxInOrder.isSelected())
                {
                    doubleTextFieldPrice.setEnabled(false);
                }
                else
                {
                    doubleTextFieldPrice.setEnabled(true);
                }
            }*/
            
    }
    ///////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    /**
    *เซตตารางของรายการorderที่ยังไม่ได้รายงานผล
    */
    private void setOrderXrayV(Vector vc)
    {
        orderxrayV = vc;
        if(orderxrayV==null)
            orderxrayV = new Vector();
        
        TaBleModel tm = new TaBleModel(jTableListOrderXrayWait_col,orderxrayV.size());
        //TaBleModel tm = new TaBleModel(1,orderxrayV.size());
        for(int i=0 ,size=orderxrayV.size();i<size; i++)
        {  
            OrderItem order = (OrderItem)orderxrayV.get(i);
            Hashtable ht = new Hashtable();            
            ht.put("OrderItem",order);
            ht.put("String","");
            String ttt = theHC.theOrderControl.getTTTRenderDayOrder(order,"");
            ht.put("display_string", ttt);  
            tm.setValueAt(ht,i,0);
        }
        jTableListOrderXray.setModel(tm);
        //setDetailEnabled(false);
        jTableListOrderXray.getColumnModel().getColumn(0).setPreferredWidth(300); // จำนวน 
        jTableListOrderXray.getColumnModel().getColumn(0).setCellRenderer(cellRendererDayOrder);
        /////////////////////////////////////////////////
        if(orderxrayV.size()>0){
            jTableListOrderXray.setRowSelectionInterval(0, 0);
            setOrderItem((OrderItem)orderxrayV.get(0));
        }
        else{
            setOrderItem(null);
        }
  }
  
     //////////////////////////////////////////////////////////////////////////
    /**
    *
    */
    private void setOrderXrayHistoryV(Vector vc)
    {  
        orderItemHistoryV = vc;
        if(orderItemHistoryV == null){
            orderItemHistoryV = new Vector();
        }
        TaBleModel tm= new TaBleModel(jTableListOrderXray_col,orderItemHistoryV.size());
        //TaBleModel tm= new TaBleModel(1,orderItemHistoryV.size());
        for(int i=0 ,size=orderItemHistoryV.size();i<size; i++)
        {  
            OrderItem o = (OrderItem) orderItemHistoryV.get(i);
            Hashtable ht = new Hashtable();            
            ht.put("OrderItem",o);
            ht.put("String","");
            String ttt = theHC.theOrderControl.getTTTRenderDayOrder(o,"");
            ht.put("display_string", ttt);  
            tm.setValueAt(ht,i,0);
        }
        jTableOrderXrayHistory.setModel(tm);
        jTableOrderXrayHistory.getColumnModel().getColumn(0).setPreferredWidth(300); // จำนวน 
        jTableOrderXrayHistory.getColumnModel().getColumn(0).setCellRenderer(cellRendererDayOrder);
        if(vResultXrayPosition.size()>0){
            this.jTablePosition.setRowSelectionInterval(0, 0);
            setResultXrayPosition((ResultXrayPosition)vResultXrayPosition.get(0));
        }
        else{
            setResultXrayPosition(null);
        }

  }
    ////////////////////////////////////////////////////////////////////////////
    /**
     *เซตตารางรายการorderที่ได้รายงานผบแล้ว
     */
    private void setOrderXrayReportedV(Vector vc)
    {   
        this.orderxrayreportedV = vc;
        if(orderxrayreportedV==null)
            orderxrayreportedV = new Vector();
        
        TaBleModel tm = new TaBleModel(jTableListOrderXrayReported_col,orderxrayreportedV.size());
        //TaBleModel tm = new TaBleModel(1,orderxrayreportedV.size());
        for(int i=0,size=orderxrayreportedV.size();i<size; i++){  
            OrderItem o =  (OrderItem) orderxrayreportedV.get(i);
            Hashtable ht = new Hashtable();            
            ht.put("OrderItem",o);
            ht.put("String","");
            String ttt = theHC.theOrderControl.getTTTRenderDayOrder(o,"");
            ht.put("display_string", ttt);  
            tm.setValueAt(ht,i,0);
        }
        jTableListOrderXrayReported.setModel(tm); 
        jTableListOrderXrayReported.getColumnModel().getColumn(0).setPreferredWidth(300); 
        jTableListOrderXrayReported.getColumnModel().getColumn(0).setCellRenderer(cellRendererDayOrder);
        if(vResultXrayPosition.size()>0){
            this.jTablePosition.setRowSelectionInterval(0, 0);
            setResultXrayPosition((ResultXrayPosition)vResultXrayPosition.get(0));
        }
        else{
            setResultXrayPosition(null);
        }
    }
    
    
    /////////////////////////////////////////////////////////////////////////////
    /**
     *เซตตารางฟิล์มเอ็กซเรย์
     */
    private void setResultXraySizeV(Vector vc)
    {   
        vResultXraySize = vc;
        if(vResultXraySize==null)
            vResultXraySize = new Vector();
        
        priceFilmXray = 0.0;
        TaBleModel tm= new TaBleModel(jTableFilmXray_col,vResultXraySize.size());
        for(int i=0,size=vResultXraySize.size() ;i<size; i++)
        {  
            ResultXraySize p = (ResultXraySize)vResultXraySize.get(i);
            String film_size = theHC.theLookupControl.readFilmSizeById(p.film_size).description;
            tm.setValueAt(film_size ,i,0);
            tm.setValueAt(p.num_film,i,1);
            tm.setValueAt(p.damaging_film,i,2);
            tm.setValueAt(p.price,i,3);
    
        }
        DefaultTableCellRenderer rendererRight = new DefaultTableCellRenderer();
        DefaultTableCellRenderer rendererCenter = new DefaultTableCellRenderer();
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        rendererRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        jTableFilmXray.setModel(tm);
        jTableFilmXray.getColumnModel().getColumn(0).setPreferredWidth(100); 
        jTableFilmXray.getColumnModel().getColumn(1).setPreferredWidth(50);
        jTableFilmXray.getColumnModel().getColumn(2).setPreferredWidth(50);
        jTableFilmXray.getColumnModel().getColumn(3).setPreferredWidth(50);
        jTableFilmXray.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);
        jTableFilmXray.getColumnModel().getColumn(1).setCellRenderer(rendererRight);
        jTableFilmXray.getColumnModel().getColumn(2).setCellRenderer(rendererRight);
        jTableFilmXray.getColumnModel().getColumn(3).setCellRenderer(rendererRight);
        //////////////////////////////////////////////////////////////////////////////////////////
        if(!vResultXraySize.isEmpty()){
            this.jTableFilmXray.setRowSelectionInterval(0,0);
            setResultXraySize((ResultXraySize)vResultXraySize.get(0));
        }
        else
            setResultXraySize(null);
   }
    /**
     *  ใช้ในการคำนวณหาราคาของ film ที่ใช้ และส่งค่ากลับ
     *@filmsize เป็นราคาของ film ที่ถูกกำหนดมาแล้ว เป็น String
     *@sum เป็นผลรวมของ film ที่ทำงานบันทึกลงไปแล้ว เป็น double
     *@return เป็น double ที่รวมผลแล้ว
     */
    private double priceFilmSize(String filmsize,double sum)
    {   
        return sum + Constant.toDouble(filmsize);
    }
   //////////////////////////////////////////////////////////////////////////// 
   /*
    *Clear ข้อมูลต่างๆ
    */
    private void setPatientVisit(Patient pt,Visit visit)
    {
        setPatientVisit(pt,visit,true);
    }
    private void setPatientVisit(Patient pt,Visit visit,boolean open_con)
    {
        theVisit = visit;
        thePatient = pt;
        if(theVisit==null)
        {
            setEnabled(false);
            jTextAreaPosition.setText("");
            jTextAreaResult.setText("");
            //jCheckBoxInOrder.setSelected(true);
            //doubleTextFieldPrice.setEnabled(!jCheckBoxInOrder.isSelected());
            //checkInCheckBoxInOrder();
            timeTextFieldXraytime.initCurrenttime();
            jTextFieldXn.setText("");

            setResultXraySizeV(null);
            setResultXrayPositionV(null);
            setOrderXrayV(null);
            setOrderXrayReportedV(null);
            setPatientVisitHistoryV(null);
            setOrderXrayHistoryV(null);
            return;
        }
        
        jTextFieldXn.setText(thePatient.xn);          
        
        Vector orderxrayV = theHC.theOrderControl.listOrderXrayByVN(visit.getObjectId());//,open_con);
        Vector orderxrayreportedV = theHC.theOrderControl.
               listOrderXrayReportedInComplete(visit.getObjectId());//,open_con);
        ////////////////////////////////////////////////////////////////////////
        /*ทำการ GUI ที่ได้ทำการรายงานผลแล้วและยังไม่ได้รายงานผล*/
        setOrderXrayV(orderxrayV);
        setOrderXrayReportedV(orderxrayreportedV);
        jButtonSend.setEnabled(this.orderxrayV.isEmpty());
        visitHistoryV = theHC.theVisitControl.listVisitXrayByDatePid(true,"","",theHO.thePatient.getObjectId());
        setPatientVisitHistoryV(visitHistoryV);
        if(theVisit.isDropVisit()) {
            setEnabled(false);
            return;
        }           
        setEnabled(true);
    }
    
    ///////////////////////////////////////////////////////////////////////////
    /**
    *นำค่ามาเก็บในobjectเพื่อจะนำไปใส่ในฐานข้อมูล
    */
   private boolean getResultXRay(ResultXRay theResultXRay)
   {   
        theResultXRay.xn = thePatient.xn;
        if(theHO.thePatientXN != null)
        {
            theResultXRay.t_patient_xn_id = theHO.thePatientXN.getObjectId();
        }
        theResultXRay.xray_point = Gutil.CheckReservedWords(jTextAreaPosition.getText());
        theResultXRay.description = jTextAreaResult.getText();
        theResultXRay.hn = theHO.thePatient.getObjectId();
        theResultXRay.vn = theHO.theVisit.getObjectId();
        theResultXRay.active = "1";
        //ผู้ฉายรังสี
        theResultXRay.excetue_film = ComboboxModel.getCodeComboBox(jComboBoxExecuter);
        //tuk: 31/07/2549 เพิ่มช่องกรอกเวลาฉายรังสี
        theResultXRay.xray_time = timeTextFieldXraytime.getText();
        theResultXRay.order_item_id = theOrderItem.getObjectId();
        //////////////////////////////////////////////////////////////////////
        return true;
    }
   
   
    ///////////////////////////////////////////////////////////////////////////
    /**
     *ใช้ในการกำหนดให้แสดงข้อความบน GUI
     *@param msg เป็น String สามารถระบุเป็น null ได้ ยังไม่ได้นำมาใช้งาน
     *@author padungrat(tong)
     *
     */
    public void setLanguage(String msg)
    {
        //ด้าน
	GuiLang.setLanguage(jLabel2);
        //ท่า
	GuiLang.setLanguage(jLabel3);
	//เลข XN
        GuiLang.setLanguage(jLabel1);
        //บันทึก
	GuiLang.setLanguage(jButtonSaveXray);
        //รวมในรายการ
	GuiLang.setLanguage(jCheckBoxInOrder);
	//จำนวน
        GuiLang.setLanguage(jLabelFilmNo1);
        //จำนวนฟิล์มเสีย
	GuiLang.setLanguage(jLabelFilmNo);
        //ราคา Order Xray : tong
        GuiLang.setLanguage(jLabelOrderPrice);
        //ราคา Order Xray ที่รวม ราคาฟิล์มแล้ว : tong
        GuiLang.setLanguage(jLabelTotal);
         //ผู้ฉายรังสี
        GuiLang.setLanguage(jLabelXrayExecuter);
        
        //ค่า KV
        GuiLang.setLanguage(jLabelKV);
        //ค่า MA
        GuiLang.setLanguage(jLabelMA);
        //ค่า MAS
        GuiLang.setLanguage(jLabelMAS);
        //ค่า Second
        GuiLang.setLanguage(jLabelSecond);
        //ค่า FFD
        GuiLang.setLanguage(jLabelFFD);
        //ส่ง
        GuiLang.setLanguage(jButtonSend);
        //ข้อมูลของตารางฟิล์ม
        GuiLang.setLanguage(jTableFilmXray_col);
        //ข้อมูลของตารางท่า-ด้าน
        GuiLang.setLanguage(jTablePosition_col);
        //ข้อมูลของตารางรายการ Xray
        GuiLang.setLanguage(jTableListOrderXray_col);
        //ข้อมูลของตารางรายการที่ดำเนินการแล้ว
        GuiLang.setLanguage(jTableListOrderXrayReported_col);
        //ข้อมูลของตารางประวัติ
        GuiLang.setLanguage(jTableXrayHistory_col);
        GuiLang.setLanguage(jTableListOrderXrayWait_col);
        GuiLang.setLanguage(jTabbedPane1);
        GuiLang.setLanguage(jButtonHistoryXN);
        GuiLang.setLanguage(jLabel5);
        GuiLang.setLanguage(jLabelTotal);
        GuiLang.setLanguage(jLabelFilmNo1);
        GuiLang.setLanguage(jButtonDelectQueueLab);
        GuiLang.setLanguage(jButtonSend1);
        GuiLang.setLanguage(jRadioButtonSelectAll);
        GuiLang.setTextBundle(jPanel19);
        GuiLang.setTextBundle(jPanel21);
        GuiLang.setTextBundle(jPanel8);
        GuiLang.setTextBundle(jPanel2);
        GuiLang.setTextBundle(jPanel9);
        GuiLang.setTextBundle(jPanel5);
        GuiLang.setTextBundle(jPanelResult);
        GuiLang.setTextBundle(jPanelDetail);
        GuiLang.setLanguage(jButtonInsertFilmXray);
        GuiLang.setTextBundle(jPanel10);
    }  
    
    
   
   /*
    *    
    */
    public void gc()
    {
   
    }
    public void notifyCheckDoctorTreament(String str, int status){   
        ((UpdateStatus)theUS.getJFrame()).setStatus(str,status);
    }
  
    public void notifyManageAppointment(String str, int status) {
    }
    
    public void notifyManageDrugAllergy(String str, int status) {
    }
    
    public void notifySavePatientPayment(String str, int status) {
       
    }
    
    public void notifyReadVisit(String str, int status){
        setPatientVisit(theHO.thePatient,theHO.theVisit,false); 
    }
    
    public void notifyObservVisit(String str, int status) {
    }
    
    public void notifyUnlockVisit(String str, int status) {
        setPatientVisit(theHO.thePatient,theHO.theVisit);
    }
    
    public void notifyVisitPatient(String str, int status)
    {
        notifyReadVisit(str,status);            
    }
    public void notifyAdmitVisit(String str, int status) {
    }
    
    public void notifyManagePatientLabReferIn(String str, int status) {
    }
    
    public void notifyDischargeDoctor(String str, int status) {
    }
    
    public void notifyAddItemDrugAllergy(String str, int status) {
    }
    
    public void notifyDropVisit(String str, int status) {
    }
    
    public void notifySendVisit(String str, int status) {
    }
    
    public void notifyDischargeFinancial(String str, int status)
    {        
    }
    
    public void notifyManagePayment(String str, int status) {
    }
    
    public void notifyReverseFinancial(String str, int status)
    {
    }
    
    public void notifyReverseDoctor(String str, int status) {
    }
    
    public void notifyManageLabResult(String str, int status) {
    }
    
    public void notifyDeleteVisitPayment(String str, int status) {
    }
    
    public void notifyDeletePatientPayment(String str, int status) {
    }
    
    public void notifySaveFilmXray(String str, int status) 
    {
        setOrderItem(theOrderItem);
    }
    
    public void notifyDeleteLabOrder(String msg, int status) {
    }
    
    public void notifySaveLabResult(String str, int status) {
    }
    
    public void notifyDeleteFilmXray(String str, int status)
    {
        this.setOrderItem(theOrderItem);
    }
    
    public void notifySaveXrayPosition(String str, int status){
        this.setResultXraySize(this.theResultXraySize);
   }
    
    public void notifyDeleteXrayPosition(String str, int status) {
        this.setResultXraySize(this.theResultXraySize);
    }
    
    public void notifySaveResultXray(String str, int status){
        setPatientVisit(theHO.thePatient,theHO.theVisit);
    }
    
    public void notifyXrayReportComplete(String str, int status){
       setPatientVisit(theHO.thePatient,theHO.theVisit);
    }
    
    public void notifyDeleteLabResult(String str, int status) {
    }
    
    public void notifyDeletePatient(String str, int status) {
    }
    
    public void notifyReadPatient(String str, int status) {
    }
    public void notifyReadFamily(String str, int status) {
    }
    
    public void notifySavePatient(String str, int status) {
    }
    
    public void notifyRemainDoctorDischarge(String str, int status) {
    }
    
    public void notifySendVisitBackWard(String str, int status) {
    }
    
    public void notifyReportResultLab(String str, int status) {
    }
    
    public void notifyDeleteResultXray(String str, int status) {
        setPatientVisit(theHO.thePatient,theHO.theVisit);
    }
    
    public void notifySaveAppointment(String str, int status) {
    }
    
    public void notifyAddLabReferOut(String str, int status) {
    }
    
    public void notifyAddLabReferIn(String str, int status) {
    }
    
    public void notifyReveseAdmit(String str, int status) {
    }
    
    public void notifyReverseAdmit(String str, int status) {
    }
    
    public void notifyResetPatient(String str, int status) {
        setPatientVisit(theHO.thePatient,theHO.theVisit);
    }
    
    public void notifySaveRemainLabResult(String str, int status) {
    }
    
    public void notifySendResultLab(String str, int status) {
    }
    
    public void notifyDeleteQueueLab(String str, int status) {
    }

    public void notifySaveBorrowFilmXray(String str, int status) {
    }

    public void notifyCancelOrderItem(String str, int status) {
        setPatientVisit(theHO.thePatient,theHO.theVisit);
    }

    public void notifyCheckAutoOrder(String str, int status) {
    }

    public void notifyContinueOrderItem(String str, int status) {
    }

    public void notifyDispenseOrderItem(String str, int status) {
    }

    public void notifyDoctorOffDrug(String DoctorId, int status) {
    }

    public void notifyExecuteOrderItem(String str, int status) {
    }

    public void notifyReceiveReturnDrug(String str, int status) {
    }

    public void notifyReferOutLab(String msg, int status) {
    }

    public void notifySaveOrderItem(String str, int status) {
        setPatientVisit(theHO.thePatient,theHO.theVisit);
    }

    public void notifySaveOrderItemInLab(String str, int status) {
    }


    public void notifySaveOrderRequest(String str, int status) {
    }

    public void notifySaveReturnDrug(String str, int status) {
    }

    public void notifyVerifyOrderItem(String str, int status) {
    }
    
}
