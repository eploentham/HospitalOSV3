package com.hosv3.gui.panel.transaction;
/*
 * PanelDiagICD9.java
 *
 * Created on 29 กันยายน 2546, 9:34 น.
 */
import javax.swing.*;
import java.util.*;
import java.awt.event.*;
import com.hosv3.control.*;
import com.hosv3.control.lookup.*;
import com.hosv3.utility.*;
import com.hosv3.utility.connection.*;
import com.hosv3.usecase.transaction.*;
import com.hosv3.object.*;
import com.hosv3.gui.dialog.*;

import com.hospital_os.object.*; 
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.TaBleModel;
import com.hosv3.utility.Constant;

/**
 *
 * @author  Surachai Thowong
 */
public class PanelDiagICD9 extends javax.swing.JPanel
implements ManageDiagnosisResp,ManageVisitResp,ManagePatientResp, ManageOrderResp//,ManageServicePointReq
{
	static final long serialVersionUID = 0;
    HosObject theHO;
    HosControl theHC;
    HosDialog theHD;
    UpdateStatus theUS;
    
    private Visit theVisit;
    private ICD9 theICD9;
    private Vector theIcd9V;
    private DiagIcd9 theDiagIcd9;
    private Vector vDiagIcd9;
    private Vector vOpType;

    private DiagnosisControl theDC;
    //private Optype theOptype;
    private Vector participateor;
    private String auth;
    private int time_over = 0;
    /** Creates new form PanelDiagICD9 */
    static String[] column_jTableIcd9Search = {"รหัส","รายละเอียด"};
    static String[] column_DiagIcd9 = {"รหัส","รายละเอียด","ประเภท"};
    static String[] col_Participate = {"ชื่อ","สกุล"};
    public PanelDiagICD9(){
        initComponents();
        setLanguage(null); 
        jTextAreaDescription.setEnabled(false);
        this.jTableDiagIcd9.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.jTableIcd9Search.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
  
    public void setControl(HosControl hc, UpdateStatus us)
    {   
        theHC = hc;
        theHO = hc.theHO;
        theUS = us;
        theDC = hc.theDiagnosisControl;
        theDiagIcd9 = new DiagIcd9();
        auth = theHO.theEmployee.authentication_id;
        hc.theHS.theDiagnosisSubject.attachManageDiagnosis(this);
        hc.theHS.theVisitSubject.attachManageVisit(this);
        hc.theHS.thePatientSubject.attachManagePatient(this);
        hc.theHS.theOrderSubject.attachManageOrder(this);
        jComboBoxDoctor.setEnabled(true);
        initComboBox();
        setParticipateOrV(null);
        setVisit(null);
//        setLanguage(null);        
    }

    public void setDialog(HosDialog hd){
        theHD = hd;
    }
    
   public void initComboBox(){
        vOpType = theHC.theLookupControl.listOptype();
        ComboboxModel.initComboBox(jComboBoxDxtype,vOpType);
        ComboboxModel.initComboBox(jComboBoxClinic,theHC.theLookupControl.listClinic());
        ComboboxModel.initComboBox(jComboBoxDoctor,theHC.theLookupControl.listDoctor());
   }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelIcd9Property = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jComboBoxDxtype = new javax.swing.JComboBox();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jComboBoxClinic = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabelDateIn = new javax.swing.JLabel();
        jLabelDateOut = new javax.swing.JLabel();
        jLabelTimeIn = new javax.swing.JLabel();
        jLabelTimeOut = new javax.swing.JLabel();
        dateComboBoxIn = new com.hospital_os.utility.DateComboBox();
        dateComboBoxOut = new com.hospital_os.utility.DateComboBox();
        timeTextFieldOut = new com.hospital_os.utility.TimeTextField();
        timeTextFieldIn = new com.hospital_os.utility.TimeTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableNurse = new com.hosv3.gui.component.HJTableSort();
        jPanel5 = new javax.swing.JPanel();
        jButtonAddNurse = new javax.swing.JButton();
        jButtonDelNurse = new javax.swing.JButton();
        jTextFieldDxNote = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxDoctor = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonClearData = new javax.swing.JButton();
        jButtonSaveDischarge = new javax.swing.JButton();
        jCheckBoxUnlock = new javax.swing.JToggleButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelSearchIcd9 = new javax.swing.JPanel();
        jLabelKeyword = new javax.swing.JLabel();
        jTextFieldKeyword = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jScrollPaneIcd9 = new javax.swing.JScrollPane();
        jTableIcd9Search = new com.hosv3.gui.component.HJTableSort();
        jScrollPaneIcd9List = new javax.swing.JScrollPane();
        jTableDiagIcd9 = new com.hosv3.gui.component.HJTableSort();

        setLayout(new java.awt.GridBagLayout());

        jPanelIcd9Property.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "คุณสมบัติของ ICD 9", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelIcd9Property.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(defaultFont1);
        jLabel3.setText("รหัส ICD9");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel3, gridBagConstraints);

        jTextFieldCode.setBackground(new java.awt.Color(204, 255, 255));
        jTextFieldCode.setFont(defaultFont1);
        jTextFieldCode.setDoubleBuffered(true);
        jTextFieldCode.setMinimumSize(new java.awt.Dimension(60, 21));
        jTextFieldCode.setPreferredSize(new java.awt.Dimension(60, 21));
        jTextFieldCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCodeActionPerformed(evt);
            }
        });
        jTextFieldCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jTextFieldCode, gridBagConstraints);

        jComboBoxDxtype.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jComboBoxDxtype, gridBagConstraints);

        jScrollPane11.setBorder(null);
        jScrollPane11.setMinimumSize(new java.awt.Dimension(22, 30));
        jScrollPane11.setPreferredSize(new java.awt.Dimension(22, 30));

        jTextAreaDescription.setFont(defaultFont1);
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setWrapStyleWord(true);
        jTextAreaDescription.setOpaque(false);
        jScrollPane11.setViewportView(jTextAreaDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jScrollPane11, gridBagConstraints);

        jLabel7.setFont(defaultFont1);
        jLabel7.setText("ประเภท");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelIcd9Property.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jComboBoxClinic.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jComboBoxClinic, gridBagConstraints);

        jLabel5.setFont(defaultFont1);
        jLabel5.setText("คลีนิก");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabelDateIn.setFont(defaultFont1);
        jLabelDateIn.setText("เวลา");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jLabelDateIn, gridBagConstraints);

        jLabelDateOut.setFont(defaultFont1);
        jLabelDateOut.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jLabelDateOut, gridBagConstraints);

        jLabelTimeIn.setFont(defaultFont1);
        jLabelTimeIn.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 0);
        jPanel2.add(jLabelTimeIn, gridBagConstraints);

        jLabelTimeOut.setFont(defaultFont1);
        jLabelTimeOut.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 0);
        jPanel2.add(jLabelTimeOut, gridBagConstraints);

        dateComboBoxIn.setFont(defaultFont1);
        dateComboBoxIn.setMinimumSize(new java.awt.Dimension(99, 25));
        dateComboBoxIn.setPreferredSize(new java.awt.Dimension(99, 25));
        dateComboBoxIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxInActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(dateComboBoxIn, gridBagConstraints);

        dateComboBoxOut.setFont(defaultFont1);
        dateComboBoxOut.setMinimumSize(new java.awt.Dimension(99, 25));
        dateComboBoxOut.setPreferredSize(new java.awt.Dimension(99, 25));
        dateComboBoxOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxOutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(dateComboBoxOut, gridBagConstraints);

        timeTextFieldOut.setFont(defaultFont1);
        timeTextFieldOut.setMinimumSize(new java.awt.Dimension(45, 20));
        timeTextFieldOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextFieldOutActionPerformed(evt);
            }
        });
        timeTextFieldOut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeTextFieldOutFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 0);
        jPanel2.add(timeTextFieldOut, gridBagConstraints);

        timeTextFieldIn.setFont(defaultFont1);
        timeTextFieldIn.setMinimumSize(new java.awt.Dimension(45, 20));
        timeTextFieldIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextFieldInActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 0);
        jPanel2.add(timeTextFieldIn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanelIcd9Property.add(jPanel2, gridBagConstraints);

        jPanel4.setPreferredSize(new java.awt.Dimension(216, 105));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(defaultFont1);
        jLabel4.setText("แพทย์");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(jLabel4, gridBagConstraints);

        jLabel2.setFont(defaultFont1);
        jLabel2.setText("ผู้เข้าร่วมผ่าตัด");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jLabel2, gridBagConstraints);

        jScrollPane1.setBorder(null);

        jTableNurse.setFont(defaultFont1);
        jTableNurse.setOpaque(false);
        jScrollPane1.setViewportView(jTableNurse);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanel4.add(jScrollPane1, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButtonAddNurse.setFont(defaultFont1);
        jButtonAddNurse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddNurse.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddNurse.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddNurse.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddNurse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNurseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel5.add(jButtonAddNurse, gridBagConstraints);

        jButtonDelNurse.setFont(defaultFont1);
        jButtonDelNurse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelNurse.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelNurse.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelNurse.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelNurse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelNurseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel5.add(jButtonDelNurse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jPanel5, gridBagConstraints);

        jTextFieldDxNote.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanel4.add(jTextFieldDxNote, gridBagConstraints);

        jLabel6.setFont(defaultFont1);
        jLabel6.setText("หมายเหตุ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jLabel6, gridBagConstraints);

        jComboBoxDoctor.setEditable(true);
        jComboBoxDoctor.setFont(defaultFont1);
        jComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDoctorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(jComboBoxDoctor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 5, 5);
        jPanelIcd9Property.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(jPanelIcd9Property, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jButtonDelete.setFont(defaultFont1);
        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelete.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel6.add(jButtonDelete, gridBagConstraints);

        jButtonSave.setFont(defaultFont1);
        jButtonSave.setText("บันทึก");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 100, 0, 0);
        jPanel6.add(jButtonSave, gridBagConstraints);

        jButtonClearData.setFont(defaultFont1);
        jButtonClearData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonClearData.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonClearData.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonClearData.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonClearData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel6.add(jButtonClearData, gridBagConstraints);

        jButtonSaveDischarge.setFont(defaultFont1);
        jButtonSaveDischarge.setText("จำหน่าย");
        jButtonSaveDischarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDischargeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel6.add(jButtonSaveDischarge, gridBagConstraints);

        jCheckBoxUnlock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/Unlock.png"))); // NOI18N
        jCheckBoxUnlock.setToolTipText("ปลดล้อกทันที");
        jCheckBoxUnlock.setMaximumSize(new java.awt.Dimension(26, 26));
        jCheckBoxUnlock.setMinimumSize(new java.awt.Dimension(26, 26));
        jCheckBoxUnlock.setPreferredSize(new java.awt.Dimension(26, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel6.add(jCheckBoxUnlock, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jPanel6, gridBagConstraints);

        jSplitPane1.setBorder(null);

        jPanelSearchIcd9.setPreferredSize(new java.awt.Dimension(260, 105));
        jPanelSearchIcd9.setLayout(new java.awt.GridBagLayout());

        jLabelKeyword.setFont(defaultFont1);
        jLabelKeyword.setText("ระบุคำค้น");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelSearchIcd9.add(jLabelKeyword, gridBagConstraints);

        jTextFieldKeyword.setFont(defaultFont1);
        jTextFieldKeyword.setMaximumSize(new java.awt.Dimension(100, 21));
        jTextFieldKeyword.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldKeyword.setPreferredSize(new java.awt.Dimension(100, 21));
        jTextFieldKeyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldKeywordActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSearchIcd9.add(jTextFieldKeyword, gridBagConstraints);

        jButtonSearch.setFont(defaultFont1);
        jButtonSearch.setText("ค้นหา");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(62, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(62, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(62, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 1, 0);
        jPanelSearchIcd9.add(jButtonSearch, gridBagConstraints);

        jTableIcd9Search.setFont(defaultFont1);
        jTableIcd9Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableIcd9SearchMouseReleased(evt);
            }
        });
        jTableIcd9Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableIcd9SearchKeyReleased(evt);
            }
        });
        jScrollPaneIcd9.setViewportView(jTableIcd9Search);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelSearchIcd9.add(jScrollPaneIcd9, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanelSearchIcd9);

        jTableDiagIcd9.setFont(defaultFont1);
        jTableDiagIcd9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableDiagIcd9KeyReleased(evt);
            }
        });
        jTableDiagIcd9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDiagIcd9MouseReleased(evt);
            }
        });
        jScrollPaneIcd9List.setViewportView(jTableDiagIcd9);

        jSplitPane1.setRightComponent(jScrollPaneIcd9List);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jSplitPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveDischargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDischargeActionPerformed
        // Somprasong 08122010 เพิ่มการตรวจสอบว่า ถ้าไม่มี Principal procedure ไม่สามารถจำหน่ายทางการแพทย์ได้
        boolean canDischarge = false;
        Vector<DiagIcd9> diagIcd9s = theHO.vDiagIcd9;
        if (diagIcd9s == null || diagIcd9s.isEmpty()) {
            canDischarge = false;
        } else {
            for (DiagIcd9 icd9 : diagIcd9s) {
                if(icd9.type.equals("1")){
                    canDischarge = true;
                }
            }
        }
        if(!canDischarge){
            theUS.setStatus("ไม่มี Principal procedure ไม่สามารถจำหน่ายทางการแพทย์ได้",UpdateStatus.WARNING);
            return;
        }
        if(theHD.showDialogDischarge(theHO.theVisit)) {
            if(HosObject.isVisitDeath(theHO.theVisit))
                this.theHD.showDialogDeath();
            if(!theDC.dischargeDoctor(this.jCheckBoxUnlock.isSelected()))
                return;
            if(!jCheckBoxUnlock.isSelected() && HosObject.isVisitRefer(theHO.theVisit))
                this.theHD.showDialogReferIn(theHO.theVisit);
        }
    }//GEN-LAST:event_jButtonSaveDischargeActionPerformed

    private void timeTextFieldOutFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeTextFieldOutFocusLost
        timeTextFieldOutActionPerformed(null);
    }//GEN-LAST:event_timeTextFieldOutFocusLost

    private void timeTextFieldOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextFieldOutActionPerformed
 
    }//GEN-LAST:event_timeTextFieldOutActionPerformed

    private void timeTextFieldInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextFieldInActionPerformed
        String time = timeTextFieldIn.getText();
    }//GEN-LAST:event_timeTextFieldInActionPerformed

    private void dateComboBoxOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxOutActionPerformed

    }//GEN-LAST:event_dateComboBoxOutActionPerformed

    private void dateComboBoxInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxInActionPerformed
        //dateComboBoxOut.setText(DateUtil.convertFieldDate(dateComboBoxIn.getText())); 
    }//GEN-LAST:event_dateComboBoxInActionPerformed

    private void jTableDiagIcd9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableDiagIcd9KeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN)
            this.jTableDiagIcd9MouseReleased(null);
    }//GEN-LAST:event_jTableDiagIcd9KeyReleased

    private void jTableIcd9SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableIcd9SearchKeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN)
            this.jTableIcd9SearchMouseReleased(null);
    }//GEN-LAST:event_jTableIcd9SearchKeyReleased

    private void jButtonClearDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearDataActionPerformed
        this.jTableDiagIcd9.clearSelection();
        this.jTableIcd9Search.clearSelection();
        setDiagIcd9(null,null);
    }//GEN-LAST:event_jButtonClearDataActionPerformed

    private void jTextFieldCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodeFocusLost
        jTextFieldCodeActionPerformed(null);
    }//GEN-LAST:event_jTextFieldCodeFocusLost

    private void jTextFieldCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCodeActionPerformed

        String search = jTextFieldCode.getText(); 
        if(search.trim().equals("")) 
        {
           theUS.setStatus("กรุณาระบุรหัสที่จะค้น",UpdateStatus.WARNING);
           setIcd9(null);
           return;
        }
        ICD9 icd9byCode = theHC.theDiagnosisControl.readIcd9ByCode(search);
        if(icd9byCode==null)
        {
            theUS.setStatus("ไม่พบข้อมูลที่ค้นหา กรุณาค้นหาใหม่อีกครั้ง",UpdateStatus.WARNING);
        }
        setIcd9(icd9byCode);
    }//GEN-LAST:event_jTextFieldCodeActionPerformed

    private void jTextFieldKeywordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldKeywordActionPerformed
        jButtonSearchActionPerformed(null);
    }//GEN-LAST:event_jTextFieldKeywordActionPerformed

    private void jButtonDelNurseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelNurseActionPerformed
       int[]  row = jTableNurse.getSelectedRows();
       theHC.theDiagnosisControl.deleteParticipateOr(participateor,row);
    }//GEN-LAST:event_jButtonDelNurseActionPerformed

    private void jButtonAddNurseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNurseActionPerformed
        if(participateor==null)
            participateor = new Vector();
        theHD.showDialogParticipateOr(jTableNurse,participateor);
    }//GEN-LAST:event_jButtonAddNurseActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int row = this.jTableDiagIcd9.getSelectedRow();
        theHC.theDiagnosisControl.deleteDiagnosisIcd9(vDiagIcd9,row,participateor);
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTableDiagIcd9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDiagIcd9MouseReleased
        int row = jTableDiagIcd9.getSelectedRow();
        theDiagIcd9 = (DiagIcd9)vDiagIcd9.get(row);
        String des = (String)this.jTableDiagIcd9.getValueAt(row,1);
        setDiagIcd9(theDiagIcd9,des);
    }//GEN-LAST:event_jTableDiagIcd9MouseReleased

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        DiagIcd9 theDiagIcd9  = getDiagIcd9();
        theHC.theDiagnosisControl.saveDiagnosisIcd9(participateor,theDiagIcd9,vDiagIcd9); 
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTableIcd9SearchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableIcd9SearchMouseReleased
        int row = jTableIcd9Search.getSelectedRow();
        if(row==-1) return;
        theICD9 = (ICD9)theIcd9V.get(row);
        setIcd9(theICD9);
    }//GEN-LAST:event_jTableIcd9SearchMouseReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        String search = jTextFieldKeyword.getText(); 
        if(search.trim().equals("")) 
        {
            theUS.setStatus("กรุณาระบุคำค้น",UpdateStatus.WARNING);
            setIcd9V(null);
            return;
        }
        Vector theIcd9V = theHC.theDiagnosisControl.listICD9ByIdName(Gutil.CheckReservedWords(search));
        if(theIcd9V == null)
        {
            theUS.setStatus("ไม่พบข้อมูลที่ค้นหา กรุณาค้นหาใหม่อีกครั้ง",UpdateStatus.WARNING);
        }
        setIcd9V(theIcd9V);
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDoctorActionPerformed
        if(evt.getActionCommand().equals("comboBoxEdited"))
        {
            String keyword = String.valueOf(jComboBoxDoctor.getSelectedItem());
            Vector v = this.theHC.theLookupControl.listDoctor(keyword);
//            if(v!=null && !v.isEmpty() && v.size()>1)
//            {
//                Employee undefine = new Employee();
//                undefine.setObjectId("");
//                undefine.fname = Constant.getTextBundle("ไม่ระบุ");
//                if(keyword.trim().equals(""))
//                    v.add(0,undefine);
//            }
            if(v==null){
                v = new Vector();
            }
            jComboBoxDoctor.setEnabled(true);
            ComboboxModel.initComboBox(jComboBoxDoctor,v);
        }
    }//GEN-LAST:event_jComboBoxDoctorActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxIn;
    private com.hospital_os.utility.DateComboBox dateComboBoxOut;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonAddNurse;
    private javax.swing.JButton jButtonClearData;
    private javax.swing.JButton jButtonDelNurse;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveDischarge;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JToggleButton jCheckBoxUnlock;
    private javax.swing.JComboBox jComboBoxClinic;
    private javax.swing.JComboBox jComboBoxDoctor;
    private javax.swing.JComboBox jComboBoxDxtype;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelDateIn;
    private javax.swing.JLabel jLabelDateOut;
    private javax.swing.JLabel jLabelKeyword;
    private javax.swing.JLabel jLabelTimeIn;
    private javax.swing.JLabel jLabelTimeOut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelIcd9Property;
    private javax.swing.JPanel jPanelSearchIcd9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPaneIcd9;
    private javax.swing.JScrollPane jScrollPaneIcd9List;
    private javax.swing.JSplitPane jSplitPane1;
    private com.hosv3.gui.component.HJTableSort jTableDiagIcd9;
    private com.hosv3.gui.component.HJTableSort jTableIcd9Search;
    private com.hosv3.gui.component.HJTableSort jTableNurse;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDxNote;
    private javax.swing.JTextField jTextFieldKeyword;
    private com.hospital_os.utility.TimeTextField timeTextFieldIn;
    private com.hospital_os.utility.TimeTextField timeTextFieldOut;
    // End of variables declaration//GEN-END:variables
    
    public void gc()
    {
        jButtonDelete = null;
        jButtonSave = null;
        jButtonSearch = null;
        jScrollPaneIcd9 = null;
        jPanelIcd9Property = null;
        jScrollPaneIcd9List = null;
        jTextFieldKeyword = null;
        jTableIcd9Search = null;
        jPanelSearchIcd9 = null;
        jTableDiagIcd9 = null;
        jLabelKeyword = null;
        jComboBoxDxtype = null;
        jComboBoxDoctor = null;
        jComboBoxClinic = null;
        //jComboBox4 = null;
    }
  
    private DiagIcd9 getDiagIcd9()
    {
        if(theDiagIcd9==null)
            theDiagIcd9 = new DiagIcd9();
        DiagIcd9 dx = this.theDiagIcd9;
        dx.icd9_code = Gutil.getGuiData(jTextFieldCode);
        dx.clinic_kid = Gutil.getGuiData(jComboBoxClinic);
        if(!dateComboBoxIn.getText().equals("") && timeTextFieldIn.getText().equals(""))
        {
            dx.time_in = dateComboBoxIn.getText();
        }
        if(!dateComboBoxIn.getText().equals("") && !timeTextFieldIn.getText().equals(""))
        {
            dx.time_in = dateComboBoxIn.getText()+","+ timeTextFieldIn.getText()+":00";
        }
        if(!dateComboBoxOut.getText().equals("") && timeTextFieldOut.getText().equals(""))
        {
            dx.time_out = dateComboBoxOut.getText();
        }
        if(!dateComboBoxOut.getText().equals("") && !timeTextFieldOut.getText().equals(""))
        {
            dx.time_out = dateComboBoxOut.getText()+","+timeTextFieldOut.getText()+":00";
        }
        dx.type = Gutil.getGuiData(jComboBoxDxtype);
        dx.doctor_kid= Gutil.getGuiData(jComboBoxDoctor);
        dx.dischange_note = Gutil.CheckReservedWords(Gutil.getGuiData(jTextFieldDxNote));
        return theDiagIcd9;
    }
 
      private void setDiagIcd9V(Vector diagicd)
      {
          setDiagIcd9V(diagicd,null);
      }
      private void setDiagIcd9V(Vector diagicd,ICD9 theICD9)
      {
            vDiagIcd9 = diagicd;
            if(diagicd == null || diagicd.size()==0){
                TaBleModel tm= new TaBleModel(column_DiagIcd9,0);
                jTableDiagIcd9.setModel(tm); 
                setDiagIcd9(null,null);
                return;
            }
            TaBleModel tm = new TaBleModel(column_DiagIcd9,diagicd.size());
            for(int i=0,size=diagicd.size();i<size;i++)
            {
                DiagIcd9 di9 = (DiagIcd9)diagicd.get(i);
                String cid = di9.icd9_code;
                //String dic = di9.doctor_kid;
                String dy = Gutil.getVectorName(vOpType,di9.type);
                theICD9 = theHC.theDiagnosisControl.listIcd9ByPk(cid);
                //Icd9 not found
                String des="";
                if(theICD9!=null){
                    des =  theICD9.description;
                }
                tm.setValueAt(di9.icd9_code, i, 0);
                tm.setValueAt(des,i, 1);
                tm.setValueAt(dy, i, 2);
            }
            int row = jTableDiagIcd9.getSelectedRow();
            jTableDiagIcd9.setModel(tm);
            jTableDiagIcd9.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTableDiagIcd9.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTableDiagIcd9.getColumnModel().getColumn(2).setPreferredWidth(200);
            ////////////////////////////////////////////////
            if(row!=-1){
                if(row >= vDiagIcd9.size()) row = 0;
                DiagIcd9 di9 = (DiagIcd9)vDiagIcd9.get(row);
                String des = (String)jTableDiagIcd9.getValueAt(row,1);
                this.setDiagIcd9(di9,des);
                jTableDiagIcd9.setRowSelectionInterval(row,row);
            }
            ////////////////////////////////////////////////
      }
      
    private void setDiagIcd9(DiagIcd9 diagicd9_now,String des)
    {
        this.jTableIcd9Search.clearSelection();
        jTableNurse.clearSelection();
        theDiagIcd9 = diagicd9_now;
        if(theDiagIcd9==null)
        {
            jTextFieldCode.setText("");
            jTextAreaDescription.setText("");
            timeTextFieldIn.setText("");
            dateComboBoxIn.setText("");
            timeTextFieldOut.setText("");
            dateComboBoxOut.setText("");
            jTextFieldDxNote.setText("");
            this.setParticipateOrV(null);
            return;
        }
        jTextFieldCode.setText(theDiagIcd9.icd9_code);
        if(des!=null) jTextAreaDescription.setText(des);
        if(theDiagIcd9.time_in.length()==10)
        {
            timeTextFieldIn.setText("");
            dateComboBoxIn.setText(DateUtil.convertFieldDate(theDiagIcd9.time_in.substring(0,10)));
        }
        if(theDiagIcd9.time_in.length()>=16)
        {
            timeTextFieldIn.setText(theDiagIcd9.time_in.substring(11,16));
            dateComboBoxIn.setText(DateUtil.convertFieldDate(theDiagIcd9.time_in.substring(0,10)));
        }
        if(theDiagIcd9.time_out.length()==10)
        {
            timeTextFieldOut.setText("");  
            dateComboBoxOut.setText(DateUtil.convertFieldDate(theDiagIcd9.time_out.substring(0,10)));
        }
        if(theDiagIcd9.time_out.length()>=16)
        {
            timeTextFieldOut.setText(theDiagIcd9.time_out.substring(11,16));  
            dateComboBoxOut.setText(DateUtil.convertFieldDate(theDiagIcd9.time_out.substring(0,10)));
        }
        jTextFieldDxNote.setText(theDiagIcd9.dischange_note);
        Gutil.setGuiData(jComboBoxClinic, theDiagIcd9.clinic_kid);
        Gutil.setGuiData(jComboBoxDxtype, theDiagIcd9.type);
        Gutil.setGuiData(jComboBoxDoctor, theDiagIcd9.doctor_kid);
        participateor = theHC.theDiagnosisControl.listParticipateOrByDiagIcd9(
            theDiagIcd9.getObjectId());
        setParticipateOrV(participateor);
    }

    
    // ยังติดปัญหาข้อมูลในการแสดงผลมีอยู่ 2 Object
    private void setIcd9V(Vector theicd9)
    {
       theIcd9V = theicd9;
       if(theIcd9V==null)
       {
           theIcd9V = new Vector();
           TaBleModel tm = new TaBleModel(column_jTableIcd9Search,0);
           jTableIcd9Search.setModel(tm);
           setDiagIcd9(null,"");
           return;
       }
       TaBleModel tm = new TaBleModel(column_jTableIcd9Search,theIcd9V.size());
       for(int i=0,size=theIcd9V.size();i<size;i++)
       {
           ICD9 icd = (ICD9)theIcd9V.get(i);
           tm.setValueAt(icd.icd9_id,i, 0);
           tm.setValueAt(icd.description,i, 1);
       }
       jTableIcd9Search.setModel(tm);
       jTableIcd9Search.getColumnModel().getColumn(0).setPreferredWidth(80);
       jTableIcd9Search.getColumnModel().getColumn(1).setPreferredWidth(320);
        ////////////////////////////////////////////////
        if(theIcd9V.size()>0){
            ICD9 di9 = (ICD9)theIcd9V.get(0);
            this.setIcd9(di9);
            jTableIcd9Search.setRowSelectionInterval(0,0);
        }
    } 
      
    private void setIcd9(ICD9 icd9_now)
    {
        jTableDiagIcd9.clearSelection();
        theICD9= icd9_now;
        if(theICD9==null){
//            Constant.println("private void setIcd9(ICD9 icd9_now) is null");
            jTextFieldCode.setText("");
            jTextAreaDescription.setText("");
            jTextFieldDxNote.setText("");
            ComboboxModel.setCodeComboBox(jComboBoxDxtype,"1");
//            jComboBoxDoctor.setSelectedIndex(0);
            //jComboBoxClinic.setSelectedIndex(0);
            dateComboBoxIn.setText("");
            dateComboBoxOut.setText("");
            setParticipateOrV(null);
            return;
        }
        jTextFieldCode.setText(icd9_now.icd9_id);
        jTextAreaDescription.setText(icd9_now.description);
        dateComboBoxIn.setText(DateUtil.convertFieldDate(theHO.date_time));
        dateComboBoxOut.setText(DateUtil.convertFieldDate(theHO.date_time));
        jTextFieldDxNote.setText("");
        this.timeTextFieldIn.setText(theHO.date_time.substring(11));
        this.timeTextFieldOut.setText(theHO.date_time.substring(11));
        if(vDiagIcd9!=null && vDiagIcd9.size()>0)
            ComboboxModel.setCodeComboBox(jComboBoxDxtype,"2");
        else
            ComboboxModel.setCodeComboBox(jComboBoxDxtype,"1");
        theDiagIcd9 = new DiagIcd9();
        setParticipateOrV(null);
    }
   
    public void setLanguage(String msg)
    {        
        GuiLang.setLanguage(jCheckBoxUnlock);
        GuiLang.setLanguage(jButtonSaveDischarge);
        jLabelKeyword.setText(Constant.getTextBundle(jLabelKeyword.getText()));
        jButtonSearch.setText(Constant.getTextBundle(jButtonSearch.getText()));
        jButtonSave.setText(Constant.getTextBundle(jButtonSave.getText()));
        jButtonDelete.setText(Constant.getTextBundle(jButtonDelete.getText()));
        jLabel4.setText(Constant.getTextBundle(jLabel4.getText()));
        jLabel6.setText(Constant.getTextBundle(jLabel6.getText()));
        //jLabel1.setText(Constant.getTextBundle(jLabel1.getText()));
        jLabel3.setText(Constant.getTextBundle(jLabel3.getText()));
        jLabel7.setText(Constant.getTextBundle(jLabel7.getText()));
        jLabel2.setText(Constant.getTextBundle(jLabel2.getText()));
        jLabel5.setText(Constant.getTextBundle(jLabel5.getText()));
        jLabelDateIn.setText(Constant.getTextBundle(jLabelDateIn.getText()));
        jLabelDateOut.setText(Constant.getTextBundle(jLabelDateOut.getText()));
        jLabelTimeIn.setText(Constant.getTextBundle(jLabelTimeIn.getText()));
        jLabelTimeOut.setText(Constant.getTextBundle(jLabelTimeOut.getText()));
        jLabel7.setText(Constant.getTextBundle(jLabel7.getText()));
        //deus: more localization
        GuiLang.setTextBundle(jPanelSearchIcd9);
        GuiLang.setTextBundle(jPanelIcd9Property);
        GuiLang.setLanguage(this.col_Participate);
        GuiLang.setLanguage(this.column_DiagIcd9);
        GuiLang.setLanguage(this.column_jTableIcd9Search);
    }

    public void setEnabled(boolean author)
    {
        this.timeTextFieldIn.setEnabled(author);
        this.timeTextFieldOut.setEnabled(author);
        this.dateComboBoxIn.setEnabled(author);
        this.dateComboBoxOut.setEnabled(author);
        this.jButtonAddNurse.setEnabled(author);
        this.jButtonDelNurse.setEnabled(author);
        jButtonDelete.setEnabled(author);
        jButtonSave.setEnabled(author);
        this.jButtonSaveDischarge.setEnabled(author);
        this.jCheckBoxUnlock.setEnabled(author);
        jButtonSearch.setEnabled(author);
        jComboBoxDxtype.setEnabled(author);
        jComboBoxDoctor.setEnabled(author);
        jComboBoxClinic.setEnabled(author);
        jScrollPane11.setEnabled(author);
        jScrollPaneIcd9.setEnabled(author);
        jScrollPaneIcd9List.setEnabled(author);
        //jTableIcd9Search.setEnabled(author);
        //jTableDiagIcd9.setEnabled(author);
        jTextAreaDescription.setEnabled(author);
        jTextFieldCode.setEnabled(author);
        jTextFieldDxNote.setEnabled(author);
        jTextFieldKeyword.setEnabled(author);  
        jButtonClearData.setEnabled(author);
    }
      
     private void setVisit(Visit v)
     {
        theVisit = v;
        if(theVisit==null){
            setIcd9(null);
            setEnabled(false);
            return ;
        }
        ///////////////////////////////////////////////////////
        int i=0;
        
        for(i=theHO.vTransfer.size()-1;i>=0;i--){
            Transfer theTransfer = (Transfer)theHO.vTransfer.get(i);
            if(theTransfer.doctor_code!=null && !theTransfer.doctor_code.equals("")){
                ComboboxModel.setCodeComboBox(jComboBoxDoctor,theTransfer.doctor_code);
                break; 
            }
        }
        //////////////////////////////////////////////////////////
        Vector theIcd9V = theHC.theDiagnosisControl.listOrderIcd9(theHO.theVisit.getObjectId());
        setIcd9V(theIcd9V);
        ///////////////////////////////////////////////////////
        if(!auth.equals(Authentication.STAT) && theVisit.is_discharge_doctor.equals("1")){
            setEnabled(false);
            return;
        }
        if(theVisit.isLockingByOther(theHO.theEmployee.getObjectId())
        || theVisit.isDropVisit()) {
            setEnabled(false);
            return;
        }    
        setEnabled(true); 
     }
     
    private void setParticipateOrV(Vector participateor)
    {
        this.participateor = participateor;
        if(participateor == null || participateor.size()==0)
        {
            TaBleModel tm= new TaBleModel(col_Participate,0);
            jTableNurse.setModel(tm); 
            return;
        }     
        TaBleModel tm = new TaBleModel(col_Participate,participateor.size());
        for(int i=0,size=participateor.size();i<size;i++)
        {
            ParticipateOr po = (ParticipateOr)participateor.get(i);
            Employee parOr = theHC.theLookupControl.readEmployeeById(po.employee);
            if(parOr!=null){
                tm.setValueAt(parOr.fname, i, 0);
                tm.setValueAt(parOr.lname,i, 1);
            }else{
                tm.setValueAt("", i, 0);
                tm.setValueAt("",i, 1);
            }
        }   
        jTableNurse.setModel(tm);
        jTableNurse.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTableNurse.getColumnModel().getColumn(1).setPreferredWidth(200);
    }
    
    public void notifyManageDiagIcd10(String str, int status) {
    }
    
    public void notifyManageDiagIcd9(String str, int status) {
        setDiagIcd9V(theHO.vDiagIcd9);
//       int index = this.jTableDiagIcd9.getSelectedRow();
//       //แสดงว่าไม่ได้เลือกจากรายการเก่าก็จะต้องไปเพิ่มในรายการสุดท้าย
//       if(theHO.vDiagIcd9.size()==0) return;
//       if(index==-1 || index>=theHO.vDiagIcd9.size())
//           index = jTableDiagIcd9.getRowCount()-1;
//       jTableDiagIcd9.setRowSelectionInterval(index,index);
//       jTableDiagIcd9MouseReleased(null);    
    }
    
    public void notifyAdmitVisit(String str, int status) {
    }
    
    public void notifyReadVisit(String str, int status) {
        setVisit(theHO.theVisit);
        setDiagIcd9V(theHO.vDiagIcd9); 
    }
    
    public void notifyObservVisit(String str, int status) {
        //reset();
    }
    
    public void notifyUnlockVisit(String str, int status) {
        setIcd9V(null);
        setVisit(theHO.theVisit);
        setDiagIcd9V(theHO.vDiagIcd9); 
    }
    
    public void notifyVisitPatient(String str, int status) {
        setVisit(theHO.theVisit);
    }
    
    public void notifyManageAppointment(String str, int status) {
    }
    
    public void notifyManageDrugAllergy(String str, int status) {
    }
    
    public void notifySavePatientPayment(String str, int status) {
    }
    
    public void notifyCheckDoctorTreament(String msg, int state) {
    }
    
    public void notifyDischargeDoctor(String str, int status) {
        setVisit(theHO.theVisit);
    }
    
    public void notifyAddItemDrugAllergy(String str, int status) {
    }
   
    public void notifyDropVisit(String str, int status) {
    }
    
    public void notifySendVisit(String str, int status) {
        setVisit(theHO.theVisit);
        setDiagIcd9V(theHO.vDiagIcd9); 
    }
    
    public void notifyDischargeFinancial(String str, int status) {
    }
    
    public void notifyReverseFinancial(String str, int status) {
    }
    
    public void notifyReverseDoctor(String str, int status) {
        setVisit(theHO.theVisit);
    }
    
    public void notifyDeleteVisitPayment(String str, int status) {
    }
    
    public void notifyDeletePatientPayment(String str, int status) {
    }
    
    public void notifyDeleteParticipateOr(String str, int status) {
        Constant.println("notifyDeleteParticipateOr");
        setParticipateOrV(participateor);
    }

    public void notifyAddDxTemplate(String str, int status) {
    }
    
    public void notifyReadPatient(String str, int status) {
        setVisit(null);        
        setDiagIcd9V(null);
        setDiagIcd9(null,null);
    }
    public void notifyReadFamily(String str, int status) {
        setVisit(theHO.theVisit);
        setDiagIcd9V(theHO.vDiagIcd9); 
        setDiagIcd9(null,null);
    }
    
    public void notifySavePatient(String str, int status) {
    }
    
    public void notifyDeletePatient(String str, int status) {
    }
    
    public void notifyRemainDoctorDischarge(String str, int status) {
    }
    
    public void notifySendVisitBackWard(String str, int status) {
        setVisit(null);
        setDiagIcd9V(null);
    }
    
    public void notifySaveAppointment(String str, int status) {
    }
    
    public void notifyReverseAdmit(String str, int status) {
    }
    
    public void notifyResetPatient(String str, int status) {
        setVisit(null);
        setDiagIcd9V(null);
    }

    public void notifySaveBorrowFilmXray(String str, int status) {
    }

    public void notifyCancelOrderItem(String str, int status) {
    }

    public void notifyCheckAutoOrder(String str, int status) {
    }

    public void notifyContinueOrderItem(String str, int status) {
    }

    public void notifyDispenseOrderItem(String str, int status) {
    }

    public void notifyDoctorOffDrug(String DoctorId, int status) {
    }

    public void notifyExecuteOrderItem(String str, int status) {
    }

    public void notifyReceiveReturnDrug(String str, int status) {
    }

    public void notifyReferOutLab(String msg, int status) {
    }

    /**
     * henbe comment 100253 ton ทำไมไม่ใช้ตอน verify ให้เหมือนกันแล้ว theHO.vDiagIcd9 ก็มีอยู่ทำไมไม่ใช้
     * @param str
     * @param status
     */
    public void notifySaveOrderItem(String str, int status) {
    }

    public void notifySaveOrderItemInLab(String str, int status) {
    }

    public void notifySaveOrderRequest(String str, int status) {
    }

    public void notifySaveReturnDrug(String str, int status) {
    }

    public void notifyVerifyOrderItem(String str, int status) {
        setDiagIcd9V(theHO.vDiagIcd9);
    }
    
  }
       
     
