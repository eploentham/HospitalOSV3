/*
 * PanelSetupAutoOrderItem.java
 *
 * Created on 11 ตุลาคม, 13:37 น.
 */
package com.hosv3.gui.panel.setup;
import com.hosv3.utility.Constant;
import java.awt.*;
import java.util.Vector;
import java.awt.event.*;
import javax.swing.*;

import com.hosv3.usecase.setup.*;
import com.hosv3.control.*;
import com.hosv3.subject.*;
import com.hosv3.gui.dialog.*;
import com.hosv3.utility.connection.*;
import com.hosv3.utility.GuiLang;
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hospital_os.object.*;/**
 *
 * @panel author : amp
 */
public class PanelSetupAutoOrderItem extends javax.swing.JPanel implements 
ManageOptionReq
, ManageItemReq //หาเจอ 2 ตัวlistItemByGroupResp ManageItemReq กับ ManageContractReq
{
    UpdateStatus theUS;
    HosControl theHC;
    SetupControl theSetupControl;
    SetupSubject theSetupSubject;
    Item theItem;
    AutoOrderItem theAutoOrderItem;
    LookupControl theLookupControl;
    PanelSetupSearchSub  psep;
    Vector vAutoOrder;
    int row=0;
    int offset = 25;
    int next = 0;
    int prev = 0;
    /** pu : 26/08/2549 : เก็บ Index ของ Item ตัวล่างสุดของหน้าปัจจุบัน*/
    int curNext = 0;
    /** pu : 26/08/2549 : เก็บ Index ของ Item ตัวล่างสุดของหน้าก่อนหน้าปัจจุบัน*/
    int curPrev = 0;
    String[] col = {"รหัส","ชื่อรายการ"};
    public PanelSetupAutoOrderItem(HosControl hc,UpdateStatus us)
    {
        initComponents();
        setLanguage();
        setControl(hc,us);
    }
    public PanelSetupAutoOrderItem()
    {
        initComponents();
        setLanguage();
    }
    /**
     *@Author : amp
     *@date : 29/02/2549
     *@see : จัดการเกี่ยวกับภาษา
     */
    private void setLanguage()
    {
        GuiLang.setLanguage(jLabel3);
        GuiLang.setLanguage(jLabelICD9code);
        GuiLang.setLanguage(jButtonSearch);
        GuiLang.setLanguage(jLabel6);
        GuiLang.setLanguage(jLabel2);
        GuiLang.setLanguage(jLabel5);
        GuiLang.setLanguage(jLabel4);
        GuiLang.setLanguage(jLabel1);
        GuiLang.setLanguage(jCheckBoxMonToFri);
        GuiLang.setLanguage(jCheckBoxSat);
        GuiLang.setLanguage(jCheckBoxSun);
        GuiLang.setLanguage(jCheckBoxMonTime);
        GuiLang.setLanguage(jCheckBoxSatTime);
        GuiLang.setLanguage(jCheckBoxSunTime);
        GuiLang.setLanguage(jCheckBoxAllPlan);
        GuiLang.setLanguage(jButtonSave);
        GuiLang.setLanguage(col);
        GuiLang.setLanguage(jCheckBoxSun);
    }
    public void setControl(HosControl hc,UpdateStatus us)
    {
        jTable1.setGuiMode(true);
        theUS = us;
        theHC = hc;
        theSetupControl = hc.theSetupControl;
        theSetupSubject = hc.theHS.theSetupSubject;
        theLookupControl = hc.theLookupControl;
        hc.theHS.theSetupSubject.addpanelrefrash(this);
        hc.theHS.theSetupSubject.addAllItem(this);
        hc.theHS.theSetupSubject.addForLiftAttach(this);
        setEnableAll(false);
        setupLookup();
        jTextAreaCommonName.setEnabled(false);
        jTextAreaTradeName.setEnabled(false);
        jTextFieldNickName.setEnabled(false);
        jTextFieldCode.setEnabled(false);
    }
    public void setupLookup()
    {
        ComboboxModel.initComboBox(jComboBoxPlan, theLookupControl.listPlan());
    }
    /////////////////////Use this for decrease memory usage
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        tableResultsModel1 = new com.hospital_os.utility.TableResultsModel();
        fontFormatTitle1 = new com.hospital_os.gui.font.FontFormatTitle();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabelICD9code = new javax.swing.JLabel();
        jTextFieldSCode = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.hosv3.gui.component.HJTableSort();
        jPanel4 = new javax.swing.JPanel();
        jButtonPrev = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextAreaCommonName = new javax.swing.JTextArea();
        jTextFieldCode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaTradeName = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldAutoCode = new javax.swing.JTextField();
        jTextFieldNickName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jCheckBoxMonToFri = new javax.swing.JCheckBox();
        jCheckBoxMonTime = new javax.swing.JCheckBox();
        timeTextFieldMonFrom = new com.hospital_os.utility.TimeTextField();
        timeTextFieldMonTo = new com.hospital_os.utility.TimeTextField();
        jCheckBoxSat = new javax.swing.JCheckBox();
        jCheckBoxSatTime = new javax.swing.JCheckBox();
        timeTextFieldSatFrom = new com.hospital_os.utility.TimeTextField();
        timeTextFieldSatTo = new com.hospital_os.utility.TimeTextField();
        jCheckBoxSun = new javax.swing.JCheckBox();
        jCheckBoxSunTime = new javax.swing.JCheckBox();
        timeTextFieldSunFrom = new com.hospital_os.utility.TimeTextField();
        timeTextFieldSunTo = new com.hospital_os.utility.TimeTextField();
        jPanel7 = new javax.swing.JPanel();
        jCheckBoxAllPlan = new javax.swing.JCheckBox();
        jComboBoxPlan = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        setMaximumSize(new java.awt.Dimension(412, 101));
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(600, 400));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(fontFormatTitle1);
        jLabel3.setText(java.util.ResourceBundle.getBundle("com/hosv3/property/thai").getString("LIST_AUTOORDER"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        jPanel5.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel5, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(300, 25));
        jPanel3.setPreferredSize(new java.awt.Dimension(300, 404));
        jLabelICD9code.setFont(defaultFont1);
        jLabelICD9code.setText(java.util.ResourceBundle.getBundle("com/hosv3/property/thai").getString("SEARCH"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 11);
        jPanel3.add(jLabelICD9code, gridBagConstraints);

        jTextFieldSCode.setFont(defaultFont1);
        jTextFieldSCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSCodeActionPerformed(evt);
            }
        });
        jTextFieldSCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSCodeKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel3.add(jTextFieldSCode, gridBagConstraints);

        jButtonSearch.setFont(defaultFont1);
        jButtonSearch.setText(java.util.ResourceBundle.getBundle("com/hosv3/property/thai").getString("SEARCH"));
        jButtonSearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSearch.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel3.add(jButtonSearch, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 22));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 80));
        jTable1.setModel(tableResultsModel1);
        jTable1.setFont(defaultFont1);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 5, 5);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButtonPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Back16.gif")));
        jButtonPrev.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonPrev.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonPrev.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrevActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel4.add(jButtonPrev, gridBagConstraints);

        jButtonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Forward16.gif")));
        jButtonNext.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonNext.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonNext.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel4.add(jButtonNext, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setFont(defaultFont1);
        jLabel2.setText(java.util.ResourceBundle.getBundle("com/hosv3/property/thai").getString("ITEM_COMMON_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 5);
        jPanel2.add(jLabel2, gridBagConstraints);

        jScrollPane21.setMaximumSize(new java.awt.Dimension(150, 45));
        jScrollPane21.setMinimumSize(new java.awt.Dimension(150, 45));
        jScrollPane21.setPreferredSize(new java.awt.Dimension(150, 45));
        jTextAreaCommonName.setFont(defaultFont1);
        jTextAreaCommonName.setLineWrap(true);
        jTextAreaCommonName.setMaximumSize(new java.awt.Dimension(150, 45));
        jTextAreaCommonName.setMinimumSize(new java.awt.Dimension(150, 40));
        jTextAreaCommonName.setPreferredSize(new java.awt.Dimension(150, 40));
        jScrollPane21.setViewportView(jTextAreaCommonName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        jPanel2.add(jScrollPane21, gridBagConstraints);

        jTextFieldCode.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        jPanel2.add(jTextFieldCode, gridBagConstraints);

        jLabel4.setFont(defaultFont1);
        jLabel4.setText(java.util.ResourceBundle.getBundle("com/hosv3/property/thai").getString("ITEM_NICK_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 5);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(defaultFont1);
        jLabel5.setText(java.util.ResourceBundle.getBundle("com/hosv3/property/thai").getString("ITEM_TRADE_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 5);
        jPanel2.add(jLabel5, gridBagConstraints);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(150, 45));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(150, 45));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(150, 45));
        jTextAreaTradeName.setFont(defaultFont1);
        jTextAreaTradeName.setMaximumSize(new java.awt.Dimension(150, 40));
        jTextAreaTradeName.setMinimumSize(new java.awt.Dimension(150, 40));
        jTextAreaTradeName.setPreferredSize(new java.awt.Dimension(150, 40));
        jScrollPane2.setViewportView(jTextAreaTradeName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jLabel6.setFont(defaultFont1);
        jLabel6.setText("\u0e23\u0e2b\u0e31\u0e2a");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        jPanel2.add(jLabel6, gridBagConstraints);

        jTextFieldAutoCode.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 10);
        jPanel2.add(jTextFieldAutoCode, gridBagConstraints);

        jTextFieldNickName.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        jPanel2.add(jTextFieldNickName, gridBagConstraints);

        jLabel1.setFont(defaultFont1);
        jLabel1.setText("Item code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(300, 36));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 36));
        jButtonAdd.setFont(defaultFont1);
        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 2);
        jPanel1.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setFont(defaultFont1);
        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDel.setEnabled(false);
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 2);
        jPanel1.add(jButtonDel, gridBagConstraints);

        jButtonSave.setFont(defaultFont1);
        jButtonSave.setText("\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\n");
        jButtonSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSave.setMaximumSize(new java.awt.Dimension(60, 24));
        jButtonSave.setMinimumSize(new java.awt.Dimension(60, 24));
        jButtonSave.setPreferredSize(new java.awt.Dimension(60, 24));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 4);
        jPanel1.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jPanel1, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBoxMonToFri.setFont(defaultFont1);
        jCheckBoxMonToFri.setText("\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c-\u0e28\u0e38\u0e01\u0e23\u0e4c");
        jCheckBoxMonToFri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMonToFriActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel6.add(jCheckBoxMonToFri, gridBagConstraints);

        jCheckBoxMonTime.setFont(defaultFont1);
        jCheckBoxMonTime.setText("\u0e23\u0e30\u0e1a\u0e38\u0e40\u0e27\u0e25\u0e32");
        jCheckBoxMonTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMonTimeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jCheckBoxMonTime, gridBagConstraints);

        timeTextFieldMonFrom.setText("00:00");
        timeTextFieldMonFrom.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel6.add(timeTextFieldMonFrom, gridBagConstraints);

        timeTextFieldMonTo.setText("00:00");
        timeTextFieldMonTo.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel6.add(timeTextFieldMonTo, gridBagConstraints);

        jCheckBoxSat.setFont(defaultFont1);
        jCheckBoxSat.setText("\u0e40\u0e2a\u0e32\u0e23\u0e4c");
        jCheckBoxSat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSatActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel6.add(jCheckBoxSat, gridBagConstraints);

        jCheckBoxSatTime.setFont(defaultFont1);
        jCheckBoxSatTime.setText("\u0e23\u0e30\u0e1a\u0e38\u0e40\u0e27\u0e25\u0e32");
        jCheckBoxSatTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSatTimeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jCheckBoxSatTime, gridBagConstraints);

        timeTextFieldSatFrom.setText("00:00");
        timeTextFieldSatFrom.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel6.add(timeTextFieldSatFrom, gridBagConstraints);

        timeTextFieldSatTo.setText("00:00");
        timeTextFieldSatTo.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel6.add(timeTextFieldSatTo, gridBagConstraints);

        jCheckBoxSun.setFont(defaultFont1);
        jCheckBoxSun.setText("\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c");
        jCheckBoxSun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSunActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        jPanel6.add(jCheckBoxSun, gridBagConstraints);

        jCheckBoxSunTime.setFont(defaultFont1);
        jCheckBoxSunTime.setText("\u0e23\u0e30\u0e1a\u0e38\u0e40\u0e27\u0e25\u0e32");
        jCheckBoxSunTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSunTimeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel6.add(jCheckBoxSunTime, gridBagConstraints);

        timeTextFieldSunFrom.setText("00:00");
        timeTextFieldSunFrom.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel6.add(timeTextFieldSunFrom, gridBagConstraints);

        timeTextFieldSunTo.setText("00:00");
        timeTextFieldSunTo.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel6.add(timeTextFieldSunTo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jPanel6, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jCheckBoxAllPlan.setFont(defaultFont1);
        jCheckBoxAllPlan.setText("\u0e17\u0e38\u0e01\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e01\u0e32\u0e23\u0e23\u0e31\u0e01\u0e29\u0e32");
        jCheckBoxAllPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllPlanActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 3, 10);
        jPanel7.add(jCheckBoxAllPlan, gridBagConstraints);

        jComboBoxPlan.setFont(defaultFont1);
        jComboBoxPlan.setMinimumSize(new java.awt.Dimension(26, 24));
        jComboBoxPlan.setPreferredSize(new java.awt.Dimension(26, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        jPanel7.add(jComboBoxPlan, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jPanel7, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSCodeKeyReleased
        if(evt.getKeyCode() == evt.VK_ENTER)
        {        //pu : 26/08/2549 : กำหนดค่าให้กับ Index สำหรับระบุถึงหน้าปัจจุบันของรายการ
            this.curNext = 0;
            this.curPrev = 0;
            searchAutoOrderItem();            
        }
    }//GEN-LAST:event_jTextFieldSCodeKeyReleased
    private void jCheckBoxAllPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllPlanActionPerformed
        if(jCheckBoxAllPlan.isSelected())
        {
            jComboBoxPlan.setEnabled(false);
        }
        else
        {
            jComboBoxPlan.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxAllPlanActionPerformed
    private void jCheckBoxSunTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSunTimeActionPerformed
        if(jCheckBoxSunTime.isSelected())
        {
            timeTextFieldSunFrom.setEnabled(true);
            timeTextFieldSunTo.setEnabled(true);
        }
        else
        {
            timeTextFieldSunFrom.setEnabled(false);
            timeTextFieldSunTo.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxSunTimeActionPerformed
    private void jCheckBoxSatTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSatTimeActionPerformed
        if(jCheckBoxSatTime.isSelected())
        {
            timeTextFieldSatFrom.setEnabled(true);
            timeTextFieldSatTo.setEnabled(true);
        }
        else
        {
            timeTextFieldSatFrom.setEnabled(false);
            timeTextFieldSatTo.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxSatTimeActionPerformed
    private void jCheckBoxSunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSunActionPerformed
        checkSun();
    }//GEN-LAST:event_jCheckBoxSunActionPerformed
    private void jCheckBoxSatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSatActionPerformed
        checkSat();
    }//GEN-LAST:event_jCheckBoxSatActionPerformed
    private void jCheckBoxMonToFriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMonToFriActionPerformed
        checkMon();
    }//GEN-LAST:event_jCheckBoxMonToFriActionPerformed
    private void jCheckBoxMonTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMonTimeActionPerformed
        if(jCheckBoxMonTime.isSelected())
        {
            timeTextFieldMonFrom.setEnabled(true);
            timeTextFieldMonTo.setEnabled(true);
        }
        else
        {
            timeTextFieldMonFrom.setEnabled(false);
            timeTextFieldMonTo.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxMonTimeActionPerformed
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        deletAutoOrderItem();
    }//GEN-LAST:event_jButtonDelActionPerformed
    private void jTextFieldSCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSCodeActionPerformed
    }//GEN-LAST:event_jTextFieldSCodeActionPerformed
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
           saveAutoOrderItem();
        //int a = Integer.parseInt(jTextFieldContract.getText());
        //setEnableAll(false);
    }//GEN-LAST:event_jButtonSaveActionPerformed
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        setClearAll();
        setEnableAll(true);
        jComboBoxPlan.setEnabled(true);
        theAutoOrderItem = new AutoOrderItem();
        showItem();
    }//GEN-LAST:event_jButtonAddActionPerformed
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        nextAutoOrder();
    }//GEN-LAST:event_jButtonNextActionPerformed
    private void jButtonPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrevActionPerformed
        prevAutoOrder();
    }//GEN-LAST:event_jButtonPrevActionPerformed
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        //pu : 26/08/2549 : กำหนดค่าให้กับ Index สำหรับระบุถึงหน้าปัจจุบันของรายการ
        this.curNext = 0;
        this.curPrev = 0;
        searchAutoOrderItem();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        selectAutoOrderItem();
    }//GEN-LAST:event_jTable1MouseReleased
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
	selectAutoOrderItem();
	}//GEN-LAST:event_jTable1KeyReleased
    private void prevAutoOrder()
    {   setTableListAutoOrder(vAutoOrder,0);
    }
    
    private void nextAutoOrder()
    {   setTableListAutoOrder(vAutoOrder,1);
    }
    
    /*
     * เพื่อทำการ check ปุ่มวันโดยเลือกเป็นถ้า checkbox mon
     * ถูก check รายการเวลาจะแสดงให้เลือกได้
     * input  :
     * outpit :
     */
    private void checkMon()
    {
        if(jCheckBoxMonToFri.isSelected())
        {
            jCheckBoxMonTime.setEnabled(true);
            timeTextFieldMonFrom.setEnabled(false);
            timeTextFieldMonTo.setEnabled(false);
            return;
        }
        jCheckBoxMonTime.setEnabled(false);
        timeTextFieldMonFrom.setEnabled(false);
        timeTextFieldMonTo.setEnabled(false);
    }
    /*
     * เพื่อทำการ check ปุ่มวันโดยเลือกเป็นถ้า checkbox sat
     * ถูก check รายการเวลาจะแสดงให้เลือกได้
     * input  :
     * outpit :
     */
    private void checkSat()
    {
        if(jCheckBoxSat.isSelected())
        {
            jCheckBoxSatTime.setEnabled(true);
            timeTextFieldSatFrom.setEnabled(false);
            timeTextFieldSatTo.setEnabled(false);
            return;
        }
        jCheckBoxSatTime.setEnabled(false);
        timeTextFieldSatFrom.setEnabled(false);
        timeTextFieldSatTo.setEnabled(false);
    }
    /*
     * เพื่อทำการ check ปุ่มวันโดยเลือกเป็นถ้า checkbox sun
     * ถูก check รายการเวลาจะแสดงให้เลือกได้
     * input  :
     * outpit :
     */
    private void checkSun()
    {
        if(jCheckBoxSun.isSelected())
        {
            jCheckBoxSunTime.setEnabled(true);
            timeTextFieldSunFrom.setEnabled(false);
            timeTextFieldSunTo.setEnabled(false);
            return;
        }
        jCheckBoxSunTime.setEnabled(false);
        timeTextFieldSunFrom.setEnabled(false);
        timeTextFieldSunTo.setEnabled(false);
    }
    /*
     * เพื่อซ่อน/แสดง ช่องบันทึกข้อมูลทั้งหมด
     * input  : object theAutoOederItem
     * outpit :
     */
    private void setEnableAll(boolean a)
    {
        //if(theAutoOrderItem==null)
        if(a == false)
        {
            //jTextFieldAutoCode.setEnabled(false);
            jTextFieldCode.setEnabled(false);
            jTextAreaCommonName.setEnabled(false);
            jTextAreaTradeName.setEnabled(false);
            jTextFieldNickName.setEnabled(false);
            jButtonDel.setEnabled(false);
            checkMon();
            checkSat();
            checkSun();
            jCheckBoxAllPlan.setEnabled(false);
            jComboBoxPlan.setEnabled(false);
            jButtonSave.setEnabled(false);
        }
        else
        {
            //jTextFieldAutoCode.setEnabled(true);
            jTextFieldCode.setEnabled(true);
            jTextAreaCommonName.setEnabled(true);
            jTextAreaTradeName.setEnabled(true);
            jTextFieldNickName.setEnabled(true);
            jCheckBoxAllPlan.setEnabled(true);
            jButtonSave.setEnabled(true);
            jButtonDel.setEnabled(true);
            checkMon();
            checkSat();
            checkSun();
        }
    }
    /*
     *  เพื่อทำการ Clearค่าจาก GUI
     */
    private void setClearAll()
    {
        jTextFieldAutoCode.setText("");
        jTextFieldCode.setText("");
        jTextAreaCommonName.setText("");
        jTextAreaTradeName.setText("");
        jTextFieldNickName.setText("");
        jCheckBoxAllPlan.setSelected(false);
        jCheckBoxMonToFri.setSelected(false);
        jCheckBoxMonTime.setSelected(false);
        jCheckBoxSat.setSelected(false);
        jCheckBoxSatTime.setSelected(false);
        jCheckBoxSun.setSelected(false);
        jCheckBoxSunTime.setSelected(false);
        timeTextFieldMonFrom.setText("00:00");
        timeTextFieldMonTo.setText("00:00");
        timeTextFieldSatFrom.setText("00:00");
        timeTextFieldSatTo.setText("00:00");
        timeTextFieldSunFrom.setText("00:00");
        timeTextFieldSunTo.setText("00:00");
    }
    /*
     * เพื่อทำการ set ค่าจาก object ให้กับแบบฟอร์มบันทึกข้อมูล
     * input  : object theAutoOrderItem
     * outpit :
     */
    private void setObjectToData()
    {
        jButtonSave.setEnabled(true);
        if(theAutoOrderItem.getObjectId()==null)
        {
            jCheckBoxMonToFri.setSelected(true);
            jCheckBoxSat.setSelected(true);
            jCheckBoxSun.setSelected(true);
            jCheckBoxAllPlan.setSelected(true);
            timeTextFieldMonFrom.setEnabled(false);
            timeTextFieldMonTo.setEnabled(false);
            timeTextFieldSatFrom.setEnabled(false);
            timeTextFieldSatTo.setEnabled(false);
            timeTextFieldSunFrom.setEnabled(false);
            timeTextFieldSunTo.setEnabled(false);
            timeTextFieldSatFrom.setEnabled(false);
            jCheckBoxAllPlan.setEnabled(false);
            jTextFieldCode.setText(theItem.item_id);
            jTextAreaCommonName.setText(theItem.common_name);
            jTextAreaTradeName.setText(theItem.trade_name);
            jTextFieldNickName.setText(theItem.nick_name);
            jTextFieldCode.setEnabled(false);
            jTextAreaCommonName.setEnabled(false);
            jTextAreaTradeName.setEnabled(false);
            jTextFieldNickName.setEnabled(false);
        }
        else
        {
            jButtonDel.setEnabled(true);
            jTextFieldAutoCode.setText(theAutoOrderItem.auto_order_item_id);
            Item it=theSetupControl.listItemByPk(theAutoOrderItem.item_id);
            jTextFieldCode.setText(it.item_id);
            jTextAreaCommonName.setText(it.common_name);
            jTextAreaTradeName.setText(it.trade_name);
            jTextFieldNickName.setText(it.nick_name);
            jTextFieldCode.setEnabled(false);
            jTextAreaCommonName.setEnabled(false);
            jTextAreaTradeName.setEnabled(false);
            jTextFieldNickName.setEnabled(false);
            if(!theAutoOrderItem.plan_id.equals(""))
            {
                jCheckBoxAllPlan.setSelected(false);
                Gutil.setGuiData(jComboBoxPlan, theAutoOrderItem.plan_id);
                jCheckBoxAllPlan.setEnabled(true);
                jComboBoxPlan.setEnabled(true);
            }
            else
            {
                jCheckBoxAllPlan.setSelected(true);
                jCheckBoxAllPlan.setEnabled(true);
                jComboBoxPlan.setEnabled(false);
            }
            if(theAutoOrderItem.monday.equals("1"))
            {
                jCheckBoxMonToFri.setSelected(true);
                jCheckBoxMonTime.setEnabled(true);
                if(theAutoOrderItem.mon_alltime.equals("1"))
                {
                    jCheckBoxMonTime.setSelected(false);
                    timeTextFieldMonFrom.setText("00:00");
                    timeTextFieldMonTo.setText("00:00");
                    timeTextFieldMonFrom.setEnabled(false);
                    timeTextFieldMonTo.setEnabled(false);
                }
                else
                {
                    jCheckBoxMonTime.setSelected(true);
                    timeTextFieldMonFrom.setEnabled(true);
                    timeTextFieldMonTo.setEnabled(true);
                    timeTextFieldMonFrom.setText(theAutoOrderItem.mon_time_start);
                    timeTextFieldMonTo.setText(theAutoOrderItem.mon_time_stop);
                    
                }
            }
            else
            {
                jCheckBoxMonToFri.setSelected(false);
                jCheckBoxMonTime.setSelected(false);
                timeTextFieldMonFrom.setText("00:00");
                timeTextFieldMonTo.setText("00:00");
                timeTextFieldMonFrom.setEnabled(false);
                timeTextFieldMonTo.setEnabled(false);
            }
            if(theAutoOrderItem.saturday.equals("1"))
            {
                jCheckBoxSat.setSelected(true);
                jCheckBoxSatTime.setEnabled(true);
                if(theAutoOrderItem.sat_alltime.equals("1"))
                {
                    jCheckBoxSatTime.setSelected(false);
                    timeTextFieldSatFrom.setText("00:00");
                    timeTextFieldSatTo.setText("00:00");
                    timeTextFieldSatFrom.setEnabled(false);
                    timeTextFieldSatTo.setEnabled(false);
                }
                else
                {
                    jCheckBoxSatTime.setSelected(true);
                    timeTextFieldSatFrom.setEnabled(true);
                    timeTextFieldSatTo.setEnabled(true);
                    timeTextFieldSatFrom.setText(theAutoOrderItem.sat_time_start);
                    timeTextFieldSatTo.setText(theAutoOrderItem.sat_time_stop);
                    
                }
            }
            else
            {
                jCheckBoxSat.setSelected(false);
                jCheckBoxSatTime.setSelected(false);
                timeTextFieldSatFrom.setText("00:00");
                timeTextFieldSatTo.setText("00:00");
                timeTextFieldSatFrom.setEnabled(false);
                timeTextFieldSatTo.setEnabled(false);
            }
            if(theAutoOrderItem.sunday.equals("1"))
            {
                jCheckBoxSun.setSelected(true);
                jCheckBoxSunTime.setEnabled(true);
                if(theAutoOrderItem.sun_alltime.equals("1"))
                {
                    jCheckBoxSunTime.setSelected(false);
                    timeTextFieldSunFrom.setText("00:00");
                    timeTextFieldSunTo.setText("00:00");
                    timeTextFieldSunFrom.setEnabled(false);
                    timeTextFieldSunTo.setEnabled(false);
                }
                else
                {
                    jCheckBoxSunTime.setSelected(true);
                    timeTextFieldSunFrom.setEnabled(true);
                    timeTextFieldSunTo.setEnabled(true);
                    timeTextFieldSunFrom.setText(theAutoOrderItem.sun_time_start);
                    timeTextFieldSunTo.setText(theAutoOrderItem.sun_time_stop);
                    
                }
            }
            else
            {
                jCheckBoxSun.setSelected(false);
                jCheckBoxSunTime.setSelected(false);
                timeTextFieldSunFrom.setText("00:00");
                timeTextFieldSunTo.setText("00:00");
                timeTextFieldSunFrom.setEnabled(false);
                timeTextFieldSunTo.setEnabled(false);
            }
        }
    }
    /*
     *  เพื่อทำการให้ค่าข้อมูลจาก GUI กับ Object
     *  input  : ข้อมูลจาก GUI
     *  output : object theAutoOrderItem
     */
    private void setDataToObjec()
    {
        theAutoOrderItem.auto_order_item_id= jTextFieldAutoCode.getText();
        theAutoOrderItem.item_id = theSetupControl.listItemByItemIdReq(jTextFieldCode.getText()).getObjectId();
        if(jCheckBoxAllPlan.isSelected())
        {
            theAutoOrderItem.plan_id="";
        }
        else
        {
            theAutoOrderItem.plan_id = Gutil.getGuiData(jComboBoxPlan);
        }
        if(jCheckBoxMonToFri.isSelected())
        {
            theAutoOrderItem.monday="1";
            if(jCheckBoxMonTime.isSelected())
            {
                theAutoOrderItem.mon_alltime="0";
                theAutoOrderItem.mon_time_start = timeTextFieldMonFrom.getTextTime();
                theAutoOrderItem.mon_time_stop = timeTextFieldMonTo.getTextTime();
            }
            else
            {
                theAutoOrderItem.mon_alltime="1";
                theAutoOrderItem.mon_time_start = "00:00";
                theAutoOrderItem.mon_time_stop ="00:00";
            }
        }
        else
        {
            theAutoOrderItem.monday="0";
            theAutoOrderItem.mon_alltime="0";
            theAutoOrderItem.mon_time_start = "00:00";
            theAutoOrderItem.mon_time_stop ="00:00";
        }
        if(jCheckBoxSat.isSelected())
        {
            theAutoOrderItem.saturday="1";
            if(jCheckBoxSatTime.isSelected())
            {
                theAutoOrderItem.sat_alltime="0";
                theAutoOrderItem.sat_time_start = timeTextFieldSatFrom.getTextTime();
                theAutoOrderItem.sat_time_stop = timeTextFieldSatTo.getTextTime();
            }
            else
            {
                theAutoOrderItem.sat_alltime="1";
                theAutoOrderItem.sat_time_start = "00:00";
                theAutoOrderItem.sat_time_stop = "00:00";
            }
        }
        else
        {
            theAutoOrderItem.saturday="0";
            theAutoOrderItem.sat_alltime="0";
            theAutoOrderItem.sat_time_start = "00:00";
            theAutoOrderItem.sat_time_stop = "00:00";
        }
        if(jCheckBoxSun.isSelected())
        {
            theAutoOrderItem.sunday="1";
            if(jCheckBoxSunTime.isSelected())
            {
                theAutoOrderItem.sun_alltime="0";
                theAutoOrderItem.sun_time_start = timeTextFieldSunFrom.getTextTime();
                theAutoOrderItem.sun_time_stop = timeTextFieldSunTo.getTextTime();
            }
            else
            {
                theAutoOrderItem.sun_alltime="1";
                theAutoOrderItem.sun_time_start = "00:00";
                theAutoOrderItem.sun_time_stop = "00:00";
            }
        }
        else
        {
            theAutoOrderItem.sunday="0";
            theAutoOrderItem.sun_alltime="0";
            theAutoOrderItem.sun_time_start = "00:00";
            theAutoOrderItem.sun_time_stop = "00:00";
        }
    }
     /*
      *  เพื่อทำการบันทึก/แก้ไข ข้อมูล AutoOrderItem
      *  input  : object theAutoOrderItem
      *  output : ผลการบันทึคข้อมูล
      */
    
    private void saveAutoOrderItem()
    {
        if(theAutoOrderItem == null)
            theAutoOrderItem = new AutoOrderItem();
        setDataToObjec();
        boolean a = theSetupControl.saveAutoOrderItemReq(theAutoOrderItem);
        if(a)
        {
            //theAutoOrderItem=null;
            //pu : 26/08/2549 : เก็บ Index ปัจจุบันของหน้ารายการที่กำลังบันทึก
            int count = next - prev;
            this.curNext = next - count;
            this.curPrev = prev - offset;
            searchAutoOrderItem();
            setEnableAll(false);
        }
    }
    /*
     *  เพื่อทำการลบข้อมูลรายการ AutoOrderItem
     *  input  : object theAutoOrderItem
     *  output : ผลการลบข้อมูลจากฐานข้อมูล
     */
    private void deletAutoOrderItem()
    {
        int ret = theSetupControl.deleteAutoOrderItemReq(theAutoOrderItem);
        //theAutoOrderItem=null;
        //searchAutoOrderItem();
        //jButtonDel.setEnabled(false);
        if(ret > 0)
        {
            setEnableAll(false);
            setClearAll();
            int count = next - prev;
            this.curNext = next - count;
            this.curPrev = prev - offset;
            searchAutoOrderItem();
        }        
    }
    /*
     *   เพื่อทำการค้นหารายการ AutoOrderItem
     *   input  :
     *   output :
     */
    private void searchAutoOrderItem()
    {   //pu : 26/08/2549 : กำหนดค่า Index ให้กับหน้าที่ต้องการแสดงรายการ
        next = this.curNext;
        prev =  this.curPrev;
        String search = jTextFieldSCode.getText();
        vAutoOrder =  theSetupControl.listAutoOrderItemReq(search);
        //vAutoOrder = theSetupControl.listAutoOrderItemReq();
        setTableListAutoOrder(vAutoOrder,1);
    }
    /*
     *  เพื่อทำการแสดงข้อมูล vector ของ AutoOrderItem ใน table
     *   input  : vector vAutoOrderItem
     *   output :
     */
    private void setTableListAutoOrder(Vector vAuto,int off)
    {
        AutoOrderItem of = new AutoOrderItem();
        int count = offset;
        int p =0;
        int n =0;
        int c =0;
        if(vAuto != null && vAuto.size() != 0)
        {
            if(off == 1)
            {
                p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= vAutoOrder.size())
                {   next = vAutoOrder.size();
                    count = next - prev;
                }
                if(count == 0)
                {   prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else
            {   next = prev;
                prev = prev - offset;
                if(prev <=0)
                {    prev = 0;
                     next = offset;
                }
                if(next >= vAutoOrder.size())
                {   next= vAutoOrder.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col,count);
            for(int i=0 ;i<count;i++)
            {
                of = (AutoOrderItem)vAuto.get(i+prev);
                tm.setValueAt(of.auto_order_item_id, i, 0);
                String name = theSetupControl.listItemByPk(of.item_id).common_name;
                tm.setValueAt(name,i,1);
            }
            jTable1.setModel(tm);
        }
        else
        {
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(600);
    }
    /*
     *  เพื่อทำการหำการ set ค่าให้กับ object หลังจากที่ทำการเลือกข้อมูลใน table
     * input  :
     * output :
     */
    private void selectAutoOrderItem()
    {
        row = jTable1.getSelectedRow();
        String of = (String)jTable1.getValueAt(row, 0);
        AutoOrderItem auItem = new AutoOrderItem();
        for(int i =0 ; i< vAutoOrder.size() ; i++)
        {
            if(of == ((AutoOrderItem)vAutoOrder.get(i)).auto_order_item_id)
                auItem = (AutoOrderItem)vAutoOrder.get(i);
        }
        theAutoOrderItem = auItem;
        setObjectToData();
    }
    
    /*
     * เพื่อทำการแสดง panel search sub ค้นหาข้อมูลรายการ order
     * input  :
     * outpit :
     */
    private void showItem()
    {
        if(psep==null)
        {
            psep = new PanelSetupSearchSub(theHC,theUS,13);
            psep.setTitle("ค้นหารายการตรวจรักษา");
            psep.setTextConponent(jTextFieldCode,jTextAreaCommonName,jTextAreaTradeName,jTextFieldNickName);
            psep.showSearch();
        }
        psep = null;
    }
    public static void main(String args[])
    {
        JFrame frm = new JFrame("Test");
        frm.getContentPane().setLayout(new BorderLayout());
        PanelSetupAutoOrderItem pnl = new PanelSetupAutoOrderItem();
        frm.getContentPane().add(pnl,  BorderLayout.CENTER);
        frm.addWindowListener(new WindowAdapter()
        {   public void windowClosing(WindowEvent e)
            {    System.exit(0);
            }
        });
        frm.pack();
        frm.setVisible(true);
        frm.setSize(600,600);
    }
    public void notifyreFrashPanel()
    {
        setupLookup();
    }
    /*
     *   เพื่อส่งค่า item จากการค้นหากลับมาเพื่อบันทึกข้อมูล
     *   input  :
     *   output : object theItem
     */
    public void notifylistItemByGroup(Item item)
    {
        theItem = item;
        theAutoOrderItem = new AutoOrderItem();
        setObjectToData();
        setEnableAll(false);
    }
    public void notifysetEnableForLift(boolean b)
    {
    }
    public int editOption(Option option)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public Vector listOptionAll()
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public void reFrashPanel()
    {
    }
    public Option readOption()
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public int saveOption(Option option)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public void setEnableForLift(boolean b)
    {
    }
    public int deleteItemByPk(String pk)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int deleteItemPrice(ItemPrice itemprice)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int deleteLabResultItem(LabResultItem lri)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public void deleteLabSet(LabSet labset)
    {
    }
    public String deleteMedSupplyUsage(Vector v)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public String deleteService(Vector v)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public int editDrug(Drug drug)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int editItem(Item item)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int editItemPrice(Vector itemprice)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int editLabResultItem(Vector labresult)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public String editService(OrderItem service)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public CategoryGroupItem listCategoryGroupByPk(String pk)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listItemByGroup(String itemGpID, String itemname, String active)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Item listItemByItemIdReq(String itemid)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listItemByName(String itemName)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Item listItemByPk(String pk)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Item listItemByPkey(String pk)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listItemDrugAndSupply(String itemname)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listItemPrice(String pkItem_id)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listItemPriceByItemID(String pk)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public LabGroup listLabGroupByItem(String item_id)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listLabSetByLabGroupID(String labgroup_id)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listOrderMedSupplyeAllVisit(String hn, String ordertype)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listOrderServiceAllVisit(String hn, String ordertype)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listSearchItem(String pk, int sh, String cgc)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector listSearchItemDrug(String pk, int sh, String cgc)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public void notifylistSearchItem(Item item)
    {
    }
    public void notifylistSearchItemDrug(Item drug)
    {
    }
    public void notifysaveItem(Item item)
    {
    }
    public void notifyselectItem(DxTemplate dxtemplate)
    {
    }
    public Drug readDrug(String pkItem_id)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public String readItemById(String itemId)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public Vector readLabResultItemByItem(String pk)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return null;
    }
    public int saveDrug(Drug drug)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int saveItem(Item item, Vector itemprice, Drug drug, Vector labresultitem, LabGroup labgroup, Vector labset)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public int saveItemPrice(Vector itemprice, String item_id)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    public void saveLabGroupLabSet(LabGroup labgroup, Vector labset)
    {
    }
    public int saveLabResultItem(Vector labresultitem, String item_id)
    {
        Constant.println("PanelSetupAutoOrderItem function is not use.");
        return -1;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.hospital_os.gui.font.FontFormatTitle fontFormatTitle1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrev;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxAllPlan;
    private javax.swing.JCheckBox jCheckBoxMonTime;
    private javax.swing.JCheckBox jCheckBoxMonToFri;
    private javax.swing.JCheckBox jCheckBoxSat;
    private javax.swing.JCheckBox jCheckBoxSatTime;
    private javax.swing.JCheckBox jCheckBoxSun;
    private javax.swing.JCheckBox jCheckBoxSunTime;
    private javax.swing.JComboBox jComboBoxPlan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelICD9code;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane21;
    private com.hosv3.gui.component.HJTableSort jTable1;
    private javax.swing.JTextArea jTextAreaCommonName;
    private javax.swing.JTextArea jTextAreaTradeName;
    private javax.swing.JTextField jTextFieldAutoCode;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldNickName;
    private javax.swing.JTextField jTextFieldSCode;
    private com.hospital_os.utility.TableResultsModel tableResultsModel1;
    private com.hospital_os.utility.TimeTextField timeTextFieldMonFrom;
    private com.hospital_os.utility.TimeTextField timeTextFieldMonTo;
    private com.hospital_os.utility.TimeTextField timeTextFieldSatFrom;
    private com.hospital_os.utility.TimeTextField timeTextFieldSatTo;
    private com.hospital_os.utility.TimeTextField timeTextFieldSunFrom;
    private com.hospital_os.utility.TimeTextField timeTextFieldSunTo;
    // End of variables declaration//GEN-END:variables
}
