/*
 * PanelSetupSQLTemplate.java
 *
 * Created on 5 กันยายน 2548, 15:03 น.
 */

package com.reportquery.gui.panel;
import com.reportquery.manage.HosManage;
import com.reportquery.utility.objUtil;

import com.reportquery.utility.TableModelGUI;
import com.reportquery.usecase.gui.*;
import com.reportquery.object.SQLTemplate;
import com.reportquery.utility.Language;

import java.util.Vector;
import javax.swing.*;
/**
 *
 * @author  tong(Padungrat)
 */
public class PanelSetupSQLTemplate extends javax.swing.JPanel implements StandardGUI

{
    
    HosManage theManager;
    private String[] headTable;
    /**เป็น Object ของ tablemodel*/
    private TableModelGUI theTableModelGUI;
    /**เป็น Object ของ sqlTemplate ที่ถูกใช้ระหว่างการทำงาน*/
    private SQLTemplate theSQLTemplate;
    /**เป็น Object ของ sqlTemplate ที่ถูกใช้เป็น temp ชั่วคราว*/
    private SQLTemplate theSQLTemplateTemp;
    /**เป็น Vector ที่ใช้เก็บการแสดงผลลงตาราง*/
    private Vector vSQLTemplate;
    private int language = 1;
    public PanelSetupSQLTemplate() {
        initComponents();
    }
    public PanelSetupSQLTemplate(HosManage man){
        initComponents();
        setControl(man);
    }
    public void setControl(HosManage man){
        theManager = man;
        setEnabledUse();
        setLanguage();
        setShowTable(null);
        setEnableButton(false);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelRigth = new javax.swing.JPanel();
        jLabelDescription = new javax.swing.JLabel();
        jCheckBoxActive = new javax.swing.JCheckBox();
        jTextFieldDescription = new javax.swing.JTextField();
        jCheckBoxQueryForDate = new javax.swing.JCheckBox();
        jLabelCode = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jPanelShowSQL = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextFieldSQL = new javax.swing.JTextArea();
        jPanelLeft = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jCheckBoxS = new javax.swing.JCheckBox();
        jButtonPrev = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSCode = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShowList = new javax.swing.JTable();
        jPanelButton = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanelRigth.setLayout(new java.awt.GridBagLayout());

        jLabelDescription.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 0);
        jPanelRigth.add(jLabelDescription, gridBagConstraints);

        jCheckBoxActive.setSelected(true);
        jCheckBoxActive.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 2);
        jPanelRigth.add(jCheckBoxActive, gridBagConstraints);

        jTextFieldDescription.setMaximumSize(new java.awt.Dimension(100, 21));
        jTextFieldDescription.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldDescription.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 2);
        jPanelRigth.add(jTextFieldDescription, gridBagConstraints);

        jCheckBoxQueryForDate.setText("QueryForDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 2);
        jPanelRigth.add(jCheckBoxQueryForDate, gridBagConstraints);

        jLabelCode.setText("Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 12);
        jPanelRigth.add(jLabelCode, gridBagConstraints);

        jTextFieldCode.setMaximumSize(new java.awt.Dimension(100, 21));
        jTextFieldCode.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldCode.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 3, 2);
        jPanelRigth.add(jTextFieldCode, gridBagConstraints);

        jPanelShowSQL.setLayout(new java.awt.GridBagLayout());

        jPanelShowSQL.setBorder(javax.swing.BorderFactory.createTitledBorder("SQLCommand"));
        jScrollPane2.setViewportView(jTextFieldSQL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowSQL.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelRigth.add(jPanelShowSQL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 10);
        add(jPanelRigth, gridBagConstraints);

        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        jPanelLeft.setMinimumSize(new java.awt.Dimension(300, 460));
        jPanelLeft.setPreferredSize(new java.awt.Dimension(300, 460));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jCheckBoxS.setSelected(true);
        jCheckBoxS.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jCheckBoxS, gridBagConstraints);

        jButtonPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Back16.gif")));
        jButtonPrev.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonPrev.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jButtonPrev, gridBagConstraints);

        jButtonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Forward16.gif")));
        jButtonNext.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonNext.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonNext.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel7.add(jButtonNext, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel8.add(jPanel7, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabelSearch, gridBagConstraints);

        jTextFieldSCode.setMaximumSize(new java.awt.Dimension(100, 21));
        jTextFieldSCode.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldSCode.setPreferredSize(new java.awt.Dimension(100, 21));
        jTextFieldSCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSCodeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jTextFieldSCode, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSearch.setMaximumSize(new java.awt.Dimension(160, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(60, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(80, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel8.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelLeft.add(jPanel8, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTableShowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableShowList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowListMouseReleased(evt);
            }
        });
        jTableShowList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableShowListKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableShowList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelLeft.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        add(jPanelLeft, gridBagConstraints);

        jPanelButton.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelButton.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/minus16.gif")));
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelButton.add(jButtonDel, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSave.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonSave.setPreferredSize(new java.awt.Dimension(80, 24));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelButton.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 10);
        add(jPanelButton, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jTableShowListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableShowListKeyReleased
        if(evt.getKeyCode()==evt.VK_UP || evt.getKeyCode()==evt.VK_DOWN)
            this.jTableShowListMouseReleased(null);
    }//GEN-LAST:event_jTableShowListKeyReleased

    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        deleteSQLTemplate();
    }//GEN-LAST:event_jButtonDelActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        addSQLTemplate();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveSQLTemplate();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTableShowListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableShowListMouseReleased
        selectDataInTable(jTableShowList.getSelectedRow());
    }//GEN-LAST:event_jTableShowListMouseReleased

    private void jTextFieldSCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSCodeActionPerformed
        searchCommandSQL();
    }//GEN-LAST:event_jTextFieldSCodeActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchCommandSQL();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    
    /**ใช้ในการกำหนดให้ GUI บางรายการไม่แสดงไปตลอดการใช้งานจนกว่าจะมีการลบออกไป*/
    private void setEnabledUse()
    {
        jButtonPrev.setVisible(false);
        jButtonNext.setVisible(false);
    }
    
    /**ใช้ในการเลือกรายการที่ได้แสดงผลไปแล้วหลังจากกด บันทึก เพื่อให้ทราบว่าการแสดงผลนั้นเป็นของราย
     * การไหน
     *
     */
    private void selectRowInTable()
    {   //ตรวจสอบว่า vector เป็น null หรือไม่
        if(this.vSQLTemplate != null )
        {
            if(jCheckBoxS.isSelected())
            {
                //ระบุ size ของ vector - ด้วย 1
                int size = this.vSQLTemplate.size() -1;
                //ทำการวนลูป จากหลังไปหน้า เพื่อหารายการที่ต้องการและทำการเลือกรายการ
                for(int i = size ;i >=0 ;i--)
                {
                    this.theSQLTemplateTemp = (SQLTemplate)vSQLTemplate.get(i);
                    if(theSQLTemplate.getObjectId().equalsIgnoreCase(this.theSQLTemplateTemp.getObjectId()))
                    {
                        jTableShowList.setRowSelectionInterval(i,i);
                        break;
                    }
                }
            }
        }
    }
    
    
    /**ใช้ในการลบข้อมูลออกจากตาราง
     * และทำการ clear GUI และปุ่มต่างๆ
     */
    public void deleteSQLTemplate()
    {
        if(theSQLTemplate != null && theSQLTemplate.getObjectId() != null)
        {
            
            int choose = JOptionPane.showConfirmDialog(this,Language.getTextBundle("ComfirmDelete",language),Language.getTextBundle("Warning",language),JOptionPane.OK_CANCEL_OPTION);
            if(choose == JOptionPane.OK_OPTION)
            {
                this.theManager.theManageControl.theQueryControl.deleteSQLTemplateByKeyID(theSQLTemplate.getObjectId());
                removeObjectVectorSQLTemplate();
                setEnableButton(false);
                ClearGUI();
            }
        }
        else
        {     //กรุณาเลือกรายการด้วยค่ะ
            JOptionPane.showMessageDialog(this,Language.getTextBundle("PleaseSelectOrder",language));
        }
    }
    
    /**ใช้ในการลบข้อมูลออกจาก vector เมื่อมีการลบข้อมูลออกไปแล้ว*/
    private void removeObjectVectorSQLTemplate()
    {
        int size = this.vSQLTemplate.size() -1;
        for(int i = size ;i >=0 ;i--)
        {
            this.theSQLTemplateTemp = (SQLTemplate)vSQLTemplate.get(i);
            if(theSQLTemplate.getObjectId().equalsIgnoreCase(this.theSQLTemplateTemp.getObjectId()))
            {
                vSQLTemplate.remove(i);
            }
        }
        
        
        setShowTable(vSQLTemplate);
    }
    
    /**ใช้ในการ เพิ่ม sql*/
    public void addSQLTemplate()
    {
        jTableShowList.clearSelection();
        ClearGUI();
        setEnableButton(false);
    }
    
    /**
     *ใช้ในการ Clear GUI ของ panel ให้เป็น ช่องว่าง
     */
    public void ClearGUI()
    {
        this.theSQLTemplate = null;
        jTextFieldCode.setText("");
        jTextFieldDescription.setText("");
        jCheckBoxQueryForDate.setSelected(false);
        jCheckBoxActive.setSelected(true);
        jTextFieldSQL.setText("");
         
    }
    
    /**
     * ใช้ในการบันทึกข้อมูลลงฐานข้อมูล โดยจะทำงานตรวจสอบก่อนการบันทึก จะตรวจสอบเรื่องของ
     * การเป็น sql ที่ค้นหาตามวันที่หรือไม่กับ sql นั้น ถ้าตรงกันจะบันทึกให้ ถ้าไม่ต้องจะไม่บันทึก
     * และตรวจสอบการซ้ำของ code และ description ถ้าเป็นกรณีการบันทึกใหม่
     */
    public void saveSQLTemplate()
    {   boolean result = false;
        setGUIToDataObject();
        
        /**ตรวจสอบการกรอกข้อมูล กรอกครบหรือไม่*/
        if(checkDataObject())
        {   /**ตรวจสอบรูปแบบการ SQL เป็นไปตามที่กำหนดหรือไม่*/
            if(checkSyntaxSQL(theSQLTemplate.sql_template_sql))
            {
                // เป็นรายการ sql ที่ค้นหาตามวันที่
                if(jCheckBoxQueryForDate.isSelected())
                {   //ตรวจสอบโครงสร้างของ SQL ว่าเป็นไปตาม syntax ของ การค้นหาด้วยวันที่หรือไม่
                    result = checkSQLByDate(theSQLTemplate.sql_template_sql,true);
                }
                else
                {   // ตรวจสอบโครงสร้างของ SQL ว่าเป็นไปตาม syntax แบบไม่ค้นหาด้วยวันที่
                    result = checkSQLByDate(theSQLTemplate.sql_template_sql,false);
                  
                }
                /**ผลถูกต้อง สามารถบันทึกลงฐานข้อมูลได้เลย*/
                if(result)
                {
                    theManager.theManageControl.theQueryControl.saveSQLTemplate(theSQLTemplate);
                    searchCommandSQL();
                    selectRowInTable();
                    setEnableButton(true);
                    
                    if(!objUtil.StringToBoolean(theSQLTemplate.sql_template_active))
                    {
                        ClearGUI();
                    }
                }
            }
            else
            {   
                javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SyntexError",language));
            }
        }
        
    }
    
    /**ตรวจสอบข้อมูลการใส่ข้อมูลบน GUI*/
    public boolean checkDataObject()
    {   boolean result = true;
        /**ตรวจสอบการใส่ Code*/
        if(jTextFieldCode.getText().trim().length() == 0)
        {   //รหัสต้องไม่เป็นช่องว่าง
             javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("CodeNotNull",language));
             jTextFieldCode.requestFocus();
             result = false;
        }
        else
        {   /**ตรวจสอบการใส่ คำอธิบาย*/
            if(jTextFieldDescription.getText().trim().length() == 0)
            {   //คำอธิบายต้องไม่เป็นช่องว่าง
                javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("DescriptionNotNull",language));
                jTextFieldDescription.requestFocus();
                result = false;
            }
            else
            {   /**ตรวจสอบการใส่ SQL*/
                if(jTextFieldSQL.getText().trim().length() == 0)
                {   //คำสั่ง SQL ต้องไม่เป็นช่องว่าง
                    javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SQLCommandNotNull",language));
                     jTextFieldSQL.requestFocus();
                     result = false;
                }
            }
        }
        /**ตรวจสอบ การซ้ำกันของ รหัส และ ชื่อที่อยู่ในฐานข้อมูล
         */
        if(result)
        {   /**ตรวจสอบว่าเป็นครั้งแรกของข้อมูลหรือไม่*/
            if(theSQLTemplate.getObjectId() == null)
            {   /**ตรวจสอบการซ้ำกันของรหัส ที่อยู่ในฐานข้อมูลสำหรับข้อมูลใหม่*/
                if(this.theManager.theManageControl.theQueryControl.queryCheckCodeInDB(theSQLTemplate.sql_template_number,null))
                {   //มีรหัสซ้ำกับที่มีอยู่ในฐานข้อมูล
                    javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("CodeSameInDatabase",language));
                    jTextFieldCode.requestFocus();
                    result = false;
                }
                else
                {   /**ตรวจสอบการซ้ำกันของคำอธิบาย ที่อยู่ในฐานข้อมูลสำหรับข้อมูลใหม่*/
                    if(this.theManager.theManageControl.theQueryControl.queryCheckNameInDB(theSQLTemplate.sql_template_description, null))
                    {
                        //มีคำอธิบายซ้ำกับที่มีอยู่ในฐานข้อมูล
                        javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("DescriptionSameInDatabase",language));
                        jTextFieldDescription.requestFocus();
                        result = false;
                    }
                }
            }
            else
            {
                /**ตรวจสอบการซ้ำกันของรหัส ที่อยู่ในฐานข้อมูลสำหรับข้อมูลเก่า*/
                if(this.theManager.theManageControl.theQueryControl.queryCheckCodeInDB(theSQLTemplate.sql_template_number, theSQLTemplate.getObjectId()))
                {   //มีรหัสซ้ำกับที่มีอยู่ในฐานข้อมูล
                    javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("CodeSameInDatabase",language));
                    jTextFieldCode.requestFocus();
                    result = false;
                }
                else
                {   /**ตรวจสอบการซ้ำกันของคำอธิบาย ที่อยู่ในฐานข้อมูลสำหรับข้อมูลเก่า*/
                    if(this.theManager.theManageControl.theQueryControl.queryCheckNameInDB(theSQLTemplate.sql_template_description, theSQLTemplate.getObjectId()))
                    {   //มีคำอธิบายซ้ำกับที่มีอยู่ในฐานข้อมูล
                        javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("DescriptionSameInDatabase",language));
                        jTextFieldDescription.requestFocus();
                        result = false;
                    }
                }
            }
        }
        
        
        return result;
    }
    
    /**
     *  ใช้ในการจัดการกับปุ่ม เพิ่ม ลบ และบันทึก ตามเหตุการณ์ที่เข้ามา
     *          บวก     ลบ      บันทึก 
     * default  t       f       t
     * เลือก     t       t       t
     * เพิ่ม      t       f       t
     * บันทึก     t      t        t 
     * ลบ       t       f       t
     * @param enabled เป็น boolean ถ้าเป็น false ปุ่ม ลบ จะ ไม่ทำงาน, true ปุ่มลบจะทำงาน
     */
    private void setEnableButton(boolean enabled)
    {
        this.jButtonDel.setEnabled(enabled);
        this.jButtonAdd.setEnabled(true);
        this.jButtonSave.setEnabled(true);
        
    }
    /**ใช้ในการตรวจสอบความถูกต้องของการเขียน คำสั่ง SQL
     * ถ้าถูกต้องและไม่มีคำต้องห้าม จะส่งค่ามาเป็น true 
     *@param sql เป็น String ของ sql ที่ต้องการตรวจสอบ
     * 
     *@return เป็น boolean true ผ่าน fals ไม่ผ่าน
     */
    private boolean checkSyntaxSQL(String sql)
    {
        
       return objUtil.checkSyntaxSQL(sql);
    }
    
    /**ใช้ในการตรวจสอบค่าที่อยู่ใน sql ที่เป็น sql ค้นหาตามวันที่ 
     * @param sql เป็น String ที่เก็บ sql
     * @param sqltype เป็น boolean ถ้าเป็น true ให้ตรวจสอบsql แบบวันที่, ถ้าเป็น false ไม่ต้องตรวจสอบแบบวันที่
     * @return เป็น boolean true ผ่าน false ไม่ผ่าน
     */
    public boolean checkSQLByDate(String sql,boolean sqltype)
    {   int cur_index = 0;
        int num_qt = 0;
        boolean result = false;
        //ตรวจสอบจำนวนของ ?
           
           while(cur_index != -1)
           {
                cur_index++;
                cur_index = sql.indexOf("?",cur_index);
                num_qt = num_qt +1;
           }
           num_qt = num_qt-1;     //ลูปเกินมา 1 รอบ
           /**ตรวจสอบว่ามีเครื่องหมาย ? อยู่หรือไม่สำหรับการค้นหาด้วยวันที่ ถ้ามีเป็น จำนวนคี่ จะ เป็น false
            * ถ้าเป็นคู่ จะ เป็น true
            */
           if((num_qt<2)||((num_qt%2) != 0))
           {
               //เงื่อนไขในคำสั่ง sql ไม่ถูกต้อง
               //ตรวจสอบประเภทของ SQL
               if(sqltype)
               {    // SQL ค้นหาด้วยวันที่
                   JOptionPane.showMessageDialog(this,Language.getTextBundle("SystexErrorWhenQueryByDate",language),Language.getTextBundle("Warning",language),JOptionPane.OK_OPTION);
                  // System.out.println("Error ? : in query by date");
                    this.jTextFieldSQL.requestFocus();
               }
               else
               {   // System.out.println("Error ? : in query by no date");
                   //JOptionPane.showMessageDialog(this,Language.getTextBundle("SystexErrorWhenQueryByNoDate",language),Language.getTextBundle("Warning",language),JOptionPane.OK_OPTION);
                   // this.jTextFieldSQL.requestFocus();
                    
                    result = true;
               }
           }
           else
           {
                if(!sqltype)
                {  // System.out.println("No Error ? : in query by no date");
                    JOptionPane.showMessageDialog(this,Language.getTextBundle("SystexErrorWhenQueryByNoDate",language),Language.getTextBundle("Warning",language),JOptionPane.OK_OPTION);
                    this.jTextFieldSQL.requestFocus();
                }
                else
                {
                    result = true;
                }
                  // result = true;//this.theSetupControl.checkSQLParam(sql.trim());
           }
      
         return result;
    }
    
    
    private boolean checkSQL()
    {
        return true;
    }
    
    /**
     * ใช้ในการแสดงข้อมูลที่เลือกจากตาราง เพื่อแสดงผลบน GUI
     */
    public void selectDataInTable(int select)
    {
        
        if(select != -1 && vSQLTemplate != null)
        {
            theSQLTemplate = (SQLTemplate)vSQLTemplate.get(select);
            theSQLTemplate  = (SQLTemplate)theManager.theManageControl.theQueryControl.querySearchByKeyID(theSQLTemplate.getObjectId());
            setDataObjectToGUI();
            setEnableButton(true);
        }
    }
    
    /**ใช้ในการให้ค่าของ GUI กับ Object เพื่อทำการบันทึก*/
    private void setGUIToDataObject()
    {
        if(theSQLTemplate == null)
        {
            theSQLTemplate = new SQLTemplate();
        }
        
        theSQLTemplate.sql_template_active = objUtil.BooleanToString(jCheckBoxActive.isSelected());
   
        theSQLTemplate.sql_template_description = jTextFieldDescription.getText();
        theSQLTemplate.sql_template_is_query_by_date = objUtil.BooleanToString(jCheckBoxQueryForDate.isSelected());
        theSQLTemplate.sql_template_number = jTextFieldCode.getText();
        theSQLTemplate.sql_template_sql = jTextFieldSQL.getText();
    }
    
    /**ใช้ในการ set ค่าของ Object ลง GUI*/
    private void setDataObjectToGUI()
    {
        if(theSQLTemplate != null)
        {
            jTextFieldCode.setText(theSQLTemplate.sql_template_number);
            jTextFieldDescription.setText(theSQLTemplate.sql_template_description);
            jCheckBoxQueryForDate.setSelected(objUtil.StringToBoolean(theSQLTemplate.sql_template_is_query_by_date));
            jTextFieldSQL.setText(theSQLTemplate.sql_template_sql);
            jCheckBoxActive.setSelected(objUtil.StringToBoolean(theSQLTemplate.sql_template_active));
        }
        else
        {
            setInitGUI();
        }
    }
    /**ใช้ในการ Clear ข้อมูลบน GUI*/
    private void setInitGUI()
    {
        
    }
    
    /**ใช้ในการค้นหาข้อมูลจากฐานข้อมูล และ แสดงผลลงตาราง*/
    public void searchCommandSQL()
    {
        vSQLTemplate = (Vector)theManager.theManageControl
                .theQueryControl.querySearchByNameOrCodeAndActive(
                    jTextFieldSCode.getText().trim(),objUtil.BooleanToString(jCheckBoxS.isSelected()));
        setShowTable(vSQLTemplate);
    }
    
    /**
     * ใช้ในการแสดงผลลงตาราง โดยรับ Vector ของ Object ของ SQLTemplate
     * จะมี 3 ตัว คือ keyid, description และ number
     *@param vc เป็น Vector ของ Object ของ SQLTemplate
     */
    public void setShowTable(Vector vc)
    {
        if(vc != null)
        {
            theTableModelGUI = new TableModelGUI(headTable,vc.size());
            if(theSQLTemplateTemp == null)
            {    
                theSQLTemplateTemp = new SQLTemplate();
            }
                 
            
            for(int i = 0; i< vc.size() ; i++)
            {
                theSQLTemplateTemp = (SQLTemplate)vc.get(i);
                
                theTableModelGUI.setValueAt(theSQLTemplateTemp.sql_template_number,i, 0);
                theTableModelGUI.setValueAt(theSQLTemplateTemp.sql_template_description,i, 1);
                
                theSQLTemplateTemp = null;
            }
        }
        else
        {  
            theTableModelGUI = new TableModelGUI(headTable,0);
        }
        jTableShowList.setModel(theTableModelGUI);
        jTableShowList.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTableShowList.getColumnModel().getColumn(1).setPreferredWidth(400);
    }

    /**ใช้ในการแสดงภาษา*/
    public void setLanguage() {
        headTable = new String[2];
        headTable[0] =Language.getTextBundle("Code", language);// "Code";//รหัส
        headTable[1] = Language.getTextBundle("Description", language);//"Description";//อำอธิบาย
        
        jLabelSearch.setText(Language.getTextBundle(jLabelSearch.getText(), language));
        jLabelCode.setText(Language.getTextBundle(jLabelCode.getText(), language));
        jLabelDescription.setText(Language.getTextBundle(jLabelDescription.getText(), language));

        jButtonSearch.setText(Language.getTextBundle(jButtonSearch.getText(), language));
        jButtonSave.setText(Language.getTextBundle(jButtonSave.getText(), language));

        jPanelShowSQL.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle(((javax.swing.border.TitledBorder)jPanelShowSQL.getBorder()).getTitle() , language)));
        
        jCheckBoxS.setText(Language.getTextBundle(jCheckBoxS.getText(), language));
        jCheckBoxActive.setText(Language.getTextBundle(jCheckBoxActive.getText(), language));
        jCheckBoxQueryForDate.setText(Language.getTextBundle(jCheckBoxQueryForDate.getText(), language));
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrev;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxActive;
    private javax.swing.JCheckBox jCheckBoxQueryForDate;
    private javax.swing.JCheckBox jCheckBoxS;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelButton;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRigth;
    private javax.swing.JPanel jPanelShowSQL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableShowList;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldSCode;
    private javax.swing.JTextArea jTextFieldSQL;
    // End of variables declaration//GEN-END:variables
    
}
