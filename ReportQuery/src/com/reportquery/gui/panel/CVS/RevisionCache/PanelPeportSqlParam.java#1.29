/*
 * PanelPeportSqlParam.java
 *
 * Created on 5 กันยายน 2548, 14:17 น.
 */

package com.reportquery.gui.panel;

import com.hosv3.utility.connection.UpdateStatus;
import com.reportquery.gui.panel.DialogShowPanelSetupSQLTemplate;
import com.reportquery.manage.control.QueryControl;
import com.reportquery.manage.control.ReportSQLLookup;
import com.reportquery.utility.Constant;
import com.reportquery.utility.Language;
import com.reportquery.utility.objUtil;
import java.util.Vector;
import javax.swing.JFileChooser;
import java.awt.Color;
import com.hospital_os.usecase.connection.ConnectionInf;

import com.reportquery.gui.dialog.ComboboxModel;

import com.reportquery.manage.HosManage;
import com.reportquery.object.SQLTemplate;
import com.reportquery.usecase.gui.*;
import com.reportquery.utility.TableModelGUI;

import com.reportquery.gui.dialog.DialogShowStatus;
/**
 *
 * @author  tong(Padungrat)
 */
public class PanelPeportSqlParam extends javax.swing.JPanel implements
GUIManage ,StandardGUI, QueryManage
        
{
    /**ใช้ในการรับ Connection */
    private ConnectionInf theConnectionInf;
    /**
     * เป็น Object ของ HosManage
     */
    UpdateStatus theUS;
    HosManage theManager;
    
    /**เป็น Vector ของ array String ที่เก็บผลการ query*/
    private Vector vDataQuery;
    /**เป็น array String ที่เก็บผลการ หัว Column ของการ query*/
    private String[] headColumn;
            
    private String[] headColomnDefault;
    
    private SQLTemplate theSQLTemplateTemp;
    private SQLTemplate theSQLTemplate;
    
    private TableModelGUI theTableModelGUI;
    private String oldPath = ".";
    private String fileType = "";
    private String select_path = "";
    private String fileName = "test";
    private int language = 1;
    
    private DialogShowStatus theDialogShowStatus;

    private QueryControl theQC;
    public PanelPeportSqlParam() {
        initComponents();
    }
    public PanelPeportSqlParam(HosManage manager,UpdateStatus us) {
        theManager = manager;
        theManager.theManageControl.theManageSubject.theGUISubject.registerGUIManage(this);
        theManager.theManageControl.theManageSubject.theQuerySubject.registerGUIManage(this);
        initComponents();
        setLanguage();
        setTable(headColomnDefault,null);
        initComboBox(false);
        setEnableSaveFile(false);
        theUS = us;
        theQC = theManager.theManageControl.theQueryControl;
        jComboBoxDoctor.setControl(new ReportSQLLookup(manager.theManageControl.theQueryControl),false);
        
    }
    public void setControl(HosManage manager,UpdateStatus us) {
        theManager = manager;
        theManager.theManageControl.theManageSubject.theGUISubject.registerGUIManage(this);
        theManager.theManageControl.theManageSubject.theQuerySubject.registerGUIManage(this);
        setLanguage();
        setTable(headColomnDefault,null);
        initComboBox(false);
        setEnableSaveFile(false);
        theUS = us;
        theQC = theManager.theManageControl.theQueryControl;
        jComboBoxDoctor.setControl(new ReportSQLLookup(manager.theManageControl.theQueryControl),false);
    }
    
    private void initComboBox(boolean again)
    {
        
        
        initReportType();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel7 = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelStartDate = new javax.swing.JLabel();
        dateComboBoxStart = new com.hospital_os.utility.DateComboBox();
        dateComboBoxFinish = new com.hospital_os.utility.DateComboBox();
        jLabelFinishDate = new javax.swing.JLabel();
        jButtonRefresh = new javax.swing.JButton();
        timeTextFieldOut = new com.hospital_os.utility.TimeTextField();
        timeTextFieldIn = new com.hospital_os.utility.TimeTextField();
        jCheckBoxDBBackup = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabelReport = new javax.swing.JLabel();
        jComboBoxDoctor = new com.hosv3.gui.component.HosComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox();
        jButtonSave = new javax.swing.JButton();
        jPanelShowReport = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShowQuery = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabelStatus.setBackground(new java.awt.Color(204, 0, 153));
        jLabelStatus.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        jLabelStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelStatus.setText("STATUS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jLabelStatus, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabelStartDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/reportquery/images/appointment.gif"))); // NOI18N
        jLabelStartDate.setText("StartDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jLabelStartDate, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(dateComboBoxStart, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(dateComboBoxFinish, gridBagConstraints);

        jLabelFinishDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelFinishDate.setText("FinishDate");
        jLabelFinishDate.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabelFinishDate, gridBagConstraints);

        jButtonRefresh.setText("Query");
        jButtonRefresh.setMaximumSize(new java.awt.Dimension(65, 24));
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButtonRefresh, gridBagConstraints);

        timeTextFieldOut.setMinimumSize(new java.awt.Dimension(45, 20));
        timeTextFieldOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextFieldOutActionPerformed(evt);
            }
        });
        timeTextFieldOut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeTextFieldOutFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(timeTextFieldOut, gridBagConstraints);

        timeTextFieldIn.setMinimumSize(new java.awt.Dimension(45, 20));
        timeTextFieldIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextFieldInActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(timeTextFieldIn, gridBagConstraints);

        jCheckBoxDBBackup.setText("ต้องการดึงรายงานจากฐานสำรอง");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jCheckBoxDBBackup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/reportquery/images/assign_permission.gif"))); // NOI18N
        jLabelReport.setText("ReportType");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabelReport, gridBagConstraints);

        jComboBoxDoctor.setDoubleBuffered(true);
        jComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDoctorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 5);
        jPanel1.add(jComboBoxDoctor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel7.add(jPanel1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabelType.setText("SaveType");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel4.add(jLabelType, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel4.add(jComboBoxType, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.setMaximumSize(new java.awt.Dimension(65, 24));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel4.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 0, 11);
        add(jPanel7, gridBagConstraints);

        jPanelShowReport.setBorder(javax.swing.BorderFactory.createTitledBorder("Report"));
        jPanelShowReport.setLayout(new java.awt.GridBagLayout());

        jTableShowQuery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableShowQuery);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowReport.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jPanelShowReport, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDoctorActionPerformed
//        this.checkQueryReport();
    }//GEN-LAST:event_jComboBoxDoctorActionPerformed

    private void timeTextFieldInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextFieldInActionPerformed
        String time = timeTextFieldIn.getText();
    }//GEN-LAST:event_timeTextFieldInActionPerformed

    private void timeTextFieldOutFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeTextFieldOutFocusLost
        timeTextFieldOutActionPerformed(null);
    }//GEN-LAST:event_timeTextFieldOutFocusLost

    private void timeTextFieldOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextFieldOutActionPerformed
        
    }//GEN-LAST:event_timeTextFieldOutActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        showSaveFile();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        showDataQuery();
    }//GEN-LAST:event_jButtonRefreshActionPerformed
    public void showSaveFile()
    {
        setPathFileToSave();
        setDataForSaveReport();
    }
    
    private void setDataForSaveReport()
    {
        this.theManager.theManageControl.theExportDataControl.startExportByVector(
                vDataQuery, headColumn,null, select_path, fileType, fileName);
      
    }
    
    private void setFileType(String fileType)
    {
        this.fileType = fileType;
    }
    
    public boolean setPathFileToSave()
    {   
        boolean isSetPathFileDone = false;
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(oldPath));
        chooser.setDialogTitle("กรุณาเลือก path ไฟล์ที่ต้องการบันทึก" );
        chooser.setApproveButtonText("Save");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            System.out.println("getCurrentDirectory(): " +  chooser.getSelectedFile().getPath());
            
        //    this.fileName = chooser.getSelectedFile().getName().toString();
            
        //    System.out.println("Filename " + fileName);
            
            int index = jComboBoxType.getSelectedIndex();
            if(index == 0)
            {   //fileName = fileName + Constant.TXT_FILE;
                setFileType(Constant.TXT_FILE);
            }
            else if(index == 1)
            {
                //fileName = fileName + Constant.XLS_FILE;
                setFileType(Constant.CSV_FILE);
            }
//            else if(index == 2)
//            {   //fileName = fileName + Constant.DBF_FILE;
//                setFileType(Constant.DBF_FILE);
//            }
            else if(index == 2)
            {
                //fileName = fileName + Constant.XLS_FILE;
                setFileType(Constant.XLS_FILE);
            }
            else if(index == 3)
            {
                //fileName = fileName + Constant.DBF_FILE;
                setFileType(Constant.DBF_FILE);
            }
            oldPath = chooser.getSelectedFile().getPath();
            select_path =  chooser.getSelectedFile().getPath()+"/";
            isSetPathFileDone = true;
        }
        else
        {
            isSetPathFileDone = false;
        }
        return isSetPathFileDone;
    }
    
    
    /**ใช้ในการแสดงรูปแบบของการ Save เป็นไฟล์ ชนิดอะไร
     * และ ให้ Default อะไรเป็น อันดับแรก
     */
    private void initReportType(){
        
        for(int j=0;j<Constant.REPORT_TYPE.length;j++){
            jComboBoxType.addItem(Constant.REPORT_TYPE[j]);
        }
        
        jComboBoxType.setSelectedItem(Constant.REPORT_TYPE[1]);
    }
    
    /**ใช้ในquery ข้อมูลจาก paramiter ที่รับเข้ามา เป็นวันที่ เริ่มต้นและสิ้นสุด และทำ
     * การแสดงผลข้อมูลจากการ Query*/
    public void showDataQuery()
    {
            checkQueryReport();
            String[] col = {""};
            setTable(col,null);
            /**แบบไม่ใช้วันที่*/
            
            if(!objUtil.StringToBoolean(theSQLTemplate.sql_template_is_query_by_date))
            {   
                this.theManager.theManageControl.theQueryControl.queryData(theSQLTemplate
                        , null
                        ,null
                        ,jCheckBoxDBBackup.isSelected()
                        ,theUS);
                this.theManager.theManageControl.theQueryControl.start();
            }
            else
            {
                System.out.println("Query by Date");
                this.theManager.theManageControl.theQueryControl.queryData(theSQLTemplate
                        , dateComboBoxStart.getText()+","+timeTextFieldIn.getText()
                        ,dateComboBoxFinish.getText()+","+timeTextFieldOut.getText()
                        ,jCheckBoxDBBackup.isSelected()
                        ,theUS);
                this.theManager.theManageControl.theQueryControl.start();
            }
    }
    
    /**ใช้ในการตรวจสอบ ว่า รายงานนั้นต้องการค้นหาด้วย วันที่หรือไม่*/
    public void checkQueryReport()
    {   //รับค่าข้อมูลรหัสจาก combobox ที่เลือก
        theSQLTemplate = theQC.readQuery(jComboBoxDoctor.getText());
        if(objUtil.StringToBoolean(theSQLTemplate.sql_template_is_query_by_date))
            //ให้แสดง GUI ของการค้นหาวันที่
            setShowGUIQueryByDate(true);
        else   // ไม่แสดง GUI ของการค้นหาวันที่
            setShowGUIQueryByDate(false);
        
        fileName = theSQLTemplate.sql_template_description;
        jPanelShowReport.setBorder(
                new javax.swing.border.TitledBorder(Language.getTextBundle("Report",language)
                    + ":" + theSQLTemplate.sql_template_description));
    }
    
    /**ใช้ในการกำหนดให้ แสดง หรือไม่แสดง ของ panel ค้นหาวันที่
     *@param show เป็น boolean true แสดง false ไม่แสดง
     */
    private void setShowGUIQueryByDate(boolean show)
    {
        /*dateComboBoxStart.setVisible(show);
        dateComboBoxFinish.setVisible(show);
        jLabelStartDate.setVisible(show);
        jLabelFinishDate.setVisible(show);*/
        
        dateComboBoxStart.setEnabled(show);
        dateComboBoxFinish.setEnabled(show);
        jLabelStartDate.setEnabled(show);
        jLabelFinishDate.setEnabled(show);
    }
   
    
    
    /**ใช้ในการ จัดการส่งค่ากลับมาเป็น รหัส เมื่อเลือก combobox
     *@param combobox เป็น ComboBox ที่ต้องการ
     *@param String เป็น รหัส 
     */
    private String getCodeCombobox(javax.swing.JComboBox combobox)
    {
        return ComboboxModel.getCodeComboBox(combobox);
    }
    
    /**ใช้ในการจัดการ Init ข้อมูลของ ComboBox ให้มีค่าที่ต้องการ
     *@param combobox เป็น JComboBox
     *@param vc เป็น Vector ของ Object ComboFix
     */
    private void setInitCombox(javax.swing.JComboBox combobox,Vector vc)
    {
        combobox.removeAllItems();
        ComboboxModel.initComboBox(combobox, vc);
    }
    
   
    /**ใช้ในการแสดงข้อมูลลงตาราง โดยระบุ ชื่อ column และ ข้อมูล
     * @param columnname เป็น array ของ String ที่ระบุชื่อ column
     * @param เป็น vc ของ Vector ที่จะแสดงบน ตาราง
     */
    public void setTable(String[] columnname ,Vector vc)
    {
        String[] col = columnname;
  
        setEnableSaveFile(false);
        
        int countrows = 0;
        if(vc != null)
        {   theTableModelGUI= new TableModelGUI(col,vc.size());
            if(vc.size() > 0)
            {  setEnableSaveFile(true);
                //วนลูป ต่อ 1 แถว
                for(int i=0 ;i<vc.size(); i++)
               {    //วนลูปตของ column
                   String[] rowdata = (String[])vc.get(i);
                   
                   for(int j = 0 ; j < rowdata.length ;j++)
                   {
                        theTableModelGUI.setValueAt(rowdata[j],i,j);
                        
                   }
                   theTableModelGUI.setEditingCol(rowdata.length+1);
                   rowdata = null;
                   countrows = countrows + 1;                  
                //    tm.setValueAt(((OrderItem)this.theOrderControl.listOrderItemByItem(p.getObjectId(),this.vn)).refer_out,i,2);
                }
                
            }
            
        }
        else
        {   theTableModelGUI= new TableModelGUI(col,0);
            
        }
        setStatus(countrows + " rows" );
       
        
            this.jTableShowQuery.setModel(theTableModelGUI);
    }
    
    
    
    
    /**ใช้ในการแสดง Dialog Setup SQL Template
     */
    public void showDialogPanelSetupSQLTemplate()
    {
        DialogShowPanelSetupSQLTemplate dsp = new DialogShowPanelSetupSQLTemplate(theUS.getJFrame(),true,theManager);
        dsp.setShow();
    }
    
    public void showPanelSetupSQLTemplate()
    {
        theManager.theManageControl.theGUIControl.callShowSetupSQLTemplate();
    }

    public void notifyCallShowSetupSQLTemplate() {
    }


    public void setLanguage() {
        
        jLabelReport.setText(Language.getTextBundle(jLabelReport.getText(),language));
        jLabelStartDate.setText(Language.getTextBundle(jLabelStartDate.getText(),language));
        jLabelType.setText(Language.getTextBundle(jLabelType.getText(),language));
        jLabelFinishDate.setText(Language.getTextBundle(jLabelFinishDate.getText(),language));
        
        jButtonSave.setText(Language.getTextBundle(jButtonSave.getText(),language));
        jButtonRefresh.setText(Language.getTextBundle(jButtonRefresh.getText(),language));
        headColomnDefault = new String[1];
        //Unknown
        headColomnDefault[0] = Language.getTextBundle("Unknown",language);
    }
    
    /**ใช้ในการกำหนดให้ปุ่ม save ไฟล์ และ combobox 
     *  @return enabled เป็น true ไม่ให้ทำงาน false ให้ทำงาน
     *
     */
    private void setEnableSaveFile(boolean enabled)
    {
        this.jComboBoxType.setEnabled(enabled);
        this.jButtonSave.setEnabled(enabled);
    }
    public void notifyQueryDataDate(String[] columnname, Vector vString, int exception, String exceptions) {
        this.vDataQuery = vString;
        this.headColumn =columnname;
        setTable(columnname, vString);
        theDialogShowStatus.setVisible(false);
    }

    public void notifyQueryDataNoDate(java.lang.String[] columnname, java.util.Vector vString, java.lang.String exceptions) {
        if(columnname == null && vString == null)
        {
            setStatus(exceptions);
        }
        else
        {   this.vDataQuery = vString;
            this.headColumn =columnname;
            setTable(columnname, vString);
        }
        theDialogShowStatus.setVisible(false);
    }
    /**ใช้ในการกำหนดให้ สถานะปรากฏข้อความว่าอะไรตามข้อมูลที่รับเข้ามา
     *  @param status เป็น String คือข้อความที่จะให้แสดงบน status
     */
    private void setStatus(String message)
    {
        this.jLabelStatus.setText("Result: " + message  );
        this.jLabelStatus.setToolTipText(message);
    }

    public void onShowStatus(String str, Color color) {
        onShowStatus(str,color,false);
    }

    public void onShowStatus(String str, Color color, boolean isFinish) {
        if(theDialogShowStatus == null)
        {
            theDialogShowStatus = new DialogShowStatus(theUS.getJFrame(),false, this.theManager);
            
            
        }
        theDialogShowStatus.closeDialog();
        theDialogShowStatus.showDialog(str,isFinish);
    }

    public void onShowPicture(String pic, boolean isVisible) {
        
    }

    public void notifyRefreshGUI() {
    }
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxFinish;
    private com.hospital_os.utility.DateComboBox dateComboBoxStart;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxDBBackup;
    private com.hosv3.gui.component.HosComboBox jComboBoxDoctor;
    private javax.swing.JComboBox jComboBoxType;
    private javax.swing.JLabel jLabelFinishDate;
    private javax.swing.JLabel jLabelReport;
    private javax.swing.JLabel jLabelStartDate;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelShowReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableShowQuery;
    private com.hospital_os.utility.TimeTextField timeTextFieldIn;
    private com.hospital_os.utility.TimeTextField timeTextFieldOut;
    // End of variables declaration//GEN-END:variables
    

    
    
   
}
