
/*
 * DialogAdmit.java
 *
 * Created on 8 พฤศจิกายน 2546, 14:14 น.
 */
package com.pcu.gui.dialog;

import com.pcu.utility.PanelObj;
import java.util.*;
import javax.swing.*;

import com.hosv3.control.*;
import com.hosv3.utility.connection.*;
import com.hosv3.utility.*;
import com.hosv3.object.*;

import com.hospital_os.object.*;
import com.hosv3.utility.Constant;
import com.hospital_os.object.specialQuery.*;
import com.hospital_os.utility.TaBleModel;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.CellRendererHos;
import com.pcu.utility.GutilPCU;
import java.awt.event.KeyEvent;

/**
 *
 * @author  tong
 */
public class DialogChronic1 extends javax.swing.JPanel implements PanelObj {

    public static final long serialVersionUID = 0;
    HosObject theHO;
    LookupControl theLookupControl;
    VisitControl theVisitControl;
    DiagnosisControl theDiagnosisControl;
    PatientControl thePatientControl;
    Chronic theChronic;
    Vector vChronic;
    Vector vListChronic;
    String[] col_ListChronic = {"HN","VN", "ICD", "วันที่เริ่มป่วย"};
    String[] col_ListChronicReport = {"HN", "Fname", "Lname", "ICD_Code", "SickDate", "Status", "ADDRESS"};
    CellRendererHos hnRender = new CellRendererHos(CellRendererHos.HN);
    CellRendererHos vnRender = new CellRendererHos(CellRendererHos.VN);
    private UpdateStatus theUS;
    private PrintControl thePrintControl;

    /** Creates new form DialogAdmit */
    public DialogChronic1(HosControl hc, UpdateStatus us) {
        theUS = us;
        theHO = hc.theHO;
        theLookupControl = hc.theLookupControl;
        theVisitControl = hc.theVisitControl;
        theDiagnosisControl = hc.theDiagnosisControl;
        thePatientControl = hc.thePatientControl;
        thePrintControl = hc.thePrintControl;
        hnRender = new CellRendererHos(CellRendererHos.HN, theLookupControl.getSequenceDataHN().pattern);
        vnRender = new CellRendererHos(CellRendererHos.VN, theLookupControl.getSequenceDataVN().pattern);
        initComponents();
        this.jTableListChronic.setGuiMode(true);
        this.jTableListChronic1.setGuiMode(true);
        setLanguage("");
        ComboboxModel.initComboBox(jComboBoxSearchStatusChronic, theLookupControl.listTypeDish());
        ComboboxModel.initComboBox(jComboBoxTypeDish, theLookupControl.listTypeDish());
        dateComboBoxDateDish.setEditable(true);
        dateComboBoxSickDate.setEditable(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListChronic1 = new com.hosv3.gui.component.HJTableSort();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabelHn = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dateComboBoxSickDate = new com.hospital_os.utility.DateComboBox();
        jTextFieldCode = new javax.swing.JTextField();
        jLabelIcdCode = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabelPatientStatus = new javax.swing.JLabel();
        jLabelCaseInfection = new javax.swing.JLabel();
        jLabelDateDish = new javax.swing.JLabel();
        jComboBoxTypeDish = new javax.swing.JComboBox();
        dateComboBoxDateDish = new com.hospital_os.utility.DateComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDateUpdate = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDetail = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButtonDel = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jComboBoxSearchStatusChronic = new javax.swing.JComboBox();
        jCheckBoxSearch = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        dateComboBoxSearchStart = new com.hospital_os.utility.DateComboBox();
        dateComboBoxSearchEnd = new com.hospital_os.utility.DateComboBox();
        jButtonSearchListChronic = new javax.swing.JButton();
        jButtonPrintListChronic = new javax.swing.JButton();
        jLabelDateSearchChronic = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonPreviewPrint = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPaneShowListChronic = new javax.swing.JScrollPane();
        jTableListChronic = new com.hosv3.gui.component.HJTableSort();

        setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(570, 300));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(570, 300));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(570, 300));

        jPanel1.setMaximumSize(new java.awt.Dimension(570, 300));
        jPanel1.setMinimumSize(new java.awt.Dimension(570, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(570, 300));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(null);
        jPanel4.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel4.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setRequestFocusEnabled(false);
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel15.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jPanel15, gridBagConstraints);

        jLabel5.setSelected(true);
        jLabel5.setText("วันที่รับบริการปัจจุบัน");
        jLabel5.setToolTipText("วันที่รับบริการ");
        jLabel5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabel5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(jPanel5, gridBagConstraints);

        jPanel6.setMaximumSize(new java.awt.Dimension(270, 200));
        jPanel6.setMinimumSize(new java.awt.Dimension(270, 200));
        jPanel6.setPreferredSize(new java.awt.Dimension(270, 200));
        jPanel6.setRequestFocusEnabled(false);
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMaximumSize(new java.awt.Dimension(300, 400));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 400));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 400));

        jTableListChronic1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableListChronic1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableListChronic1MouseReleased(evt);
            }
        });
        jTableListChronic1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableListChronic1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListChronic1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Diag_Chronic_Detail"));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("HN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel9.add(jLabelHn, gridBagConstraints);

        jLabel7.setText("SickDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel7, gridBagConstraints);

        jLabel8.setText("CodeIcd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(dateComboBoxSickDate, gridBagConstraints);

        jTextFieldCode.setColumns(5);
        jTextFieldCode.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCodeActionPerformed(evt);
            }
        });
        jTextFieldCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jTextFieldCode, gridBagConstraints);

        jLabelIcdCode.setForeground(new java.awt.Color(7, 6, 251));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        jPanel9.add(jLabelIcdCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jPanel9, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelPatientStatus.setText("TypeDish");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelPatientStatus, gridBagConstraints);

        jLabelCaseInfection.setText("DetailChronic");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelCaseInfection, gridBagConstraints);

        jLabelDateDish.setText("DateDish");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelDateDish, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jComboBoxTypeDish, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(dateComboBoxDateDish, gridBagConstraints);

        jLabel4.setText("DateUpdate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jTextFieldDateUpdate.setMinimumSize(new java.awt.Dimension(11, 24));
        jTextFieldDateUpdate.setPreferredSize(new java.awt.Dimension(11, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jTextFieldDateUpdate, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(62, 62));

        jTextAreaDetail.setLineWrap(true);
        jTextAreaDetail.setWrapStyleWord(true);
        jTextAreaDetail.setMinimumSize(new java.awt.Dimension(60, 60));
        jTextAreaDetail.setPreferredSize(new java.awt.Dimension(200, 200));
        jScrollPane2.setViewportView(jTextAreaDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jPanel3, gridBagConstraints);

        jPanel2.setMaximumSize(new java.awt.Dimension(300, 30));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 30));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 30));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.setMaximumSize(new java.awt.Dimension(72, 26));
        jButtonSave.setMinimumSize(new java.awt.Dimension(72, 26));
        jButtonSave.setPreferredSize(new java.awt.Dimension(72, 26));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButtonSave, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDel.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });
        jPanel8.add(jButtonDel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel8, gridBagConstraints);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAdd.setFocusTraversalPolicyProvider(true);
        jButtonAdd.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jButtonAdd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel1.add(jPanel7, gridBagConstraints);

        jTabbedPane1.addTab("บันทึกข้อมูล", jPanel1);

        jPanel10.setMaximumSize(new java.awt.Dimension(570, 300));
        jPanel10.setMinimumSize(new java.awt.Dimension(570, 300));
        jPanel10.setPreferredSize(new java.awt.Dimension(570, 300));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jComboBoxSearchStatusChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSearchStatusChronicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jComboBoxSearchStatusChronic, gridBagConstraints);

        jCheckBoxSearch.setSelected(true);
        jCheckBoxSearch.setText("TreatmentStatus");
        jCheckBoxSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel14.add(jCheckBoxSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel11.add(jPanel14, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(dateComboBoxSearchStart, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(dateComboBoxSearchEnd, gridBagConstraints);

        jButtonSearchListChronic.setText("Search");
        jButtonSearchListChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchListChronicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonSearchListChronic, gridBagConstraints);

        jButtonPrintListChronic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/print24.gif"))); // NOI18N
        jButtonPrintListChronic.setToolTipText("Print");
        jButtonPrintListChronic.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonPrintListChronic.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonPrintListChronic.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonPrintListChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintListChronicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonPrintListChronic, gridBagConstraints);

        jLabelDateSearchChronic.setText("DateStart");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jLabelDateSearchChronic, gridBagConstraints);

        jLabel2.setText("DateEnd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jLabel2, gridBagConstraints);

        jButtonPreviewPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/preview24.gif"))); // NOI18N
        jButtonPreviewPrint.setToolTipText("PreviewPrint");
        jButtonPreviewPrint.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonPreviewPrint.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonPreviewPrint.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonPreviewPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviewPrintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonPreviewPrint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel11.add(jPanel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel10.add(jPanel11, gridBagConstraints);

        jPanel12.setMaximumSize(new java.awt.Dimension(250, 205));
        jPanel12.setMinimumSize(new java.awt.Dimension(250, 205));
        jPanel12.setPreferredSize(new java.awt.Dimension(250, 205));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jScrollPaneShowListChronic.setPreferredSize(new java.awt.Dimension(300, 404));

        jTableListChronic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneShowListChronic.setViewportView(jTableListChronic);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jScrollPaneShowListChronic, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel10.add(jPanel12, gridBagConstraints);

        jTabbedPane1.addTab("ค้นหารายชื่อ", jPanel10);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jTabbedPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSearchActionPerformed
        this.jComboBoxSearchStatusChronic.setEnabled(jCheckBoxSearch.isSelected());
    }//GEN-LAST:event_jCheckBoxSearchActionPerformed

    private void jLabel5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabel5ActionPerformed
        refreshList();
    }//GEN-LAST:event_jLabel5ActionPerformed

    private void jButtonPreviewPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviewPrintActionPerformed
        thePrintControl.printChronicList(dateComboBoxSearchEnd.getText(), dateComboBoxSearchStart.getText(), jComboBoxSearchStatusChronic.getSelectedItem().toString(), vListChronic, 1);
    }//GEN-LAST:event_jButtonPreviewPrintActionPerformed

    private void jComboBoxSearchStatusChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSearchStatusChronicActionPerformed
        getDataForSearchListChronic();
    }//GEN-LAST:event_jComboBoxSearchStatusChronicActionPerformed

    private void jButtonPrintListChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintListChronicActionPerformed
        thePrintControl.printChronicList(dateComboBoxSearchEnd.getText()
                , dateComboBoxSearchStart.getText()
                , jComboBoxSearchStatusChronic.getSelectedItem().toString(), vListChronic, 0);
    }//GEN-LAST:event_jButtonPrintListChronicActionPerformed
    private void jButtonSearchListChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchListChronicActionPerformed
        // นำข้อมูลจากที่ต้องการค้นหาไปค้นหาในฐานข้อมูล จากนั้นนำมาแสดงในตาราง
        getDataForSearchListChronic();
    }//GEN-LAST:event_jButtonSearchListChronicActionPerformed
    private void jTableListChronic1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListChronic1MouseReleased
        selectList();
    }//GEN-LAST:event_jTableListChronic1MouseReleased
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        boolean ret = theDiagnosisControl.deleteChronic(getChronic(), theUS);
        if (ret) {
            refreshList();
        }
    }//GEN-LAST:event_jButtonDelActionPerformed
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        int ret = theDiagnosisControl.saveChronic(getChronic(), theUS);
        if (ret > 0) {
            return;
        }
        GutilPCU.saveNotify(this, jTableListChronic1, 1, 2, theChronic.vn, theChronic.chronic_icd);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
    }//GEN-LAST:event_closeDialog

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        GutilPCU.addNew(jTableListChronic1, this, new Chronic());
}//GEN-LAST:event_jButtonAddActionPerformed

    private void jTextFieldCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCodeActionPerformed
        String search = Gutil.CheckReservedWords(jTextFieldCode.getText());
        search = search.toUpperCase();
        if (search.equals("")) {
//            theUS.setStatus("กรุณากรอกรหัสที่จะค้น", UpdateStatus.WARNING);
            this.jLabelIcdCode.setText("");
            return;
        }
        ICD10 icd10byCode = theDiagnosisControl.readIcd10ByCode(search);
        if (icd10byCode == null) {
            theUS.setStatus("ไม่พบข้อมูลที่ค้นหา กรุณาค้นหาใหม่อีกครั้ง", UpdateStatus.WARNING);
            return;
        }
        jTextFieldCode.setText(jTextFieldCode.getText().toUpperCase());
        this.jLabelIcdCode.setText(icd10byCode.description);
}//GEN-LAST:event_jTextFieldCodeActionPerformed

    private void jTextFieldCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodeFocusLost
}//GEN-LAST:event_jTextFieldCodeFocusLost

    private void jTableListChronic1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListChronic1KeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_UP||evt.getKeyCode()==KeyEvent.VK_DOWN)
            selectList();
    }//GEN-LAST:event_jTableListChronic1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //  new DialogAdmit(new javax.swing.JFrame(), true).setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxDateDish;
    private com.hospital_os.utility.DateComboBox dateComboBoxSearchEnd;
    private com.hospital_os.utility.DateComboBox dateComboBoxSearchStart;
    private com.hospital_os.utility.DateComboBox dateComboBoxSickDate;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonPreviewPrint;
    private javax.swing.JButton jButtonPrintListChronic;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearchListChronic;
    private javax.swing.JCheckBox jCheckBoxSearch;
    private javax.swing.JComboBox jComboBoxSearchStatusChronic;
    private javax.swing.JComboBox jComboBoxTypeDish;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCaseInfection;
    private javax.swing.JLabel jLabelDateDish;
    private javax.swing.JLabel jLabelDateSearchChronic;
    private javax.swing.JLabel jLabelHn;
    private javax.swing.JLabel jLabelIcdCode;
    private javax.swing.JLabel jLabelPatientStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneShowListChronic;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.hosv3.gui.component.HJTableSort jTableListChronic;
    private com.hosv3.gui.component.HJTableSort jTableListChronic1;
    private javax.swing.JTextArea jTextAreaDetail;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDateUpdate;
    // End of variables declaration//GEN-END:variables
    /*
     *  เพื่อทำการ ค้นหาและส่งค่าไปแดงรายการผู้ป่วยที่เป็น Chronic 
     *  input  : ดึงค่าจากที่เลือก
     *  output :  
     */

    private void getDataForSearchListChronic() {

        String codeStatusList = ComboboxModel.getCodeComboBox(jComboBoxSearchStatusChronic);
        if (!jComboBoxSearchStatusChronic.isEnabled()) {
            codeStatusList = "0";
        }
        String dateStartList = dateComboBoxSearchStart.getText();
        String dateEndList = dateComboBoxSearchEnd.getText();
        Vector vc = theDiagnosisControl.listChronicByStatusDate(dateStartList, dateEndList, codeStatusList);
        // ดึงค่าจัดเก็บใน Object ChronicReport
        setChronicReport(vc);
    }

    // ตำบล, อำเภอ, จังหวัด
    private String getAddress(String tambon, String amphur, String changwat) {
        String address = new String();
        Address add;
        if (!tambon.equalsIgnoreCase("")) {
            add = theLookupControl.readAddressById(tambon);
            if (add != null) {
                address = Constant.getTextBundle(" ต.") + add.description;
            }
            add = null;
        } else {
            address = "";
        }
        if (!amphur.equalsIgnoreCase("")) {
            add = theLookupControl.readAddressById(amphur);
            if (add != null) {
                address = address + Constant.getTextBundle(" อ.") + add.description;
            }
            add = null;
        } else {
            address = address + " ";
        }

        if (!changwat.equalsIgnoreCase("")) {
            add = theLookupControl.readAddressById(changwat);
            if (add != null) {
                address = address + Constant.getTextBundle(" จ.") + add.description;
            }
            add = null;
        } else {
            address = address + " ";
        }

        return address;
    }

    /*
     *  เพื่อทำการ เซ็ทค่าที่ได้จากการค้นหาลงในตาราง
     *  input  : Vector ที่ส่งเข้ามาเป็น Vector ของ Chronic
     *  output :  แสดงผลในตาราง
     */
    private void setChronicReport(Vector vc) {
        TaBleModel tm;
        vListChronic = vc;
        ChronicReport theChronicReport;
        if (vListChronic != null) {
            tm = new TaBleModel(col_ListChronicReport, vListChronic.size());
            for (int i = 0; i < vListChronic.size(); i++) {
                theChronicReport = (ChronicReport) vListChronic.get(i);
                tm.setValueAt(theChronicReport.hn, i, 0);
                tm.setValueAt(theChronicReport.fname, i, 1);

                tm.setValueAt(theChronicReport.lname, i, 2);

                tm.setValueAt(theChronicReport.icd10, i, 3);

                tm.setValueAt(theChronicReport.date_dx, i, 4);
                //tm.setValueAt(Gutil.getDateToString(Gutil.getDateFromText(this.theVisit.begin_visit_time.substring(0,10)),false),i, 5); 
                tm.setValueAt(theChronicReport.status, i, 5);

                tm.setValueAt(theChronicReport.patient_address, i, 6);

            }

        } else {
            tm = new TaBleModel(col_ListChronicReport, 0);
        }
        jTableListChronic.setModel(tm);
        jTableListChronic.getColumnModel().getColumn(0).setCellRenderer(hnRender);
    }


    /*
     * เพื่อทำการดึงค่าข้อมูลที่ได้จาก ฟอร์มลงใน object
     *inupt ข้อมูลจากฟอร์ม
     *output
     */
    public Chronic getChronic() {
        if (theChronic == null) {
            theChronic = new Chronic();
        }
        theChronic.date_dx = dateComboBoxSickDate.getText();
        theChronic.detail = jTextAreaDetail.getText();
        theChronic.type_dish = ComboboxModel.getCodeComboBox(jComboBoxTypeDish);
        theChronic.date_dish = dateComboBoxDateDish.getText();
        theChronic.chronic_icd = jTextFieldCode.getText();
        return theChronic;
    }
    /*
     * แสดงค่า object ในแบบฟอร์ม
     *intup : object Chronic
     */

    private void setChronic(Chronic ch) {
        theChronic = ch;
        if (theChronic == null) {
            theChronic = new Chronic();
        }
        jLabelHn.setText(theLookupControl.getRenderTextHN(theChronic.hn)
                + " " + theHO.thePatient.patient_name + " " + theHO.thePatient.patient_last_name);
        dateComboBoxSickDate.setText(DateUtil.convertFieldDate(theChronic.date_dx));
        this.jTextFieldCode.setText(theChronic.chronic_icd);
        this.jTextFieldCodeActionPerformed(null);
        Gutil.setGuiData(jComboBoxTypeDish, theChronic.type_dish);
        dateComboBoxDateDish.setText(DateUtil.convertFieldDate(theChronic.date_dish));
        jTextAreaDetail.setText(theChronic.detail);
        jTextFieldDateUpdate.setText(DateUtil.convertFieldDate(theChronic.date_update));
    }

    /*
     *แสดงข้อมูลการค้นหาข้อโรคเรื้อรัง โดยนำ vector มาแสดง
     *input  :vector vChronic 
     *output :
     */
    private void setChronicV(Vector vchronic) {
        vChronic = vchronic;
        TaBleModel tm;
        if (vchronic != null) {
            tm = new TaBleModel(col_ListChronic, vchronic.size());
            for (int i = 0; i < vchronic.size(); i++) {
                Chronic chronic = (Chronic) vchronic.get(i);
                tm.setValueAt(chronic.hn, i, 0);
                tm.setValueAt(chronic.vn, i, 1);
                tm.setValueAt(chronic.chronic_icd, i, 2);
                tm.setValueAt(DateUtil.convertFieldDate(chronic.date_dx), i, 3);
            }
        } else { 
            tm = new TaBleModel(col_ListChronic, 0);
        }
        jTableListChronic1.setModel(tm);
        jTableListChronic1.getColumnModel().getColumn(0).setCellRenderer(hnRender);
        jTableListChronic1.getColumnModel().getColumn(1).setCellRenderer(vnRender);

    }

    public void setLanguage(String msg) {
        GuiLang.setLanguage(jLabel5);
        GuiLang.setLanguage(jLabel7);
        GuiLang.setLanguage(jLabel8);
        GuiLang.setLanguage(jButtonSave);
        GuiLang.setLanguage(jLabelPatientStatus);
        GuiLang.setLanguage(jLabelDateDish);
        GuiLang.setLanguage(jLabelCaseInfection);
        GuiLang.setLanguage(jLabel4);
        GuiLang.setLanguage(jButtonSearchListChronic);
        GuiLang.setLanguage(jButtonPrintListChronic);
        GuiLang.setLanguage(jButtonPreviewPrint);
        GuiLang.setLanguage(this.jCheckBoxSearch);
        GuiLang.setLanguage(jLabel2);
        GuiLang.setLanguage(jLabel3);
        GuiLang.setLanguage(col_ListChronic);
        GuiLang.setLanguage(col_ListChronicReport);
        GuiLang.setTextBundle(jPanel4);
        GuiLang.setTextBundle(jPanel7);
        GuiLang.setLanguage(jTabbedPane1);
    }

    @Override
    public void setObject(Object obj) {
        this.setChronic((Chronic)obj);
    }

    @Override
    public Object getObject() {
        return getChronic();
    }

    @Override
    public void refreshList() {
        if(theHO.theVisit==null)
            return;
        String vid = theHO.theVisit.getObjectId();
        if (!jLabel5.isSelected()) {
            vid = null;
        }
        Vector v = theDiagnosisControl.listChronicByPtidVid(theHO.thePatient.getObjectId(),vid);
        setChronicV(v);
        setChronic(null);

    }

    @Override
    public void selectList() {
        int row = this.jTableListChronic1.getSelectedRow();
        int index = -1;
        String f1 = (String) jTableListChronic1.getValueAt(row, 1);
        String f2 = (String) jTableListChronic1.getValueAt(row, 2);
        for (int i = 0; i < vChronic.size(); i++) {
            Chronic sv = (Chronic) vChronic.get(i);
            if (sv.vn.equals(f1) && sv.chronic_icd.equals(f2)) {
                index = i;
            }
        }
        setObject(vChronic.get(index));
    }
}
