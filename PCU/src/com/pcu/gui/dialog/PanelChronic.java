
/*
 * DialogAdmit.java
 *
 * Created on 8 พฤศจิกายน 2546, 14:14 น.
 */
package com.pcu.gui.dialog;

import java.util.*;

import com.hosv3.control.*;
import com.hosv3.utility.connection.*;
import com.hosv3.subject.*;
import com.hosv3.utility.*;
import com.hosv3.object.*;

import com.hospital_os.object.*;
import com.hosv3.utility.Constant;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.CellRendererHos;

/**
 *
 * @author  tong
 */
public class PanelChronic extends javax.swing.JPanel {
	
	public static final long  serialVersionUID = 0;
    HosObject theHO;
    HosControl theHC;
    HosSubject theHS;
    public boolean actionCommand = false;
    LookupControl theLookupControl;
    VisitControl theVisitControl;
    DiagnosisControl theDiagnosisControl;
    PatientControl thePatientControl;
    Visit theVisit;
    Chronic theChronic;
    Vector vChronic;
    Patient thePatient;
    
    Vector vListChronic;
    int row=0;
    public static boolean closeDialog = false;
    String[] col_ListChronic = {"HN","ICD","วันที่เริ่มป่วย","วันที่แก้ไข"};
    String[] col_ListChronicReport = {"HN","Fname","Lname","ICD_Code","SickDate","Status","ADDRESS"};
    CellRendererHos hnRender = new CellRendererHos(CellRendererHos.HN);
    private UpdateStatus theUS;
    private DiagnosisControl theDC;
    /** Creates new form DialogAdmit */
    public PanelChronic(){
        initComponents();
    }
    public void setControl(HosControl hc,UpdateStatus us)
    {
    //   super(us.getJFrame(), modal);
        theHC = hc;
        theHO = theHC.theHO;
        theHS = theHC.theHS;
        theLookupControl = hc.theLookupControl;
        theVisitControl = hc.theVisitControl;
        theDiagnosisControl = hc.theDiagnosisControl;
        thePatientControl = hc.thePatientControl;
    hnRender = new CellRendererHos(CellRendererHos.HN,theLookupControl.getSequenceDataHN().pattern);

        setLanguage("");    
        ComboboxModel.initComboBox(jComboBoxTypeDish, theLookupControl.listTypeDish()); 
//        setDataAll();
        setEnable();
        dateComboBoxDateDish.setEditable(true);
        dateComboBoxSickDate.setEditable(true);
        jTextFieldDateUpdate.setEnabled(false);
    }
    
    private void setDataAll()
    {  
        dateComboBoxSickDate.setText("");
        jLabelHn.setText("");
        jLabelIcdCode.setText("");
        jTextAreaDetail.setText("");
        jTextFieldDateUpdate.setText("");
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabelHn = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelIcdCode = new javax.swing.JLabel();
        dateComboBoxSickDate = new com.hospital_os.utility.DateComboBox();
        jTextFieldCode = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabelPatientStatus = new javax.swing.JLabel();
        jLabelCaseInfection = new javax.swing.JLabel();
        jLabelDateDish = new javax.swing.JLabel();
        jComboBoxTypeDish = new javax.swing.JComboBox();
        dateComboBoxDateDish = new com.hospital_os.utility.DateComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDateUpdate = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDetail = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButtonDel = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Diag_Chronic_Detail"));
        jPanel7.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel7.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel7.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel7.setRequestFocusEnabled(false);
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("HN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel9.add(jLabelHn, gridBagConstraints);

        jLabel7.setText("SickDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel7, gridBagConstraints);

        jLabel8.setText("CodeIcd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel9.add(jLabelIcdCode, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(dateComboBoxSickDate, gridBagConstraints);

        jTextFieldCode.setColumns(5);
        jTextFieldCode.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCodeActionPerformed(evt);
            }
        });
        jTextFieldCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel9.add(jTextFieldCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jPanel9, gridBagConstraints);

        jPanel3.setMaximumSize(new java.awt.Dimension(300, 150));
        jPanel3.setMinimumSize(new java.awt.Dimension(300, 150));
        jPanel3.setPreferredSize(new java.awt.Dimension(300, 205));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelPatientStatus.setText("TypeDish");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelPatientStatus, gridBagConstraints);

        jLabelCaseInfection.setText("DetailChronic");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelCaseInfection, gridBagConstraints);

        jLabelDateDish.setText("DateDish");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelDateDish, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jComboBoxTypeDish, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(dateComboBoxDateDish, gridBagConstraints);

        jLabel4.setText("DateUpdate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        jTextFieldDateUpdate.setMinimumSize(new java.awt.Dimension(11, 24));
        jTextFieldDateUpdate.setPreferredSize(new java.awt.Dimension(11, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jTextFieldDateUpdate, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(62, 62));

        jTextAreaDetail.setLineWrap(true);
        jTextAreaDetail.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jPanel3, gridBagConstraints);

        jPanel2.setMaximumSize(new java.awt.Dimension(300, 30));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 30));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 30));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButtonSave, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });
        jPanel8.add(jButtonDel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel7, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        //ลบไม่ได้หากต้องการลบต้องไปยกเลิกรายการ diagicd10 ที่โปรแกรมหลักเท่านั้น
        deleteChronic();
        
    }//GEN-LAST:event_jButtonDelActionPerformed
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
         
        
        saveChronic();

    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog

    }//GEN-LAST:event_closeDialog

    private void jTextFieldCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCodeActionPerformed
        String search = Gutil.CheckReservedWords(jTextFieldCode.getText());
        search = search.toUpperCase();
        if(search.equals("")){
            theUS.setStatus("กรุณากรอกรหัสที่จะค้น",UpdateStatus.WARNING);
            return;
        }
        ICD10 icd10byCode = theDC.readIcd10ByCode(search);
        if(icd10byCode==null){
            theUS.setStatus("ไม่พบข้อมูลที่ค้นหา กรุณาค้นหาใหม่อีกครั้ง",UpdateStatus.WARNING);
            return;
        }
        this.jLabelIcdCode.setText(icd10byCode.description);
}//GEN-LAST:event_jTextFieldCodeActionPerformed

    private void jTextFieldCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodeFocusLost

}//GEN-LAST:event_jTextFieldCodeFocusLost
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      //  new DialogAdmit(new javax.swing.JFrame(), true).setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxDateDish;
    private com.hospital_os.utility.DateComboBox dateComboBoxSickDate;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxTypeDish;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCaseInfection;
    private javax.swing.JLabel jLabelDateDish;
    private javax.swing.JLabel jLabelHn;
    private javax.swing.JLabel jLabelIcdCode;
    private javax.swing.JLabel jLabelPatientStatus;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaDetail;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDateUpdate;
    // End of variables declaration//GEN-END:variables

    // ตำบล, อำเภอ, จังหวัด
    private String getAddress(String tambon,String amphur,String changwat)
    {
        String address = new String();
        Address add;
        if(!tambon.equalsIgnoreCase(""))
        {               
            add = theHC.theLookupControl.readAddressById(tambon);
            if(add != null)
            {
                address = Constant.getTextBundle(" ต.") +add.description ;
            }            
            add = null;
        }
        else
        {   
            address = "";
        }
        if(!amphur.equalsIgnoreCase(""))
        {            
            add = theHC.theLookupControl.readAddressById(amphur);
            if(add != null)
            {
                address = address + Constant.getTextBundle(" อ.") + add.description;
            }            
            add = null;
        }
        else
        {   
            address = address +" ";
        }
        
        if(!changwat.equalsIgnoreCase(""))
        {               
            add = theHC.theLookupControl.readAddressById(changwat);
            if(add != null)
            {
                address = address + Constant.getTextBundle(" จ.") + add.description;
            }            
            add = null;
        }
        else
        {   
            address = address +" ";
        }
        
        return address;
    }

    
    /*
     *  เพื่อทำการ บังคับการทำงานของปุ่ม + และ -
     *  input  : Object theChronic
     *  output :  
     */
    private void setEnable()
    {
        if(theChronic==null)
        {
            jButtonDel.setEnabled(false);
            jButtonSave.setEnabled(false);
        }
        else
        {
            jButtonDel.setEnabled(true);
            jButtonSave.setEnabled(true);
    }
    }
    
     /*
      * เพื่อทำการดึงค่าข้อมูลที่ได้จาก ฟอร์มลงใน object 
      *inupt ข้อมูลจากฟอร์ม
      *output 
      */
       private Chronic getChronic()
    {
           if(theChronic==null)
               return theChronic;
        //เช็คว่ามี family_id หรือเปล่า
        //ถ้าไม่มีให้ทำการบันทึก family_id ให้เลย
        String date_time = theLookupControl.getTextCurrentDateTime();
        if(thePatient.family_id.equals(""))
        {
            String age = DateUtil.calculateAge(thePatient.patient_birthday,date_time);
            if(thePatientControl != null)
                thePatientControl.savePatient(thePatient,age);
        }
//        //เพิ่มการเก็บ family_id ในตาราง t_chronic
//        theChronic.family_id = thePatient.family_id;
        theChronic.date_dx = dateComboBoxSickDate.getText();
        theChronic.detail = jTextAreaDetail.getText();
        theChronic.type_dish = ComboboxModel.getCodeComboBox(jComboBoxTypeDish);
        theChronic.date_dish = dateComboBoxDateDish.getText();
//        theChronic.date_update = theHC.theLookupControl.getTextCurrentDate();
        return theChronic;
    }
    /*
     * แสดงค่า object ในแบบฟอร์ม
     *intup : object Chronic
     */   
    
    public void setChronic(Patient pt,Chronic theChronic)
    {
        jLabelHn.setText(theLookupControl.getRenderTextHN(theChronic.hn));
        if(pt!=null){
            pt.hn = theLookupControl.getRenderTextHN(theChronic.hn);
            jLabelHn.setText(theLookupControl.getRenderTextHN(theChronic.hn) + " " + pt.patient_name + " " + pt.patient_last_name);
        }
        //jLabelDateDX.setText(DateUtil.convertFieldDate(theChronic.date_dx));
        dateComboBoxSickDate.setText(DateUtil.convertFieldDate(theChronic.date_dx));
        jLabelIcdCode.setText(theChronic.chronic_icd);
        Gutil.setGuiData(jComboBoxTypeDish, theChronic.type_dish);
        dateComboBoxDateDish.setText(DateUtil.convertFieldDate(theChronic.date_dish));
        jTextAreaDetail.setText(theChronic.detail);
        jTextFieldDateUpdate.setText(DateUtil.convertFieldDate(theChronic.date_update));
        
       
    }
    private void saveChronic()
    {   
        if(getChronic()==null)
        {
            theUS.setStatus("กรุณาเลือกรายการก่อนการบันทึก",UpdateStatus.WARNING);
            return;
        }
        theDiagnosisControl.saveChronic(theChronic);
        setEnable();
    }
    
    /*
     * ให้ในการลบค่า Chronic
     * input : object Chronic*/
    private void deleteChronic()
    {
        if(!theDiagnosisControl.deleteChronic(theChronic,theUS))
            return;
        theChronic=null;
        setEnable();
        setDataAll();
    }
    
    public void setLanguage(String msg)
      {
	GuiLang.setLanguage(jLabel7);
	GuiLang.setLanguage(jLabel8);
	GuiLang.setLanguage(jButtonSave);
	GuiLang.setLanguage(jLabelPatientStatus);
	GuiLang.setLanguage(jLabelDateDish);
	GuiLang.setLanguage(jLabelCaseInfection);
        GuiLang.setLanguage(jLabel4);
        GuiLang.setLanguage(jLabel3); 
        GuiLang.setLanguage(col_ListChronic);
        GuiLang.setLanguage(col_ListChronicReport);
        GuiLang.setTextBundle(jPanel7);
      }
}
