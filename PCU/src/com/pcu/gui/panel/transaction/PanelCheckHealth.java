/*

 * PanelCheckHealth.java

 *

 * Created on 8 ¡’π“§¡ 2549, 15:11 π.

 */



package com.pcu.gui.panel.transaction;

import com.pcu.control.PCUControl;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import javax.swing.*;
import java.util.Vector;
import com.pcu.object.*;
import com.pcu.utility.TableModel;
import com.pcu.utility.DateComboBox;
import com.pcu.control.HosManage;
import com.pcu.utility.DateTime;
import com.pcu.utility.DateUtil;
import com.pcu.utility.GutilPCU;
import com.hospital_os.utility.*;
import com.hospital_os.object.*;
import com.hosv3.utility.connection.UpdateStatus;
/**

 *

 * @author  kingland

 */

public class PanelCheckHealth extends javax.swing.JPanel {

    HosManage  theHM;

    PCUControl theHC;

    Vector vCheckHealth;

    Vector vAgeSurvey;

    Vector vSaveCheckHealth;

    private Family theFamily;

    private Visit theVisit;

    private Patient thePatient;

    private Employee theEmployee;

    private JFrame theJFrame;

    private UpdateStatus theUS;

    boolean checkBegin = false;

    boolean checkSurvay = false;

    private PCUObject pcuobject;

    /** Creates new form PanelCheckHealth */

    public PanelCheckHealth()

    {

        initComponents();

    }

    public PanelCheckHealth(HosManage hm)

    {

        initComponents();

        setControl(hm,null);

    }

    public void setControl(HosManage hm,HosDialog hd)

    {

        theHM = hm;
        pcuobject = hm.thePO;
        theHC = theHM.theHosControl;

//        this.dateComboBoxEnd.setWarningFuture(false);

        setTableCheckHealth(null);

        setLanguage();

    }

    /** This method is called from within the constructor to

     * initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is

     * always regenerated by the Form Editor.

     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanel13 = new javax.swing.JPanel();
        jButtonReset = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        dateComboBoxStart = new com.pcu.utility.DateComboBox();
        jLabel2 = new javax.swing.JLabel();
        dateComboBoxEnd = new com.pcu.utility.DateComboBox();
        jButtonSearch = new javax.swing.JButton();
        jCheckBoxSearchDate = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAgeSurvey = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(200, 260));
        setPreferredSize(new java.awt.Dimension(200, 260));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jButtonReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonReset.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonReset.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonReset.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonReset.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 5, 0);
        jPanel13.add(jButtonReset, gridBagConstraints);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(17, 1, 5, 0);
        jPanel13.add(jButtonDelete, gridBagConstraints);

        jButtonSave.setFont(defaultFont1);
        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Save16.gif")));
        jButtonSave.setText("\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        jButtonSave.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSave.setMaximumSize(new java.awt.Dimension(100, 26));
        jButtonSave.setMinimumSize(new java.awt.Dimension(60, 26));
        jButtonSave.setPreferredSize(new java.awt.Dimension(80, 26));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 5, 0);
        jPanel13.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jPanel13, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        dateComboBoxStart.setPreferredSize(new java.awt.Dimension(85, 24));
        dateComboBoxStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxStartActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(dateComboBoxStart, gridBagConstraints);

        jLabel2.setFont(defaultFont1);
        jLabel2.setText("\u0e16\u0e36\u0e07");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        dateComboBoxEnd.setPreferredSize(new java.awt.Dimension(85, 24));
        dateComboBoxEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxEndActionPerformed(evt);
            }
        });
        dateComboBoxEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxEndFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(dateComboBoxEnd, gridBagConstraints);

        jButtonSearch.setFont(defaultFont1);
        jButtonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pcu/images/search.gif")));
        jButtonSearch.setText("\u0e04\u0e49\u0e19\u0e2b\u0e32");
        jButtonSearch.setToolTipText("");
        jButtonSearch.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jButtonSearch, gridBagConstraints);

        jCheckBoxSearchDate.setFont(defaultFont1);
        jCheckBoxSearchDate.setSelected(true);
        jCheckBoxSearchDate.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48");
        jCheckBoxSearchDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSearchDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxSearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSearchDateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jCheckBoxSearchDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 15);
        add(jPanel3, gridBagConstraints);

        jTableAgeSurvey.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableAgeSurvey);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 11, 11);
        add(jScrollPane1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxSearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSearchDateActionPerformed
        this.dateComboBoxEnd.setEnabled(this.jCheckBoxSearchDate.isSelected());
        this.dateComboBoxStart.setEnabled(this.jCheckBoxSearchDate.isSelected());
    }//GEN-LAST:event_jCheckBoxSearchDateActionPerformed



    private void dateComboBoxStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxStartActionPerformed

        searchCheckHealth();

    }//GEN-LAST:event_dateComboBoxStartActionPerformed



    private void dateComboBoxEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxEndFocusLost

        checkBegin = false;

    }//GEN-LAST:event_dateComboBoxEndFocusLost



    private void dateComboBoxEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxEndActionPerformed

        searchCheckHealth();

    }//GEN-LAST:event_dateComboBoxEndActionPerformed



    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed

        searchCheckHealth();

    }//GEN-LAST:event_jButtonSearchActionPerformed



    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        saveCheckHealth();

    }//GEN-LAST:event_jButtonSaveActionPerformed



    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed

        deleteCheckHealth();

    }//GEN-LAST:event_jButtonDeleteActionPerformed



    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed

        insertCheckHealth();

    }//GEN-LAST:event_jButtonResetActionPerformed

    /**

     * ‡´µ object ®“° HospitalOS

     * @param  

     * @return 

     * @author kingland

     * @date 25-02-2549

     */

    public void getObject(PCUObject pcuobject)

    {

        if(pcuobject != null)

        {

            theFamily = null;

            theEmployee = pcuobject.getEmployee();

            thePatient = pcuobject.getPatient();

            theVisit = pcuobject.getVisit();

            theFamily = pcuobject.getFamily();

        }

        setTableCheckHealth(null);

    }

    /**

     * µ√«® Õ∫«Ë“«—π∑’‡√‘Ë¡ªË«¬‡ªÁπ«—π„πÕπ“§µÀ√◊Õ‰¡Ë

     * @param  

     * @return 

     * @author kingland

     * @date 03-03-2549

     */ 

    private void checkDateBegin()

    {        

        if(!dateComboBoxEnd.getText().equals("") 

            && dateComboBoxEnd.getText().length()==10 

            && com.pcu.utility.DateUtil.countDay(dateComboBoxEnd.getText(),this.theHM.theHosControl.theConnectionInf) == -1 

            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxEnd.getText()),this.theHM.theHosControl.theConnectionInf)==false)  

        {            

             if(checkBegin == false)

             {

                 // ‰¡Ë “¡“√∂°√Õ°«—π∑’Ë‡ªÁπ«—π„πÕπ“§µ‰¥È

                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") ,UpdateStatus.WARNING);

                dateComboBoxEnd.setText("");                              

                checkSurvay = true;

             }



        }  

        if(checkBegin)

        {

            dateComboBoxEnd.setText("");    

        }

    }

    /**

     * ≈∫¢ÈÕ¡Ÿ≈

     * @param  

     * @return

     * @author kingland

     * @date 11-03-2549

     */

    private void deleteCheckHealth()

    {

        int select[] = jTableAgeSurvey.getSelectedRows();

        if(select.length == 0)

        {

            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveCheckHealth"), 2);

            return;

        }

        if(!theUS.confirmBox(GutilPCU.getTextBundle("DeleteCheckHealth"),UpdateStatus.WARNING))
            return;
        {

            vSaveCheckHealth  = new Vector();

            for(int i=select.length-1;i>=0;i--)

            {

                CheckHealth ch = (CheckHealth)this.vCheckHealth.remove(select[i]);

                ch.staff_cancle = theEmployee.getObjectId();

                ch.cancle_datetime = DateTime.getTextCurrentDateTime(theHC.theConnectionInf);

                ch.active = "0";

                vSaveCheckHealth.add(ch);

            }

        }

        setTableCheckHealth(vCheckHealth);

        theHC.theUncontagiousControl.deleteChecHealth(vSaveCheckHealth);

    }

    /**

     * ‡´µ JFrame

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    public void setJFrame(JFrame frame)

    {

        this.theJFrame = frame;

    }

    /**

     * ‡´µ ∂“π–

     * @param  

     * @return 

     * @author kingland

     * @date 23-03-2549

     */

    public void setUpdateStatus(UpdateStatus us)

    {

        theUS = us;

    }

    /**

     * ‡≈◊Õ° JFrame

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    public JFrame getJFrame()

    {

        return this.theJFrame;

    }

    /**

     * §ÈπÀ“¢ÈÕ¡Ÿ≈ 

     * @param  

     * @return Vector of CheckHealth

     * @author kingland

     * @date 11-03-2549

     */

    private void searchCheckHealth()
    {
        if(theFamily == null)
        {
            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveFamily"),2);
            return;
        }
        String date1 = dateComboBoxStart.getText();
        String date2 = dateComboBoxEnd.getText();
        if(!this.jCheckBoxSearchDate.isSelected())
        {
            date1 = null;
            date2 = null;
        }
        vCheckHealth = theHC.theUncontagiousControl.listCheckHealthByDate(theFamily.getObjectId(),date1,date2);
        Constant.println("searchCheckHealth_Test_______________________v.size" + vCheckHealth.size());
        setTableCheckHealth(this.vCheckHealth);
    }

    /**

     * π”¢ÈÕ¡Ÿ≈‡¢È“‰ª„π Object

     * @param  

     * @return 

     * @author kingland

     * @date 11-03-2549

     */

    private void updateGOCheckHealth()

    {
        int count = 0;
        vSaveCheckHealth = new Vector();   
        if(vCheckHealth != null)
            count = vCheckHealth.size();
        
        for(int i=0;i<count;i++)
        {
                CheckHealth ch = (CheckHealth)vCheckHealth.get(i);
                ch.visit_id = "";
                ch.patient_id = "";
                ch.result = (String)jTableAgeSurvey.getValueAt(i, 2);
                DateComboBox db = (DateComboBox)jTableAgeSurvey.getValueAt(i, 3);
                ch.check_date  = db.getText();     
                if(ch.getObjectId() == null || "".equals(ch.getObjectId()))
                {
                    ch.staff_record = theEmployee.getObjectId();
                    ch.record_datetime = DateTime.getTextCurrentDateTime(theHC.theConnectionInf);
                }
                else
                {
                    CheckHealth chBegin = theHC.theUncontagiousControl.readCheckHealthByPk(ch.getObjectId());  
                    if(chBegin != null &&
                            (!ch.result.equalsIgnoreCase(chBegin.result) ||
                            !ch.check_date.equalsIgnoreCase(chBegin.check_date)))
                    {
                        ch.staff_modify = theEmployee.getObjectId();
                        ch.modify_datetime = DateTime.getTextCurrentDateTime(theHC.theConnectionInf);
                    }
                }
                if(this.pcuobject.getVisit() != null)
                    ch.visit_id = pcuobject.getVisit().getObjectId();
                if(thePatient != null)
                    ch.patient_id = thePatient.getObjectId();
                vSaveCheckHealth.add(ch);
        }

    }

    /**

     * ∫—π∑÷°√“¬°“√ ”√«®µ“¡™Ë«ßÕ“¬ÿ

     * @param  

     * @return 

     * @author kingland

     * @date 11-03-2549

     */

    private void saveCheckHealth()

    {

        if(theFamily == null)
        {
            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveFamily"),2);
            return;
        }
        updateGOCheckHealth();
        theHM.theHosControl.theUncontagiousControl.setUpdateStatus(theUS);
        theHM.theHosControl.theUncontagiousControl.saveCheckHealth(this.vSaveCheckHealth);
    }

    /**

     * ‡§≈’¬√Ï GUI ÀπÈ“®Õ√—ß∑—ÈßÀ¡¥

     * @param  

     * @return 

     * @author kingland

     * @date 11-03-2549

     */

    public void clearGUICheckHealthAll()

    {

        setTableCheckHealth(null);

    }

    /**

     * ‡´µª√–™“°√

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    public void setFamily(Family family)

    {

        theFamily = family;

        thePatient = null;

        theVisit = null;        

        if(theFamily != null)

        {

            searchCheckHealth();

        }     

    }

    /**

     * ‡æ‘Ë¡¢ÈÕ¡Ÿ≈

     * @param  

     * @return 

     * @author kingland

     * @date 09-03-2549

     */

    private void insertCheckHealth()

    {

        if(theFamily == null)

        {

            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveFamily"), 2);

            return;

        }

        if(theFamily.patient_birthday == null || "".equals(theFamily.patient_birthday))

        {

            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveFamilyAge"), 2);

            return;

        }

        String age = DateUtil.calculateAge(theFamily.patient_birthday
                ,theHM.thePO.getCurrentDateTime());

        vAgeSurvey = theHC.theUncontagiousControl.listAgeSurveyByAge(age);

        vCheckHealth = new Vector();

        for(int i=0;i<vAgeSurvey.size();i++)

        {   

            AgeSurvey as = (AgeSurvey)vAgeSurvey.get(i);

            CheckHealth ch = new CheckHealth();

            ch.active = "1";

            ch.age_end = as.survey_end;

            ch.age_start = as.survey_start;

            ch.age_survey_id = as.getObjectId();

            ch.family_age = DateUtil.calculateAge(theFamily.patient_birthday
                ,theHM.thePO.getCurrentDateTime());

            ch.family_id = theFamily.getObjectId();

            ch.survey_id = as.survey_id;

            ch.is_lifetime = as.survey_is_lifetime;

            vCheckHealth.add(ch);

        }

        setTableCheckHealth(vCheckHealth);

    }

        

    /**

     *  √È“ßµ“√“ß ®“° Vector ¢Õß CheckHealth

     * @param  

     * @return 

     * @author kingland

     * @date 10-03-2549

     */

    private void setTableCheckHealth(Vector v)

    {

        if(v!=null)

        Constant.println("setTableCheckHealth_Test_______________________v.size" + v.size());

        String[] col ={GutilPCU.getTextBundle("CheckHealth_Col1")

                ,GutilPCU.getTextBundle("CheckHealth_Col2")

                ,GutilPCU.getTextBundle("CheckHealth_Col3")

                ,GutilPCU.getTextBundle("CheckHealth_Col4")};

//                ,GutilPCU.getTextBundle("CheckHealth_Col5")};

        TableModel tm ; 

        if(v == null || v.size() == 0)

        {

            tm = new TableModel(col, 0);

            jTableAgeSurvey.setModel(tm);

        }

        else

        {

            tm = new TableModel(col, v.size());

            tm.setEditingCol(2,3,4);

//            Vector vCombo = theHM.theHosInf.getLookupControl().listTypeDish();

            for(int i=0;i<v.size();i++)

            {

                CheckHealth ch = (CheckHealth)v.get(i);

                tm.setValueAt(String.valueOf(i+1), i, 0);

                AgeSurvey as = theHC.theUncontagiousControl.readAgeSurveyByPK(ch.age_survey_id);

                tm.setValueAt(as.survey_description, i, 1);

                tm.setValueAt(ch.result, i, 2);

                DateComboBox db = new DateComboBox();

//                db.setWarningFuture(true);

//                db.setConnection(theHM.theHosControl.theConnectionInf);

//                db.setParentComponent(this.getJFrame());

//                db.setTable(jTableAgeSurvey);                

                db.setEditable(true);

                if(ch.check_date != null && !"".equalsIgnoreCase(ch.check_date))

                {

                    db.setText(Gutil.convertFieldDate(ch.check_date));

                }

                tm.setValueAt(db, i, 3);

//                JCheckBox jc = new JCheckBox();                

//                jc.setSelected(true);

//                tm.setValueAt(jc, i, 4);

                jTableAgeSurvey.setModel(tm);

            }

        }

        setTableDetail();

    }

    /**

     * °”Àπ¥√“¬≈–‡Õ’¬¥¢Õßµ“√“ß

     * @param  

     * @return 

     * @author kingland

     * @date 10-03-2549

     */

    private void setTableDetail()

    {

        jTableAgeSurvey.setRowHeight(22);        

        jTableAgeSurvey.getColumnModel().getColumn(0).setPreferredWidth(40);

        jTableAgeSurvey.getColumnModel().getColumn(1).setPreferredWidth(200);

        jTableAgeSurvey.getColumnModel().getColumn(2).setPreferredWidth(200);

        jTableAgeSurvey.getColumnModel().getColumn(3).setPreferredWidth(120);

//        jTableAgeSurvey.getColumnModel().getColumn(4).setPreferredWidth(40);

        jTableAgeSurvey.getColumnModel().getColumn(3).setCellRenderer(new CellRendererComboBox());

        jTableAgeSurvey.getColumnModel().getColumn(3).setCellEditor(new ComBoBoxEditor(new DateComboBox()));

//        jTableAgeSurvey.getColumnModel().getColumn(4).setCellRenderer(new CellRendererCheckBox());

//        jTableAgeSurvey.getColumnModel().getColumn(4).setCellEditor(new CheckBoxEditor(new JCheckBox()));

    }

     /**

     * ‡´µ¿“…“

     * @param  

     * @return 

     * @author kingland

     * @date 10-03-2549

     */

    private void setLanguage()
    {
       // jLabel1.setText(GutilPCU.getTextBundle(jLabel1.getText()));

       GutilPCU.setLanguage(jCheckBoxSearchDate);
       GutilPCU.setGuiLang(jLabel2);
       // jLabel2.setText(Gut(jButtonSearch);ilPCU.getTextBundle(jLabel2.getText()));
       GutilPCU.setGuiLang(jButtonSearch);
       //jButtonSearch.setText(GutilPCU.getTextBundle(jButtonSearch.getText()));
       GutilPCU.setGuiLang(jButtonSave);
       //jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.pcu.utility.DateComboBox dateComboBoxEnd;
    private com.pcu.utility.DateComboBox dateComboBoxStart;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxSearchDate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAgeSurvey;
    // End of variables declaration//GEN-END:variables

    

}

