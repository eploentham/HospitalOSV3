/*

 * PanelChronic.java

 *

 * Created on 1 ¡’π“§¡ 2549, 14:59 π.

 */



package com.pcu.gui.panel.transaction;

import com.hospital_os.object.TypeDish;
import com.hospital_os.usecase.connection.CommonInf;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import javax.swing.*;
import java.util.*;
import com.pcu .object.*;
import com.pcu.utility.*;
import com.pcu.utility.DateTime;
import com.pcu.utility.DateUtil;
import com.pcu.control.HosManage;
import com.hospital_os.object.Employee;
import com.hospital_os.object.Chronic;
import com.hospital_os.object.ICD10;
import com.hospital_os.object.GroupIcd10;
import com.hospital_os.object.Office;
import com.hospital_os.object.Visit;
import com.hospital_os.object.Patient;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hosv3.control.LookupControl;
import com.hosv3.utility.connection.UpdateStatus;
/**

 *

 * @author  kingland

 */

public class PanelChronic extends javax.swing.JPanel {

    private JFrame theJFrame;

    HosManage theHM;

    boolean checkSurvay = false;

    boolean checkBegin = false;

    private AllComboBoxControl theAllComboBoxControl;

    private HosDialog theHosDialog;

    private Employee theEmployee;

    private Family theFamily;

    private Visit theVisit;

    private Patient thePatient;

    private Vector vChronic;

    private Chronic theChronic;

    private UpdateStatus theUS;

    private PCUObject pcuobject;
    private LookupControl theLC;

    /** Creates new form PanelChronic */

    public PanelChronic() {

        initComponents();

    }

    public PanelChronic(HosManage hm,HosDialog hd) {

        initComponents();

        

        setControl(hm,hd);

    }

    public void setControl(HosManage hm,HosDialog hd)

     {

        theHosDialog = hd;
        theHM = hm;
        pcuobject = hm.thePO;
        theLC = hm.theHC.theLookupControl;

        theAllComboBoxControl = hm.theHosControl.theAllComboBoxControl;        

        initCombobox();

        setLanguage();

        setTableChronic(null);

        

     }

    /** This method is called from within the constructor to

     * initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is

     * always regenerated by the Form Editor.

     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableChronic = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jButtonResetChronic = new javax.swing.JButton();
        jButtonDeleteChronic = new javax.swing.JButton();
        jButtonSaveChronic = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabelDateSurvey = new javax.swing.JLabel();
        dateComboBoxDateSurvey = new com.pcu.utility.DateComboBox();
        jLabelDateBegin = new javax.swing.JLabel();
        dateComboBoxDateBegin = new com.pcu.utility.DateComboBox();
        jLabelICD10 = new javax.swing.JLabel();
        jTextFieldICD10 = new javax.swing.JTextField();
        jButtonRefreshICD10 = new javax.swing.JButton();
        jLabelICD10Description = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabelStatusDish = new javax.swing.JLabel();
        jComboBoxStatusDish = new javax.swing.JComboBox();
        jLabelOffice = new javax.swing.JLabel();
        integerTextFieldHosTreat = new javax.swing.JTextField();
        jTextFieldHosTreat = new javax.swing.JTextField();
        jButtonHosTreat = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jLabelChronicDescription = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaChronicDescription = new javax.swing.JTextArea();
        jPanel20 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createTitledBorder("\u0e42\u0e23\u0e04\u0e40\u0e23\u0e37\u0e49\u0e2d\u0e23\u0e31\u0e07"));
        setPreferredSize(new java.awt.Dimension(200, 0));
        jTableChronic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableChronic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableChronicMouseReleased(evt);
            }
        });

        jScrollPane5.setViewportView(jTableChronic);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        add(jScrollPane5, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());

        jPanel13.setPreferredSize(new java.awt.Dimension(10, 30));
        jButtonResetChronic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonResetChronic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonResetChronic.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonResetChronic.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonResetChronic.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonResetChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetChronicActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel13.add(jButtonResetChronic, gridBagConstraints);

        jButtonDeleteChronic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDeleteChronic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDeleteChronic.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDeleteChronic.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDeleteChronic.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDeleteChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteChronicActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel13.add(jButtonDeleteChronic, gridBagConstraints);

        jButtonSaveChronic.setFont(defaultFont1);
        jButtonSaveChronic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Save16.gif")));
        jButtonSaveChronic.setText("\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        jButtonSaveChronic.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSaveChronic.setMaximumSize(new java.awt.Dimension(100, 26));
        jButtonSaveChronic.setMinimumSize(new java.awt.Dimension(60, 26));
        jButtonSaveChronic.setPreferredSize(new java.awt.Dimension(80, 26));
        jButtonSaveChronic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveChronicActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jButtonSaveChronic, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        add(jPanel13, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jPanel17.setLayout(new java.awt.GridBagLayout());

        jPanel17.setPreferredSize(new java.awt.Dimension(236, 30));
        jLabelDateSurvey.setFont(defaultFont1);
        jLabelDateSurvey.setText("\u0e27\u0e31\u0e19\u0e2d\u0e2d\u0e01\u0e15\u0e23\u0e27\u0e08");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel17.add(jLabelDateSurvey, gridBagConstraints);

        dateComboBoxDateSurvey.setEditable(true);
        dateComboBoxDateSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxDateSurveyActionPerformed(evt);
            }
        });
        dateComboBoxDateSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxDateSurveyFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        jPanel17.add(dateComboBoxDateSurvey, gridBagConstraints);

        jLabelDateBegin.setFont(defaultFont1);
        jLabelDateBegin.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e40\u0e23\u0e34\u0e48\u0e21\u0e1b\u0e48\u0e27\u0e22");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        jPanel17.add(jLabelDateBegin, gridBagConstraints);

        dateComboBoxDateBegin.setEditable(true);
        dateComboBoxDateBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxDateBeginActionPerformed(evt);
            }
        });
        dateComboBoxDateBegin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxDateBeginFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        jPanel17.add(dateComboBoxDateBegin, gridBagConstraints);

        jLabelICD10.setFont(defaultFont1);
        jLabelICD10.setText("\u0e23\u0e2b\u0e31\u0e2aICD10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel17.add(jLabelICD10, gridBagConstraints);

        jTextFieldICD10.setPreferredSize(new java.awt.Dimension(50, 21));
        jTextFieldICD10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldICD10ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel17.add(jTextFieldICD10, gridBagConstraints);

        jButtonRefreshICD10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pcu/images/search.gif")));
        jButtonRefreshICD10.setToolTipText("\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e23\u0e2b\u0e31\u0e2a ICD10");
        jButtonRefreshICD10.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonRefreshICD10.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonRefreshICD10.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonRefreshICD10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshICD10ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel17.add(jButtonRefreshICD10, gridBagConstraints);

        jLabelICD10Description.setFont(defaultFont1);
        jLabelICD10Description.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel17.add(jLabelICD10Description, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel16.add(jPanel17, gridBagConstraints);

        jPanel18.setLayout(new java.awt.GridBagLayout());

        jPanel18.setPreferredSize(new java.awt.Dimension(91, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel16.add(jPanel18, gridBagConstraints);

        jPanel19.setLayout(new java.awt.GridBagLayout());

        jPanel19.setPreferredSize(new java.awt.Dimension(60, 30));
        jLabelStatusDish.setFont(defaultFont1);
        jLabelStatusDish.setText("\u0e2a\u0e16\u0e32\u0e19\u0e30\u0e1c\u0e39\u0e49\u0e1b\u0e48\u0e27\u0e22\u0e2b\u0e25\u0e31\u0e07\u0e2a\u0e38\u0e14");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel19.add(jLabelStatusDish, gridBagConstraints);

        jComboBoxStatusDish.setPreferredSize(new java.awt.Dimension(250, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel19.add(jComboBoxStatusDish, gridBagConstraints);

        jLabelOffice.setFont(defaultFont1);
        jLabelOffice.setText("\u0e2a\u0e16\u0e32\u0e19\u0e1e\u0e22\u0e32\u0e1a\u0e32\u0e25\u0e17\u0e35\u0e48\u0e23\u0e31\u0e01\u0e29\u0e32");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 6, 0);
        jPanel19.add(jLabelOffice, gridBagConstraints);

        integerTextFieldHosTreat.setMaximumSize(new java.awt.Dimension(57, 21));
        integerTextFieldHosTreat.setMinimumSize(new java.awt.Dimension(45, 21));
        integerTextFieldHosTreat.setPreferredSize(new java.awt.Dimension(45, 21));
        integerTextFieldHosTreat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                integerTextFieldHosTreatFocusLost(evt);
            }
        });
        integerTextFieldHosTreat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                integerTextFieldHosTreatKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 6, 0);
        jPanel19.add(integerTextFieldHosTreat, gridBagConstraints);

        jTextFieldHosTreat.setEditable(false);
        jTextFieldHosTreat.setMinimumSize(new java.awt.Dimension(4, 21));
        jTextFieldHosTreat.setPreferredSize(new java.awt.Dimension(4, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 6, 27);
        jPanel19.add(jTextFieldHosTreat, gridBagConstraints);

        jButtonHosTreat.setText("...");
        jButtonHosTreat.setToolTipText("\u0e2a\u0e16\u0e32\u0e19\u0e1e\u0e22\u0e32\u0e1a\u0e32\u0e25\u0e2b\u0e25\u0e31\u0e01");
        jButtonHosTreat.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonHosTreat.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonHosTreat.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonHosTreat.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonHosTreat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHosTreatActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 6, 0);
        jPanel19.add(jButtonHosTreat, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel16.add(jPanel19, gridBagConstraints);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jPanel21.setPreferredSize(new java.awt.Dimension(10, 70));
        jLabelChronicDescription.setFont(defaultFont1);
        jLabelChronicDescription.setText("\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e42\u0e23\u0e04\u0e40\u0e23\u0e37\u0e49\u0e2d\u0e23\u0e31\u0e07");
        jLabelChronicDescription.setPreferredSize(new java.awt.Dimension(130, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel21.add(jLabelChronicDescription, gridBagConstraints);

        jScrollPane6.setViewportView(jTextAreaChronicDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel21.add(jScrollPane6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel16.add(jPanel21, gridBagConstraints);

        jPanel20.setLayout(new java.awt.BorderLayout());

        jPanel20.setPreferredSize(new java.awt.Dimension(10, 30));
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jPanel20.add(jPanel22, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel16.add(jPanel20, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
        add(jPanel16, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents



    private void jButtonHosTreatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHosTreatActionPerformed



        Office theOffice = new Office();

        if(theHosDialog.showDialogOffice(theHM, theOffice) == true) {

            integerTextFieldHosTreat.setText(theOffice.getObjectId());

            jTextFieldHosTreat.setText(theOffice.getName());

        }

    }//GEN-LAST:event_jButtonHosTreatActionPerformed



    private void dateComboBoxDateBeginFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxDateBeginFocusLost

        checkBegin = false;

    }//GEN-LAST:event_dateComboBoxDateBeginFocusLost



    private void dateComboBoxDateBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxDateBeginActionPerformed

        checkDateBegin();

    }//GEN-LAST:event_dateComboBoxDateBeginActionPerformed



    private void dateComboBoxDateSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxDateSurveyFocusLost

         checkSurvay = false;

         checkDateSurvay();

    }//GEN-LAST:event_dateComboBoxDateSurveyFocusLost



    private void dateComboBoxDateSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxDateSurveyActionPerformed

        checkDateSurvay();

        checkSurvay = false;

    }//GEN-LAST:event_dateComboBoxDateSurveyActionPerformed



    private void jButtonSaveChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveChronicActionPerformed

        saveChronic();

    }//GEN-LAST:event_jButtonSaveChronicActionPerformed



    private void jButtonDeleteChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteChronicActionPerformed

        deleteChronic();

    }//GEN-LAST:event_jButtonDeleteChronicActionPerformed



    private void jButtonResetChronicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetChronicActionPerformed

        insertChronic();

    }//GEN-LAST:event_jButtonResetChronicActionPerformed



    private void integerTextFieldHosTreatFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_integerTextFieldHosTreatFocusLost

        if(integerTextFieldHosTreat.getText().length()!=5)

        {

            integerTextFieldHosTreat.setText("");

            jTextFieldHosTreat.setText("");

        }

    }//GEN-LAST:event_integerTextFieldHosTreatFocusLost



    private void integerTextFieldHosTreatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_integerTextFieldHosTreatKeyReleased

        if(integerTextFieldHosTreat.getText().length()==5)

        {

            Office office = theLC.readHospitalByCode(integerTextFieldHosTreat.getText());

            if(office == null)   return;

            if(office.getObjectId()!=null)

            {

                jTextFieldHosTreat.setText(office.name);

            }

            else

            {

                integerTextFieldHosTreat.setText("");

                jTextFieldHosTreat.setText("");

            }

            integerTextFieldHosTreat.transferFocus();

        }

    }//GEN-LAST:event_integerTextFieldHosTreatKeyReleased



    private void jButtonRefreshICD10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshICD10ActionPerformed

        checkChronicICD10();

    }//GEN-LAST:event_jButtonRefreshICD10ActionPerformed



    private void jTextFieldICD10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldICD10ActionPerformed

        jButtonRefreshICD10ActionPerformed(null);

    }//GEN-LAST:event_jTextFieldICD10ActionPerformed



    private void jTableChronicMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableChronicMouseReleased

        int select = jTableChronic.getSelectedRow();

        Chronic chronic = (Chronic)this.vChronic.get(select);

        theChronic = chronic;

        selectChronic();

    }//GEN-LAST:event_jTableChronicMouseReleased

    /**

     * ‡´µ object ®“° HospitalOS

     * @param  

     * @return 

     * @author kingland

     * @date 25-02-2549

     */

    public void getObject(PCUObject pcuobject)

    {

        if(pcuobject != null)

        {

            theFamily = null;

            theEmployee = pcuobject.getEmployee();

            thePatient = pcuobject.getPatient();

            theVisit = pcuobject.getVisit();

            theFamily = pcuobject.getFamily();

        }

        setTableChronic(null);

    }

    /**

     * µ√«® Õ∫«Ë“«—π∑’‡√‘Ë¡ªË«¬‡ªÁπ«—π„πÕπ“§µÀ√◊Õ‰¡Ë

     * @param  

     * @return 

     * @author kingland

     * @date 03-03-2549

     */ 

    private void checkDateBegin()

    {        

        if(!dateComboBoxDateBegin.getText().equals("") 

            && dateComboBoxDateBegin.getText().length()==10 

            && com.pcu.utility.DateUtil.countDay(dateComboBoxDateBegin.getText(),this.theHM.theHosControl.theConnectionInf) == -1 

            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxDateBegin.getText()),this.theHM.theHosControl.theConnectionInf)==false)  

        {            

             if(checkBegin == false)

             {

                 // ‰¡Ë “¡“√∂°√Õ°«—π∑’Ë‡ªÁπ«—π„πÕπ“§µ‰¥È

                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") , UpdateStatus.WARNING);

                dateComboBoxDateBegin.setText("");                              

                checkSurvay = true;

             }



        }  

        if(checkBegin)

        {

            dateComboBoxDateBegin.setText("");    

        }

    }

    /**

     * µ√«® Õ∫«Ë“«—πÕÕ°µ√«®‡ªÁπ«—π„πÕπ“§µÀ√◊Õ‰¡Ë

     * @param  

     * @return 

     * @author kingland

     * @date 03-03-2549

     */ 

    private void checkDateSurvay()

    {        

        if(!dateComboBoxDateSurvey.getText().equals("") 

            && dateComboBoxDateSurvey.getText().length()==10 

            && com.pcu.utility.DateUtil.countDay(dateComboBoxDateSurvey.getText(),this.theHM.theHosControl.theConnectionInf) == -1 

            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxDateSurvey.getText()),this.theHM.theHosControl.theConnectionInf)==false)  

        {            

             if(checkSurvay == false)

             {

                 // ‰¡Ë “¡“√∂°√Õ°«—π∑’Ë‡ªÁπ«—π„πÕπ“§µ‰¥È

                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") , UpdateStatus.WARNING);

                dateComboBoxDateSurvey.setText("");                              

                checkSurvay = true;

             }



        }  

//        if(checkSurvay)

//        {

//            dateComboBoxDateSurvey.setText("");    

//        }

    }

    /**

     * ‡´µª√–™“°√

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    public void setFamily(Family family)

    {

        thePatient = null;

        theVisit = null;

        theFamily = family;

        theChronic = null;

        searchChronic();

        clearGUIChronic();

    }

    /**

     * ‡´µ¿“…“

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    private void setLanguage()

    {

        jLabelDateSurvey.setText(GutilPCU.getTextBundle("SurvayDate"));

        jLabelDateBegin.setText(GutilPCU.getTextBundle("BeginDate"));

        jLabelICD10.setText(GutilPCU.getTextBundle("ICD10"));

        jLabelStatusDish.setText(GutilPCU.getTextBundle("PatientStatusDish"));

        jLabelOffice.setText(GutilPCU.getTextBundle("HospitalTreatment"));

        jLabelChronicDescription.setText(GutilPCU.getTextBundle("ChronicDescription"));

        jButtonSaveChronic.setText(GutilPCU.getTextBundle("Save")); 

    }

    /**

     * ‡´µ¢ÈÕ¡Ÿ≈®“° GUI ‡¢È“‰ª„π Object

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private void getChronic()

    {

        if(theChronic == null)

        {

            theChronic = new Chronic();

        }

        theChronic.patient_id = "";

        theChronic.vn_id = "";

        theChronic.vn = "";

        theChronic.date_dish = "";

        theChronic.hn = "";

        theChronic.family_id = this.theFamily.getObjectId();

        theChronic.detail = jTextAreaChronicDescription.getText(); 

        theChronic.chronic_icd = jTextFieldICD10.getText();

        theChronic.site_treat = integerTextFieldHosTreat.getText();

        theChronic.survey_date = dateComboBoxDateSurvey.getText();

        theChronic.date_dx = dateComboBoxDateBegin.getText();

        CommonInf cf = (CommonInf)jComboBoxStatusDish.getSelectedItem();

        theChronic.type_dish = cf.getCode();

        theChronic.active = "1";

        if(theChronic.getObjectId() == null)

        {



            theChronic.date_update = DateTime.getTextCurrentDateTime(this.theHM.theHosControl.theConnectionInf);

            theChronic.staff_record = this.theEmployee.getObjectId();

        }

        else

        {

            Chronic cronicBegin = theHM.theHosControl.theUncontagiousControl.readChronicByPk(this.theChronic.getObjectId()); 

            if(!theChronic.survey_date.equals(cronicBegin.survey_date) ||

                    !theChronic.date_dx.equals(cronicBegin.date_dx) ||

                    !theChronic.chronic_icd.equals(cronicBegin.chronic_icd) ||

                    !theChronic.site_treat.equals(cronicBegin.site_treat) || 

                    !theChronic.detail.trim().equals(cronicBegin.detail.trim())||

                    !theChronic.type_dish.equals(cronicBegin.type_dish))

            {

                theChronic.staff_modify = theEmployee.getObjectId();

                theChronic.modify_datetime = DateTime.getTextCurrentDateTime(theHM.theHosControl.theConnectionInf);

            }

        }

        if(theChronic.staff_modify == null)

        {

            theChronic.staff_modify = "";

            theChronic.modify_datetime = "";

        }

        if(theChronic.staff_cancel == null)

        {

            theChronic.staff_cancel = "";

            theChronic.cancel_datetime = "";

        }

        if(thePatient != null)

        {

            theChronic.patient_id = thePatient.getObjectId();

            theChronic.hn = thePatient.hn;

        }

        if(this.pcuobject.getVisit() != null)

        {

            theChronic.vn_id = this.pcuobject.getVisit().getObjectId();

            theChronic.vn = this.pcuobject.getVisit().vn;

        }

        if(theChronic.patient_id.equals(""))

         {

//             if(!theFamily.patient_id.equals(""))

//             {

//                 theChronic.patient_id = theFamily.patient_id;

//                 theChronic.hn = theFamily.hn;

//             }

         }

    }

    /**

     * µ√«®µ√«®«Ë“¡’√“¬°“√‚√§‡√◊ÈÕ√—ß´È”°—πÀ√◊Õ‰¡Ë

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

   public boolean checkRepleateChronic()

   {

       boolean result = false;

        for(int j=0;vChronic != null && j<this.vChronic.size();j++)

       {

           Chronic cronicbefor = (Chronic)this.vChronic.get(j);

           if(cronicbefor != null 

                   && cronicbefor.chronic_icd != null                   

                   && cronicbefor.chronic_icd.equals(theChronic.chronic_icd))

           {

               result = true;

               theUS.setStatus(GutilPCU.getTextBundle("WarningChronicRepeate")+(j+1), UpdateStatus.WARNING);

               break ;

           }

       }

       

       return result; 

   }

   /**

     * µ√«® Õ∫ICD10 ¢Õß‚√§‡√◊ÈÕ√—ß

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private boolean checkChronicICD10()

    {

        boolean result = false;

        if(!jTextFieldICD10.getText().equals(""))

        {

            ICD10 icd10 = theHM.theHosInf.listIcd10ById(jTextFieldICD10.getText().trim().toUpperCase());

            if(icd10 == null)

            {

                result = false;

                theUS.setStatus("°√ÿ≥“°√Õ°√À—  ICD-10 ∑’Ë‡ªÁπ√À— ¡“µ√∞“π°“√≈ß√À— ‚√§", 2);

                jTextFieldICD10.setText("");

                jLabelICD10Description.setText("");

            }

            else

            {

                GroupIcd10 gicd10 = theHM.theHosInf.listGroupIcd10ByIcdCode(icd10.icd10_id);

                if(gicd10 != null && !gicd10.groupchronic.equals("") && !gicd10.groupchronic.equals("99"))

                {

                    result = true;

                    jTextFieldICD10.setText(icd10.icd10_id);

                    jLabelICD10Description.setText(icd10.description);

                }

                else

                {

                    result = false;

                    theUS.setStatus("°√ÿ≥“°√Õ°√À—  ICD-10 ¢Õß°≈ÿË¡‚√§‡√◊ÈÕ√—ß„π Ë«πºŸÈ¥Ÿ·≈ À—«¢ÈÕ°≈ÿË¡√“¬°“√ ICD-10", 2);

                    jTextFieldICD10.setText("");

                    jLabelICD10Description.setText("");

                }

            }

        }

        else

        {

            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveICD10"), 2);

        }

        return result;

    }

    /**

     * ∫—π∑÷°√“¬°“√‚√§‡√◊ÈÕ√—ß

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    private void saveChronic()

    {

        if(theFamily == null)

        {

            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveFamilyChronic"),UpdateStatus.WARNING);

            return;

        }

        getChronic();

        if(theChronic.getObjectId() == null && checkRepleateChronic() == true)
        {
            return;
        }
        if(checkChronicICD10() == false)
        {
            return;
        }
        if(theChronic != null && "".equals(theChronic.survey_date))
        {
            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveSurVeyDate"), 2);            
            return;

        }
        theHM.theHosInf.saveCronic(this.theChronic);

        theUS.setStatus(GutilPCU.getTextBundle("SaveCronicCompleate"),UpdateStatus.COMPLETE);

        searchChronic();

    }

    

    /**

     * §ÈπÀ“√“¬°“√‚√§‡√◊ÈÕ√—ß

     * @param  

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private void searchChronic()

    {

        if(this.theFamily != null)

        {

            vChronic = theHM.theHosControl.theUncontagiousControl.listChronicByFamily(theFamily.getObjectId());

        }

        setTableChronic(vChronic);

    }

    /**

     * 

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private void updateDeleteChronic()

    {

        if(theChronic != null && !theChronic.getObjectId().equals(""))

        {

            theChronic.staff_cancel = this.theEmployee.getObjectId();

            theChronic.cancel_datetime = DateTime.getTextCurrentDateTime(theHM.theHosControl.theConnectionInf);

            theChronic.active = "0";

        }

    }

    /**

     * ‡´µ JFrame

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    public void setJFrame(JFrame frame)

    {

        this.theJFrame = frame;

    }

    /**

     * ‡´µ ∂“π–

     * @param  

     * @return 

     * @author kingland

     * @date 23-03-2549

     */

    public void setUpdateStatus(UpdateStatus us)

    {

        this.theUS = us;

    }

    /**

     * ‡≈◊Õ° JFrame

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    public JFrame getJFrame()

    {

        return this.theJFrame;

    }

    /**

     * ≈∫√“¬°“√‚√§‡√◊ÈÕ√—ß

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    private void deleteChronic()

    {

        if(this.theChronic == null)

        {

           theUS.setStatus(GutilPCU.getTextBundle("WarningNotSelectChronic"), 2);

            return;

        }

        if(!theUS.confirmBox(GutilPCU.getTextBundle("DeleteChronic"),UpdateStatus.WARNING))
            return;
        {

            int select = jTableChronic.getSelectedRow();

            updateDeleteChronic();

            if(theChronic.getObjectId() == null)

            {

                

                vChronic.remove(select);

                theUS.setStatus(GutilPCU.getTextBundle("≈∫¢ÈÕ¡Ÿ≈‚√§‡√◊ÈÕ√—ß‡ √Á® ‘Èπ"), 1);

                clearGUIChronic();

                setTableChronic(vChronic);

                theChronic = null;

            }

            else

            {

                theHM.theHosInf.saveCronic(theChronic);

                theUS.setStatus(GutilPCU.getTextBundle("≈∫¢ÈÕ¡Ÿ≈‚√§‡√◊ÈÕ√—ß‡ √Á® ‘Èπ"), 1);

                vChronic.remove(select);

                clearGUIChronic();

                setTableChronic(vChronic);

                theChronic = null;

            }

        }

    }

    /**

     * ‡§≈’¬√Ï GUI ÀπÈ“®Õ‚√§‡√◊ÈÕ√—ß∑—ÈßÀ¡¥

     * @param  

     * @return 

     * @author kingland

     * @date 03-03-2549

     */

    public void clearGUIChronicAll()

    {

        clearGUIChronic();

        setTableChronic(null);

    }

    /**

     * ‡§≈’¬√Ï GUI ÀπÈ“®Õ‚√§‡√◊ÈÕ√—ß

     * @param  

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private void clearGUIChronic()

    {

        dateComboBoxDateSurvey.setText("");

        dateComboBoxDateBegin.setText("");

        jTextFieldICD10.setText("");

        jLabelICD10Description.setText("");

        jComboBoxStatusDish.setSelectedIndex(0);

        integerTextFieldHosTreat.setText("");

        jTextFieldHosTreat.setText("");

        jTextAreaChronicDescription.setText("");

    }

    /**

     * ‡æ‘Ë¡√“¬°“√‚√§‡√◊ÈÕ√—ß

     * @param  

     * @return 

     * @author kingland

     * @date 01-03-2549

     */

    private void insertChronic()

    {

        if(theFamily == null)

        {

            theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveFamilyChronic"),2);

            return;

        }

        theChronic = null;

        clearGUIChronic();

    }

    /**

     * ‡´µµ“√“ß‚√§‡√◊ÈÕ√—ß

     * @param  Vector of Chronic

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private void setTableChronic(Vector v)

    {

        String[] col ={GutilPCU.getTextBundle("TableChronic_Col1")

                ,GutilPCU.getTextBundle("TableChronic_Col2")

                ,GutilPCU.getTextBundle("TableChronic_Col3")

                ,GutilPCU.getTextBundle("TableChronic_Col4")};

                

        TableModel tm ; 

        if(v == null || v.size() == 0)

        {

            tm = new TableModel(col, 0);

            jTableChronic.setModel(tm);

        }

        else

        {

            tm = new TableModel(col, v.size());

            Vector vCombo = theHM.theHosInf.getLookupControl().listTypeDish();

            for(int i=0;i<v.size();i++)

            {

                Chronic cronic = (Chronic)v.get(i);

                tm.setValueAt(String.valueOf(i+1), i, 0);

                tm.setValueAt(cronic.chronic_icd, i, 1);

                for(int j=0;j<vCombo.size();j++)

                {

                    TypeDish cf = (TypeDish)vCombo.get(j);

                    if(cf.getCode().equals(cronic.type_dish))

                    {

                        tm.setValueAt(cf.getName(),i, 2);

                        break;

                    }

                }

                Office of = theHM.theHosInf.listOfficeByOffId(cronic.site_treat);

                if(of!=null)

                {

                    tm.setValueAt(of.getName(), i, 3);

                }

                else

                {

                    tm.setValueAt(GutilPCU.getTextBundle("NotFix"),i, 3);

                }

                jTableChronic.setModel(tm);

                

            }

        }

        jTableChronic.setRowHeight(22);

        jTableChronic.getColumnModel().getColumn(0).setPreferredWidth(10);

        jTableChronic.getColumnModel().getColumn(1).setPreferredWidth(15);

        jTableChronic.getColumnModel().getColumn(2).setPreferredWidth(100);

        jTableChronic.getColumnModel().getColumn(3).setPreferredWidth(150);

    }

    /**

     * ‡´µ¢ÈÕ¡Ÿ≈„π Combobox

     * @param  

     * @return 

     * @author kingland

     * @date 23-02-2549

     */

    private void initCombobox()

    {

        ComboboxModel.initComboBox(this.jComboBoxStatusDish,this.theHM.theHosInf.getLookupControl().listTypeDish()); 

    }

    /**

     * ‡≈◊Õ°√“¬°“√‚√§‡√◊ÈÕ√—ß

     * @param  

     * @return 

     * @author kingland

     * @date 28-02-2549

     */

    private void selectChronic()

    {

        if(theChronic != null)

        {

            dateComboBoxDateSurvey.setText(DateUtil.convertFieldDate(theChronic.survey_date));

            dateComboBoxDateBegin.setText(DateUtil.convertFieldDate(theChronic.date_dx));

            if(theChronic.chronic_icd != null && !theChronic.chronic_icd.equals(""))

            {

                jTextFieldICD10.setText(theChronic.chronic_icd);

                ICD10 icd = theHM.theHosInf.listIcd10ById(theChronic.chronic_icd.trim().toUpperCase());

                jLabelICD10Description.setText(icd.description);

            }

            else

            {

                jTextFieldICD10.setText(theChronic.chronic_icd);

                jLabelICD10Description.setText("");

            }

            if(theChronic.site_treat != null && !theChronic.site_treat.equals(""))

            {

                Office of = theHM.theHosInf.listOfficeByOffId(theChronic.site_treat);

                integerTextFieldHosTreat.setText(of.getCode());

                jTextFieldHosTreat.setText(of.getName());

            }

            else

            {

                integerTextFieldHosTreat.setText("");

                jTextFieldHosTreat.setText("");

            }

            Gutil.setGuiData(jComboBoxStatusDish, theChronic.type_dish);

            jTextAreaChronicDescription.setText(theChronic.detail);

        }

    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    com.pcu.utility.DateComboBox dateComboBoxDateBegin;
    com.pcu.utility.DateComboBox dateComboBoxDateSurvey;
    com.hospital_os.gui.font.DefaultFont defaultFont1;
    javax.swing.JTextField integerTextFieldHosTreat;
    javax.swing.JButton jButtonDeleteChronic;
    javax.swing.JButton jButtonHosTreat;
    javax.swing.JButton jButtonRefreshICD10;
    javax.swing.JButton jButtonResetChronic;
    javax.swing.JButton jButtonSaveChronic;
    javax.swing.JComboBox jComboBoxStatusDish;
    javax.swing.JLabel jLabelChronicDescription;
    javax.swing.JLabel jLabelDateBegin;
    javax.swing.JLabel jLabelDateSurvey;
    javax.swing.JLabel jLabelICD10;
    javax.swing.JLabel jLabelICD10Description;
    javax.swing.JLabel jLabelOffice;
    javax.swing.JLabel jLabelStatusDish;
    javax.swing.JPanel jPanel13;
    javax.swing.JPanel jPanel16;
    javax.swing.JPanel jPanel17;
    javax.swing.JPanel jPanel18;
    javax.swing.JPanel jPanel19;
    javax.swing.JPanel jPanel20;
    javax.swing.JPanel jPanel21;
    javax.swing.JPanel jPanel22;
    javax.swing.JScrollPane jScrollPane5;
    javax.swing.JScrollPane jScrollPane6;
    javax.swing.JTable jTableChronic;
    javax.swing.JTextArea jTextAreaChronicDescription;
    javax.swing.JTextField jTextFieldHosTreat;
    javax.swing.JTextField jTextFieldICD10;
    // End of variables declaration//GEN-END:variables

    

}

