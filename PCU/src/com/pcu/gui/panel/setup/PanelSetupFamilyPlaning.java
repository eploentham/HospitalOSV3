/*
 * PanelSetupFamilyPlaning.java
 *
 * Created on 4 กรกฎาคม 2548, 15:42 น.
 */

package com.pcu.gui.panel.setup;

import com.hosv3.utility.connection.UpdateStatus;
import com.pcu.gui.dialog.DialogSetupSearchPcu;
import com.pcu.gui.dialog.HosDialog;
import java.awt.event.KeyEvent;
import java.util.*;
import javax.swing.*;
import com.hospital_os.utility.*;
import com.pcu.utility.TableModel;
import com.pcu.control.HosManage;
import com.pcu.object.*;

import com.pcu.subject.ManageEpiSetReq;
import com.hospital_os.object.Item;
import com.pcu.utility.GutilPCU;

/**
 *
 * @author  tong
 */
public class PanelSetupFamilyPlaning extends javax.swing.JPanel implements ManageEpiSetReq{
    private TableModel tablemodel;
    private String[] colListSupply ;
    private String[] colDetailSupply;
    private HosManage theHosManage;
    private Vector vObjectSupplyGroup = new Vector();
    private FamilyPlaningSupplyGroup theFPSGroup;
    private FamilyPlaningSupplyItem theFPSItem;
    private boolean check = true ;
    private boolean flagSetEnableButtonDelete = false;
    private UpdateStatus theUS;
    int result =0;
    private FamilyPlaningSupplyDrugDose theFPSDrugDose;
    /** Creates new form PanelSetupFamilyPlaning */
    public PanelSetupFamilyPlaning(HosManage hm,HosDialog hd) {
        theHosManage = hm;
        theUS = hm.theHC.theUS;
        theHosManage.theHosSubject.theSetupSubjectPcu.attachManageEpi(this);
        initComponents();
        
        colListSupply = new String[2];
        colListSupply[0] = "CodeNumber";
        colListSupply[1] = "Name";
        colDetailSupply = new String[1];
        colDetailSupply[0] = "Name";
        setLanguage();
        setInitCombobox();
        setFPSGroup(null);
    }

    public void setFPSItem(FamilyPlaningSupplyItem fitem)
    {
        this.theFPSItem = fitem;
        if(theFPSItem.theDrugDose==null)
            theFPSItem.theDrugDose = theHosManage.theHosControl
                    .theFamilyPlaningControl.selectItemDoseDrugSupplyByID(theFPSItem);
        setFPSDDose(theFPSItem.theDrugDose);
        setEnableButton(true,1,1);
//
//        if(fpsd.getObjectId() == null){
//            theUS.setStatus(" คุณสมบัติของรายการนี้ยังไม่ได้ถูกบันทึก ควรบันทึกด้วย",UpdateStatus.WARNING);
//            return ;
//        }
    }
    
    private void setInitCombobox()
    {
        ComboboxModel.initComboBox(this.jComboBoxTypeSupply,this.theHosManage.theHosControl.theAllComboBoxControl.queryFamilyPlaningMethod());
        final Vector vuom = this.theHosManage.theHosControl.theAllComboBoxControl.listUom();
        ComboboxModel.initComboBox(this.jComboBoxUse,vuom); 
        ComboboxModel.initComboBox(this.jComboBoxInstruction,this.theHosManage.theHosControl.theAllComboBoxControl.listDrugInstruction()); 
        ComboboxModel.initComboBox(this.jComboBoxFrequency,this.theHosManage.theHosControl.theAllComboBoxControl.listDrugFrequency()); 
        ComboboxModel.initComboBox(this.jComboBoxQty,vuom);
    }
    /**ใช้ในการกำหนดให้ปุ่มลบสามารถทำงานได้หรือไม่
     *จะส่งค่ามาจาก module hospitalos ดังนั้นในต้องทำงานปกติ ไม่ต้องใช้งาน
     *@param enabled เป็น boolean ใช้กำหนด ถ้า true ให้ปุ่ม ลบสามารถทำงานได้ ถ้าเป็น false จะไม่ทำงาน
     */
    public void setEnableButtonSetupPanel(boolean enabled)
    {
        flagSetEnableButtonDelete = enabled;        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fontTitle1 = new com.pcu.utility.FontTitle();
        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelDetail = new javax.swing.JPanel();
        jPanelDetailSupplySet = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableDetailSupplySet = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonAddItem = new javax.swing.JButton();
        jButtonDelItem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabelCode = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jLabelName = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabelAppointmant = new javax.swing.JLabel();
        jLabelTypeSupply = new javax.swing.JLabel();
        jComboBoxTypeSupply = new javax.swing.JComboBox();
        jLabelDay = new javax.swing.JLabel();
        integerTextFieldAppointment = new com.pcu.utility.IntegerTextField();
        jPanel4 = new javax.swing.JPanel();
        jCheckBoxActive = new javax.swing.JCheckBox();
        jCheckBoxAddInOrder = new javax.swing.JCheckBox();
        jPanelHead = new javax.swing.JPanel();
        jLabelHeader = new javax.swing.JLabel();
        jPanelCenter = new javax.swing.JPanel();
        jPanelSearch = new javax.swing.JPanel();
        jPanelInput = new javax.swing.JPanel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jCheckBoxShearchActive = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanelNavigatorButton = new javax.swing.JPanel();
        jPanelShows = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShowSupply = new javax.swing.JTable();
        jPanelDetailDrug = new javax.swing.JPanel();
        jPanelDrug = new javax.swing.JPanel();
        jPanelChooseSpecial = new javax.swing.JPanel();
        jCheckBoxSpecialUsage = new javax.swing.JCheckBox();
        jPanelQuantity = new javax.swing.JPanel();
        jLabelQuantity = new javax.swing.JLabel();
        jTextFieldQtyUnit = new javax.swing.JTextField();
        jComboBoxQty = new javax.swing.JComboBox();
        jPanelDose = new javax.swing.JPanel();
        jPaneldetailDose = new javax.swing.JPanel();
        jComboBoxInstruction = new javax.swing.JComboBox();
        jTextFieldInstructionCode = new javax.swing.JTextField();
        jTextFieldFrequencyCode = new javax.swing.JTextField();
        jComboBoxFrequency = new javax.swing.JComboBox();
        jLabelDose = new javax.swing.JLabel();
        jTextFieldUseUnit = new javax.swing.JTextField();
        jComboBoxUse = new javax.swing.JComboBox();
        jPanelSpecialNote = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaTextUsage = new javax.swing.JTextArea();
        jPanelDescription = new javax.swing.JPanel();
        jTextFieldDescription = new javax.swing.JTextField();
        jTextFieldCaution = new javax.swing.JTextField();
        jButtonSaveDose = new javax.swing.JButton();
        jPanelBlank = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanelDetail.setBorder(null);
        jPanelDetail.setLayout(new java.awt.GridBagLayout());

        jPanelDetailSupplySet.setLayout(new java.awt.GridBagLayout());

        jTableDetailSupplySet.setFont(defaultFont1);
        jTableDetailSupplySet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDetailSupplySetMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTableDetailSupplySet);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelDetailSupplySet.add(jScrollPane3, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonAddItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddItem.setEnabled(false);
        jButtonAddItem.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddItem.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddItem.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jPanel1.add(jButtonAddItem, gridBagConstraints);

        jButtonDelItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelItem.setEnabled(false);
        jButtonDelItem.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelItem.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelItem.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButtonDelItem, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanelDetailSupplySet.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelDetail.add(jPanelDetailSupplySet, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelCode.setFont(defaultFont1);
        jLabelCode.setText("CodeNumber");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelCode, gridBagConstraints);

        jTextFieldCode.setFont(defaultFont1);
        jTextFieldCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 5);
        jPanel3.add(jTextFieldCode, gridBagConstraints);

        jLabelName.setFont(defaultFont1);
        jLabelName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel3.add(jLabelName, gridBagConstraints);

        jTextFieldName.setFont(defaultFont1);
        jTextFieldName.setMinimumSize(new java.awt.Dimension(210, 29));
        jTextFieldName.setPreferredSize(new java.awt.Dimension(210, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 5);
        jPanel3.add(jTextFieldName, gridBagConstraints);

        jLabelAppointmant.setFont(defaultFont1);
        jLabelAppointmant.setText("AppointDay");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel3.add(jLabelAppointmant, gridBagConstraints);

        jLabelTypeSupply.setFont(defaultFont1);
        jLabelTypeSupply.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel3.add(jLabelTypeSupply, gridBagConstraints);

        jComboBoxTypeSupply.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 5);
        jPanel3.add(jComboBoxTypeSupply, gridBagConstraints);

        jLabelDay.setFont(defaultFont1);
        jLabelDay.setText("Days");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 5);
        jPanel3.add(jLabelDay, gridBagConstraints);

        integerTextFieldAppointment.setColumns(5);
        integerTextFieldAppointment.setText("1");
        integerTextFieldAppointment.setFont(defaultFont1);
        integerTextFieldAppointment.setMinimumSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        jPanel3.add(integerTextFieldAppointment, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jCheckBoxActive.setFont(defaultFont1);
        jCheckBoxActive.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jCheckBoxActive, gridBagConstraints);

        jCheckBoxAddInOrder.setFont(defaultFont1);
        jCheckBoxAddInOrder.setText("AddInOrder");
        jCheckBoxAddInOrder.setActionCommand("jCheckBox1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel4.add(jCheckBoxAddInOrder, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 5, 5);
        jPanel3.add(jPanel4, gridBagConstraints);

        jPanelDetail.add(jPanel3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 0, 11);
        add(jPanelDetail, gridBagConstraints);

        jPanelHead.setLayout(new java.awt.GridBagLayout());

        jLabelHeader.setFont(fontTitle1);
        jLabelHeader.setText("SetupDrugAndSupplyFP");
        jPanelHead.add(jLabelHeader, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 0, 11);
        add(jPanelHead, gridBagConstraints);

        jPanelCenter.setLayout(new java.awt.GridBagLayout());

        jPanelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("ค้นหา"));
        jPanelSearch.setMinimumSize(new java.awt.Dimension(300, 25));
        jPanelSearch.setPreferredSize(new java.awt.Dimension(300, 404));
        jPanelSearch.setLayout(new java.awt.GridBagLayout());

        jPanelInput.setLayout(new java.awt.GridBagLayout());

        jTextFieldSearch.setFont(defaultFont1);
        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        jPanelInput.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setFont(defaultFont1);
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelInput.add(jButtonSearch, gridBagConstraints);

        jCheckBoxShearchActive.setFont(defaultFont1);
        jCheckBoxShearchActive.setSelected(true);
        jCheckBoxShearchActive.setText("Active");
        jCheckBoxShearchActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShearchActiveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        jPanelInput.add(jCheckBoxShearchActive, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Back16.gif"))); // NOI18N
        jButton2.setMaximumSize(new java.awt.Dimension(24, 24));
        jButton2.setMinimumSize(new java.awt.Dimension(24, 24));
        jButton2.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jButton2, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Forward16.gif"))); // NOI18N
        jButton3.setMaximumSize(new java.awt.Dimension(24, 24));
        jButton3.setMinimumSize(new java.awt.Dimension(24, 24));
        jButton3.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        jPanel5.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanelInput.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanelSearch.add(jPanelInput, gridBagConstraints);

        jPanelNavigatorButton.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanelSearch.add(jPanelNavigatorButton, gridBagConstraints);

        jPanelShows.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(270, 50));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(270, 100));

        jTableShowSupply.setFont(defaultFont1);
        jTableShowSupply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowSupplyMouseReleased(evt);
            }
        });
        jTableShowSupply.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableShowSupplyKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableShowSupply);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShows.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelSearch.add(jPanelShows, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelCenter.add(jPanelSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        add(jPanelCenter, gridBagConstraints);

        jPanelDetailDrug.setLayout(new java.awt.CardLayout());

        jPanelDrug.setBorder(javax.swing.BorderFactory.createTitledBorder("Qualifications"));
        jPanelDrug.setLayout(new java.awt.GridBagLayout());

        jPanelChooseSpecial.setLayout(new java.awt.GridBagLayout());

        jCheckBoxSpecialUsage.setFont(defaultFont1);
        jCheckBoxSpecialUsage.setText("SpecialUsage");
        jCheckBoxSpecialUsage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSpecialUsageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 5);
        jPanelChooseSpecial.add(jCheckBoxSpecialUsage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelDrug.add(jPanelChooseSpecial, gridBagConstraints);

        jPanelQuantity.setLayout(new java.awt.GridBagLayout());

        jLabelQuantity.setFont(defaultFont1);
        jLabelQuantity.setText("Quantity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelQuantity.add(jLabelQuantity, gridBagConstraints);

        jTextFieldQtyUnit.setColumns(3);
        jTextFieldQtyUnit.setFont(defaultFont1);
        jTextFieldQtyUnit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQtyUnit.setMinimumSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelQuantity.add(jTextFieldQtyUnit, gridBagConstraints);

        jComboBoxQty.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelQuantity.add(jComboBoxQty, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDrug.add(jPanelQuantity, gridBagConstraints);

        jPanelDose.setLayout(new java.awt.CardLayout());

        jPaneldetailDose.setLayout(new java.awt.GridBagLayout());

        jComboBoxInstruction.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPaneldetailDose.add(jComboBoxInstruction, gridBagConstraints);

        jTextFieldInstructionCode.setFont(defaultFont1);
        jTextFieldInstructionCode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldInstructionCode.setMinimumSize(new java.awt.Dimension(30, 24));
        jTextFieldInstructionCode.setPreferredSize(new java.awt.Dimension(30, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPaneldetailDose.add(jTextFieldInstructionCode, gridBagConstraints);

        jTextFieldFrequencyCode.setFont(defaultFont1);
        jTextFieldFrequencyCode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldFrequencyCode.setMinimumSize(new java.awt.Dimension(30, 24));
        jTextFieldFrequencyCode.setPreferredSize(new java.awt.Dimension(30, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPaneldetailDose.add(jTextFieldFrequencyCode, gridBagConstraints);

        jComboBoxFrequency.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPaneldetailDose.add(jComboBoxFrequency, gridBagConstraints);

        jLabelDose.setFont(defaultFont1);
        jLabelDose.setText("Dose");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPaneldetailDose.add(jLabelDose, gridBagConstraints);

        jTextFieldUseUnit.setColumns(3);
        jTextFieldUseUnit.setFont(defaultFont1);
        jTextFieldUseUnit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldUseUnit.setMinimumSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPaneldetailDose.add(jTextFieldUseUnit, gridBagConstraints);

        jComboBoxUse.setFont(defaultFont1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPaneldetailDose.add(jComboBoxUse, gridBagConstraints);

        jPanelDose.add(jPaneldetailDose, "Normal");

        jPanelSpecialNote.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setViewportView(jTextAreaTextUsage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelSpecialNote.add(jScrollPane2, gridBagConstraints);

        jPanelDose.add(jPanelSpecialNote, "Special");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 5, 0);
        jPanelDrug.add(jPanelDose, gridBagConstraints);

        jPanelDescription.setLayout(new java.awt.GridBagLayout());

        jTextFieldDescription.setFont(defaultFont1);
        jTextFieldDescription.setMinimumSize(new java.awt.Dimension(60, 24));
        jTextFieldDescription.setPreferredSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelDescription.add(jTextFieldDescription, gridBagConstraints);

        jTextFieldCaution.setFont(defaultFont1);
        jTextFieldCaution.setMinimumSize(new java.awt.Dimension(60, 24));
        jTextFieldCaution.setPreferredSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanelDescription.add(jTextFieldCaution, gridBagConstraints);

        jButtonSaveDose.setFont(defaultFont1);
        jButtonSaveDose.setText("Apply");
        jButtonSaveDose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDoseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanelDescription.add(jButtonSaveDose, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 5);
        jPanelDrug.add(jPanelDescription, gridBagConstraints);

        jPanelDetailDrug.add(jPanelDrug, "Dose");

        jPanelBlank.setBorder(javax.swing.BorderFactory.createTitledBorder("Qualifications"));
        jPanelBlank.setLayout(new java.awt.GridBagLayout());
        jPanelDetailDrug.add(jPanelBlank, "blank");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(jPanelDetailDrug, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel7.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDel.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel7.add(jButtonDel, gridBagConstraints);

        jButtonSave.setFont(defaultFont1);
        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 10, 10);
        add(jPanel7, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jTableShowSupplyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableShowSupplyKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN)
            jTableShowSupplyMouseReleased(null);
    }//GEN-LAST:event_jTableShowSupplyKeyReleased

    private void jCheckBoxShearchActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShearchActiveActionPerformed
        searhSetupFamilyPlaningSupplyGroup();
    }//GEN-LAST:event_jCheckBoxShearchActiveActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
         searhSetupFamilyPlaningSupplyGroup();
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jTextFieldCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodeFocusLost
        /**checkCode();*/
    }//GEN-LAST:event_jTextFieldCodeFocusLost

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        setFPSGroup(null);
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDelItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelItemActionPerformed
        int rows[] = jTableDetailSupplySet.getSelectedRows();
        if(rows.length <= 0)
            return;
        if(!theUS.confirmBox("ยืนยันการลบรายการ ?",UpdateStatus.WARNING))
            return;
        FamilyPlaningSupplyItem familyPlaningSupplyItem = null;
        for(int i=rows.length-1;i>=0;i--){
            //henbe comment 030310 ton ทำอะไรนิ assign ค่าสองรอบมีประโยชน์อะไร แล้วกำหนดค่าให้กับ global แบบนี้ ผิด pattern
            //pattern ที่ถูกต้องคือการบันทึก theFPSGroup เพียงครั้งเดียวจะไม่มีการลบการเพิ่มรายย่อย
            familyPlaningSupplyItem = new FamilyPlaningSupplyItem();
            familyPlaningSupplyItem = (FamilyPlaningSupplyItem) theFPSGroup.vFPSItem.get(rows[i]);
            theHosManage.theHosControl.theFamilyPlaningControl.deleteItemSupplySet(familyPlaningSupplyItem);
        }
        theFPSGroup.vFPSItem = theHosManage.theHosControl.theFamilyPlaningControl
                    .selectItemSupplySetBySupplyGroup(theFPSGroup.getObjectId(),null);
        setFPSItemV(theFPSGroup.vFPSItem);
    }//GEN-LAST:event_jButtonDelItemActionPerformed

    private void jButtonSaveDoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDoseActionPerformed
        getFPSDDose();
    }//GEN-LAST:event_jButtonSaveDoseActionPerformed

    private void jTableDetailSupplySetMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDetailSupplySetMouseReleased
        selectTableShowDoseItemDrug();        
    }//GEN-LAST:event_jTableDetailSupplySetMouseReleased

    private void jButtonAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddItemActionPerformed
        showItemSupply();
    }//GEN-LAST:event_jButtonAddItemActionPerformed

    private void jCheckBoxSpecialUsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSpecialUsageActionPerformed
        setShowSpecialUsage();
    }//GEN-LAST:event_jCheckBoxSpecialUsageActionPerformed

    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        removeObjectSupplyGroup();
    }//GEN-LAST:event_jButtonDelActionPerformed

    private void jTableShowSupplyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableShowSupplyMouseReleased
        int row = jTableShowSupply.getSelectedRow();
        if(row == -1)
            return;
        setFPSGroup((FamilyPlaningSupplyGroup)vObjectSupplyGroup.get(row));
        setEnableButton(true,0,1);
    }//GEN-LAST:event_jTableShowSupplyMouseReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searhSetupFamilyPlaningSupplyGroup();
        
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveSetupFamilyPlaningItem();
    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    
    public void setEnableButton(boolean b,int choose,int type)
    {
        jButtonAdd.setEnabled(true);
        this.jButtonDel.setEnabled(b);
        if(choose == 1 && type == 0)
        {    
            this.jButtonDel.setEnabled(!b);
        }
        if(flagSetEnableButtonDelete)
        {
            this.jButtonDel.setEnabled(false);
        }
        else
            this.jButtonDel.setEnabled(b);
        this.jButtonSave.setEnabled(b);
        
        this.jButtonAddItem.setEnabled(b);

        this.jButtonDelItem.setEnabled(b); 
        
        if(type == 1)
        {
            this.jButtonAddItem.setEnabled(b);
            if(choose == 1)
            {
                this.jButtonDelItem.setEnabled(b);   
            }
        }
    }
    /**
     * ใช้ในการแสดง Dialog ข้อความขึ้นมาให้ผู้ใช้เห็นไม่ว่าจะเป็น การยืนยัน การเตือน
     * @param massage ข้อความที่ต้องการจะแสดงให้ผู้ใช้ทราบ
     * @param tpye เป็นชนิดของ Dialog ที่ต้องการจะให้แสดง
     * @return ออกไปเป็นผลที่ผู้ใช้ ยืนยัน หรือยกเลิก
     * true : ผู้ใช้ยืนยัน
     * false : ผู้ใช้ไม่ยืนยัน
     * @author ผดุงรัฐ
     */
    public boolean showMessageGUI(String message,int type)
    {   
        message = Constant.getTextBundle(message);
        int choose = 0;
        boolean result = false;
        switch(type)
        {
            case 1 :    choose = JOptionPane.showConfirmDialog(this,message,
                    Constant.getTextBundle("ยืนยัน"),JOptionPane.OK_CANCEL_OPTION);
                        break;
            case 2 :    theUS.setStatus(message,UpdateStatus.WARNING);
                        result = true;
                        break;
            default:    break;
        }
        if(choose == JOptionPane.OK_OPTION)
        {
            result = true;
        }
        
        return result;
    }
    /**
     * ใช้ในการตรวจสอบ Code ที่ซ้ำกันกับข้อมูลที่อยู่ในตารางหรือไม่ และตรวจสอบการว่า field code เป็นค่าว่างหรือไม่
     * ก่อนการบันทึก
     * @return boolean ถ้าซ้ำ หรือ เป็นช่องว่า ให้ return เป็น true และ ถ้าไม่เป็นช่องว่างและไม่ซ้ำกันจะ return เป็น false
     * @author ผดุงรัฐ
     */
    public boolean checkCode()
    {   boolean re = false;
        if(this.theFPSGroup !=null)
        {
            
            if(check)
            {
                final String code= this.jTextFieldCode.getText().trim();
                if(code.length() >0)
                {
                    boolean b = this.theHosManage.theHosControl.theFamilyPlaningControl.checkCodeSupplyGroupSame(code);
                    if(b)
                    {
                       showMessageGUI("รหัสซ้ำกับที่มีอยู่ในฐานข้อมูล",2);
                       this.jTextFieldCode.requestFocus();
                       check = false;
                       re = true;
                    }
                }
                else
                {
                    showMessageGUI("รหัสต้องไม่เป็นค่าว่าง",2);
                    this.jTextFieldCode.requestFocus();
                    re = true;
                }
            }
            else
            {
               check =true;
            }
        }
        return re;
    }
    /**
     * ใช้ในการตรวจสอบ name ที่ซ้ำกันกับข้อมูลที่อยู่ในตารางหรือไม่ และตรวจสอบการว่า field name เป็นค่าว่างหรือไม่
     * ก่อนการบันทึก
     * @return boolean ถ้าซ้ำ หรือ เป็นช่องว่า ให้ return เป็น true และ ถ้าไม่เป็นช่องว่างและไม่ซ้ำกันจะ return เป็น false
     * @author ผดุงรัฐ
     */
    public boolean checkName()
    {
        final String code= this.jTextFieldName.getText().trim();
        if(code.length()==0)
        {
           showMessageGUI("ชื่อต้องไม่เป็นค่าว่าง",2); 
           this.jTextFieldName.requestFocus();
           return true;
        }
        if(code.length() >0)
        {
            boolean b = theHosManage.theHosControl.theFamilyPlaningControl.checkNameSupplyGroupSame(code);
            if(b){
                showMessageGUI("ชื่อซ้ำกับที่มีอยู่ในฐานข้อมูล",2);
                this.jTextFieldName.requestFocus();
                return true;
            }
        }
        return false;
    }
    /**
     *  ใช้ในการแสดง Dose ยา เมื่อมีการเลือกรายการย่อย
     *@param row ตำแหน่ง row ของตารางที่ต้องการให้แสดง ต้องมากกว่า -1
     */
    public void selectTableShowDoseItemDrug()
    {
        int row = this.jTableDetailSupplySet.getSelectedRow();
        if(jTableDetailSupplySet.getSelectedRow()==-1)
            return;
        if(jTableDetailSupplySet.getSelectedRows().length > 1){
            showDoseProperty("blank");
            return;
        }
        this.setFPSItem((FamilyPlaningSupplyItem)theFPSGroup.vFPSItem.get(row));
    }
    /**
     * ใช้ในการแสดง dialog รายการตรวจรักษาเพื่อเพิ่มข้อมูลรายการย่อย
     */
    DialogSetupSearchPcu theDialogSetupSearchPcu;
    public void showItemSupply()
    {
        if(theDialogSetupSearchPcu==null)
            theDialogSetupSearchPcu = new DialogSetupSearchPcu(null, true,theHosManage);            
        theDialogSetupSearchPcu.showSearch(7);
        setEnableButton(true, 0, 1);
    }
    /**
     * ใช้ในการแสดงรายละเอียดยา แบบพิเศษหรือแบบปกติ
     * ถ้ามีการเลือกให้แสดง
     * @author ผดุงรัฐ
     * @param type ชื่อ card ที่ต้องการจะให้แสดง
     */
    public void showItemSubProperty(String type)
    {
        final java.awt.CardLayout layout = (java.awt.CardLayout)this.jPanelDose.getLayout();
        layout.show(jPanelDose, type);
    }
    
    /**
     * ใช้ในการแสดงรายละเอียดยา แบบพิเศษหรือแบบปกติ
     * ถ้ามีการเลือกให้แสดง
     * @author ผดุงรัฐ
     * @param type ชื่อ card ที่ต้องการจะให้แสดง
     */
    public void showDoseProperty(String type)
    {
        final java.awt.CardLayout layout = (java.awt.CardLayout)this.jPanelDetailDrug.getLayout();
        layout.show(jPanelDetailDrug, type);
    }
    /**
     * ใช้ในการ กำหนดค่าเริ่มต้นให้กับ Combobox
     * @param combobox ComboBox ที่ต้องการจะให้แสดงค่าเริ่มแรก
     * @param code รหัสที่ต้องการจะให้แสดง เป็นข้อความใน combobox
     * @author ผดุงรัฐ
     */
    private void setInitComboBox(JComboBox combobox,String code)
    {
        ComboboxModel.setCodeComboBox(combobox,code);
    }
    
    /**
     * ใช้ในการแสดงข้อมูลออกมาจาก ComboBox ตาม param ทีกำหนด
     * @author ผดุงรัฐ
     * @param combobox ComboBox ที่ต้องการจะนำค่าออกมาใช้งาน
     * @param type เป็นตัวกำหนดค่าที่จะ return ออก
     * true คือ แสดงออกมาเป็น Code
     * false คือ แสดงออกมาเป็น ข้อความ
     * @return แสดงค่าที่ต้องการออกมา
     */
    private String getDataCodeComboBox(JComboBox combobox ,boolean type)
    {
        if(type)
        {
            return ComboboxModel.getCodeComboBox(combobox);
        }
        else
        {
            return ComboboxModel.getStringConboBox(combobox);
        }
    }
    
    /**
     * ใช้ในการแสดงรายละเอียดยา แบบพิเศษหรือแบบปกติ
     * ถ้ามีการเลือกให้แสดง
     * @author ผดุงรัฐ
     */
    public void setShowSpecialUsage()
    {
        if(this.jCheckBoxSpecialUsage.isSelected())
        {
            showItemSubProperty("Special");
        }
        else
        {
            showItemSubProperty("Normal");
        }
    }
    
    /**
     * ใช้ในการลบรายการที่เลือก
     * @author ผดุงรัฐ
     */
    public void removeObjectSupplyGroup()
    {
        if(theFPSGroup==null)
            return;
        
        result = this.theHosManage.theHosControl.theFamilyPlaningControl.deleteFamilyPlaningSupplyAllSub(theFPSGroup);
        if(result == 0)
            return;

        searhSetupFamilyPlaningSupplyGroup();
        setFPSGroup(null);
    }

    
    /**
     *  ใช้ในการแสดงคุณสมบัติของยาเมื่อเลือก รายการย่อย
     *@param fpsd เป็น Object ของ FamilyPlaningSupplyDrugDose
     */
    public void setFPSDDose(FamilyPlaningSupplyDrugDose fpsd)
    {
        theFPSDrugDose = fpsd;
        if(theFPSDrugDose == null){
            jCheckBoxSpecialUsage.setSelected(false);
            jTextFieldInstructionCode.setText("");
            jTextFieldFrequencyCode.setText("");
            jTextFieldUseUnit.setText("0");
            jTextFieldQtyUnit.setText("0");
            jTextFieldDescription.setText("");
            jTextFieldCaution.setText("");
            jTextAreaTextUsage.setText("");
            showItemSubProperty("Normal");
            showDoseProperty("blank");
            return;
        }
        showDoseProperty("Dose");
        this.jTextFieldDescription.setText(theFPSDrugDose.b_health_family_planing_item_drug_setup_description);
        this.jTextFieldCaution.setText(theFPSDrugDose.health_family_planning_item_drug_setup_caution);
        this.jTextFieldUseUnit.setText(theFPSDrugDose.health_family_planing_item_drug_setup_dose);
        this.jTextFieldQtyUnit.setText(theFPSDrugDose.health_family_planing_item_drug_setup_qty);
        this.jTextAreaTextUsage.setText(theFPSDrugDose.health_family_planning_item_drug_setup_usage_text);
        
        setInitComboBox(jComboBoxInstruction,theFPSDrugDose.b_item_drug_instruction_id);
        setInitComboBox(jComboBoxFrequency,theFPSDrugDose.b_item_drug_frequency_id);
        setInitComboBox(jComboBoxUse,theFPSDrugDose.health_family_planing_item_drug_setup_use_uom);
        setInitComboBox(jComboBoxQty,theFPSDrugDose.health_family_planning_item_drug_setup_purch_uom);
        
    }
    
    /**
     *  ให้ค่า GUI กับ Object (FamilyPlaningSupplyDrugDose)ของ Dose รายการยา
     */
    public FamilyPlaningSupplyDrugDose getFPSDDose()
    {
        if(theFPSDrugDose==null)
            theFPSDrugDose = new FamilyPlaningSupplyDrugDose();

        theFPSDrugDose.b_health_family_planing_item_id = this.theFPSItem.getObjectId();
        theFPSDrugDose.b_health_family_planing_item_drug_setup_description = this.jTextFieldDescription.getText();
        theFPSDrugDose.health_family_planning_item_drug_setup_caution = this.jTextFieldCaution.getText();
        theFPSDrugDose.health_family_planing_item_drug_setup_dose = this.jTextFieldUseUnit.getText();
        theFPSDrugDose.health_family_planing_item_drug_setup_qty = this.jTextFieldQtyUnit.getText();
        theFPSDrugDose.health_family_planning_item_drug_setup_usage_text = this.jTextAreaTextUsage.getText();
        theFPSDrugDose.health_family_planing_item_drug_setup_special_prescription = getSelect(this.jCheckBoxSpecialUsage.isSelected());
        theFPSDrugDose.b_item_drug_instruction_id = getDataCodeComboBox(jComboBoxInstruction,true);
        theFPSDrugDose.b_item_drug_frequency_id = getDataCodeComboBox(jComboBoxFrequency,true);
        theFPSDrugDose.health_family_planing_item_drug_setup_use_uom = getDataCodeComboBox(jComboBoxUse,true);
        theFPSDrugDose.health_family_planning_item_drug_setup_purch_uom = getDataCodeComboBox(jComboBoxQty,true);
        return theFPSDrugDose;
    }
    
    /**
     * ใช้ในการค้นหารายการเวชภัณฑ์
     * @author ผดุงรัฐ
     */
    public void searhSetupFamilyPlaningSupplyGroup()
    {
        String search = this.jTextFieldSearch.getText().trim();
        vObjectSupplyGroup = this.theHosManage.theHosControl
                .theFamilyPlaningControl.searchFamilyPlaningSupply(
                search,getSelect(this.jCheckBoxShearchActive.isSelected()));
        setFPSGroupV(vObjectSupplyGroup);
    }
    
    /**
     * ใช้ในการให้ค่าจาก Object ให้กับ GUI
     * @author ผดุงรัฐ
     * @param object ของ FamilyPlaningSupplyGroup
     */
    public void setFPSGroup(FamilyPlaningSupplyGroup object)
    {
        this.theFPSGroup = object;
        if(theFPSGroup==null){
            jTextFieldName.setText("");
            integerTextFieldAppointment.setText("0");
            jTextFieldCode.setText("");
            jCheckBoxActive.setSelected(true);
            jCheckBoxAddInOrder.setSelected(false);
            setFPSItemV(null);
            setFPSDDose(null);
            setEnableButton(true,1,0);
            return;
        }
        this.jTextFieldCode.setText(object.health_family_planing_group_number);
        this.jTextFieldName.setText(object.health_family_planing_group_description);
        this.integerTextFieldAppointment.setText(object.health_family_planing_group_factor);
        setShowConbobox(this.jComboBoxTypeSupply, object.f_health_family_planing_group_type_id);
        this.jCheckBoxActive.setSelected(setSelect(object.health_family_planning_group_active));
        this.jCheckBoxAddInOrder.setSelected(setSelect(object.health_family_planing_group_add_order));


        if(object.getObjectId()!=null)
            theFPSGroup.vFPSItem = theHosManage.theHosControl.theFamilyPlaningControl
                    .selectItemSupplySetBySupplyGroup(object.getObjectId(),null);
        else
            theFPSGroup.vFPSItem = new Vector();

        setFPSItemV(theFPSGroup.vFPSItem);//
    }
    
    /**
     * ใช้ในการให้ค่าจาก GUI ให้กับ Object
     * @author ผดุงรัฐ
     */
    public FamilyPlaningSupplyGroup getFPSGroup()
    {
        if(theFPSGroup == null)
            theFPSGroup = new FamilyPlaningSupplyGroup();
        
        theFPSGroup.f_health_family_planing_group_type_id = getDataInConbobox(this.jComboBoxTypeSupply);
        theFPSGroup.health_family_planing_group_add_order  = getSelect(this.jCheckBoxAddInOrder.isSelected());
        theFPSGroup.health_family_planing_group_description = this.jTextFieldName.getText();
        theFPSGroup.health_family_planing_group_factor = this.integerTextFieldAppointment.getText();
        theFPSGroup.health_family_planing_group_number = this.jTextFieldCode.getText();
        theFPSGroup.health_family_planning_group_active = getSelect(this.jCheckBoxActive.isSelected());
        
        return theFPSGroup;
    }
    
    /**
     * ใช้ในการนำค่าจาก GUI ให้กับ Object และทำการบันทึกรายการเวชภัณฑ์
     * @author ผดุงรัฐ
     */
    public void saveSetupFamilyPlaningItem()
    {
        theFPSGroup = this.getFPSGroup();
        if(theFPSGroup.getObjectId() == null)
        {
            if(checkCode()){
                theFPSGroup = null;
                return;
            }
            if(checkName()){
                theFPSGroup = null;
                return;
            }
        }
        theHosManage.theHosControl.theFamilyPlaningControl
                .saveSetupFimilyPlaningItemSet(theFPSGroup);
        searhSetupFamilyPlaningSupplyGroup();
        setEnableButton(true,0,0);
    }
    
    
    /**
     *ใช้ในการหาค่า รหัส ที่ Combobox เก็บอยู่เมื่อมีการเลือกรายการนั้น
     *@param combobox เป็น combobox ที่ต้องการทราบ รหัส
     *@return String เป็น code ที่ได้ออกมา
     */
    private String getDataInConbobox(javax.swing.JComboBox combobox)
    {
        return ComboboxModel.getCodeComboBox(combobox);
    }
    /**
     *  ใช้ในการกำหนดให้ combobox แสดงข้อมูลตามที่กำหนด
     *@param combobox เป็น combobox ที่ต้องการจะให้แสดง
     *@param code เป็น String ของ รหัส ที่จะกำหนดให้ combobox แสดงเป็นข้อความ
     */
    public boolean setShowConbobox(javax.swing.JComboBox combobox,String code)
    {
        return ComboboxModel.setCodeComboBox(combobox,code);
    }
    /**
     *  ใช้ในการแปลงข้อมูลตัวเลข จาก 1 เป็น true 0 หรือ อื่นๆ เป็น false
     *@param select เป็น String ของ 1 หรือ 0 ถ้าไม่ใช้ทั้ง 2 ตัว จะให้ค่าเป็น false
     *@return เป็น boolean
     */
    public boolean setSelect(String select)
    {
        try
        {
            if(select.equalsIgnoreCase("1"))
                return true;
            else
                return false;
        }
        catch(Exception ex)
        {
            return false;
        }
    }
    /**
     *  ใช้ในการแปลงข้อมูล จาก boolean เป็นตัวอักษร จาก true เป็น 1 false เป็น 0
     *@param select เป็น boolean
     *@return เป็น String เป็น 0 และ 1
     */
    public String getSelect(boolean select)
    {
        try
        {
            if(select)
                return "1";
            else
                return "0";
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
            return "0";
        }
    }
    
    /**
     * ใช้ในการแสดงผลของรายการเวชภัณฑ์บนตาราง
     *@param vc เป็น Vector ของ Object FamilyPlaningSupplyGroup
     *
     */
    public void setFPSGroupV(Vector vc)
    {
        tablemodel = new TableModel(colListSupply,0);
        if(vc!=null)
        {
            tablemodel = new TableModel(colListSupply,vc.size());
            for(int i = 0; i< vc.size() ;i++)
            {
                FamilyPlaningSupplyGroup theFPSGroup = new FamilyPlaningSupplyGroup();
                theFPSGroup = (FamilyPlaningSupplyGroup)vc.get(i);
                tablemodel.setValueAt(theFPSGroup.health_family_planing_group_number,i,0);
                tablemodel.setValueAt(theFPSGroup.health_family_planing_group_description,i,1);
                
            }
        }
        jTableShowSupply.setModel(tablemodel);
        jTableShowSupply.setRowHeight(20);
    }
    /**
     * ใช้ในการแสดงผลของรายการย่อยของรายการเวชภัณฑ์บนตาราง
     *@param vc เป็น Vector ของ Object FamilyPlaningSupplyItem
     *
     */
    public void setFPSItemV(Vector vc)
    {   
        tablemodel = new TableModel(colDetailSupply,0);
        if(vc!=null)
        {
            tablemodel = new TableModel(colDetailSupply,vc.size());
            for(int i = 0; i< vc.size() ;i++)
            {
                theFPSItem = (FamilyPlaningSupplyItem)vc.get(i);
                tablemodel.setValueAt(theFPSItem.common_name, i,0);
            }            
        }
        jTableDetailSupplySet.setModel(tablemodel);
        jTableDetailSupplySet.setRowHeight(20);
        
    }
    /**
     *  ใช้ในการบันทึกรายการ
     */
    private void saveItemSupplySet(FamilyPlaningSupplyItem fps)
    {
        this.theHosManage.theHosControl.theFamilyPlaningControl.saveItemSupplySet(fps);
    }
    
    private void addItemSupplySet(Item item)
    {
        if(item !=null)
        {
            theFPSItem = new FamilyPlaningSupplyItem();
            getFPSGroup();
            if(theFPSGroup.vFPSItem == null)
                theFPSGroup.vFPSItem = new Vector();
            
            theFPSItem.b_health_family_planing_group_id = theFPSGroup.getObjectId();
            theFPSItem.b_item_id = item.getObjectId();
            theFPSItem.common_name = item.common_name;
            theFPSGroup.vFPSItem.add(theFPSItem);
            saveItemSupplySet(theFPSItem);
        }
        setFPSItemV(theFPSGroup.vFPSItem);//2
    }
    
    private void setLanguage()
    {
        /***jLabel***/ 
        jLabelDose.setText(GutilPCU.getTextBundle(jLabelDose.getText()));
        jLabelQuantity.setText(GutilPCU.getTextBundle(jLabelQuantity.getText()));
        jLabelHeader.setText(GutilPCU.getTextBundle(jLabelHeader.getText()));
        
        jLabelCode.setText(GutilPCU.getTextBundle(jLabelCode.getText()));
        jLabelName.setText(GutilPCU.getTextBundle(jLabelName.getText()));
        jLabelAppointmant.setText(GutilPCU.getTextBundle(jLabelAppointmant.getText()));
        jLabelDay.setText(GutilPCU.getTextBundle(jLabelDay.getText()));
        jLabelTypeSupply.setText(GutilPCU.getTextBundle(jLabelTypeSupply.getText()));
        /***jButton***/
        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));
        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));
        jButtonSearch.setText(GutilPCU.getTextBundle(jButtonSearch.getText()));
        jButtonAddItem.setText(GutilPCU.getTextBundle(jButtonAddItem.getText()));
        jButtonDelItem.setText(GutilPCU.getTextBundle(jButtonDelItem.getText()));
        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));
        jButtonSaveDose.setText(GutilPCU.getTextBundle(jButtonSaveDose.getText()));
        jCheckBoxSpecialUsage.setText(GutilPCU.getTextBundle(jCheckBoxSpecialUsage.getText()));
        
        /***TitledBorder***/
        GutilPCU.JPanelLabler(jPanelSearch);
        GutilPCU.JPanelLabler(jPanelDetail);
        GutilPCU.JPanelLabler(jPanelDetailSupplySet);
        GutilPCU.JPanelLabler(jPanelDrug);
        GutilPCU.JPanelLabler(jPanelBlank);
        
        /***CheckBox***/
        jCheckBoxAddInOrder.setText(GutilPCU.getTextBundle(jCheckBoxAddInOrder.getText()));
        
        colListSupply[0]  = GutilPCU.getTextBundle(colListSupply[0]);
        colListSupply[1]  = GutilPCU.getTextBundle(colListSupply[1]);
        colDetailSupply[0]  = GutilPCU.getTextBundle(colDetailSupply[0]);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.pcu.utility.FontTitle fontTitle1;
    private com.pcu.utility.IntegerTextField integerTextFieldAppointment;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddItem;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonDelItem;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveDose;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxActive;
    private javax.swing.JCheckBox jCheckBoxAddInOrder;
    private javax.swing.JCheckBox jCheckBoxShearchActive;
    private javax.swing.JCheckBox jCheckBoxSpecialUsage;
    private javax.swing.JComboBox jComboBoxFrequency;
    private javax.swing.JComboBox jComboBoxInstruction;
    private javax.swing.JComboBox jComboBoxQty;
    private javax.swing.JComboBox jComboBoxTypeSupply;
    private javax.swing.JComboBox jComboBoxUse;
    private javax.swing.JLabel jLabelAppointmant;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDay;
    private javax.swing.JLabel jLabelDose;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelQuantity;
    private javax.swing.JLabel jLabelTypeSupply;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelBlank;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelChooseSpecial;
    private javax.swing.JPanel jPanelDescription;
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JPanel jPanelDetailDrug;
    private javax.swing.JPanel jPanelDetailSupplySet;
    private javax.swing.JPanel jPanelDose;
    private javax.swing.JPanel jPanelDrug;
    private javax.swing.JPanel jPanelHead;
    private javax.swing.JPanel jPanelInput;
    private javax.swing.JPanel jPanelNavigatorButton;
    private javax.swing.JPanel jPanelQuantity;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelShows;
    private javax.swing.JPanel jPanelSpecialNote;
    private javax.swing.JPanel jPaneldetailDose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableDetailSupplySet;
    private javax.swing.JTable jTableShowSupply;
    private javax.swing.JTextArea jTextAreaTextUsage;
    private javax.swing.JTextField jTextFieldCaution;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldFrequencyCode;
    private javax.swing.JTextField jTextFieldInstructionCode;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldQtyUnit;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JTextField jTextFieldUseUnit;
    // End of variables declaration//GEN-END:variables
    
    public void notifylistEpiSetGroup(EpiSetGroup epiSetGroup) {
        Constant.println("notifylistEpiSetGroup");
    }

    public void notifylistItemByGroup(Item item,boolean flag) {
        if(!flag)
            addItemSupplySet(item);
    }
}
