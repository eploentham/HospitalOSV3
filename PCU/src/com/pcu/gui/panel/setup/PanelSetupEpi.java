/*
 * PanelSetupEpi.java
 *
 * Created on 27 มิถุนายน 2548, 9:33 น.
 */

package com.pcu.gui.panel.setup;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.HosManage;
import com.pcu.control.SetupPcuControl;
import com.pcu.gui.dialog.DialogSetupSearchPcu;
import com.pcu.gui.dialog.HosDialog;
import com.pcu.subject.ManageEpiSetReq;
import com.pcu.subject.SetupSubjectPcu;
import java.awt.*;
import java.util.Vector;
import java.awt.event.*;
import com.hosv3.utility.connection.UpdateStatus;
//import com.hospital_os.utility.*;
import com.hospital_os.object.Item;
import com.hospital_os.object.CategoryGroupItem;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Gutil;
import com.hospital_os.utility.TaBleModel;
import com.hosv3.utility.Constant;
import com.pcu.utility.*;
import com.pcu.object.*;

/**
 *
 * @author  jao
 * @modifier pu : 18/09/08
 */
public class PanelSetupEpi extends javax.swing.JPanel implements ManageEpiSetReq
{
    
    public final static String CARD_BLANK = "CARD_BLANK";
    public final static String CARD_DRUG = "CARD_DRUG";
    private SetupSubjectPcu theSetupSubjectPcu;
    private SetupPcuControl theSetupPcuControl;
    private AllComboBoxControl theAllComboBoxControl;
    private Vector vEpiSetGroup = new Vector();
    private Vector vItemEpiSet = new Vector();
    private Vector vDoseEpiDrugSet = new Vector();
    private EpiSet theEpiSet = new EpiSet();
    private EpiSetGroup theEpiSetGroup = new EpiSetGroup();
    private Item theItem = new Item();
    private CategoryGroupItem theCategoryGroupItem = new CategoryGroupItem();
    private DoseEpiSet theDoseEpiSet = new DoseEpiSet();
    
    //DialogSetupSearchPcu  psp;
    HosDialog theHosDialog;
    HosManage theHosManage;
    UpdateStatus theUS;
    int offset = 20;
    int next = 0;
    int prev = 0;
//    int saved = 1;
    boolean flagButtonDel = false;
    /** Creates new form PanelSetupEpi */
    public PanelSetupEpi(HosManage hm,HosDialog hd)
    {
        theHosManage = hm;
        theHosDialog = hd;
        theSetupSubjectPcu = hm.theHosSubject.theSetupSubjectPcu;
        theSetupSubjectPcu.attachManageEpi(this);
        theSetupPcuControl = hm.theHosControl.theSetupPcuControl;
        theAllComboBoxControl = hm.theHosControl.theAllComboBoxControl;
        theUS = theHosManage.theHosUS;
        initComponents();
        setLanguage();
        initDatas();
        searchEpiSetGroup();
        this.jPanelHide.setVisible(false);

    }
    
    public void initDatas()
    {
        ComboboxModel.initComboBox(this.jComboBoxUse,this.theAllComboBoxControl.listUom());
        ComboboxModel.initComboBox(this.jComboBoxInstruction,this.theAllComboBoxControl.listDrugInstruction());
        ComboboxModel.initComboBox(this.jComboBoxFrequency,this.theAllComboBoxControl.listDrugFrequency());
        ComboboxModel.initComboBox(this.jComboBoxQty,this.theAllComboBoxControl.listUom());
        
    }
    
    /**ใช้ในการกำหนดให้ปุ่มลบสามารถทำงานได้หรือไม่
     *จะส่งค่ามาจาก module hospitalos ดังนั้นในต้องทำงานปกติ ไม่ต้องใช้งาน
     *@param enabled เป็น boolean ใช้กำหนด ถ้า true ให้ปุ่ม ลบสามารถทำงานได้ ถ้าเป็น false จะไม่ทำงาน
     */
    public void setEnableButtonSetupPanel(boolean enabled)
    {
        flagButtonDel = enabled;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fontTitle1 = new com.pcu.utility.FontTitle();
        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBoxShearchActive = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabelSetName = new javax.swing.JLabel();
        jTextFieldNameDrugSet = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonAddItem = new javax.swing.JButton();
        jButtonDelItem = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        OtherName2 = new javax.swing.JLabel();
        jTextFieldOtherNameDrugSet = new javax.swing.JTextField();
        OtherName3 = new javax.swing.JLabel();
        jCheckBoxActive = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jPanelBlank = new javax.swing.JPanel();
        jPanelDrug = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanelSPU = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jTextFieldInstructionCode = new javax.swing.JTextField();
        jComboBoxInstruction = new javax.swing.JComboBox();
        jTextFieldFrequencyCode = new javax.swing.JTextField();
        jComboBoxFrequency = new javax.swing.JComboBox();
        jTextFieldUseUnit = new javax.swing.JTextField();
        jComboBoxUse = new javax.swing.JComboBox();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextAreaTextUsage = new javax.swing.JTextArea();
        jPanel14 = new javax.swing.JPanel();
        jLabelQuantity = new javax.swing.JLabel();
        jTextFieldQtyUnit = new javax.swing.JTextField();
        jComboBoxQty = new javax.swing.JComboBox();
        jCheckBoxSpecialUsage = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jLabelDrugInstruction = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jTextFieldCaution = new javax.swing.JTextField();
        jLabelCaution = new javax.swing.JLabel();
        jButtonSaveDose = new javax.swing.JButton();
        jPanelHide = new javax.swing.JPanel();
        OtherName1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jComboBoxLookup1 = new com.hosv3.gui.component.HosComboBox();
        jButtonAddItem1 = new javax.swing.JButton();
        jLabelHeader = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("ค้นหา"));
        jPanel8.setMinimumSize(new java.awt.Dimension(300, 390));
        jPanel8.setPreferredSize(new java.awt.Dimension(300, 390));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextFieldSearch.setFont(defaultFont1);
        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setFont(defaultFont1);
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jButtonSearch, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Back16.gif"))); // NOI18N
        jButton2.setMaximumSize(new java.awt.Dimension(24, 24));
        jButton2.setMinimumSize(new java.awt.Dimension(24, 24));
        jButton2.setPreferredSize(new java.awt.Dimension(24, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(jButton2, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/Forward16.gif"))); // NOI18N
        jButton3.setMaximumSize(new java.awt.Dimension(24, 24));
        jButton3.setMinimumSize(new java.awt.Dimension(24, 24));
        jButton3.setPreferredSize(new java.awt.Dimension(24, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jPanel6, gridBagConstraints);

        jCheckBoxShearchActive.setFont(defaultFont1);
        jCheckBoxShearchActive.setSelected(true);
        jCheckBoxShearchActive.setText("Active");
        jCheckBoxShearchActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShearchActiveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel3.add(jCheckBoxShearchActive, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel8.add(jPanel3, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(270, 50));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 100));

        jTable1.setFont(defaultFont1);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel8.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        add(jPanel8, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(350, 390));
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 390));
        jPanel2.setRequestFocusEnabled(false);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabelSetName.setFont(defaultFont1);
        jLabelSetName.setText("SetName");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabelSetName, gridBagConstraints);

        jTextFieldNameDrugSet.setFont(defaultFont1);
        jTextFieldNameDrugSet.setMaximumSize(new java.awt.Dimension(150, 24));
        jTextFieldNameDrugSet.setMinimumSize(new java.awt.Dimension(150, 24));
        jTextFieldNameDrugSet.setPreferredSize(new java.awt.Dimension(150, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jTextFieldNameDrugSet, gridBagConstraints);

        jScrollPane2.setBorder(null);
        jScrollPane2.setMaximumSize(new java.awt.Dimension(200, 230));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(100, 120));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 230));

        jTable2.setFont(defaultFont1);
        jTable2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable2FocusGained(evt);
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonAddItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddItem.setEnabled(false);
        jButtonAddItem.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddItem.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddItem.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jButtonAddItem, gridBagConstraints);

        jButtonDelItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelItem.setEnabled(false);
        jButtonDelItem.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelItem.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelItem.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButtonDelItem, gridBagConstraints);

        jLabel1.setText("แก้ไขรายการ Item");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        OtherName2.setFont(defaultFont1);
        OtherName2.setText("หากมีมากกว่า 1 ให้คั่นด้วย : ระหว่างรหัส");
        OtherName2.setToolTipText("สำหรับออกรายงาน 18 แฟ้ม");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(OtherName2, gridBagConstraints);

        jTextFieldOtherNameDrugSet.setFont(defaultFont1);
        jTextFieldOtherNameDrugSet.setMaximumSize(new java.awt.Dimension(150, 24));
        jTextFieldOtherNameDrugSet.setMinimumSize(new java.awt.Dimension(150, 24));
        jTextFieldOtherNameDrugSet.setPreferredSize(new java.awt.Dimension(150, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jTextFieldOtherNameDrugSet, gridBagConstraints);

        OtherName3.setFont(defaultFont1);
        OtherName3.setText("รหัสสำหรับออกรายงาน");
        OtherName3.setToolTipText("สำหรับออกรายงาน 18 แฟ้ม");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(OtherName3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jPanel1, gridBagConstraints);

        jCheckBoxActive.setFont(defaultFont1);
        jCheckBoxActive.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jCheckBoxActive, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 11);
        add(jPanel2, gridBagConstraints);

        jPanel5.setLayout(new java.awt.CardLayout());

        jPanelBlank.setBorder(javax.swing.BorderFactory.createTitledBorder("Qualifications"));
        jPanelBlank.setLayout(new java.awt.GridBagLayout());
        jPanel5.add(jPanelBlank, "CARD_BLANK");

        jPanelDrug.setBorder(javax.swing.BorderFactory.createTitledBorder("Qualifications"));
        jPanelDrug.setLayout(new java.awt.GridBagLayout());

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jPanelSPU.setLayout(new java.awt.CardLayout());

        jPanel13.setLayout(new java.awt.GridBagLayout());

        jTextFieldInstructionCode.setFont(defaultFont1);
        jTextFieldInstructionCode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldInstructionCode.setMinimumSize(new java.awt.Dimension(30, 24));
        jTextFieldInstructionCode.setPreferredSize(new java.awt.Dimension(30, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel13.add(jTextFieldInstructionCode, gridBagConstraints);

        jComboBoxInstruction.setFont(defaultFont1);
        jComboBoxInstruction.setMinimumSize(new java.awt.Dimension(160, 24));
        jComboBoxInstruction.setPreferredSize(new java.awt.Dimension(200, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel13.add(jComboBoxInstruction, gridBagConstraints);

        jTextFieldFrequencyCode.setFont(defaultFont1);
        jTextFieldFrequencyCode.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldFrequencyCode.setMinimumSize(new java.awt.Dimension(30, 24));
        jTextFieldFrequencyCode.setPreferredSize(new java.awt.Dimension(30, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel13.add(jTextFieldFrequencyCode, gridBagConstraints);

        jComboBoxFrequency.setFont(defaultFont1);
        jComboBoxFrequency.setMinimumSize(new java.awt.Dimension(31, 24));
        jComboBoxFrequency.setPreferredSize(new java.awt.Dimension(31, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel13.add(jComboBoxFrequency, gridBagConstraints);

        jTextFieldUseUnit.setColumns(3);
        jTextFieldUseUnit.setFont(defaultFont1);
        jTextFieldUseUnit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldUseUnit.setMinimumSize(new java.awt.Dimension(30, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel13.add(jTextFieldUseUnit, gridBagConstraints);

        jComboBoxUse.setFont(defaultFont1);
        jComboBoxUse.setMinimumSize(new java.awt.Dimension(100, 24));
        jComboBoxUse.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel13.add(jComboBoxUse, gridBagConstraints);

        jPanelSPU.add(jPanel13, "Normal");

        jPanel15.setLayout(new java.awt.GridBagLayout());

        jScrollPane11.setMinimumSize(new java.awt.Dimension(22, 45));
        jScrollPane11.setPreferredSize(new java.awt.Dimension(22, 45));
        jScrollPane11.setViewportView(jTextAreaTextUsage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel15.add(jScrollPane11, gridBagConstraints);

        jPanelSPU.add(jPanel15, "Special");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 5);
        jPanel10.add(jPanelSPU, gridBagConstraints);

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jLabelQuantity.setFont(defaultFont1);
        jLabelQuantity.setText("Quantity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel14.add(jLabelQuantity, gridBagConstraints);

        jTextFieldQtyUnit.setColumns(3);
        jTextFieldQtyUnit.setFont(defaultFont1);
        jTextFieldQtyUnit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQtyUnit.setMinimumSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 2, 5);
        jPanel14.add(jTextFieldQtyUnit, gridBagConstraints);

        jComboBoxQty.setFont(defaultFont1);
        jComboBoxQty.setMinimumSize(new java.awt.Dimension(100, 24));
        jComboBoxQty.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel14.add(jComboBoxQty, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel10.add(jPanel14, gridBagConstraints);

        jCheckBoxSpecialUsage.setFont(defaultFont1);
        jCheckBoxSpecialUsage.setText("SpecialUsage");
        jCheckBoxSpecialUsage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSpecialUsageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 5);
        jPanel10.add(jCheckBoxSpecialUsage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelDrug.add(jPanel10, gridBagConstraints);

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jLabelDrugInstruction.setFont(defaultFont1);
        jLabelDrugInstruction.setText("Detail");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel11.add(jLabelDrugInstruction, gridBagConstraints);

        jTextFieldDescription.setFont(defaultFont1);
        jTextFieldDescription.setMinimumSize(new java.awt.Dimension(160, 24));
        jTextFieldDescription.setPreferredSize(new java.awt.Dimension(160, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel11.add(jTextFieldDescription, gridBagConstraints);

        jTextFieldCaution.setFont(defaultFont1);
        jTextFieldCaution.setMinimumSize(new java.awt.Dimension(160, 24));
        jTextFieldCaution.setPreferredSize(new java.awt.Dimension(160, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel11.add(jTextFieldCaution, gridBagConstraints);

        jLabelCaution.setFont(defaultFont1);
        jLabelCaution.setText("Caution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        jPanel11.add(jLabelCaution, gridBagConstraints);

        jButtonSaveDose.setFont(defaultFont1);
        jButtonSaveDose.setText("Save");
        jButtonSaveDose.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonSaveDose.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonSaveDose.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonSaveDose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDoseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        jPanel11.add(jButtonSaveDose, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelDrug.add(jPanel11, gridBagConstraints);

        jPanel5.add(jPanelDrug, "CARD_DRUG");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(jPanel5, gridBagConstraints);

        jPanelHide.setLayout(new java.awt.GridBagLayout());

        OtherName1.setFont(defaultFont1);
        OtherName1.setText("รหัสสำหรับออกรายงาน");
        OtherName1.setToolTipText("สำหรับออกรายงาน 18 แฟ้ม");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelHide.add(OtherName1, gridBagConstraints);

        jScrollPane3.setMinimumSize(new java.awt.Dimension(50, 70));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(50, 70));
        jScrollPane3.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelHide.add(jScrollPane3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanelHide.add(jComboBoxLookup1, gridBagConstraints);

        jButtonAddItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddItem1.setEnabled(false);
        jButtonAddItem1.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddItem1.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddItem1.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItem1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelHide.add(jButtonAddItem1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 11, 3, 3);
        add(jPanelHide, gridBagConstraints);

        jLabelHeader.setFont(fontTitle1);
        jLabelHeader.setText("VaccineSetup");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        add(jLabelHeader, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel7.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDel.setEnabled(false);
        jButtonDel.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel7.add(jButtonDel, gridBagConstraints);

        jButtonSave.setFont(defaultFont1);
        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 11, 10);
        add(jPanel7, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN)
            jTable1MouseReleased(null);
    }//GEN-LAST:event_jTable1KeyReleased
    
    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        
        searchEpiSetGroup();
        clearForm();
    }//GEN-LAST:event_jTextFieldSearchActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        prevSearchSub();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        nextSearchSub();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButtonSaveDoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDoseActionPerformed
        
        if(jTable2.getSelectedRow() != -1)
        {
            saveDoesEpiSet();
        }
    }//GEN-LAST:event_jButtonSaveDoseActionPerformed
    
    private void jCheckBoxSpecialUsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSpecialUsageActionPerformed
        
        if(jCheckBoxSpecialUsage.isSelected())
            showItemSubProperty("Special");
        else
            showItemSubProperty("Normal");
    }//GEN-LAST:event_jCheckBoxSpecialUsageActionPerformed
    
    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        showItemProperty(PanelSetupEpi.CARD_BLANK);
        int row = jTable1.getSelectedRow();
        setEpiSetGroup((EpiSetGroup)vEpiSetGroup.get(row+prev));
        setEnableItem(true);
    }//GEN-LAST:event_jTable1MouseReleased
    
    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        if(jTable2.getSelectedRow()==-1)
            return;
        else if(jTable2.getSelectedRows().length > 1)
            showItemProperty(PanelSetupEpi.CARD_BLANK);
        else
        {
            //jTable1.clearSelection();
            int row = jTable2.getSelectedRow();
            setDoseEpiSetByItemEpiSet((EpiSet)vItemEpiSet.get(row));
            setEnableQualify(true);
        }
    }//GEN-LAST:event_jTable2MouseReleased
    
    private void jTable2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable2FocusGained
        
    }//GEN-LAST:event_jTable2FocusGained
    
    private void jButtonAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddItemActionPerformed
        showItem();
    }//GEN-LAST:event_jButtonAddItemActionPerformed
    
    private void jButtonDelItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelItemActionPerformed
        deleteItem();
        jTable1MouseReleased(null);
    }//GEN-LAST:event_jButtonDelItemActionPerformed
    
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        deleteEpiSet();
        setEnableItem(false);
    }//GEN-LAST:event_jButtonDelActionPerformed
    
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        setEpiSetGroup(null);
        setTableItem(null);
        setDoseItemEpi(null);     
        
        showItemProperty(PanelSetupEpi.CARD_BLANK);        
        setEnableAll(true);
        setEnableItem(true);
        this.jButtonAddItem.setEnabled(false);
        this.jButtonDelItem.setEnabled(false);
    }//GEN-LAST:event_jButtonAddActionPerformed
    
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchEpiSetGroup();
        clearForm();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        recordDoseInVector();
        saveEpiSetGroup();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonAddItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAddItem1ActionPerformed

    private void jCheckBoxShearchActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShearchActiveActionPerformed
        searchEpiSetGroup();
        clearForm();
}//GEN-LAST:event_jCheckBoxShearchActiveActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel OtherName1;
    private javax.swing.JLabel OtherName2;
    private javax.swing.JLabel OtherName3;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.pcu.utility.FontTitle fontTitle1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddItem;
    private javax.swing.JButton jButtonAddItem1;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonDelItem;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveDose;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxActive;
    private javax.swing.JCheckBox jCheckBoxShearchActive;
    private javax.swing.JCheckBox jCheckBoxSpecialUsage;
    private javax.swing.JComboBox jComboBoxFrequency;
    private javax.swing.JComboBox jComboBoxInstruction;
    private com.hosv3.gui.component.HosComboBox jComboBoxLookup1;
    private javax.swing.JComboBox jComboBoxQty;
    private javax.swing.JComboBox jComboBoxUse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCaution;
    private javax.swing.JLabel jLabelDrugInstruction;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelQuantity;
    private javax.swing.JLabel jLabelSetName;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelBlank;
    private javax.swing.JPanel jPanelDrug;
    private javax.swing.JPanel jPanelHide;
    private javax.swing.JPanel jPanelSPU;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextAreaTextUsage;
    private javax.swing.JTextField jTextFieldCaution;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldFrequencyCode;
    private javax.swing.JTextField jTextFieldInstructionCode;
    private javax.swing.JTextField jTextFieldNameDrugSet;
    private javax.swing.JTextField jTextFieldOtherNameDrugSet;
    private javax.swing.JTextField jTextFieldQtyUnit;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JTextField jTextFieldUseUnit;
    // End of variables declaration//GEN-END:variables
  
    private void nextSearchSub()
    {
        if(vEpiSetGroup.size() == this.next)
        {
            theUS.setStatus("ข้อมูลที่แสดงเป็นหน้าสุดท้ายแล้ว",UpdateStatus.WARNING);
            return;
        }
        setTableEpiSet(vEpiSetGroup,1);
    }
    
    
    private void prevSearchSub()
    {
        if(this.prev == 0)
        {
            theUS.setStatus("ข้อมูลที่แสดงเป็นหน้าแรกแล้ว",UpdateStatus.WARNING);
            return;
        }
        setTableEpiSet(vEpiSetGroup,0);
    }
    
    public void setLanguage()
    {
        /***jLabel***/ 
        jLabelSetName.setText(GutilPCU.getTextBundle(jLabelSetName.getText()));
        jLabelDrugInstruction.setText(GutilPCU.getTextBundle(jLabelDrugInstruction.getText()));
        jLabelQuantity.setText(GutilPCU.getTextBundle(jLabelQuantity.getText()));
        jLabelHeader.setText(GutilPCU.getTextBundle(jLabelHeader.getText()));
        
        /***jButton***/
        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));
        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));
        jButtonSearch.setText(GutilPCU.getTextBundle(jButtonSearch.getText()));
        jButtonAddItem.setText(GutilPCU.getTextBundle(jButtonAddItem.getText()));
        jButtonDelItem.setText(GutilPCU.getTextBundle(jButtonDelItem.getText()));
        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));
        jButtonSaveDose.setText(GutilPCU.getTextBundle(jButtonSaveDose.getText()));
        jCheckBoxSpecialUsage.setText(GutilPCU.getTextBundle(jCheckBoxSpecialUsage.getText()));
        
        /***TitledBorder***/
        
        GutilPCU.JPanelLabler(jPanel2);
        
        GutilPCU.JPanelLabler(jPanelDrug);
        GutilPCU.JPanelLabler(jPanelBlank);
        
    }
    
    private void clearForm()
    {
        setTableItem(null);
        vItemEpiSet = new Vector();
        setDoseItemEpi(null);
    }
    
    private void setTableItem(Vector voffice)
    {
        vItemEpiSet = voffice;
        String[] col = {GutilPCU.getTextBundle("OrderName")};
        EpiSet ds = new EpiSet();
        TaBleModel tm ;
        int count = 0;
        if(voffice != null && !voffice.isEmpty())
        {   tm = new TaBleModel(col,voffice.size());
            for(int i=0 ;i<voffice.size(); i++)
            {
                ds = (EpiSet)voffice.get(i);
                String item_code = ds.item_code;
                theItem = this.theSetupPcuControl.listItemByPk(item_code);
//                String str = theItem.common_name;
//                if(theItem.active.equals("0")){
//                    str+=" (ยกเลิก)";
//                    count++;
//                }
                if(theItem!=null){
                    String str = theItem.common_name;
                    if (theItem.active.equals("0")) {
                        str += " (ยกเลิก)";
                        count++;
                    }
                    tm.setValueAt(str,i,0);
                }
                else
                    tm.setValueAt("ไม่พบข้อมูล",i,0);
            }
            jTable2.setModel(tm);
        }
        else
        {
            tm= new TaBleModel(col,0);
            jTable2.setModel(tm);
        }
        jTable2.setRowHeight(20);
        if(count>0)
            theUS.setStatus("รายการวัคซีนย่อยได้ถูกยกเลิกไปจากหน้าจอรายการตรวจรักษา",UpdateStatus.WARNING);
    }
    private void setDoseItemEpi(DoseEpiSet doseitemepi)
    {
        theDoseEpiSet = doseitemepi;
        if(theDoseEpiSet == null)
            theDoseEpiSet = new DoseEpiSet();
        jTextFieldDescription.setText(theDoseEpiSet.description);
        jTextFieldCaution.setText(theDoseEpiSet.caution);
        jTextFieldQtyUnit.setText(theDoseEpiSet.qty);
        ComboboxModel.setCodeComboBox(jComboBoxQty,theDoseEpiSet.purch_uom);
        jTextAreaTextUsage.setText(theDoseEpiSet.usage_text);
        jTextFieldUseUnit.setText(theDoseEpiSet.dose);
        ComboboxModel.setCodeComboBox(jComboBoxUse,theDoseEpiSet.use_uom);
        ComboboxModel.setCodeComboBox(jComboBoxInstruction,theDoseEpiSet.instruction);
        ComboboxModel.setCodeComboBox(jComboBoxFrequency,theDoseEpiSet.frequency);
    }
    
    private void searchEpiSetGroup()
    {
        next = 0;
        prev = 0;
        String search = jTextFieldSearch.getText();
        String active = "0";
        if(jCheckBoxShearchActive.isSelected())
            active = "1";
        vEpiSetGroup = this.theSetupPcuControl.listEpiSetGroup(search, active);
        setTableEpiSet(vEpiSetGroup,1);
    }
    
    
    private void setTableEpiSet(Vector voffice,int off)
    {
        this.vEpiSetGroup = voffice;
        String[] col = {"รหัสวัคซีน",GutilPCU.getTextBundle("SetName")};
        int count = offset;
        int p =0;
        int n =0;
        int c =0;
        if(voffice != null && !voffice.isEmpty() )
        {
            if(off == 1)
            {   p = prev;
                n = next;
                prev = next;
                next = next + offset;
                if(next >= vEpiSetGroup.size())
                {   next = vEpiSetGroup.size();
                    count = next - prev;
                }
                if(count == 0)
                {   prev = p;
                    next = n;
                    count = n - p;
                }
            }
            else
            {   next = prev;
                prev = prev - offset;
                if(prev <=0)
                {    prev = 0;
                     next = offset;
                }
                if(next >= vEpiSetGroup.size())
                {   next= vEpiSetGroup.size();
                    count = next;
                }
            }
            TaBleModel tm = new TaBleModel(col,count);
            EpiSetGroup dsg = null;
            for(int i=0 ;i<count;i++)
            {
                dsg = (EpiSetGroup)voffice.get(i+prev);
                if(dsg != null && dsg.description!=null)
                {
                    try
                    {
                        if(dsg.other_description == null)
                            tm.setValueAt("",i,0);
                        else
                            tm.setValueAt(dsg.other_description,i,0);
                        tm.setValueAt(dsg.description,i,1);
                        
                    }
                    catch(Exception ex)
                    {  ex.printStackTrace();
                    }
                }
            }
            jTable1.setModel(tm);
        }
        else
        {
            TaBleModel tm = new TaBleModel(col,0);
            jTable1.setModel(tm);
        }
        jTable1.setRowHeight(20);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(175);
    }
    
    private void insertEpiSet()
    {
        setEnableAll(true);
        clearAll();
        setTableItem(null);
    }
    
    private void setEnableItem(boolean b)
    {
        jButtonAddItem.setEnabled(b);
        jButtonDelItem.setEnabled(b);
        
    }
    
    private void setEnableAll(boolean b)
    {
        jTextFieldNameDrugSet.setEditable(b);
        jButtonAddItem.setEnabled(b);
        jButtonDelItem.setEnabled(b);
        jButtonSave.setEnabled(b);
        if(flagButtonDel)
            jButtonDel.setEnabled(false);  //ค่อยแก้เป็น true ถึงจะลบได้
        else
            jButtonDel.setEnabled(b);
    }
    
    private void setEnableQualify(boolean b)
    {
        jTextFieldDescription.setEnabled(b);
        jTextFieldCaution.setEnabled(b);
        jCheckBoxSpecialUsage.setEnabled(b);
        jTextFieldInstructionCode.setEnabled(b);
        jComboBoxInstruction.setEnabled(b);
        jTextFieldUseUnit.setEnabled(b);
        jComboBoxUse.setEnabled(b);
        jTextFieldFrequencyCode.setEnabled(b);
        jComboBoxFrequency.setEnabled(b);
        jTextFieldQtyUnit.setEnabled(b);
        jComboBoxQty.setEnabled(b);
        jButtonSaveDose.setEnabled(b);
        
    }
    
    private void setEpiSetGroup(EpiSetGroup epigroup)
    {
        theEpiSetGroup = epigroup;
        if(theEpiSetGroup == null)
            theEpiSetGroup = new EpiSetGroup();
        setEnableAll(true);
        setDoseItemEpi(null);
        jTextFieldOtherNameDrugSet.setText(theEpiSetGroup.other_description);
        jTextFieldNameDrugSet.setText(theEpiSetGroup.description);
        jCheckBoxActive.setSelected(theEpiSetGroup.getActive());
        if(theEpiSetGroup.getObjectId() != null && !theEpiSetGroup.getObjectId().equals(""))
            searchItemEpi(theEpiSetGroup.getObjectId());
    }
    
    private void searchItemEpi(String pk)
    {
        vItemEpiSet = theSetupPcuControl.listEpiSetByGroup(pk);
        setTableItem(vItemEpiSet);
    }
    
    //@depricated pu
    private void searchDoseItemEpi()
    {
        for(int i=0;vItemEpiSet != null && i<vItemEpiSet.size();i++)
        {
            EpiSet episet = (EpiSet)vItemEpiSet.get(i);
            if(episet.getObjectId() != null)
            {
                DoseEpiSet des = theSetupPcuControl.listDoseEpiSet(episet);
                vDoseEpiDrugSet.add(des);
                //((EpiSet)drugSet.get(i)).dose_epi_set = theDoseEpiSet;
            }
        }
    }
    
    private void clearAll()
    {
        jTextFieldNameDrugSet.setText("");
        jTextFieldOtherNameDrugSet.setText("");
    }
    
    public void recordDoseInVector()
    {
        try
        {
            
            int row = jTable2.getSelectedRow();
            if(row != -1)
            {
                if(vItemEpiSet !=null || vItemEpiSet.size() != 0)
                {
                    theEpiSet.dose_epi_set = ((EpiSet) vItemEpiSet.get(row)).dose_epi_set;
                    if(theEpiSet.dose_epi_set == null)
                        theEpiSet.dose_epi_set = new DoseEpiSet();
                    theEpiSet.dose_epi_set.item_code = theEpiSet.item_code;
                    theEpiSet.dose_epi_set.caution = jTextFieldCaution.getText();
                    theEpiSet.dose_epi_set.description = jTextFieldDescription.getText();
                    theEpiSet.dose_epi_set.dose = jTextFieldUseUnit.getText();
                    theEpiSet.dose_epi_set.frequency = ComboboxModel.getCodeComboBox(jComboBoxFrequency);
                    theEpiSet.dose_epi_set.instruction = ComboboxModel.getCodeComboBox(jComboBoxInstruction);
                    theEpiSet.dose_epi_set.purch_uom = ComboboxModel.getCodeComboBox(jComboBoxQty);
                    theEpiSet.dose_epi_set.qty = jTextFieldQtyUnit.getText();
                    if(jCheckBoxSpecialUsage.isSelected())
                        theEpiSet.dose_epi_set.usage_special = "1";
                    else
                        theEpiSet.dose_epi_set.usage_special = "0";
                    theEpiSet.dose_epi_set.usage_text = jTextAreaTextUsage.getText();
                    theEpiSet.dose_epi_set.use_uom = ComboboxModel.getCodeComboBox(jComboBoxUse);
                    theEpiSet.dose_epi_set.printting = theItem.printable;
                }
                else
                {   vItemEpiSet = new Vector();
                }
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    private DoseEpiSet getDoseEpiSet()
    {
        if(theDoseEpiSet == null)
            theDoseEpiSet = new DoseEpiSet();
        theDoseEpiSet.epi_set_key_id = theEpiSet.getObjectId();
        //theEpiSet.dose_epi_set.item_code = theEpiSet.item_code;
        theDoseEpiSet.caution = jTextFieldCaution.getText();
        theDoseEpiSet.description = jTextFieldDescription.getText();
        theDoseEpiSet.dose = jTextFieldUseUnit.getText();
        theDoseEpiSet.frequency = ComboboxModel.getCodeComboBox(jComboBoxFrequency);
        theDoseEpiSet.instruction = ComboboxModel.getCodeComboBox(jComboBoxInstruction);
        theDoseEpiSet.purch_uom = ComboboxModel.getCodeComboBox(jComboBoxQty);
        theDoseEpiSet.qty = jTextFieldQtyUnit.getText();
        if(jCheckBoxSpecialUsage.isSelected())
            theDoseEpiSet.usage_special = "1";
        else
            theDoseEpiSet.usage_special = "0";
        theDoseEpiSet.usage_text = jTextAreaTextUsage.getText();
        theDoseEpiSet.use_uom = ComboboxModel.getCodeComboBox(jComboBoxUse);
        theDoseEpiSet.printting = theItem.printable;
        return theDoseEpiSet;
    }
    
    private EpiSetGroup getEpiSetGroup()
    {
        if(theEpiSetGroup == null )
            theEpiSetGroup = new EpiSetGroup();
        theEpiSetGroup.other_description = Gutil.CheckReservedWords(jTextFieldOtherNameDrugSet.getText());
        theEpiSetGroup.description = Gutil.CheckReservedWords(jTextFieldNameDrugSet.getText());
        theEpiSetGroup.setActive(jCheckBoxActive.isSelected());
        return theEpiSetGroup;
    }
    
    /***
     * กดปุ่มบันทึกกลุ่มวัคซีน
     * 
     * @modifier pu
     * @date 18/09/08
     */
    private void saveEpiSetGroup()
    {
            theEpiSetGroup = getEpiSetGroup();
            this.theSetupPcuControl.saveEpiSetGroup(theEpiSetGroup);
            if(vItemEpiSet!=null && !vItemEpiSet.isEmpty())
            {
                this.theSetupPcuControl.saveEpiDrugSet(vItemEpiSet);                
                for(int i=0;i<vItemEpiSet.size();i++)
                {
                    EpiSet episet = (EpiSet)vItemEpiSet.get(i);
                    if(episet.dose_epi_set != null)
                    {
                        episet.dose_epi_set.epi_set_key_id = episet.getObjectId();
                        vDoseEpiDrugSet.add(episet.dose_epi_set);
                    }
                }
                this.theSetupPcuControl.saveDoseEpiSet(vDoseEpiDrugSet);
            }
            if(theEpiSetGroup.getActive() == false)
            {
                setEpiSetGroup(null);
                this.setTableItem(null);                
            }
            setEnableItem(true);
            searchEpiSetGroup();           
    }   
    
    
    private void deleteEpiSet()
    {
        boolean confirm = this.theHosManage.theHosInf.confirmBox(Constant.getTextBundle("ยืนยันที่จะลบรายการชุดวัคซีน"), UpdateStatus.WARNING);
        if(!confirm) return;
        this.theSetupPcuControl.deleteEpiSetGroup(getEpiSetGroup());
        setEnableAll(false);
        clearAll();
        searchEpiSetGroup();
        setTableItem(null);        
    }
    
    
    private void deleteItem()
    { 
        //Pu:01/09/2549 : ลบรายการ Item ครั้งละหลาย record
        int rows[] = jTable2.getSelectedRows();
        if(rows.length >= 0)
        {
            //theEpiSet  = (EpiSet)this.drugSet.get(rows[i]);
            this.theSetupPcuControl.deleteEpiSetReq(this.vItemEpiSet,rows);
        }
    }    
    
    DialogSetupSearchPcu theDialogSetupSearchPcu;
    private void showItem()
    {
        if(theDialogSetupSearchPcu==null)
            theDialogSetupSearchPcu = new DialogSetupSearchPcu(null, true,theHosManage);
        theDialogSetupSearchPcu.showSearch(6);
    }
    
    
    private void setDoseEpiSetByItemEpiSet(EpiSet itemepi)
    {
        theEpiSet = itemepi;
        if(theEpiSet != null)
            theItem = theSetupPcuControl.listItemByPk(theEpiSet.item_code);
        theDoseEpiSet = theSetupPcuControl.listDoseEpiSet(theEpiSet);
        if(theItem != null)
        {
            theCategoryGroupItem = theSetupPcuControl.listCategoryGroupItemByPk(theItem.item_group_code_category);
            if (theCategoryGroupItem.category_group_code.equals("1"))
            {
                showItemProperty(PanelSetupEpi.CARD_DRUG);
                if(theDoseEpiSet !=null)
                {
                    if(theDoseEpiSet.usage_special.trim().equalsIgnoreCase("1"))
                    {
                        jCheckBoxSpecialUsage.setSelected(true);
                        showItemSubProperty("Special");
                    }
                    else
                    {
                        jCheckBoxSpecialUsage.setSelected(false);
                        showItemSubProperty("Normal");
                    }
                    setDoseItemEpi(theDoseEpiSet);
                }
                else
                    setDoseItemEpi(null);
            }
            else
                showItemProperty(PanelSetupEpi.CARD_BLANK);
        }
    }
    
    public void showItemSubProperty(String type)
    {
        CardLayout layout = (CardLayout)jPanelSPU.getLayout();
        layout.show(jPanelSPU, type);
    }
    
    public void showItemProperty(String type)
    {
        
        CardLayout layout = (CardLayout)this.jPanel5.getLayout();
        layout.show(this.jPanel5, type);
    }
    
    private void addItemEpiSet(com.hospital_os.object.Item item)
    {
        if(item !=null)
        {
            theItem = item;
            EpiSet episet = new EpiSet();
            if(vItemEpiSet == null)
                vItemEpiSet = new Vector();
            
            episet.epi_set_group_key_id = theEpiSetGroup.getObjectId();
            episet.item_code = theItem.getObjectId();
            vItemEpiSet.add(episet);
            
            //saveItemSupplySet(theFamilyPlaningSupplyItem);
            this.theSetupPcuControl.saveEpiset(episet);
        }
        setTableItem(vItemEpiSet);
    }
    
    private void saveDoesEpiSet()
    {
        this.theHosManage.theHosControl.theSetupPcuControl.saveDoseEpiSet(getDoseEpiSet());
    }
    
    public void notifylistItemByGroup(Item item,boolean flag)
    {
        if(!flag==false)
        {
            addItemEpiSet(item);
        }
        
    }
    public void notifylistEpiSetGroup(EpiSetGroup epiSetGroup)
    {
        
    }
}
