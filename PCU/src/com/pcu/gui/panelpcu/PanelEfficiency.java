/*
 * PanelEfficiency.java
 *
 * Created on 13 มิถุนายน 2548, 11:30 น.
 */
/*
 * ตรวจสอบวันที่สำรวจแล้ว
 * kingland
 */
package com.pcu.gui.panelpcu;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.Vector;
import com.pcu.utility.*;
import com.pcu.object.Efficiency;
import com.hosv3.utility.connection.UpdateStatus;
import com.hospital_os.utility.*;
import com.hospital_os.object.Visit;  
import com.hospital_os.object.Employee;
import com.hospital_os.object.Patient;
import com.hospital_os.object.Dischar;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.HosManage;
import com.pcu.control.ExtraClinicServiceControl;
import com.pcu.object.Family;
/**
 *
 * @author  Noom
 */
public class PanelEfficiency extends javax.swing.JPanel {
    private static HosManage theHosManage;
    private ExtraClinicServiceControl theExtraClinicServiceControl;
    private DefaultTableCellRenderer rendererCenter;
    private AllComboBoxControl theAllComboBoxControl;
    private Efficiency theEfficiency = new Efficiency();
    private Vector vEfficiency;
    
    private Visit theVisit;
    private Employee theEmployee;
    private Patient thePatient;
    private Family theFamily;
    private PCUObject pcuobject ;
    JFrame theFrame;
    private boolean checksurvey;
    private UpdateStatus theUS;
    
    /** Creates new form PanelEfficiency */
    public PanelEfficiency() {
        initComponents();
    }

    public void setControl(HosManage hm,HosDialog hd,UpdateStatus us)
    {
        setLanguage();
        theUS = us;
        theHosManage = hm;   
        pcuobject = hm.thePO;        
        theExtraClinicServiceControl = theHosManage.theHosControl.theExtraClinicServiceControl;
        theAllComboBoxControl = theHosManage.theHosControl.theAllComboBoxControl;
        initBalloon();
        setEnabled(false);
    }
     private void initBalloon()
    {
        theHosManage.theHosControl.balloon.add(jTextAreaEfficiencyDetail);
        jTextAreaEfficiencyDetail.setControl(theHosManage.theHosInf.getVitalTemplate());
        jTextAreaEfficiencyDetail.setJFrame(getJFrame());        
    }
    /** ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI */
    public void setObject(PCUObject pcuobject) 
    {   System.out.println("_henbe_______________________" + this.getClass().toString());
        this.pcuobject = pcuobject;        
        theFamily = pcuobject.getFamily();        
        if(pcuobject != null) 
        {   if(pcuobject.getEmployee() != null) 
            {   theEmployee = pcuobject.getEmployee();
            }
            theVisit = null;
            if(pcuobject.getVisit() != null) 
            {   theVisit = pcuobject.getVisit();
            }            
            thePatient = null;
            if(pcuobject.getPatient() != null) 
            {   thePatient = pcuobject.getPatient();
                setFromEnable(true);
            }
            listEfficiency();
            theEfficiency = new Efficiency();  
        }
        if(!checkPatientAndFamily())
        {   setEnabled(false);
        }
        else if(checkDead())
        {   setEnabled(false);
        }
        showEfficiencyDetail(null);
    }
    
    public void setObjectFamily (Family family)
    {   System.out.println("_henbe other_______________________" + this.getClass().toString());     
        theFamily = family;
        thePatient = null;
        theVisit = null;
        if(theFamily!=null)
        {               
            setFromEnable(true);
        }        
        listEfficiency();
        theEfficiency = new Efficiency();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelEfficiencyList = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableEfficiencyData = new javax.swing.JTable();
        jPanelEfficiencyDetail = new javax.swing.JPanel();
        jPanelEfficiencyData = new javax.swing.JPanel();
        jPanelRemark = new javax.swing.JPanel();
        jLabelRemark = new javax.swing.JLabel();
        jTextAreaEfficiencyRemark = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaEfficiencyDetail = new com.hosv3.gui.component.BalloonTextArea();
        dateComboBoxSurvey = new com.pcu.utility.DateComboBox();
        jLabelSurveyDate = new javax.swing.JCheckBox();
        jPanel16 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dateComboBoxCheck = new com.hospital_os.utility.DateComboBox();
        jLabel8 = new javax.swing.JLabel();
        timeTextFieldCheck = new com.hospital_os.utility.TimeTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabelVN = new javax.swing.JLabel();
        jPanelEfficiencyControl = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(700, 299));
        setPreferredSize(new java.awt.Dimension(700, 464));
        jPanelEfficiencyList.setLayout(new java.awt.GridBagLayout());

        jPanelEfficiencyList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Efficiency_Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelEfficiencyList.setMinimumSize(new java.awt.Dimension(200, 200));
        jPanelEfficiencyList.setPreferredSize(new java.awt.Dimension(200, 200));
        jTableEfficiencyData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "VisitDate"
            }
        ));
        jTableEfficiencyData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableEfficiencyDataMouseReleased(evt);
            }
        });

        jScrollPaneTable.setViewportView(jTableEfficiencyData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelEfficiencyList.add(jScrollPaneTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 0);
        add(jPanelEfficiencyList, gridBagConstraints);

        jPanelEfficiencyDetail.setLayout(new java.awt.GridBagLayout());

        jPanelEfficiencyDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Efficiency_Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelEfficiencyDetail.setMinimumSize(new java.awt.Dimension(500, 299));
        jPanelEfficiencyDetail.setPreferredSize(new java.awt.Dimension(500, 299));
        jPanelEfficiencyData.setLayout(new java.awt.GridBagLayout());

        jPanelRemark.setLayout(new java.awt.GridBagLayout());

        jLabelRemark.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRemark.add(jLabelRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelRemark.add(jTextAreaEfficiencyRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelEfficiencyData.add(jPanelRemark, gridBagConstraints);

        jScrollPane4.setMaximumSize(new java.awt.Dimension(30, 150));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(30, 150));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(30, 100));
        jScrollPane4.setViewportView(jTextAreaEfficiencyDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelEfficiencyData.add(jScrollPane4, gridBagConstraints);

        dateComboBoxSurvey.setEnabled(false);
        dateComboBoxSurvey.setText("");
        dateComboBoxSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSurveyActionPerformed(evt);
            }
        });
        dateComboBoxSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxSurveyFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelEfficiencyData.add(dateComboBoxSurvey, gridBagConstraints);

        jLabelSurveyDate.setText("SurveyDate");
        jLabelSurveyDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabelSurveyDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jLabelSurveyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabelSurveyDateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelEfficiencyData.add(jLabelSurveyDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanelEfficiencyDetail.add(jPanelEfficiencyData, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel7, gridBagConstraints);

        dateComboBoxCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(dateComboBoxCheck, gridBagConstraints);

        jLabel8.setText("\u0e19.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel16.add(jLabel8, gridBagConstraints);

        timeTextFieldCheck.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheckKeyReleased(evt);
            }
        });
        timeTextFieldCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheckMouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(timeTextFieldCheck, gridBagConstraints);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif")));
        jLabel9.setToolTipText("\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e15\u0e23\u0e27\u0e08");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel9, gridBagConstraints);

        jLabelVN.setText("VN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(jLabelVN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelEfficiencyDetail.add(jPanel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 5, 11, 11);
        add(jPanelEfficiencyDetail, gridBagConstraints);

        jPanelEfficiencyControl.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSave.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonSave.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonSave.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelEfficiencyControl.add(jButtonSave, gridBagConstraints);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelEfficiencyControl.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelEfficiencyControl.add(jButtonDel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 11, 11);
        add(jPanelEfficiencyControl, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jLabelSurveyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabelSurveyDateActionPerformed
        this.dateComboBoxSurvey.setEnabled(jLabelSurveyDate.isSelected());
        if(!jLabelSurveyDate.isSelected())
            dateComboBoxSurvey.setText("");
    }//GEN-LAST:event_jLabelSurveyDateActionPerformed


    private void timeTextFieldCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheckMouseClicked
        timeTextFieldCheck.selectAll();
    }//GEN-LAST:event_timeTextFieldCheckMouseClicked


    private void timeTextFieldCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheckKeyReleased

    }//GEN-LAST:event_timeTextFieldCheckKeyReleased


    private void dateComboBoxCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheckKeyReleased

    }//GEN-LAST:event_dateComboBoxCheckKeyReleased

    private void dateComboBoxSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyFocusLost
        checksurvey = false;
        checkDateSurvey();
    }//GEN-LAST:event_dateComboBoxSurveyFocusLost

    private void dateComboBoxSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyActionPerformed
       checkDateSurvey();
        checksurvey = false;
    }//GEN-LAST:event_dateComboBoxSurveyActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
      /* comment for test 05/01/49*/
            if(checkServiceEfficiency()){
                theEfficiency = new Efficiency();
                clearGUIEfficiencyDetail();
                setFromEnable(true);
                jTableEfficiencyData.clearSelection();
            }else{
                theUS.setStatus(GutilPCU.getTextBundle("VisitAlready"),UpdateStatus.WARNING);
            }
            setButtonDel(vEfficiency);
    }//GEN-LAST:event_jButtonAddActionPerformed




    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        deleteEfficiency();
    }//GEN-LAST:event_jButtonDelActionPerformed

    private void jTableEfficiencyDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEfficiencyDataMouseReleased
        int row = jTableEfficiencyData.getSelectedRow();
        if(row != -1) {
            Efficiency theEfficiency = getDataFromObjectEfficiency(row);
            if(theEfficiency != null){
                showEfficiencyDetail(getDataFromObjectEfficiency(row));
                boolean status = theExtraClinicServiceControl.checkStatusVisit(theEfficiency.visit_id);
                if(status) {
                    setFromEnable(true);
                }else{
//                    setFromEnable(false);
                     if(theVisit != null){
                        jButtonAdd.setEnabled(true);
                    }else{
//                        jButtonAdd.setEnabled(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_jTableEfficiencyDataMouseReleased

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed


        if(jTextAreaEfficiencyDetail.getText().trim().equals("")){
            theUS.setStatus(GutilPCU.getTextBundle("EmptyEfficiency"), UpdateStatus.WARNING);
            return;
        }
        if (pcuobject.getFamily() == null){
            theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",UpdateStatus.WARNING);
            return ;
        }
        if(!checkDataEdit() || !setDataToObjectEfficiency()){   
            return ;    
        }
        int ret = theExtraClinicServiceControl.saveEfficiency(theEfficiency);
        if(ret==0)
            return;
        
        int selectRow = -1;
        listEfficiency();
        for(int i=0;i<this.vEfficiency.size();i++){
            Efficiency pp = (Efficiency)vEfficiency.get(i);
            if(pp.getObjectId().equals(theEfficiency.getObjectId())){
                this.jTableEfficiencyData.setRowSelectionInterval(i,i);
                return ;
            }
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private boolean checkServiceEfficiency() {
        boolean result = true;
//        if(vEfficiency != null && theVisit != null) {
//            Efficiency efficiency = null;
//            for(int i = vEfficiency.size()-1 ; i >=0  ; i--) {
//                efficiency = (Efficiency)vEfficiency.get(i);
//                if(efficiency.visit_id.equalsIgnoreCase(theVisit.getObjectId())) {
//                    result =  false;
//                    break;
//                }
//                efficiency = null;
//            }
//        }
        return result;
    }

    private void promptSave(){
        if(theVisit != null && theVisit.getObjectId() != null){
            theEfficiency = new Efficiency();
            clearGUIEfficiencyDetail();
            setFromEnable(true);
        }
    }
    public void setEnabled(boolean flag)
    {
        setFromEnable(flag);
    }
    private void setFromEnable(boolean flag)
    {   jTextAreaEfficiencyDetail.setEnabled(flag);
        jTextAreaEfficiencyRemark.setEnabled(flag);
        jButtonSave.setEnabled(flag);
        jButtonDel.setEnabled(flag);
        jButtonAdd.setEnabled(flag);
        jTableEfficiencyData.setEnabled(flag);
    }

    private void setButtonBeforeAddValue(){
        jButtonAdd.setEnabled(true);
//        jTextAreaEfficiencyDetail.setEnabled(false);
//        jTextAreaEfficiencyRemark.setEnabled(false);
//        jButtonSave.setEnabled(false);
//        jButtonDel.setEnabled(false);
    }
    public void setJFrame(JFrame frame)
    {
        theFrame = frame;
        initBalloon();
    }
    public JFrame getJFrame()
    {
        return theFrame;
    }
    public void setLanguage() {
        GutilPCU.setLanguage(jLabel7);
        GutilPCU.setLanguage(jLabel8);
        /*jButton*/
        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));
        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));
        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));
        jLabelRemark.setText(GutilPCU.getTextBundle(jLabelRemark.getText()));
        jLabelSurveyDate.setText(GutilPCU.getTextBundle(jLabelSurveyDate.getText()));

        /*TitledBorder*/
        GutilPCU.JPanelLabler(jPanelEfficiencyList);
        GutilPCU.JPanelLabler(jPanelEfficiencyDetail);

        GutilPCU.JPanelLabler(jPanelRemark);
    }

    /*นำข้อมูลจาก GUI มา set ค่าให้ Efficiency Object*/
    private boolean setDataToObjectEfficiency() {
        boolean result = true;
        theEfficiency.efficiency_detail = Gutil.CheckReservedWords(jTextAreaEfficiencyDetail.getText());
        theEfficiency.efficiency_remark = Gutil.CheckReservedWords(jTextAreaEfficiencyRemark.getText());
        theEfficiency.efficiency_active = "1";
        if(theEfficiency.getObjectId() == null){
            if(thePatient != null){   
                theEfficiency.patient_id = thePatient.getObjectId();
                theEfficiency.family_id = thePatient.family_id;
            }
            if(theFamily!=null)
               theEfficiency.family_id = theFamily.getObjectId();
            if(pcuobject.getVisit() != null)
                theEfficiency.visit_id = pcuobject.getVisit().getObjectId();
            
            theEfficiency.efficiency_staff_record = theEmployee.getObjectId();
            theEfficiency.efficiency_record_time = com.hospital_os.utility.Gutil.getTextCurrentDateTime(theAllComboBoxControl.theConnectionInf);
        }
        theEfficiency.survey_date = dateComboBoxSurvey.getText();
        theEfficiency.efficiency_modify_time = dateComboBoxCheck.getText()+","+timeTextFieldCheck.getText();
        return result;
    }

    /*สำหรับ clear หน้าจอเมื่อผู้ใช้ทำการกดปุ่ม + หรือ -*/
    public void clearGUIEfficiencyDetail(){
        jTextAreaEfficiencyDetail.setText("");
        jTextAreaEfficiencyRemark.setText("");
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(""));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
    }

    /*นำค่าจาก Efficiency Object มาแสดงผล*/
    public void showEfficiencyDetail(Efficiency theEfficiency){
        if(theEfficiency == null)
            theEfficiency = new Efficiency();
        
        jTextAreaEfficiencyDetail.setText(theEfficiency.efficiency_detail);
        jTextAreaEfficiencyRemark.setText(theEfficiency.efficiency_remark);
        this.dateComboBoxCheck.setText(com.hosv3.utility.DateUtil.convertFieldDate(theEfficiency.efficiency_modify_time));
        if(theEfficiency.efficiency_modify_time.length()<11){
            this.timeTextFieldCheck.setText("");
        }else{
            this.timeTextFieldCheck.setText(theEfficiency.efficiency_modify_time.substring(11));
        }
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(theEfficiency.survey_date));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
        this.jLabelVN.setText("");
        if(!theEfficiency.visit_id.equals("")){
            String vn_id = this.theAllComboBoxControl.readVNbyVid(theEfficiency.visit_id);
            this.jLabelVN.setText("VN:"+vn_id);
        }
    }

    /*บันทึกหรือแก้ไขข้อมูลการบริการฟื้นฟูสมรรถภาพ*/
    public String saveEfficiency()
    {
        if (pcuobject.getFamily() == null)
        {
            theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",UpdateStatus.WARNING);
            return "";
        }
        if(checkDataEdit() && setDataToObjectEfficiency())
        {   
            theExtraClinicServiceControl.saveEfficiency(theEfficiency);
        }
         return theEfficiency.getObjectId();
    }
    /**
     *ตรวจสอบเพศของผู้รับบริการ
     *@param -
     *@return boolean true=ผ่าน false=ไม่ผ่าน
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkSex(boolean showWarningMessage)
    {   boolean result = true;
        //add code by noom สำหรับ check เพศ หญิงเท่านั้น
        if(thePatient != null && !("2").equals(thePatient.f_sex_id))
        {   if(showWarningMessage)
            {
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        //สำหรับ check เพศ หญิงเท่านั้น
        else if(theFamily!=null && !("2").equals(theFamily.f_sex_id))
        {   if(showWarningMessage)
            {   theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        return result;
    }
    /**
     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่
     *@param -
     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkDead()
    {   boolean result = false;
        if(theFamily != null && Dischar.DEATH.equals(theFamily.discharge_status_id))
        {   result = true;
        }
        else if(thePatient != null && Dischar.DEATH.equals(thePatient.discharge_status_id))
        {   result = true;
        }
        return false;//result;
    }
    /**
     *ตรวจสอบ Patient และ Family จาก PCUobject
     *@param -
     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkPatientAndFamily()
    {   boolean result = true;
        if(theFamily == null) result = false;
        return result;
    }
    /**
     *ตรวจสอบข้อมูลก่อนทำการแก้ไข
     *@param -
     *@return true = แก้ไขได้ false = ไม่สามารถแก้ไขได้
     *@author kingland
     *@date 29/08/2549
     */
    private boolean checkDataEdit()
    {   boolean result = true;
        if(theEfficiency == null) theEfficiency = new Efficiency();
        if(theEfficiency.getObjectId() != null && !"".equals(theEfficiency.getObjectId()))
        {   if(theVisit != null && !theVisit.getObjectId().equals(theEfficiency.visit_id))
            {   result = false;
                theUS.setStatus(GutilPCU.getTextBundle("NotSavePreviousVisit"), UpdateStatus.WARNING);
            }
            else if(theVisit == null && !"".equals(theEfficiency.visit_id))
            {   result = false;
                theUS.setStatus(GutilPCU.getTextBundle("NotSavePreviousVisit"), UpdateStatus.WARNING);
            }
        }
        return result;
    }
    /**
     * ใช้ในการเซตปุ่มลบ ว่าสามารถทงานได้หรือไม่ โดยถ้ามีข้อมูลที่จะลบปุ่มก็สามารถทำงานได้
     * @param Vector ของข้อมูลที่จะลบ
     * @return void
     * @author kingland
     * @date 03/06/2549
     */
    private void setButtonDel(Vector vCheckHealth)
    {
        if(vCheckHealth == null || vCheckHealth.size() == 0)
        {
//           jButtonDel.setEnabled(false);
        }
        else
        {   jButtonDel.setEnabled(true);
        }
    }
    /**
     * ลบข้อมูลการบริการฟื้นฟูสมรรถภาพ (เปลี่ยนสถานะของ active)
     * @param -
     * @return -
     * @author kingland
     * @date 03/06/2549
     */
    public void deleteEfficiency(){
        
        int row = jTableEfficiencyData.getSelectedRow();
        if(row == -1) {
            theUS.setStatus("กรุณาเลือกรายการที่ต้องการลบ",UpdateStatus.WARNING);
            return;
        }
        theEfficiency = (Efficiency)vEfficiency.get(row);
        theEfficiency.efficiency_detail = Gutil.CheckReservedWords(jTextAreaEfficiencyDetail.getText());
        theEfficiency.efficiency_remark = Gutil.CheckReservedWords(jTextAreaEfficiencyRemark.getText());
        int ret = theExtraClinicServiceControl.deleteEfficiency(theEfficiency);
        if(ret==0)
            return;
        
        listEfficiency();
        clearGUIEfficiencyDetail();
    }

    private Efficiency getDataFromObjectEfficiency(int row)
    {   theEfficiency = (Efficiency)vEfficiency.get(row);
        return theEfficiency;
    }

    /**
     * Update ข้อมูลการบริการฟื้นฟูสมรรถภาพใน Table ใหม่
     * @param -
     * @return -
     * @author kingland
     * @date 03/06/2549
     */
    public void listEfficiency()
    {
        vEfficiency = null;
        if(theEfficiency != null)
        {   if(thePatient != null&&!thePatient.family_id.equals(""))
            {   vEfficiency = theExtraClinicServiceControl.listEfficiencyByFamilyID();
                setButtonBeforeAddValue();
                setFromEnable(true);
                jButtonAdd.setEnabled(true);
            }
            if(vEfficiency==null)
            {   vEfficiency = new Vector();
                if(theFamily != null)
                {   vEfficiency = theExtraClinicServiceControl.listEfficiencyByFamilyID();
                    setFromEnable(true);
                    jButtonAdd.setEnabled(true);
                }
                clearGUIEfficiencyDetail();                
            }
        }
        setButtonDel(vEfficiency);
        setTableListVisit(vEfficiency);
    }
    
    
    
    
    
    
    


    /*นำข้อมูลจาก Efficiency Object มาแสดงผลในตาราง*/
    private void setTableListVisit(Vector vc) {
        String[] col = { GutilPCU.getTextBundle("No."),GutilPCU.getTextBundle("DateRecord")};
        TableModel tm ;
        if(vc != null) {
            tm= new TableModel(col,vc.size());
            Efficiency efficiency = new Efficiency();
            for(int i=0 ;i<vc.size(); i++) {
                efficiency = (Efficiency)vc.get(i);
                tm.setValueAt(String.valueOf((i+1)),i,0);
                tm.setValueAt(GutilPCU.changDateToString(efficiency.efficiency_modify_time,false),i,1);
            }
        } else {
            tm= new TableModel(col,0);
            //ไม่มีข้อมูลการได้รับบริการของผู้ป่วยคนนี้ กำหนดให้ผู้ป่วยสามารถบันทึกได้ทันที
            promptSave();
        }

        jTableEfficiencyData.setModel(tm);
        setDefaultTableListVisit();
    }

    /*กำหนดรูปแบบของตารางที่ต้องการแสดงผล*/
    private void setDefaultTableListVisit() {
        if(rendererCenter == null){
            rendererCenter = new DefaultTableCellRenderer();
        }
        //กำหนดให้จัด Column ให้อยู่ตรงกลาง
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        jTableEfficiencyData.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);
        jTableEfficiencyData.getColumnModel().getColumn(1).setCellRenderer(rendererCenter);
        //กำหนดความกว้างของตาราง
        jTableEfficiencyData.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTableEfficiencyData.getColumnModel().getColumn(1).setPreferredWidth(150);
    }

    private void setVisit(Visit theVisit){
        this.theVisit = theVisit;
    }

    private void setEmployee(Employee theEmployee)
    {   this.theEmployee = theEmployee;
    }


    private void setPatient(Patient thePatient)
    {   this.thePatient = thePatient;
    }

    /**
     * เช็ควันที่สำรวจว่าเป็นวันในอนาคตหรือไม่
     * @jao
     */
    private void checkDateSurvey()
    {
        if(!dateComboBoxSurvey.getText().equals("")
            && dateComboBoxSurvey.getText().length()==10
            && com.pcu.utility.DateUtil.countDay(dateComboBoxSurvey.getText(),theHosManage.theHosControl.theConnectionInf) == -1
            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxSurvey.getText()),theHosManage.theHosControl.theConnectionInf)==false)
        {
            if(checksurvey == false)
             {
                 // ไม่สามารถกรอกวันที่เป็นวันในอนาคตได้
                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") , UpdateStatus.WARNING);
                checksurvey = true;
             }
        }  
    }
     /**
     *เซตสถานะ
     *@param message = ข้อความ status = สถานะ
     *@return void
     *@author kingland
     *@date 29/08/2549
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck;
    private com.pcu.utility.DateComboBox dateComboBoxSurvey;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelRemark;
    private javax.swing.JCheckBox jLabelSurveyDate;
    private javax.swing.JLabel jLabelVN;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanelEfficiencyControl;
    private javax.swing.JPanel jPanelEfficiencyData;
    private javax.swing.JPanel jPanelEfficiencyDetail;
    private javax.swing.JPanel jPanelEfficiencyList;
    private javax.swing.JPanel jPanelRemark;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JTable jTableEfficiencyData;
    private com.hosv3.gui.component.BalloonTextArea jTextAreaEfficiencyDetail;
    private javax.swing.JTextField jTextAreaEfficiencyRemark;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck;
    // End of variables declaration//GEN-END:variables



}
