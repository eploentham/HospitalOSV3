/*
 * PanelBeforeMch.java
 *
 * Created on 14 มิถุนายน 2548, 16:18 น.
 */
/*jLabelAgeWeek
 * ตรวจสอบวันที่สำรวจแล้ว
 * kingland
 *
//henbe comment 100253 kong ถ้าจะจัดหน้าจอก็ต้องจัดทั้งโปรเจ็คแล้วต้องอยู่นอกช่วงการปรับแก้
 */
package com.pcu.gui.panelpcu;

import com.hospital_os.object.BloodGroup;
import com.hospital_os.object.Office;
import com.hospital_os.object.Site;
import com.hosv3.gui.dialog.DialogOffice;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.HealthServiceControl;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import com.pcu.control.PCUControl;
import javax.swing.*;
import java.util.*;
import com.hospital_os.utility.*;
import com.hospital_os.object.VisitStatus;
import com.hospital_os.object.VitalSign;
import com.hospital_os.object.Dischar;
import com.hospital_os.object.Sex;
import com.pcu.utility.*;
import com.pcu.object.*;
import com.pcu.control.HosManage;
import com.hosv3.usecase.transaction.ManageBalloon;
import com.hosv3.utility.connection.UpdateStatus;
import com.pcu.utility.DateUtil;

/**
 *
 * @author  jao
 */
public class PanelBeforeMch extends javax.swing.JPanel {

    private AllComboBoxControl theAllComboBoxControl;
    private HealthServiceControl theHealthServiceControl;
    private Pregnancy thePregnancy;
    private VitalSign theVitalSign;
    private Vector vPregnancy;
    private Vector vAncPcu;
    private Vector vVitalSign;
    HosManage theHosManage;
    PCUControl theHC;
    JFrame theFrame;
    private boolean checkSurveyPregnant = false;
    private boolean checkSurveyAnc = false;
    private HosDialog theHosDialog;
    private UpdateStatus theUS;
    private DialogOffice theDialogOffice;
    private PCUObject pcuobject;
    private boolean beforcheck;

        String[] colPregnancy = {"ครรภ์ที่",
            "วันที่บนทึก"};
        String[] colAnc = {"No", 
            "AgOfPregnant"};

    /** Creates new form PanelBeforeMch */
    public PanelBeforeMch() {
        initComponents();
    }

    public void setControl(HosManage hm, HosDialog hd, UpdateStatus us) {
        theUS = us;
        theAllComboBoxControl = hm.theHosControl.theAllComboBoxControl;
        theHealthServiceControl = hm.theHosControl.theHealthServiceControl;
        theHosManage = hm;
        theHC = hm.theHosControl;
        pcuobject = hm.thePO;
        theHosDialog = hd;
//        initBalloon();
        this.panelANC1.setControl(this.theAllComboBoxControl, theHealthServiceControl, theHosManage, pcuobject, theUS);
        setLanguage();
        initDatas();

    }

    private void initBalloon() {
        theHosManage.theHosControl.balloon.add(jTextAreaResult);
        jTextAreaResult.setControl(theHosManage.theHosInf.getVitalTemplate());
        jTextAreaResult.setJFrame(getJFrame());
    }

    /**
     * ประกาศค่าเริ่มต้นของComboBox
     * @author jao
     */
    public void initDatas() {
        ComboboxModel.initComboBox(jComboBoxIsBirthControl, theAllComboBoxControl.listFamilyPlaningMethod());
        ComboboxModel.initComboBox(jComboBoxAbNormalFirst, theAllComboBoxControl.listAbNomal());
    }

    public void refresh(String family_id) {
        theHealthServiceControl.listPregnancyByFamilyID(family_id);
    }

    public void setObject(PCUObject po) {
        /** ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI */
        this.pcuobject = po;

        jLabelBloodGroup.setText("");
        if (pcuobject.getFamily() != null) {
            BloodGroup blood = theAllComboBoxControl.readBloodById(pcuobject.getFamily().blood_group_id);
            if (blood != null) {
                jLabelBloodGroup.setText(blood.description);
            }

        }
        setPregnancyV(theHealthServiceControl.listPregnancyByFamilyID());
        setAncPcuV(new Vector());
        jPanelANC.setVisible(false);
        jPanelPregnant.setVisible(true);
        setPregnancy(null);
        setEnabled(pcuobject.getFamily() != null);
        for (int i = 0; i < this.vPregnancy.size(); i++) {
            Pregnancy pp = (Pregnancy) vPregnancy.get(i);
            if (thePregnancy != null && pp.getObjectId().equals(thePregnancy.getObjectId())) {
                this.jTablePregnant.setRowSelectionInterval(i, i);
                return;
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelPregnantList = new javax.swing.JPanel();
        jScrollPanePregnantList = new javax.swing.JScrollPane();
        jTablePregnant = new javax.swing.JTable();
        jPanelPregnantControl = new javax.swing.JPanel();
        jButtonAddPregnant = new javax.swing.JButton();
        jButtonDelPregnant = new javax.swing.JButton();
        jPanelANCList = new javax.swing.JPanel();
        jScrollPaneANC = new javax.swing.JScrollPane();
        jTableAnc = new javax.swing.JTable();
        jPanelANCControl = new javax.swing.JPanel();
        jButtonAddANC = new javax.swing.JButton();
        jButtonDelANC = new javax.swing.JButton();
        jPanelBeforeMchDetail = new javax.swing.JPanel();
        jPanelPregnant = new javax.swing.JPanel();
        jPanelPregnantNumDetail = new javax.swing.JPanel();
        jLabelFirstDateHaveLastMen = new javax.swing.JLabel();
        jLabelSetDateGiveBirth = new javax.swing.JLabel();
        dateComboBoxFirstDateHaveLastMen = new com.pcu.utility.DateComboBox();
        jLabelAbNormalFirst = new javax.swing.JLabel();
        jComboBoxAbNormalFirst = new javax.swing.JComboBox();
        dateComboBoxSetDateGiveBirth = new com.pcu.utility.DateComboBox();
        dateComboBoxSurvey = new com.pcu.utility.DateComboBox();
        jLabelSurveyDate = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabelPregnantNumber = new javax.swing.JLabel();
        jButtonAppointment = new javax.swing.JButton();
        integerTextPregantNum = new com.pcu.utility.IntegerTextField();
        jLabelAbNormalFirst2 = new javax.swing.JLabel();
        jLabelAgeWeek = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelIsBirthControl = new javax.swing.JLabel();
        jComboBoxIsBirthControl = new javax.swing.JComboBox();
        jLabelAbNormalFirst1 = new javax.swing.JLabel();
        jLabelBloodGroup = new javax.swing.JLabel();
        jPanelServiceRemark = new javax.swing.JPanel();
        jLabelRemark = new javax.swing.JLabel();
        jTextFieldRemark = new javax.swing.JTextField();
        jPanelResultAbNormal = new javax.swing.JPanel();
        jScrollPaneNote1 = new javax.swing.JScrollPane();
        jTextAreaResult = new com.hosv3.gui.component.BalloonTextArea();
        jPanelSavePregant = new javax.swing.JPanel();
        jButtonSavePregnant = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        dateComboBoxCheck1 = new com.hospital_os.utility.DateComboBox();
        jLabel10 = new javax.swing.JLabel();
        timeTextFieldCheck1 = new com.hospital_os.utility.TimeTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabelVN = new javax.swing.JLabel();
        jPanelANC = new javax.swing.JPanel();
        panelANC1 = new com.pcu.gui.panelpcu.PanelANC();
        jButtonSaveANC = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanelPregnantList.setBorder(javax.swing.BorderFactory.createTitledBorder("PregnantSequence"));
        jPanelPregnantList.setMinimumSize(new java.awt.Dimension(175, 100));
        jPanelPregnantList.setPreferredSize(new java.awt.Dimension(175, 100));
        jPanelPregnantList.setLayout(new java.awt.GridBagLayout());

        jScrollPanePregnantList.setPreferredSize(new java.awt.Dimension(350, 403));

        jTablePregnant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTablePregnant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTablePregnantMouseReleased(evt);
            }
        });
        jTablePregnant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTablePregnantKeyReleased(evt);
            }
        });
        jScrollPanePregnantList.setViewportView(jTablePregnant);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelPregnantList.add(jScrollPanePregnantList, gridBagConstraints);

        jPanelPregnantControl.setLayout(new java.awt.GridBagLayout());

        jButtonAddPregnant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddPregnant.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddPregnant.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddPregnant.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddPregnant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPregnantActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelPregnantControl.add(jButtonAddPregnant, gridBagConstraints);

        jButtonDelPregnant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelPregnant.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelPregnant.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelPregnant.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelPregnant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelPregnantActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelPregnantControl.add(jButtonDelPregnant, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelPregnantList.add(jPanelPregnantControl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jPanelPregnantList, gridBagConstraints);

        jPanelANCList.setBorder(javax.swing.BorderFactory.createTitledBorder("AncSequence"));
        jPanelANCList.setMinimumSize(new java.awt.Dimension(175, 100));
        jPanelANCList.setPreferredSize(new java.awt.Dimension(175, 100));
        jPanelANCList.setLayout(new java.awt.GridBagLayout());

        jScrollPaneANC.setMinimumSize(new java.awt.Dimension(350, 403));
        jScrollPaneANC.setPreferredSize(new java.awt.Dimension(350, 403));

        jTableAnc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableAnc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAncMouseReleased(evt);
            }
        });
        jTableAnc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableAncKeyReleased(evt);
            }
        });
        jScrollPaneANC.setViewportView(jTableAnc);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelANCList.add(jScrollPaneANC, gridBagConstraints);

        jPanelANCControl.setLayout(new java.awt.GridBagLayout());

        jButtonAddANC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddANC.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddANC.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddANC.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddANC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddANCActionPerformed(evt);
            }
        });
        jPanelANCControl.add(jButtonAddANC, new java.awt.GridBagConstraints());

        jButtonDelANC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDelANC.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelANC.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelANC.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelANC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelANCActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelANCControl.add(jButtonDelANC, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelANCList.add(jPanelANCControl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jPanelANCList, gridBagConstraints);

        jPanelBeforeMchDetail.setLayout(new java.awt.CardLayout());

        jPanelPregnant.setLayout(new java.awt.GridBagLayout());

        jPanelPregnantNumDetail.setLayout(new java.awt.GridBagLayout());

        jLabelFirstDateHaveLastMen.setText("FirstDateHaveLastMen");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelPregnantNumDetail.add(jLabelFirstDateHaveLastMen, gridBagConstraints);

        jLabelSetDateGiveBirth.setText("SetDateGiveBirth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        jPanelPregnantNumDetail.add(jLabelSetDateGiveBirth, gridBagConstraints);

        dateComboBoxFirstDateHaveLastMen.setMinimumSize(new java.awt.Dimension(100, 24));
        dateComboBoxFirstDateHaveLastMen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxFirstDateHaveLastMenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelPregnantNumDetail.add(dateComboBoxFirstDateHaveLastMen, gridBagConstraints);

        jLabelAbNormalFirst.setText("AbNormalFirst");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelPregnantNumDetail.add(jLabelAbNormalFirst, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelPregnantNumDetail.add(jComboBoxAbNormalFirst, gridBagConstraints);

        dateComboBoxSetDateGiveBirth.setMinimumSize(new java.awt.Dimension(100, 24));
        dateComboBoxSetDateGiveBirth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSetDateGiveBirthActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 0, 0);
        jPanelPregnantNumDetail.add(dateComboBoxSetDateGiveBirth, gridBagConstraints);

        dateComboBoxSurvey.setEnabled(false);
        dateComboBoxSurvey.setMinimumSize(new java.awt.Dimension(100, 24));
        dateComboBoxSurvey.setText("");
        dateComboBoxSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSurveyActionPerformed(evt);
            }
        });
        dateComboBoxSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxSurveyFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelPregnantNumDetail.add(dateComboBoxSurvey, gridBagConstraints);

        jLabelSurveyDate.setText("SurveyDate");
        jLabelSurveyDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabelSurveyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabelSurveyDateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelPregnantNumDetail.add(jLabelSurveyDate, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelPregnantNumber.setText("PregnantNumber");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabelPregnantNumber, gridBagConstraints);

        jButtonAppointment.setText("นัด");
        jButtonAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAppointmentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jButtonAppointment, gridBagConstraints);

        integerTextPregantNum.setBackground(new java.awt.Color(204, 255, 255));
        integerTextPregantNum.setColumns(2);
        integerTextPregantNum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        integerTextPregantNum.setText("1");
        integerTextPregantNum.setMinimumSize(new java.awt.Dimension(30, 21));
        integerTextPregantNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                integerTextPregantNumFocusLost(evt);
            }
        });
        integerTextPregantNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                integerTextPregantNumKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(integerTextPregantNum, gridBagConstraints);

        jLabelAbNormalFirst2.setText("อายุครรภ์");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabelAbNormalFirst2, gridBagConstraints);

        jLabelAgeWeek.setText("  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabelAgeWeek, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelPregnantNumDetail.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabelIsBirthControl.setText("IsBirthControlBefore");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jLabelIsBirthControl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jComboBoxIsBirthControl, gridBagConstraints);

        jLabelAbNormalFirst1.setText("หมู่เลือด");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jLabelAbNormalFirst1, gridBagConstraints);

        jLabelBloodGroup.setText("  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jLabelBloodGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelPregnantNumDetail.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        jPanelPregnant.add(jPanelPregnantNumDetail, gridBagConstraints);

        jPanelServiceRemark.setLayout(new java.awt.GridBagLayout());

        jLabelRemark.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelServiceRemark.add(jLabelRemark, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        jPanelServiceRemark.add(jTextFieldRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 11, 0, 11);
        jPanelPregnant.add(jPanelServiceRemark, gridBagConstraints);

        jPanelResultAbNormal.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));
        jPanelResultAbNormal.setLayout(new java.awt.GridBagLayout());

        jScrollPaneNote1.setViewportView(jTextAreaResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelResultAbNormal.add(jScrollPaneNote1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 11, 0, 11);
        jPanelPregnant.add(jPanelResultAbNormal, gridBagConstraints);

        jPanelSavePregant.setLayout(new java.awt.GridBagLayout());

        jButtonSavePregnant.setText("Save");
        jButtonSavePregnant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSavePregnantActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelSavePregant.add(jButtonSavePregnant, gridBagConstraints);

        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelSavePregant.add(jButtonPrint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 11, 11, 11);
        jPanelPregnant.add(jPanelSavePregant, gridBagConstraints);

        jPanel29.setLayout(new java.awt.GridBagLayout());

        jLabel8.setText("วันที่บันทึก");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel29.add(jLabel8, gridBagConstraints);

        dateComboBoxCheck1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxCheck1ActionPerformed(evt);
            }
        });
        dateComboBoxCheck1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheck1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel29.add(dateComboBoxCheck1, gridBagConstraints);

        jLabel10.setText("น.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel29.add(jLabel10, gridBagConstraints);

        timeTextFieldCheck1.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck1.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheck1MouseClicked(evt);
            }
        });
        timeTextFieldCheck1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheck1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel29.add(timeTextFieldCheck1, gridBagConstraints);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif"))); // NOI18N
        jLabel11.setToolTipText("เวลาที่ตรวจ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel29.add(jLabel11, gridBagConstraints);

        jLabelVN.setText("VN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel29.add(jLabelVN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 11, 0, 0);
        jPanelPregnant.add(jPanel29, gridBagConstraints);

        jPanelBeforeMchDetail.add(jPanelPregnant, "cardDetailBefor");

        jPanelANC.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelANC.add(panelANC1, gridBagConstraints);

        jButtonSaveANC.setText("Save");
        jButtonSaveANC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveANCActionPerformed(evt);
            }
        });
        jButtonSaveANC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButtonSaveANCKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelANC.add(jButtonSaveANC, gridBagConstraints);

        jPanelBeforeMchDetail.add(jPanelANC, "cardDetailANC");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 5, 5);
        add(jPanelBeforeMchDetail, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelSurveyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabelSurveyDateActionPerformed
        this.dateComboBoxSurvey.setEnabled(jLabelSurveyDate.isSelected());
        if (!jLabelSurveyDate.isSelected()) {
            dateComboBoxSurvey.setText("");
        }
    }//GEN-LAST:event_jLabelSurveyDateActionPerformed

    private void timeTextFieldCheck1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheck1MouseClicked
//        timeTextFieldCheck.selectAll();
    }//GEN-LAST:event_timeTextFieldCheck1MouseClicked

    private void timeTextFieldCheck1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheck1KeyReleased
    }//GEN-LAST:event_timeTextFieldCheck1KeyReleased

    private void dateComboBoxCheck1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheck1KeyReleased
    }//GEN-LAST:event_dateComboBoxCheck1KeyReleased

    private void jButtonAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAppointmentActionPerformed
        if (pcuobject.getPatient() == null) {
            theUS.setStatus(GutilPCU.getTextBundle("No_Patient_Appointment"), UpdateStatus.WARNING);
            return;
        }
        theHosDialog.showDialogAppointment(theHosManage, this.pcuobject);
    }//GEN-LAST:event_jButtonAppointmentActionPerformed
        private void integerTextPregantNumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_integerTextPregantNumKeyReleased
    }//GEN-LAST:event_integerTextPregantNumKeyReleased
    private void integerTextPregantNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_integerTextPregantNumFocusLost
        if (integerTextPregantNum.getText().equals("")) {
            theUS.setStatus(GutilPCU.getTextBundle("CheckPregnan"), UpdateStatus.WARNING);//ครรภ์ที่กรอกไม่ควรเป็นครรภ์ที่น้อยกว่าครรภ์ล่าสุด
            //integerTextPregantNum.requestFocus();
        }
    }//GEN-LAST:event_integerTextPregantNumFocusLost
    private void dateComboBoxSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyFocusLost
// TODO add your handling code here:
    }//GEN-LAST:event_dateComboBoxSurveyFocusLost
    private void dateComboBoxSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyActionPerformed
calPregnant();
    }                                                      private void jButtonSaveANCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-LAST:event_dateComboBoxSurveyActionPerformed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {//GEN-FIRST:event_jButtonSaveANCKeyReleased
                jButtonSaveANCActionPerformed(null);
            }
    }                                              private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jButtonSaveANCKeyReleased
         printBeforMch();//GEN-FIRST:event_jButtonPrintActionPerformed
    }                                                private void dateComboBoxSetDateGiveBirthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jButtonPrintActionPerformed
       calLmp();//GEN-FIRST:event_dateComboBoxSetDateGiveBirthActionPerformed
    }//GEN-LAST:event_dateComboBoxSetDateGiveBirthActionPerformed
    private void jTableAncKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableAncKeyReleased
        if (evt.getKeyCode() == evt.VK_UP
                || evt.getKeyCode() == evt.VK_DOWN) {
            selectAnc(-2);
        }
    }//GEN-LAST:event_jTableAncKeyReleased
    private void jTablePregnantKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTablePregnantKeyReleased
        if (evt.getKeyCode() == evt.VK_UP
                || evt.getKeyCode() == evt.VK_DOWN) {
            selectTablePregnan();
        }
    }                                              private void dateComboBoxFirstDateHaveLastMenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_jTablePregnantKeyReleased
        calPregnant();//GEN-FIRST:event_dateComboBoxFirstDateHaveLastMenActionPerformed
    }//GEN-LAST:event_dateComboBoxFirstDateHaveLastMenActionPerformed
    private void jButtonDelPregnantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelPregnantActionPerformed

        deletePregnancy();
    }//GEN-LAST:event_jButtonDelPregnantActionPerformed
    private void jButtonDelANCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelANCActionPerformed

        int row = jTableAnc.getSelectedRow();
        if (row == -1) {
            theUS.setStatus("กรุณาเลือกรายการที่ต้องการยกเลิก", UpdateStatus.WARNING);
            return;
        }
        int ret = theHealthServiceControl.deleteAnc(panelANC1.getAncPcu(), panelANC1.getAncDetailPcu());
        if (ret == 0) {
            return;
        }
        setAncPcuV(new Vector());
    }                                                 private void jTableAncMouseReleased(java.awt.event.MouseEvent evt) {//GEN-LAST:event_jButtonDelANCActionPerformed
        selectAnc(-2);//GEN-FIRST:event_jTableAncMouseReleased
            closeBalloon();
    }//GEN-LAST:event_jTableAncMouseReleased
    private void jTablePregnantMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePregnantMouseReleased
        selectTablePregnan();
        closeBalloon();
    }//GEN-LAST:event_jTablePregnantMouseReleased
    private void jButtonSaveANCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveANCActionPerformed
        saveMch();
    }//GEN-LAST:event_jButtonSaveANCActionPerformed
    private void jButtonSavePregnantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSavePregnantActionPerformed
        this.savePregnancy();
    }//GEN-LAST:event_jButtonSavePregnantActionPerformed
    private void jButtonAddANCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddANCActionPerformed
        jPanelANC.setVisible(true);
        jPanelPregnant.setVisible(false);
        if (isVisitSame2()) {
            return;
        }

        this.jTableAnc.clearSelection();
        this.panelANC1.setAncPcu(null, thePregnancy);
        this.panelANC1.setAncDetailPcu(null);
    }//GEN-LAST:event_jButtonAddANCActionPerformed

    private void jButtonAddPregnantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPregnantActionPerformed
        jPanelANC.setVisible(false);
        jPanelPregnant.setVisible(true);
        if (isVisitSame()) {
            return;
        }
        setPregnancy(null);
    }//GEN-LAST:event_jButtonAddPregnantActionPerformed

    private void dateComboBoxCheck1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxCheck1ActionPerformed
calPregnant();
    }//GEN-LAST:event_dateComboBoxCheck1ActionPerformed

    /**
     *ตรวจสอบว่ามี Visit ที่ซ้ำกันหรือไม่
     *@param -
     *@return boolean false=ไม่ซ้ำ   true=ซ้ำ
     *@author Tong
     *@date 01/09/2549
     */
    private boolean isVisitSame2() {
        if (pcuobject.getVisit() == null) {
            return false;
        }

        if (this.vAncPcu == null) {
            return false;
        }

        for (int i = 0; i < vAncPcu.size(); i++) {
            AncPcu obj = (AncPcu) vAncPcu.get(i);
            if (pcuobject.getVisit().getObjectId().equals(obj.visit_id)) {
                theUS.setStatus(GutilPCU.getTextBundle("VisitAlready"), UpdateStatus.WARNING);
                return true;
            }
        }
        return false;
    }

    /**
     *ตรวจสอบว่ามี Visit ที่ซ้ำกันหรือไม่
     *@param -
     *@return boolean false=ไม่ซ้ำ   true=ซ้ำ
     *@author Tong
     *@date 01/09/2549
     */
    private boolean isVisitSame() {
        if (pcuobject.getVisit() == null) {
            return false;
        }

        if (this.vPregnancy == null) {
            return false;
        }

        for (int i = 0; i < vPregnancy.size(); i++) {
            Pregnancy obj = (Pregnancy) vPregnancy.get(i);
            if (pcuobject.getVisit().getObjectId().equals(obj.visit_id)) {
                theUS.setStatus(GutilPCU.getTextBundle("VisitAlready"), UpdateStatus.WARNING);
                return true;
            }
        }
        return false;
    }

    public void showDialogOffice(com.pcu.utility.IntegerTextField integerFiledPlace, JTextField textFieldPlace) {
        Site site = null;
        Office office = new Office();
        site = theHosManage.theHosInf.getSite();
        if (site != null) {
            office.setObjectId(site.off_id);
            if (showDialogOffice(office)) {
                textFieldPlace.setText(office.getName());
                integerFiledPlace.setText(office.getObjectId());
            } else {
                textFieldPlace.setText(site.full_name);
                integerFiledPlace.setText(site.off_id);
            }
        } else {
            textFieldPlace.setText("");
            integerFiledPlace.setText("");
        }
    }

    public boolean showDialogOffice(Office office) {
        if (theDialogOffice == null) {
            theDialogOffice = new DialogOffice(theHosManage.theHC, theUS, office);
        }
        return theDialogOffice.showDialog(office);
    }

    public void showDescriptionOffice(com.pcu.utility.IntegerTextField integerFiledPlace, JTextField textFieldPlace) {
        if (integerFiledPlace.getText().length() == 5) {
            Office office = theAllComboBoxControl.readHospitalByCode(integerFiledPlace.getText());
            if (office == null) {
                integerFiledPlace.setText("");
                textFieldPlace.setText("");
                theUS.setStatus("ไม่พบสถานพยาบาลที่ตรงกับรหัสที่ระบุ กรุณาตรวจสอบรหัสอีกครั้ง", 2);
            } else {
                integerFiledPlace.setText(office.getObjectId());
                textFieldPlace.setText(office.getName());
            }
        }
    }

    public void setLanguage() {

        /*jLabel*/
        jLabelFirstDateHaveLastMen.setText(GutilPCU.getTextBundle(jLabelFirstDateHaveLastMen.getText()));
        jLabelIsBirthControl.setText(GutilPCU.getTextBundle(jLabelIsBirthControl.getText()));
        jLabelAbNormalFirst.setText(GutilPCU.getTextBundle(jLabelAbNormalFirst.getText()));
        jLabelPregnantNumber.setText(GutilPCU.getTextBundle(jLabelPregnantNumber.getText()));
        jLabelSetDateGiveBirth.setText(GutilPCU.getTextBundle(jLabelSetDateGiveBirth.getText()));
        jLabelRemark.setText(GutilPCU.getTextBundle(jLabelRemark.getText()));
        GutilPCU.setGuiLang(this.jLabelSurveyDate);
        GutilPCU.setLanguage(jLabelAbNormalFirst2);
        GutilPCU.setLanguage(jLabelAbNormalFirst1);
        GutilPCU.setLanguage(jLabel8);
        GutilPCU.setLanguage(jLabel10);
        GutilPCU.setLanguage(colPregnancy);
        GutilPCU.setLanguage(colAnc);

        /*jButton*/
        GutilPCU.setLanguage(jButtonAppointment);
        jButtonAddPregnant.setText(GutilPCU.getTextBundle(jButtonAddPregnant.getText()));
        jButtonDelPregnant.setText(GutilPCU.getTextBundle(jButtonDelPregnant.getText()));
        jButtonAddANC.setText(GutilPCU.getTextBundle(jButtonAddANC.getText()));
        jButtonDelANC.setText(GutilPCU.getTextBundle(jButtonDelANC.getText()));
        jButtonSaveANC.setText(GutilPCU.getTextBundle(jButtonSaveANC.getText()));
        jButtonSavePregnant.setText(GutilPCU.getTextBundle(jButtonSavePregnant.getText()));
        jButtonPrint.setText(GutilPCU.getTextBundle(jButtonPrint.getText()));

        /*TitledBorder*/
        GutilPCU.JPanelLabler(jPanelResultAbNormal);
        GutilPCU.JPanelLabler(jPanelServiceRemark);
        GutilPCU.JPanelLabler(jPanelPregnantList);
        GutilPCU.JPanelLabler(jPanelANCList);
        GutilPCU.JPanelLabler(jPanelBeforeMchDetail);

    }

    /**
     * แสดงข้อความเตือน
     * @param message = ข้อความที่ต้องการให้แสด
     *        status = สถานะที่แสดง
     * @return void
     * @author kingland
     * @date 28/08/2549
     */
    public void setJFrame(JFrame frame) {
        theFrame = frame;
        initBalloon();
    }

    public JFrame getJFrame() {
        return theFrame;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck1;
    private com.pcu.utility.DateComboBox dateComboBoxFirstDateHaveLastMen;
    private com.pcu.utility.DateComboBox dateComboBoxSetDateGiveBirth;
    private com.pcu.utility.DateComboBox dateComboBoxSurvey;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.pcu.utility.IntegerTextField integerTextPregantNum;
    private javax.swing.JButton jButtonAddANC;
    private javax.swing.JButton jButtonAddPregnant;
    private javax.swing.JButton jButtonAppointment;
    private javax.swing.JButton jButtonDelANC;
    private javax.swing.JButton jButtonDelPregnant;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonSaveANC;
    private javax.swing.JButton jButtonSavePregnant;
    private javax.swing.JComboBox jComboBoxAbNormalFirst;
    private javax.swing.JComboBox jComboBoxIsBirthControl;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelAbNormalFirst;
    private javax.swing.JLabel jLabelAbNormalFirst1;
    private javax.swing.JLabel jLabelAbNormalFirst2;
    private javax.swing.JLabel jLabelAgeWeek;
    private javax.swing.JLabel jLabelBloodGroup;
    private javax.swing.JLabel jLabelFirstDateHaveLastMen;
    private javax.swing.JLabel jLabelIsBirthControl;
    private javax.swing.JLabel jLabelPregnantNumber;
    private javax.swing.JLabel jLabelRemark;
    private javax.swing.JLabel jLabelSetDateGiveBirth;
    private javax.swing.JCheckBox jLabelSurveyDate;
    private javax.swing.JLabel jLabelVN;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanelANC;
    private javax.swing.JPanel jPanelANCControl;
    private javax.swing.JPanel jPanelANCList;
    private javax.swing.JPanel jPanelBeforeMchDetail;
    private javax.swing.JPanel jPanelPregnant;
    private javax.swing.JPanel jPanelPregnantControl;
    private javax.swing.JPanel jPanelPregnantList;
    private javax.swing.JPanel jPanelPregnantNumDetail;
    private javax.swing.JPanel jPanelResultAbNormal;
    private javax.swing.JPanel jPanelSavePregant;
    private javax.swing.JPanel jPanelServiceRemark;
    private javax.swing.JScrollPane jScrollPaneANC;
    private javax.swing.JScrollPane jScrollPaneNote1;
    private javax.swing.JScrollPane jScrollPanePregnantList;
    private javax.swing.JTable jTableAnc;
    private javax.swing.JTable jTablePregnant;
    private com.hosv3.gui.component.BalloonTextArea jTextAreaResult;
    private javax.swing.JTextField jTextFieldRemark;
    private com.pcu.gui.panelpcu.PanelANC panelANC1;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck1;
    // End of variables declaration//GEN-END:variables

    /**
     *นำข้อมูลไปแสดงที่ GUI
     *@param Pregnancy
     *@return void
     *@author jao
     *@modify kingland
     *@date 04/09/2549
     */
    private Pregnancy getPregnacy() {
        if (thePregnancy == null) {
            thePregnancy = new Pregnancy();
        }
        if(!theHC.thePO.getVisit().visit_status.equals(VisitStatus.isInProcess()))
        {
            if(!thePregnancy.pregnancy_result.equals(jTextAreaResult.getText()))
            {
                thePregnancy.pregnancy_result = thePregnancy.pregnancy_result + "#azbcdp#";
            }
        }
        thePregnancy.office_id = pcuobject.getSite().off_id;
        thePregnancy.pregnancy_gravida_number = integerTextPregantNum.getText();
        thePregnancy.pregnancy_menses_issue_date = dateComboBoxFirstDateHaveLastMen.getText();
        thePregnancy.pregnancy_menses_expire_date = dateComboBoxSetDateGiveBirth.getText();
        thePregnancy.pregnancy_birthcontrol = Gutil.getGuiData(jComboBoxIsBirthControl);
        thePregnancy.pregnancy_abnomal = Gutil.getGuiData(jComboBoxAbNormalFirst);
        thePregnancy.pregnancy_result = Gutil.CheckReservedWords(jTextAreaResult.getText());
        thePregnancy.pregnancy_notice = Gutil.CheckReservedWords(jTextFieldRemark.getText());
        if (thePregnancy.getObjectId() == null) {
            if (pcuobject.getVisit() != null) {
                thePregnancy.visit_id = pcuobject.getVisit().getObjectId();
            }
            if (pcuobject.getFamily() != null) {
                thePregnancy.family_id = pcuobject.getFamily().getObjectId();
            }
            if (pcuobject.getPatient() != null) {
                thePregnancy.patient_id = pcuobject.getPatient().getObjectId();
                thePregnancy.pregnancy_hn = pcuobject.getPatient().hn;
            }
            thePregnancy.pregnancy_staff_record = pcuobject.getEmployee().getObjectId();//theSystemControl.pcuobject.getEmployee().getObjectId();
            thePregnancy.record_date_time = pcuobject.getCurrentDateTime();
        }
        thePregnancy.pregnancy_staff_modify = pcuobject.getEmployee().getObjectId();//theSystemControl.pcuobject.getEmployee().getObjectId();
        thePregnancy.survey_date = dateComboBoxSurvey.getText();
        thePregnancy.modify_date_time = dateComboBoxCheck1.getText() + "," + timeTextFieldCheck1.getText();
        thePregnancy.active = "1";
        return thePregnancy;
    }

    /**
     *ตรวจสอบว่าสามารถแก้ไขข้อมูลได้หรือไม่
     *@param -
     *@return boolean true=สามารถแก้ไขได้ false=ไม่สามารถแก้ไขได้
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkDataEditPregnancy() {
        boolean result = true;
        if (thePregnancy.getObjectId() != null) {
            if (pcuobject.getVisit() != null && !thePregnancy.visit_id.equals(pcuobject.getVisit().getObjectId())) {
                selectTablePregnan();
                theUS.setStatus(GutilPCU.getTextBundle("NotSavePreviousVisit"), UpdateStatus.WARNING);//ไม่สามารถแก้ไขข้อมูลของการรับบริการครั้งก่อนได้
                result = false;
            } else if (pcuobject.getVisit() == null && !"".equals(thePregnancy.visit_id)) {
                selectTablePregnan();
                theUS.setStatus(GutilPCU.getTextBundle("NotSavePreviousVisit"), UpdateStatus.WARNING);//ไม่สามารถแก้ไขข้อมูลของการรับบริการครั้งก่อนได้
                result = false;
            }
        }
        return result;
    }

    /**
     *บันทึกข้อมูลการตั้งครรถ์
     *@param -
     *@return void
     *@author kingland
     *@date 28/08/2549
     */
    private void savePregnancy() {

        if (pcuobject.getFamily() == null) {
            theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน", UpdateStatus.WARNING);
            return;
        }
        if (integerTextPregantNum.getText().equals("")) {
            theUS.setStatus(GutilPCU.getTextBundle("CheckPregnan"), UpdateStatus.WARNING);//กรุณากรอกครรภ์ที่มารับการฝากด้วย
            return;
        }
        int number = -1;
        try {
            number = Integer.parseInt(integerTextPregantNum.getText());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (number <= 0) {
            theUS.setStatus(GutilPCU.getTextBundle("ValuePragnanLess"), UpdateStatus.WARNING); //ลำดับครรภที่ ต้องมีค่ามากกว่า 0
            integerTextPregantNum.requestFocus();
            integerTextPregantNum.selectAll();
            return;
        }
        if (number >= 20) {
            theUS.setStatus(GutilPCU.getTextBundle("ValuePragnanMore"), UpdateStatus.WARNING);//ลำดับครรภที่ ต้องมีค่าน้อยกว่า 20
            integerTextPregantNum.requestFocus();
            integerTextPregantNum.selectAll();
            return;
        }
        if (pcuobject.getFamily().f_sex_id.equals(Sex.isMAN())) {
            //การบริการนี้สำหรับผู้รับบริการที่เป็นเพศ "หญิง" เท่านั้น
            theUS.setStatus(GutilPCU.getTextBundle("CheckPatientSex"), UpdateStatus.WARNING);
            return;
        }
        //ครรภ์ที่กรอกไม่ควรเป็นครรภ์ที่น้อยกว่าครรภ์ล่าสุด
        if (integerTextPregantNum.getText().equals("")) {
            theUS.setStatus(GutilPCU.getTextBundle("CheckPregnan"), UpdateStatus.WARNING);
            integerTextPregantNum.requestFocus();
            return;
        }
        boolean datelastmen = false;
        Date today = new Date();
        String dateString = new String();
        java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd");
        dateString = formatter.format(today);
        if (!dateComboBoxFirstDateHaveLastMen.getText().equals("")) {
            Date lastmen = com.pcu.utility.DateUtil.getDateFromText(dateComboBoxFirstDateHaveLastMen.getText());
            datelastmen = com.pcu.utility.DateUtil.beforeDate(lastmen, today);
        }
        if (!datelastmen) {
            theUS.setStatus(GutilPCU.getTextBundle("CheckLastMen"), UpdateStatus.WARNING);//วันที่มีประจำเดือนครั้งสุดท้ายไม่ควรเป็นวันในอนาคต
            return;
        }
        if (dateComboBoxFirstDateHaveLastMen.getText().equals("")) {
            theUS.setStatus(GutilPCU.getTextBundle("CheckLastMen"), UpdateStatus.WARNING);//วันที่มีประจำเดือนครั้งสุดท้ายไม่ควรเป็นวันในอนาคต
            return;
        }
        if (dateComboBoxFirstDateHaveLastMen.getText().substring(0, 10).equals(dateString)) {
            theUS.setStatus(GutilPCU.getTextBundle("CheckLastMen"), UpdateStatus.WARNING);//วันที่มีประจำเดือนครั้งสุดท้ายไม่ควรเป็นวันในอนาคต
            return;
        }
        String num = integerTextPregantNum.getText();
        boolean samevalue = false;
        for (int i = 0, size = vPregnancy.size(); i < size; i++) {
            Pregnancy pgn = (Pregnancy) vPregnancy.get(i);
            if (pgn.pregnancy_gravida_number.equals(num)) {
                samevalue = true;
            }
        }
        if (!samevalue) {
            if (!checkPregnanLast()) {
                return;
            }
        } else {
            if (thePregnancy.getObjectId() == null) {
                theUS.setStatus(GutilPCU.getTextBundle("WarningCheckRecordBirth"), UpdateStatus.WARNING);
                return;
            }
            String check = thePregnancy.pregnancy_gravida_number;
            if (!check.equals(num)) {
                theUS.setStatus(GutilPCU.getTextBundle("WarningCheckRecordBirth"), UpdateStatus.WARNING);
                return;
            }
        }
        int currage = -1;
        if (pcuobject.getVisit() != null) {
            currage = Integer.parseInt(pcuobject.getVisit().patient_age);
        } else {
            currage = Integer.parseInt(DateUtil.calculateAge(
                    pcuobject.getFamily().patient_birthday, pcuobject.getCurrentDateTime()));
        }
        if (currage != -1 && currage < 15) {
            //อายุไม่ถึง 15 ปี ต้องการเก็บข้อมูลการคลอดหรือไม่
            if (!theUS.confirmBox(GutilPCU.getTextBundle("AGELESS15"), UpdateStatus.WARNING)) {
                return;
            }
        }
        int result = 0;
        result = theHealthServiceControl.savePregnancy(getPregnacy());
        if (result <= 0) {
            return;
        }

        if (pcuobject.getVisit() != null
                && pcuobject.getVisit().visit_status.equals(VisitStatus.isInProcess())
                && pcuobject.getVisit().pregnant.equals("0")) {
            theHosManage.theHC.theVisitControl.updateVisitPregnant(true);
        }
        setTablePregnant();
        for (int i = 0; i < this.vPregnancy.size(); i++) {
            Pregnancy pp = (Pregnancy) vPregnancy.get(i);
            if (pp.getObjectId().equals(this.thePregnancy.getObjectId())) {
                this.jTablePregnant.setRowSelectionInterval(i, i);
                return;
            }
        }
    }

    /**
     *@deprecated henbe
     */
    private void setTablePregnant() {
        if (pcuobject.getPatient() != null) {
            vPregnancy = theHealthServiceControl.listPregnancyByFamilyID();
            if (vPregnancy == null) {
                vPregnancy = theHealthServiceControl.listPregnancyByPatientID(pcuobject.getPatient().getObjectId());
            }
        } else if (pcuobject.getFamily() != null) {
            vPregnancy = theHealthServiceControl.listPregnancyByFamilyID();
            if (vPregnancy == null) {
                vPregnancy = theHealthServiceControl.listPregnancyByFamilyID(pcuobject.getFamily().getObjectId());
            }
        }
        setPregnancyV(vPregnancy);
    }

    public void setPregnancyV(Vector v) {
        vPregnancy = v;
        TaBleModel tm = new TaBleModel(colPregnancy, vPregnancy.size());
        for (int i = 0, size = vPregnancy.size(); i < size; i++) {
            Pregnancy pregnancyTemp = (Pregnancy) vPregnancy.get(i);
            tm.setValueAt(pregnancyTemp.pregnancy_gravida_number, i, 0);
            tm.setValueAt(GutilPCU.changDateToString(pregnancyTemp.pregnancy_menses_expire_date, false), i, 1);
        }
        jTablePregnant.setModel(tm);
        jTablePregnant.getColumnModel().getColumn(0).setCellRenderer(ColumnTableRenderer.getRendererCenter());
        jTablePregnant.getColumnModel().getColumn(1).setCellRenderer(ColumnTableRenderer.getRendererCenter());
        jTablePregnant.getColumnModel().getColumn(0).setPreferredWidth(25);
        jTablePregnant.getColumnModel().getColumn(1).setPreferredWidth(75);
    }

    /**
     * ค้นรายการฝากครรถ์จากข้อมูลการตั้งครรถ์
     * @param  -
     * @return -
     * @author -
     * @date -
     */
    private void setAncPcuV(Vector v) {
        vAncPcu = v;
        TaBleModel tm = new TaBleModel(colAnc, vAncPcu.size());
        for (int i = 0, size = vAncPcu.size(); i < size; i++) {
            AncPcu ancTemp = (AncPcu) vAncPcu.get(i);
            String day = "";
            if (!ancTemp.anc_gravida_day.equals("") && !ancTemp.anc_gravida_day.equals("0")) {
                day = " " + ancTemp.anc_gravida_day + "d";
            }
            tm.setValueAt(ancTemp.no, i, 0);
            tm.setValueAt(ancTemp.anc_gravida_week + "w" + day, i, 1);
        }
        jTableAnc.setModel(tm);
        jTableAnc.getColumnModel().getColumn(0).setCellRenderer(ColumnTableRenderer.getRendererCenter());
        jTableAnc.getColumnModel().getColumn(1).setCellRenderer(ColumnTableRenderer.getRendererCenter());
        jTableAnc.getColumnModel().getColumn(0).setPreferredWidth(25);
        jTableAnc.getColumnModel().getColumn(1).setPreferredWidth(75);

    }

    private void selectAnc(int row) {

        int rowAnc = 0;
        if (row == -2) {  /*user เป็นผู้เลือกเอง*/
            rowAnc = jTableAnc.getSelectedRow();
        } else {  /*user บันทึก จะ select record ที่เพิ่งเพิ่ม*/
            rowAnc = row;
        }
        if (rowAnc == -1) {
            return;
        }

        AncPcu anc = (AncPcu) vAncPcu.get(rowAnc);
        if (anc == null) {
            this.jTableAnc.clearSelection();
        }
        this.panelANC1.setAncPcu(anc, thePregnancy);

        AncDetailPcu adp = theHealthServiceControl.readAncDetailByAncId(anc.getObjectId());
        this.panelANC1.setAncDetailPcu(adp);
        jPanelANC.setVisible(true);
        jPanelPregnant.setVisible(false);
        this.panelANC1.selectDental();
        this.panelANC1.selectTT();
    }

    private void deletePregnancy() {
        int row = jTablePregnant.getSelectedRow();
        if (row == -1) {
            theUS.setStatus(GutilPCU.getTextBundle("WarningCheckDeleteBirth"), UpdateStatus.WARNING);
            return;
        }
        int ret = theHealthServiceControl.deletePregnancy(thePregnancy);
        if (ret == 0) {
            return;
        }
        setTablePregnant();
    }

    private void setEnabledPregnancy(boolean b) {
        integerTextPregantNum.setEnabled(b);
        dateComboBoxFirstDateHaveLastMen.setEnabled(b);
        dateComboBoxSetDateGiveBirth.setEnabled(b);
        jComboBoxIsBirthControl.setEnabled(b);
        jComboBoxAbNormalFirst.setEnabled(b);
        jTextAreaResult.setEnabled(b);
        jTextFieldRemark.setEnabled(b);
        jButtonDelPregnant.setEnabled(b);
        jButtonSavePregnant.setEnabled(b);
        jButtonPrint.setEnabled(b);
    }

    /**
     *เซตการงาน Gui
     *@param boolean
     *@return void
     *@author kingland
     *@date 04/09/2549
     */
    public void setEnabled(boolean flag) {
        panelANC1.setEnabledAnc(flag);
        setEnabledPregnancy(flag);
    }

    /**
     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่
     *@param -
     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkDead() {
        boolean result = false;
        if (pcuobject.getFamily() != null && Dischar.DEATH.equals(pcuobject.getFamily().discharge_status_id)) {
            result = true;
        } else if (pcuobject.getPatient() != null && Dischar.DEATH.equals(pcuobject.getPatient().discharge_status_id)) {
            result = true;
        }
        return false;//result;
    }

    /**
     *ตรวจสอบเพศของผู้รับบริการ
     *@param -
     *@return boolean true=ผ่าน false=ไม่ผ่าน
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkSex(boolean showWarningMessage) {
        boolean result = true;
        //add code by noom สำหรับ check เพศ หญิงเท่านั้น
        if (pcuobject.getPatient() != null && !("2").equals(pcuobject.getPatient().f_sex_id)) {
            if (showWarningMessage) {
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"), UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        } //สำหรับ check เพศ หญิงเท่านั้น
        else if (pcuobject.getFamily() != null && !("2").equals(pcuobject.getFamily().f_sex_id)) {
            if (showWarningMessage) {
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"), UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        return result;
    }

    /**
     *ตรวจสอบ Patient และ Family จาก pcuobject
     *@param -
     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร
     *@author kingland
     *@date 04/09/2549
     */
    /**
     * คำนวนหาวันกำหนดคลอด
     *
     * @auther jao
     */
    private void calPregnant() {
        String dateLastMen = dateComboBoxFirstDateHaveLastMen.getText();
//        System.out.println("dateLastMen = " + dateLastMen);
        if (!dateLastMen.equals("")) {
            dateComboBoxSetDateGiveBirth.setText(com.pcu.utility.DateUtil.calPregnant(dateLastMen));
        }
//        System.out.println("dateComboBoxSetDateGiveBirth = " + dateComboBoxSetDateGiveBirth.getText());
        String date_ref = pcuobject.getCurrentDateTime();
//        if (!thePregnancy.survey_date.equals("")) {
//            date_ref = thePregnancy.survey_date;
//        }
        if (jLabelSurveyDate.isSelected()) {
            date_ref = dateComboBoxSurvey.getText();
        }else if(!dateComboBoxCheck1.getText().equals("")){
            date_ref = dateComboBoxCheck1.getText() + "," + timeTextFieldCheck1.getText();
        }
//henbe comment 100253 kong เพิ่มทำไมรู้มั้ยจะแก้ก็ต้องแก้ทั้งระบบไม่ใช่มาทำบางหน้าอย่างนี้
                //แล้วรายงานต้องแก้ด้วยรู้หรือเปล่า แล้วบรรทัดร่นได้ยังไง
//        System.out.println("date_ref = " + date_ref);
//        System.out.println("dateComboBoxFirstDateHaveLastMen = " + dateComboBoxFirstDateHaveLastMen.getText());
        String age_week = DateUtil.countWeekS(dateComboBoxFirstDateHaveLastMen.getText(), date_ref);
        jLabelAgeWeek.setText(age_week);
    }
//henbe comment 100253 kong ห้ามเรียกฟังชันใน gui ซ้อนกันสองชั้นทำให้เสร็จในการเรียกครั้งเดียว
    private void calLmp() {
        String dateGiveBirth = dateComboBoxSetDateGiveBirth.getText();
        if (!dateGiveBirth.equalsIgnoreCase("")) {
            dateComboBoxFirstDateHaveLastMen.setText(com.pcu.utility.DateUtil.calLmp(dateGiveBirth));
        }
        calPregnant();
        dateGiveBirth = null;
    }

    /**
     * ก่อนบันทึกจะตรวจสอบความถูกต้องก่อน
     * @param -
     * @return void
     * @auther jao
     * @modify kingland
     * @date 29/08/2549
     */
    private void saveMch() {
        if (thePregnancy == null) {
            theUS.setStatus("กรุณาเลือกครรภ์ที่ต้องการดูแล", UpdateStatus.WARNING);
            return;
        }
        AncPcu theAncPcu = panelANC1.getAncPcu();
        theAncPcu.pregnancy_id = thePregnancy.getObjectId();
//        JOptionPane.showMessageDialog(null,"henbe_test1");
        if (!panelANC1.checkSaveAncPcu()) {
            return;
        }
//        JOptionPane.showMessageDialog(null,"henbe_test2");
        for (int i = 0; vAncPcu != null && i < vAncPcu.size(); i++) {
            AncPcu anc = (AncPcu) vAncPcu.get(i);
            if (!anc.getObjectId().equals(theAncPcu.getObjectId()) && theAncPcu.no.equals(anc.no)) {
                theUS.setStatus(GutilPCU.getTextBundle("WarningRepeateAncNo"), UpdateStatus.WARNING);
                return;
            }
        }
        int ii = this.panelANC1.checkSaveVitalSign(theAncPcu);
        if (ii != 0) {
            return;
        }
//        JOptionPane.showMessageDialog(null,"henbe_test2");
        boolean is_new = theAncPcu.getObjectId() == null;
        AncDetailPcu theAncDetailPcu = this.panelANC1.getAncDetailPcu();
        theAncDetailPcu.pregnancy_id = thePregnancy.getObjectId();
        int ret = theHealthServiceControl.saveAnc(theAncPcu, theAncDetailPcu);
//        JOptionPane.showMessageDialog(null,"henbe_test3");
        if (ret < 1) {
            return;
        }

        this.setAncPcuV(theHealthServiceControl.listAncByPregnantID(thePregnancy.getObjectId()));
//        JOptionPane.showMessageDialog(null,"henbe_test4");
        for (int i = 0; i < this.vAncPcu.size(); i++) {
            AncPcu pp = (AncPcu) vAncPcu.get(i);
            if (pp.getObjectId().equals(theAncPcu.getObjectId())) {
                this.jTableAnc.setRowSelectionInterval(i, i);
                return;
            }
        }
    }

    /**
     * ตรวจสอบว่า ครรภ์ที่บันทึกมีค่าย้อนหลังครรภ์ก่อนหน้าหรือไม่
     * @auther jao
     */
    private boolean checkPregnanLast() {
        String num = integerTextPregantNum.getText();
        Pregnancy pre = new Pregnancy();
        boolean result = false;
        if (vPregnancy != null) {
            int size = vPregnancy.size();
            Constant.println(size + "<--------------------");
            if (size > 1) {
                pre = (Pregnancy) vPregnancy.get(size - 1);
                Constant.println(num + "---------------" + pre.pregnancy_gravida_number);
                if (Integer.parseInt(num) > Integer.parseInt(pre.pregnancy_gravida_number)) {
                    result = true;
                } else {
                    theUS.setStatus(GutilPCU.getTextBundle("CheckPregnancyNumber"), UpdateStatus.WARNING);
                    result = false;
                }
            } else if (size == 1) {
                pre = (Pregnancy) vPregnancy.get(size - 1);
                if (Integer.parseInt(num) > Integer.parseInt(pre.pregnancy_gravida_number)) {
                    result = true;
                } else {
                    theUS.setStatus(GutilPCU.getTextBundle("CheckPregnancyNumber"), UpdateStatus.WARNING);
                    result = false;
                }
            } else {
                result = true;
            }
        }
        return result;
    }

    /**
     * SetSelection
     *
     * @auther jao
     */
    private void selectTablePregnan() {
        setPregnancy((Pregnancy) vPregnancy.get(jTablePregnant.getSelectedRow()));
        jPanelANC.setVisible(false);
        jPanelPregnant.setVisible(true);
    }

    private void closeBalloon() {
        for (int j = 0; j < theHosManage.theHosControl.balloon.size(); j++) {
            ManageBalloon mb = (ManageBalloon) theHosManage.theHosControl.balloon.get(j);
            mb.notifyCloseBalloon("close", 1);
        }
    }

    private void printBeforMch() {
        theHC.thePrintControl.printBeforMch(vPregnancy, jTablePregnant.getSelectedRow(), pcuobject.getFamily());
    }

    /**
     * ตรวจสอบว่าวันออกตรวจเป็นวันในอนาคตหรือไม่
     * @param  -
     * @return  -
     * @author kingland
     * @date 17-03-2549
     */
    private void checkDateSurvayPregnancy() {
        if (!dateComboBoxSurvey.getText().equals("")
                && dateComboBoxSurvey.getText().length() == 10
                && com.pcu.utility.DateUtil.countDay(dateComboBoxSurvey.getText(), theHosManage.theHosControl.theConnectionInf) == -1
                && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxSurvey.getText()), theHosManage.theHosControl.theConnectionInf) == false) {
            if (checkSurveyPregnant == false) {
                // ไม่สามารถกรอกวันที่เป็นวันในอนาคตได้
                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture"), UpdateStatus.WARNING);
                checkSurveyPregnant = true;
            }
        }
    }

    private void setPregnancy(Pregnancy preg) {
        thePregnancy = preg;
        if (thePregnancy == null) {
            thePregnancy = new Pregnancy();
            this.jTablePregnant.clearSelection();
            thePregnancy.modify_date_time = pcuobject.getCurrentDateTime();
        }
        integerTextPregantNum.setText(thePregnancy.pregnancy_gravida_number);
        dateComboBoxFirstDateHaveLastMen.setText(Gutil.convertFieldDate(thePregnancy.pregnancy_menses_issue_date));

        String date_ref = thePregnancy.record_date_time;
        if (!thePregnancy.survey_date.equals("")) {
            date_ref = thePregnancy.survey_date;
        }
        String age_week = DateUtil.countWeekS(thePregnancy.pregnancy_menses_issue_date, date_ref);
        this.jLabelAgeWeek.setText(age_week);

        dateComboBoxSetDateGiveBirth.setText(Gutil.convertFieldDate(thePregnancy.pregnancy_menses_expire_date));
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(thePregnancy.survey_date));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
        this.jLabelVN.setText("");
        if (!thePregnancy.visit_id.equals("")) {
            String vn_id = this.theAllComboBoxControl.readVNbyVid(thePregnancy.visit_id);
            this.jLabelVN.setText("VN:" + vn_id);
        }
        ComboboxModel.setCodeComboBox(jComboBoxIsBirthControl, thePregnancy.pregnancy_birthcontrol);
        ComboboxModel.setCodeComboBox(jComboBoxAbNormalFirst, thePregnancy.pregnancy_abnomal);
        jTextAreaResult.setText(thePregnancy.pregnancy_result);
        jTextFieldRemark.setText(thePregnancy.pregnancy_notice);
        this.dateComboBoxCheck1.setText(DateUtil.convertFieldDate(thePregnancy.modify_date_time));
        if (thePregnancy.modify_date_time.length() > 10) {
            timeTextFieldCheck1.setText(thePregnancy.modify_date_time.substring(11));
        }

        setAncPcuV(theHealthServiceControl.listAncByPregnantID(thePregnancy.getObjectId()));
    }
}
