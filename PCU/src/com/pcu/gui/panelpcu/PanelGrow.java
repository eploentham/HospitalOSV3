
/*
 * JPanelFp.java
 *
 * Created on 13 มิถุนายน 2548, 18:24 น.
 */
/*
 * ตรวจสอบวันที่สำรวจแล้ว
 * kingland
 */

package com.pcu.gui.panelpcu;
import com.pcu.gui.dialog.DialogSetupSearchPcu;
import com.pcu.gui.dialog.HosDialog;
import javax.swing.*;
import java.util.*;
import javax.swing.table.DefaultTableCellRenderer;
import com.hosv3.utility.connection.UpdateStatus;
import com.hospital_os.utility.*;
import com.hospital_os.object.Visit;
import com.pcu.utility.*;
import com.pcu.object.*;
import com.pcu.control.*;
import com.pcu.utility.DateComboBox; /*ต้องมี ถ้าไม่มีจะerror*/
import com.pcu.subject.*;
import com.hospital_os.utility.DateUtil;

import com.hospital_os.object.Office;
import com.hospital_os.object.VisitStatus;
import com.hospital_os.object.Appointment;
import com.hospital_os.object.Dischar;

import com.hosv3.usecase.transaction.*;
import com.hosv3.object.*;
/**
 *
 * @author  jao
 */
public class PanelGrow extends javax.swing.JPanel{ 
     
   private HosManage theHosManage;
   private DefaultTableCellRenderer rendererCenter; 
   private HealthServiceControl theHealthServiceControl;
   private AllComboBoxControl theAllComboBoxControl;    
   private FamilyPlaningControl theFamilyPlaningControl;
   private HealthSchoolServiceControl theHealthSchoolServiceControl;
   private Office theOffice;
   private Grow theGrow;
   private GrowPcu theGrowPcu;
   private GrowHistory theGrowHistory;
   private SetupPcuControl theSetupPcuControl;
   private SetupSubjectPcu theSetupSubjectPcu;
   private DateComboBox theDateComboBoxExp ;
   private DateComboBox theDateComboBoxStart ;   
   private Vector vGrow = new Vector();
   private Vector vGrowHistory = new Vector();
   private Vector vGrowPcu = new Vector();     

   private HosDialog theHosDialog;
   private PCUObject pcuobject;
   private String age;
   private String office_id;
   private String office_name; 
   
   private boolean checkdate = true;
   private boolean comple = true;
   private boolean modifyoutsite = false;
   private boolean modifygrow = false;
   private boolean checkoutsite = false;
   private boolean checksurvey , checksurvey1 ;
   private int currage;
   private int num = 0;
   private int rowGrowHistory;
   private Appointment theAppointment;   
   private int receiveNotify = 6;

    private UpdateStatus theUS;
   
    /** Creates new form JPanelFp */
    public PanelGrow(){
        initComponents();
    }
    public void setControl(HosManage hm,HosDialog hd,UpdateStatus us)
    {
        theUS = us;
        theHosManage = hm;
        theHealthServiceControl = hm.theHosControl.theHealthServiceControl;
        theAllComboBoxControl = hm.theHosControl.theAllComboBoxControl;
        theSetupPcuControl = hm.theHosControl.theSetupPcuControl;
        theFamilyPlaningControl = hm.theHosControl.theFamilyPlaningControl;
        theHealthSchoolServiceControl = hm.theHosControl.theHealthSchoolServiceControl;
        theSetupSubjectPcu = hm.theHosSubject.theSetupSubjectPcu; 
        theHosDialog = hd;     
        pcuobject = hm.thePO;   
        rendererCenter = new DefaultTableCellRenderer();
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        setLanguage();
        initDatas();
        setEnabled(false);
    }
    
    /** 
     *ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI 
     *@param pcuobject
     *@return void
     *@author jao
     *@modify kingland
     *@05/09/2549
     */
    public void setObject(PCUObject pcuobject)
    {   
        System.out.println("_henbe_______________________" + getClass().toString());
        this.pcuobject = pcuobject;
        setGrowEnable(false); 
        if(pcuobject.getFamily()!=null)
        {   /* add by jao สำหรับการรับบริการที่ไม่ต้องVisit */
            jButtonAddGrow.setEnabled(true);
            setGrowEnable(true); 
        }
        office_id = pcuobject.getSite().off_id ;
        office_name = pcuobject.getSite().off_name ;
        
        if(!checkPatientAndFamily() || checkDead())
           setEnabled(false);
        
        if(getAge() > 6)
        {
            setGrowEnable(false);
            jButtonAddGrow.setEnabled(false);
        }
        setGrowHistoryV(false); 
    }
    
    
    /**
     * ประกาศตัวแปรComboBox
     * @author jao
     */
    public void initDatas() 
    {   
        
        ComboboxModel.initComboBox(jComboBoxGrow,theAllComboBoxControl.listGrowComboFix());
        //jComboBoxGrow.setControl(null,new GrowLookup(theAllComboBoxControl),new Grow());   
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelTableGrow = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableGrow = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanelMemoGrow = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabelGrow = new javax.swing.JLabel();
        jLabelStandardGrow = new javax.swing.JLabel();
        jLabelMonth = new javax.swing.JLabel();
        jLabelMonth2 = new javax.swing.JLabel();
        jLabelRealGrow = new javax.swing.JLabel();
        integerTextFieldRlGrow = new com.pcu.utility.IntegerTextField();
        jLabelStGrow = new javax.swing.JLabel();
        jComboBoxGrow = new com.hosv3.gui.component.HosComboBox();
        jLabelRemark2 = new javax.swing.JLabel();
        jTextFieldRemarkGorw = new javax.swing.JTextField();
        dateComboBoxSurvey = new com.pcu.utility.DateComboBox();
        jLabelSurveyDate = new javax.swing.JCheckBox();
        jPanel17 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dateComboBoxCheck = new com.hospital_os.utility.DateComboBox();
        jLabel8 = new javax.swing.JLabel();
        timeTextFieldCheck = new com.hospital_os.utility.TimeTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButtonSaveGrow = new javax.swing.JButton();
        jButtonAddGrow = new javax.swing.JButton();
        jButtonDelGrow = new javax.swing.JButton();
        jButtonPrintGrow = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(700, 400));
        setPreferredSize(new java.awt.Dimension(700, 400));
        setRequestFocusEnabled(false);
        jPanelTableGrow.setLayout(new java.awt.GridBagLayout());

        jPanelTableGrow.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TableGrow", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelTableGrow.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jPanelTableGrow.setMinimumSize(new java.awt.Dimension(464, 400));
        jPanelTableGrow.setPreferredSize(new java.awt.Dimension(464, 400));
        jTableGrow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableGrow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableGrowKeyReleased(evt);
            }
        });
        jTableGrow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableGrowMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableGrow);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelTableGrow.add(jScrollPane1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTableGrow.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanelTableGrow, gridBagConstraints);

        jPanelMemoGrow.setLayout(new java.awt.GridBagLayout());

        jPanelMemoGrow.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MemoGrow", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelMemoGrow.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setOpaque(false);
        jPanel4.setPreferredSize(new java.awt.Dimension(620, 60));
        jLabelGrow.setText("Grow");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(jLabelGrow, gridBagConstraints);

        jLabelStandardGrow.setText("StandardGrow");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(jLabelStandardGrow, gridBagConstraints);

        jLabelMonth.setText("GrowMonth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabelMonth, gridBagConstraints);

        jLabelMonth2.setText("GrowMonth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabelMonth2, gridBagConstraints);

        jLabelRealGrow.setText("RealGrow");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabelRealGrow, gridBagConstraints);

        integerTextFieldRlGrow.setBackground(new java.awt.Color(204, 255, 255));
        integerTextFieldRlGrow.setColumns(2);
        integerTextFieldRlGrow.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        integerTextFieldRlGrow.setMinimumSize(new java.awt.Dimension(25, 20));
        integerTextFieldRlGrow.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                integerTextFieldRlGrowFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(integerTextFieldRlGrow, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel4.add(jLabelStGrow, gridBagConstraints);

        jComboBoxGrow.setEditable(false);
        jComboBoxGrow.setMinimumSize(new java.awt.Dimension(100, 20));
        jComboBoxGrow.setPreferredSize(new java.awt.Dimension(100, 20));
        jComboBoxGrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxGrowActionPerformed(evt);
            }
        });
        jComboBoxGrow.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBoxGrowFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(jComboBoxGrow, gridBagConstraints);

        jLabelRemark2.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel4.add(jLabelRemark2, gridBagConstraints);

        jTextFieldRemarkGorw.setMinimumSize(new java.awt.Dimension(11, 20));
        jTextFieldRemarkGorw.setPreferredSize(new java.awt.Dimension(11, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 10, 0, 0);
        jPanel4.add(jTextFieldRemarkGorw, gridBagConstraints);

        dateComboBoxSurvey.setEnabled(false);
        dateComboBoxSurvey.setText("");
        dateComboBoxSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSurveyActionPerformed(evt);
            }
        });
        dateComboBoxSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxSurveyFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 10, 0, 0);
        jPanel4.add(dateComboBoxSurvey, gridBagConstraints);

        jLabelSurveyDate.setText("SurveyDate");
        jLabelSurveyDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabelSurveyDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jLabelSurveyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabelSurveyDateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        jPanel4.add(jLabelSurveyDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanelMemoGrow.add(jPanel4, gridBagConstraints);

        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel17.add(jLabel7, gridBagConstraints);

        dateComboBoxCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel17.add(dateComboBoxCheck, gridBagConstraints);

        jLabel8.setText("\u0e19.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel17.add(jLabel8, gridBagConstraints);

        timeTextFieldCheck.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheckMouseClicked(evt);
            }
        });
        timeTextFieldCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel17.add(timeTextFieldCheck, gridBagConstraints);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif")));
        jLabel10.setToolTipText("\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e15\u0e23\u0e27\u0e08");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel17.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelMemoGrow.add(jPanel17, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelMemoGrow, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButtonSaveGrow.setText("Save");
        jButtonSaveGrow.setMaximumSize(new java.awt.Dimension(67, 24));
        jButtonSaveGrow.setMinimumSize(new java.awt.Dimension(67, 24));
        jButtonSaveGrow.setPreferredSize(new java.awt.Dimension(67, 26));
        jButtonSaveGrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveGrowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanel5.add(jButtonSaveGrow, gridBagConstraints);

        jButtonAddGrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAddGrow.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAddGrow.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonAddGrow.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonAddGrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddGrowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jPanel5.add(jButtonAddGrow, gridBagConstraints);

        jButtonDelGrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelGrow.setEnabled(false);
        jButtonDelGrow.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelGrow.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDelGrow.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDelGrow.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDelGrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelGrowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jButtonDelGrow, gridBagConstraints);

        jButtonPrintGrow.setText("Print");
        jButtonPrintGrow.setMaximumSize(new java.awt.Dimension(67, 24));
        jButtonPrintGrow.setMinimumSize(new java.awt.Dimension(67, 24));
        jButtonPrintGrow.setPreferredSize(new java.awt.Dimension(67, 26));
        jButtonPrintGrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintGrowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel5.add(jButtonPrintGrow, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 5, 5);
        add(jPanel5, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jLabelSurveyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabelSurveyDateActionPerformed
        this.dateComboBoxSurvey.setEnabled(jLabelSurveyDate.isSelected());
        if(!jLabelSurveyDate.isSelected())
            dateComboBoxSurvey.setText("");
    }//GEN-LAST:event_jLabelSurveyDateActionPerformed

    private void timeTextFieldCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheckMouseClicked
       
    }//GEN-LAST:event_timeTextFieldCheckMouseClicked

    private void timeTextFieldCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheckKeyReleased
        
    }//GEN-LAST:event_timeTextFieldCheckKeyReleased

    private void dateComboBoxCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheckKeyReleased
        
    }//GEN-LAST:event_dateComboBoxCheckKeyReleased

    private void dateComboBoxSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyFocusLost
        checksurvey1 = false;
    }//GEN-LAST:event_dateComboBoxSurveyFocusLost

    private void dateComboBoxSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyActionPerformed
        checkDateSurveyGrow();
    }//GEN-LAST:event_dateComboBoxSurveyActionPerformed


    private void jComboBoxGrowFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxGrowFocusLost
        jComboBoxGrowActionPerformed(null);
    }//GEN-LAST:event_jComboBoxGrowFocusLost

    private void jComboBoxGrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGrowActionPerformed
        selectGrow();
    }//GEN-LAST:event_jComboBoxGrowActionPerformed


    private void jButtonPrintGrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintGrowActionPerformed
        printGrowHistory();
    }//GEN-LAST:event_jButtonPrintGrowActionPerformed


    private void integerTextFieldRlGrowFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_integerTextFieldRlGrowFocusLost
        if(integerTextFieldRlGrow.getText().equals(""))
            theUS.setStatus(GutilPCU.getTextBundle("CheckGrow"),UpdateStatus.WARNING);
    }//GEN-LAST:event_integerTextFieldRlGrowFocusLost

    private void jTableGrowKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableGrowKeyReleased
        if(evt.getKeyCode()==evt.VK_UP
        || evt.getKeyCode()==evt.VK_DOWN){
                setGrow((GrowHistory)vGrowHistory.get(jTableGrow.getSelectedRow()));
                setGrowEnable(true);
            }
    }//GEN-LAST:event_jTableGrowKeyReleased

    private void jTableGrowMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableGrowMouseReleased
            setGrow((GrowHistory)vGrowHistory.get(jTableGrow.getSelectedRow()));
            setGrowEnable(true);
    }//GEN-LAST:event_jTableGrowMouseReleased

    private void jButtonDelGrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelGrowActionPerformed
        deleteGrow();
    }//GEN-LAST:event_jButtonDelGrowActionPerformed

    private void jButtonAddGrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddGrowActionPerformed
        setGrow(null);
    }//GEN-LAST:event_jButtonAddGrowActionPerformed

    private void jButtonSaveGrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveGrowActionPerformed
        saveGrow();
    }//GEN-LAST:event_jButtonSaveGrowActionPerformed
    
      public void setLanguage() 
    {
        GutilPCU.setLanguage(jLabel7);
        GutilPCU.setLanguage(jLabel8);
          jLabelGrow.setText(GutilPCU.getTextBundle(jLabelGrow.getText()));
          jLabelStandardGrow.setText(GutilPCU.getTextBundle(jLabelStandardGrow.getText())); 
          jLabelMonth.setText(GutilPCU.getTextBundle(jLabelMonth.getText()));
          jLabelRealGrow.setText(GutilPCU.getTextBundle(jLabelRealGrow.getText()));
          jLabelMonth2.setText(GutilPCU.getTextBundle(jLabelMonth2.getText()));
          jLabelRemark2.setText(GutilPCU.getTextBundle(jLabelRemark2.getText()));
          jLabelSurveyDate.setText(GutilPCU.getTextBundle(jLabelSurveyDate.getText()));     
          
          /*jButton*/
          jButtonSaveGrow.setText(GutilPCU.getTextBundle(jButtonSaveGrow.getText()));  
          jButtonAddGrow.setText(GutilPCU.getTextBundle(jButtonAddGrow.getText()));
          jButtonDelGrow.setText(GutilPCU.getTextBundle(jButtonDelGrow.getText()));  
          jButtonPrintGrow.setText(GutilPCU.getTextBundle(jButtonPrintGrow.getText()));
    
          /*TitledBorder*/        
          GutilPCU.JPanelLabler(jPanelTableGrow);
          GutilPCU.JPanelLabler(jPanelMemoGrow);
                  
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck;
    private com.pcu.utility.DateComboBox dateComboBoxSurvey;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.pcu.utility.IntegerTextField integerTextFieldRlGrow;
    private javax.swing.JButton jButtonAddGrow;
    private javax.swing.JButton jButtonDelGrow;
    private javax.swing.JButton jButtonPrintGrow;
    private javax.swing.JButton jButtonSaveGrow;
    private com.hosv3.gui.component.HosComboBox jComboBoxGrow;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelGrow;
    private javax.swing.JLabel jLabelMonth;
    private javax.swing.JLabel jLabelMonth2;
    private javax.swing.JLabel jLabelRealGrow;
    private javax.swing.JLabel jLabelRemark2;
    private javax.swing.JLabel jLabelStGrow;
    private javax.swing.JLabel jLabelStandardGrow;
    private javax.swing.JCheckBox jLabelSurveyDate;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelMemoGrow;
    private javax.swing.JPanel jPanelTableGrow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableGrow;
    private javax.swing.JTextField jTextFieldRemarkGorw;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck;
    // End of variables declaration//GEN-END:variables
    /**
     * 
     */

    DialogSetupSearchPcu theDialogSetupSearchPcu;
    JFrame theJFrame;
    public void setJFrame(JFrame jf){
        theJFrame = jf;
    }
    
     private void deleteGrow()
    {   
         int row = jTableGrow.getSelectedRow();
        if(row==-1)
        {  
            theUS.setStatus("กรุณาเลือกรายการที่ต้องการยกเลิก",UpdateStatus.WARNING);
            return;
        }
        this.theGrowHistory.notice = Gutil.CheckReservedWords(jTextFieldRemarkGorw.getText());
        int ret = theHealthServiceControl.deleteGrow(theGrowPcu,theGrowHistory);
        if(ret==0)
            return;
        setGrowHistoryV(false); 
    }
    
    
    
    
        
    private void setGrowHistoryV(boolean again)
    {   
        if(again){
            vGrowPcu = theHealthServiceControl.listGrowPcuByFamilyID(pcuobject.getFamily().getObjectId());
            vGrowHistory = theHealthServiceControl.listGrowByFamilyID(pcuobject.getFamily().getObjectId());
        }
        else{
            vGrowPcu = theHealthServiceControl.listGrowPcuByFamilyID();
            vGrowHistory = theHealthServiceControl.listGrowByFamilyID();
        }
        String[] col = {GutilPCU.getTextBundle("DateRecord"),
                        GutilPCU.getTextBundle("GrowDescription"),
                        GutilPCU.getTextBundle("StGrow"),
                        GutilPCU.getTextBundle("RlGrow"),
                        GutilPCU.getTextBundle("Remark")}; 
        TaBleModel tm = new TaBleModel(col,vGrowHistory.size());    
        for(int i=0 ;i<vGrowHistory.size(); i++)
        {  
            GrowHistory growHistory = (GrowHistory)vGrowHistory.get(i);                
            tm.setValueAt(GutilPCU.changDateToString(growHistory.modify_date_time,false),i,0);
            tm.setValueAt(ComboboxModel.getDescriptionComboBox(jComboBoxGrow,growHistory.grow_id),i,1);                
            tm.setValueAt(growHistory.standard_grow,i,2);
            tm.setValueAt(growHistory.real_grow,i,3);
            tm.setValueAt(growHistory.notice,i,4);
        }
        jTableGrow.setModel(tm);
        jTableGrow.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);
        jTableGrow.getColumnModel().getColumn(2).setCellRenderer(rendererCenter);
        jTableGrow.getColumnModel().getColumn(3).setCellRenderer(rendererCenter);    
        jTableGrow.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTableGrow.getColumnModel().getColumn(1).setPreferredWidth(200);
        jTableGrow.getColumnModel().getColumn(2).setPreferredWidth(20);
        jTableGrow.getColumnModel().getColumn(3).setPreferredWidth(20);
        jTableGrow.getColumnModel().getColumn(4).setPreferredWidth(150);
        setGrow(null);
   }  
   public void setEnabled(boolean flag)
   {    
        setGrowEnable(flag);
        jButtonAddGrow.setEnabled(flag);
   }
    
   
   private void setGrowEnable(boolean b)
   {    jButtonDelGrow.setEnabled(b);
        jButtonSaveGrow.setEnabled(b);
        jComboBoxGrow.setEnabled(b);
        integerTextFieldRlGrow.setEnabled(b);
        jTextFieldRemarkGorw.setEnabled(b);
        jButtonPrintGrow.setEnabled(b);
   }
   
    private boolean saveGrow()
    {   
            if (pcuobject.getFamily() == null) {   
                theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",UpdateStatus.WARNING);
                return false;
            }
            currage = getAge();
            if(currage > 6){
                theUS.setStatus(GutilPCU.getTextBundle("VisitAgeOver"),UpdateStatus.WARNING);
                jButtonAddGrow.setEnabled(true);
                return false;
            }
            if(integerTextFieldRlGrow.getText().equals("")){
                theUS.setStatus(GutilPCU.getTextBundle("CheckGrow"),UpdateStatus.WARNING);
                integerTextFieldRlGrow.requestFocus();
                return false;
            }
            String index = Gutil.getGuiData(jComboBoxGrow);
            boolean samevalue=false;

            for(int i=0, size=vGrowHistory.size(); i<size; i++)
            { 
                GrowHistory ght = (GrowHistory)vGrowHistory.get(i);            
                if(ght.grow_id.equals(index) && !ght.getObjectId().equals(theGrowHistory.getObjectId()))                                                 
                   samevalue = true;           
            }
            if(samevalue)  {
                theUS.setStatus(GutilPCU.getTextBundle("WarningCheckGrow"),UpdateStatus.WARNING); 
                return false;
            }
            theGrowPcu.office_id = office_id;
            theGrowHistory.grow_id = Gutil.getGuiData(jComboBoxGrow);
            theGrowHistory.standard_grow = jLabelStGrow.getText();
            theGrowHistory.real_grow = integerTextFieldRlGrow.getText();
            theGrowHistory.notice = Gutil.CheckReservedWords(jTextFieldRemarkGorw.getText());    
            theGrowHistory.survey_date = dateComboBoxSurvey.getText();
            theGrowHistory.modify_date_time = dateComboBoxCheck.getText()+","+timeTextFieldCheck.getText();
            int ret = theHealthServiceControl.saveGrow(theGrowPcu,theGrowHistory);
            if(ret==0)
               return false;
       
           setGrowHistoryV(true);
           if(modifygrow)
           {    jTableGrow.setRowSelectionInterval(rowGrowHistory,rowGrowHistory);
                setGrow((GrowHistory)vGrowHistory.get(rowGrowHistory));
           }
           else
           {    int lastRow = vGrowHistory.size()-1;
                if(lastRow!=-1) {
                    jTableGrow.setRowSelectionInterval(lastRow,lastRow);
                    setGrow((GrowHistory)vGrowHistory.get(lastRow));
                }
           }       
           return true;
    }
    
    
    public void setGrow(GrowHistory gh)
    {
        theGrowHistory = gh;
        if(theGrowHistory==null){
            theGrowHistory = new GrowHistory();
            theGrowPcu = new GrowPcu();
            jTextFieldRemarkGorw.setText("");
            integerTextFieldRlGrow.setText("");        
            Gutil.setGuiData(jComboBoxGrow,"1");
        }
        
        jTextFieldRemarkGorw.setText(theGrowHistory.notice);
        this.dateComboBoxCheck.setText(DateUtil.convertFieldDate(theGrowHistory.modify_date_time));
        
        if(theGrowHistory.modify_date_time.length()>10)
            this.timeTextFieldCheck.setText(theGrowHistory.modify_date_time.substring(11));
        
        ComboboxModel.setCodeComboBox(jComboBoxGrow,theGrowHistory.grow_id);
        jLabelStGrow.setText(theGrowHistory.standard_grow);
        integerTextFieldRlGrow.setText(theGrowHistory.real_grow);
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(theGrowHistory.survey_date));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
        /** add by jao สำหรับการรับบริการที่ไม่ต้องVisit **/
        
    }
    /**
     *
     */
    private void selectGrow()
    {   String month = Gutil.getGuiData(jComboBoxGrow);        
        if(!month.equals(""))
        {   vGrow  =  theHealthServiceControl.listGrow(month);
            Grow growTemp = new Grow(); 
            for(int i=0, size=vGrow.size(); i<size; i++)
            {   growTemp = (Grow)vGrow.get(i);
                theGrow = growTemp ;
            }
            if(theGrow!=null)  jLabelStGrow.setText(theGrow.grow_standard);
            growTemp = null;
        }
    }
    /**
     *แสดงค่า JFrame จาก FrameMain
     *@param -
     *@return JFrame
     *@author kingland
     *@date 05/09/2549
     */
    private JFrame getJFrame()
    {   return theHosManage.theHosInf.getJFrame();
    }
    /**
     *ตรวจสอบเพศของผู้รับบริการ
     *@param -
     *@return boolean true=ผ่าน false=ไม่ผ่าน
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkSex(boolean showWarningMessage)
    {   boolean result = true;
        //add code by noom สำหรับ check เพศ หญิงเท่านั้น
        if(pcuobject.getPatient() != null && !("2").equals(pcuobject.getPatient().f_sex_id))
        {   if(showWarningMessage)
            {   
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING); 
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        //สำหรับ check เพศ หญิงเท่านั้น
        else if(pcuobject.getFamily()!=null && !("2").equals(pcuobject.getFamily().f_sex_id))
        {   if(showWarningMessage)
            {   
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING); 
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        return result;
    }
    /**
     *ตรวจสอบ Patient และ Family จาก PCUobject
     *@param -
     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkPatientAndFamily()
    {   boolean result = true;
        if(pcuobject.getFamily() == null) result = false;
        return result;
    }
    /**
     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่
     *@param -
     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkDead()
    {   boolean result = false;
        if(pcuobject.getFamily() != null && Dischar.DEATH.equals(pcuobject.getFamily().discharge_status_id))
        {   result = true;
        }
        else if(pcuobject.getPatient() != null && Dischar.DEATH.equals(pcuobject.getPatient().discharge_status_id))
        {   result = true;
        }
        return false;//result;
    }
    /**
     *คำนวนหาอายุของผู้เข้ารับบริการ
     *@param -
     *@return อายุเป็นปี
     *@author jao
     */
    
    private int getAge()
    {   int currage = 0;
        if(pcuobject.getPatient()!=null&&!pcuobject.getPatient().patient_birthday.equals(""))
        {   age = DateUtil.calculateAge(pcuobject.getPatient().patient_birthday,pcuobject.getCurrentDateTime());
            currage = Integer.parseInt(age);            
        }
        else if(pcuobject.getFamily()!=null&&!pcuobject.getFamily().patient_birthday.equals(""))
        {   age = DateUtil.calculateAge(pcuobject.getFamily().patient_birthday,pcuobject.getCurrentDateTime());   
            currage = Integer.parseInt(age);            
        }
        else 
        {   theUS.setStatus(GutilPCU.getTextBundle("VisitNotHaveAge"),UpdateStatus.WARNING);
        }
        return currage;
    }
    private void printGrowHistory()
    {
        if(vGrowHistory!=null)
            theHosManage.theHosControl.thePrintControl.printGrowHistory(vGrowHistory);
        else
            theUS.setStatus(GutilPCU.getTextBundle("Data_Grow_NULL"),UpdateStatus.WARNING);
    }
    
    /**
     * เช็ควันที่สำรวจว่าเป็นวันในอนาคตหรือไม่
     * @jao 
     */
    private void checkDateSurveyGrow()
    {        
        if(!dateComboBoxSurvey.getText().equals("") 
            && dateComboBoxSurvey.getText().length()==10 
            && com.pcu.utility.DateUtil.countDay(dateComboBoxSurvey.getText(),theHosManage.theHosControl.theConnectionInf) == -1 
            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxSurvey.getText()),theHosManage.theHosControl.theConnectionInf)==false)  
        {            
             if(checksurvey1 == false)
             {
                 // ไม่สามารถกรอกวันที่เป็นวันในอนาคตได้
                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") , UpdateStatus.WARNING);
                checksurvey1 = true;
             }

        }  
        if(checksurvey1)
        {
            dateComboBoxSurvey.setText("");    
        }
    }
    /**
     * แสดงข้อความเตือน
     * @param message = ข้อความที่ต้องการให้แสดง
     *        status = สถานะที่แสดง
     * @return void
     * @author kingland
     * @date 28/08/2549
     */
    public void notifylistItemByGroup(com.hospital_os.object.Item item,boolean flag) {
        
    }

    public void notifyDeletePatient(String str, int param)
    {
    }

    public void notifyDeletePatientPayment(String str, int param)
    {
    }

    public void notifyManageDrugAllergy(String str, int param)
    {
    }

    public void notifyReadPatient(String str, int param)
    {
    }

    public void notifyResetPatient(String str, int param)
    {
    }


    public void notifySavePatient(String str, int param)
    {
    }

    public void notifySavePatientPayment(String str, int param)
    {
    }

    public void notifylistItemByGroup(com.hospital_os.object.Item item)
    {
    }

    public void notifyReadFamily(String str, int status) {
    }
}
