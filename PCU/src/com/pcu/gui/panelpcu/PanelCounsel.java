/*
 * PanelCounsel.java
 *
 * Created on 13 มิถุนายน 2548, 11:30 น.
 */
/*
 * ตรวจสอบวันที่สำรวจแล้ว
 * kingland
 */
package com.pcu.gui.panelpcu;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.Vector;
import com.hospital_os.utility.*;
import com.hospital_os.object.Visit;
import com.hospital_os.object.Employee;
import com.hospital_os.object.Patient;
import com.hospital_os.object.Dischar;
import com.hosv3.control.HosControl;
import com.hosv3.control.lookup.VitalTemplateLookup;
import com.pcu.control.AllComboBoxControl;
import com.pcu.object.Family;
import com.pcu.control.HosManage;
import com.pcu.control.ExtraClinicServiceControl;
import com.pcu.utility.*;
import com.pcu.object.Counsel;
import com.hosv3.utility.connection.UpdateStatus;

/**
 *
 * @author  Noom
 */
public class PanelCounsel extends javax.swing.JPanel {
    public static final  String WARNING ="Warning";
    private static HosManage theHosManage;
    private ExtraClinicServiceControl theExtraClinicServiceControl;
    private DefaultTableCellRenderer rendererCenter;
    private AllComboBoxControl theAllComboBoxControl;
    private Counsel theCounsel = new Counsel();
    private Vector vCounsel = new Vector();
    private Visit theVisit;
    private Patient thePatient;
    private Employee theEmployee;    
    private Family theFamily;
    private PCUObject pcuobject;
    private UpdateStatus theUS;
    JFrame theFrame;
    private boolean checksurvey ;
    /** Creates new form PanelCounsel */
    public PanelCounsel() 
    {   initComponents();
    }
    public void setControl(HosManage hm,HosDialog hd,UpdateStatus us) 
    {
        theHosManage = hm; 
        pcuobject = hm.thePO;
        theUS = us;
        theExtraClinicServiceControl = theHosManage.theHosControl.theExtraClinicServiceControl;
        theAllComboBoxControl = theHosManage.theHosControl.theAllComboBoxControl;
        initDatas();
        setLanguage();
        initBalloon();
        setEnabled(false);
        
    }
    private void initBalloon()
    {
        HosControl hc = theHosManage.theHC;
        jTextAreaCounselDetail.setControl(new VitalTemplateLookup(
                hc.theLookupControl));
        jTextAreaCounselDetail.setJFrame(theUS.getJFrame());
        hc.theHS.theBalloonSubject.attachBalloon(this.jTextAreaCounselDetail);
    }
    public void initDatas() 
    {   theAllComboBoxControl.initFixDataToHashTable();
        Vector vServiceType = theAllComboBoxControl.listServiceType();
        ComboboxModel.initComboBox(jComboBoxProblem,vServiceType);
        vServiceType.add(0, GutilPCU.getTextBundle("All"));
        ComboboxModel.initComboBox(jComboBoxSearchProblem,vServiceType);
    }
    public void refresh(String family_id){
        theExtraClinicServiceControl.listCounselByFamilyID(family_id,"");
    }
    /** ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI */   
    public void setObject(PCUObject pcuobject) 
    {   Constant.println("_henbe_______________________" + getClass().toString());     
        this.pcuobject = pcuobject;
        theFamily  = null;
        thePatient = null;
        theVisit = null;
        theEmployee = null;
        if(pcuobject != null)
        {   theFamily = pcuobject.getFamily();
            theEmployee = pcuobject.getEmployee();                
            theVisit = pcuobject.getVisit();
            thePatient = pcuobject.getPatient();
            setFromEnable(true);
        }
        setCounselV(theExtraClinicServiceControl.listCounselByFamilyID());
        this.clearGUICounselDetail();
        if(!checkPatientAndFamily()) {
            setEnabled(false);
        }
        else if(checkDead())
        {   setEnabled(false);
        }
    }
    /**
     *@deprecated
     */
    public void setObjectFamily (Family family)
    {   Constant.println("_henbe other_______________________" + getClass().toString()); 
        thePatient = null;
        theVisit = null;
        theFamily = pcuobject.getFamily();          
        setFromEnable(true);
        setCounselV(theExtraClinicServiceControl.listCounselByFamilyID());
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelCounselList = new javax.swing.JPanel();
        jPanelTableSummary = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableCounselData = new javax.swing.JTable();
        jComboBoxSearchProblem = new javax.swing.JComboBox();
        jCheckBoxGroup = new javax.swing.JCheckBox();
        jPanelCounselDetail = new javax.swing.JPanel();
        jPanelCounselData = new javax.swing.JPanel();
        jPanelDetail = new javax.swing.JPanel();
        jComboBoxProblem = new javax.swing.JComboBox();
        jButtonRefresh = new javax.swing.JButton();
        jPanelCounselSubDetail = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaCounselDetail = new com.hosv3.gui.component.BalloonTextArea();
        dateComboBoxSurvey = new com.pcu.utility.DateComboBox();
        jLabelProblem = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelRemark = new javax.swing.JLabel();
        jTextAreaCounselRemark = new javax.swing.JTextField();
        jLabelSurveyDate = new javax.swing.JCheckBox();
        jPanel16 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dateComboBoxCheck = new com.hospital_os.utility.DateComboBox();
        jLabel8 = new javax.swing.JLabel();
        timeTextFieldCheck = new com.hospital_os.utility.TimeTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabelVN = new javax.swing.JLabel();
        jPanelCounselControl = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(700, 299));
        setPreferredSize(new java.awt.Dimension(700, 464));
        jPanelCounselList.setLayout(new java.awt.GridBagLayout());

        jPanelCounselList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Counsel_Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelCounselList.setMinimumSize(new java.awt.Dimension(270, 85));
        jPanelCounselList.setPreferredSize(new java.awt.Dimension(270, 464));
        jPanelTableSummary.setLayout(new java.awt.GridBagLayout());

        jTableCounselData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "VisitDate"
            }
        ));
        jTableCounselData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableCounselDataMouseReleased(evt);
            }
        });

        jScrollPaneTable.setViewportView(jTableCounselData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelTableSummary.add(jScrollPaneTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelCounselList.add(jPanelTableSummary, gridBagConstraints);

        jComboBoxSearchProblem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSearchProblemActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 11);
        jPanelCounselList.add(jComboBoxSearchProblem, gridBagConstraints);

        jCheckBoxGroup.setSelected(true);
        jCheckBoxGroup.setText("\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17");
        jCheckBoxGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxGroupActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelCounselList.add(jCheckBoxGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jPanelCounselList, gridBagConstraints);

        jPanelCounselDetail.setLayout(new java.awt.GridBagLayout());

        jPanelCounselDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Counsel_Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelCounselDetail.setMinimumSize(new java.awt.Dimension(500, 299));
        jPanelCounselDetail.setPreferredSize(new java.awt.Dimension(500, 299));
        jPanelCounselData.setLayout(new java.awt.GridBagLayout());

        jPanelDetail.setLayout(new java.awt.GridBagLayout());

        jComboBoxProblem.setEnabled(false);
        jComboBoxProblem.setMinimumSize(new java.awt.Dimension(150, 20));
        jComboBoxProblem.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanelDetail.add(jComboBoxProblem, gridBagConstraints);

        jButtonRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pcu/images/Refresh2.gif")));
        jButtonRefresh.setToolTipText("Refresh");
        jButtonRefresh.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonRefresh.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonRefresh.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelDetail.add(jButtonRefresh, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelCounselData.add(jPanelDetail, gridBagConstraints);

        jPanelCounselSubDetail.setLayout(new java.awt.GridBagLayout());

        jPanelCounselSubDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CounselSubDetail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelCounselSubDetail.setMinimumSize(new java.awt.Dimension(44, 250));
        jPanelCounselSubDetail.setPreferredSize(new java.awt.Dimension(44, 250));
        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setMaximumSize(new java.awt.Dimension(30, 150));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(30, 150));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(30, 100));
        jScrollPane4.setViewportView(jTextAreaCounselDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelCounselSubDetail.add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelCounselData.add(jPanelCounselSubDetail, gridBagConstraints);

        dateComboBoxSurvey.setEnabled(false);
        dateComboBoxSurvey.setText("");
        dateComboBoxSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSurveyActionPerformed(evt);
            }
        });
        dateComboBoxSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxSurveyFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        jPanelCounselData.add(dateComboBoxSurvey, gridBagConstraints);

        jLabelProblem.setText("CounselProblem");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelCounselData.add(jLabelProblem, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelRemark.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabelRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jTextAreaCounselRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelCounselData.add(jPanel1, gridBagConstraints);

        jLabelSurveyDate.setText("SurveyDate");
        jLabelSurveyDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabelSurveyDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jLabelSurveyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabelSurveyDateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelCounselData.add(jLabelSurveyDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 11);
        jPanelCounselDetail.add(jPanelCounselData, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel7, gridBagConstraints);

        dateComboBoxCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(dateComboBoxCheck, gridBagConstraints);

        jLabel8.setText("\u0e19.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel16.add(jLabel8, gridBagConstraints);

        timeTextFieldCheck.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheckKeyReleased(evt);
            }
        });
        timeTextFieldCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheckMouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(timeTextFieldCheck, gridBagConstraints);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif")));
        jLabel9.setToolTipText("\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e15\u0e23\u0e27\u0e08");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel9, gridBagConstraints);

        jLabelVN.setText("VN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(jLabelVN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 11);
        jPanelCounselDetail.add(jPanel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanelCounselDetail, gridBagConstraints);

        jPanelCounselControl.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanelCounselControl.add(jButtonSave, gridBagConstraints);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelCounselControl.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelCounselControl.add(jButtonDel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 5, 11);
        add(jPanelCounselControl, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jLabelSurveyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabelSurveyDateActionPerformed
        this.dateComboBoxSurvey.setEnabled(jLabelSurveyDate.isSelected());
        if(!jLabelSurveyDate.isSelected())
            dateComboBoxSurvey.setText("");
    }//GEN-LAST:event_jLabelSurveyDateActionPerformed
    private void timeTextFieldCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheckMouseClicked
        timeTextFieldCheck.selectAll();
    }//GEN-LAST:event_timeTextFieldCheckMouseClicked
    private void timeTextFieldCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheckKeyReleased
        
    }//GEN-LAST:event_timeTextFieldCheckKeyReleased
    private void dateComboBoxCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheckKeyReleased
        
    }//GEN-LAST:event_dateComboBoxCheckKeyReleased
    private void jCheckBoxGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxGroupActionPerformed
        this.jComboBoxSearchProblem.setEnabled(jCheckBoxGroup.isSelected());
        if(!jCheckBoxGroup.isSelected())
            this.jComboBoxSearchProblem.setSelectedIndex(0);
    }//GEN-LAST:event_jCheckBoxGroupActionPerformed
    private void dateComboBoxSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyActionPerformed
        checksurvey = false;
    }//GEN-LAST:event_dateComboBoxSurveyActionPerformed
    private void dateComboBoxSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyFocusLost
    }//GEN-LAST:event_dateComboBoxSurveyFocusLost
    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        initDatas();
    }//GEN-LAST:event_jButtonRefreshActionPerformed
    private void jComboBoxSearchProblemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSearchProblemActionPerformed
//            String type = GutilPCU.getGuiData(jComboBoxSearchProblem);
//            if(theFamily!=null){
//                updateList(theExtraClinicServiceControl.listCounselByFamilyID(this.theFamily.getObjectId()));
//            }
//            if(thePatient!=null){
//                updateList(theExtraClinicServiceControl.listCounselByPatientIDAndCounselType(thePatient.getObjectId(),type));
//            }
//            Vector vc = this.theHosManage.theHosControl.listCounselByType(theFamily,thePatient,type);
            listCounsel();
    }//GEN-LAST:event_jComboBoxSearchProblemActionPerformed
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed

            jTableCounselData.clearSelection();
            theCounsel = new Counsel();
            clearGUICounselDetail();
            setButtonDel(vCounsel);

    }//GEN-LAST:event_jButtonAddActionPerformed
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
            deleteCounsel();
            //add code by noom ,28/08/25448
            //เลือกประเภทให้คำปรึกษาเป็นยาเสพติด เลือกรายการให้คำปรึกษา กดปุ่ม -
            //โปรแกรมลบข้อมูลให้คำปรึกษาเรื่องยาเสพติด แล้วดึงข้อมูลให้คำปรึกษาเรื่องอื่นขึ้นมาแสดงในตารางลิสต์ให้คำปรึกษา
            //ทั้ง ๆ ที่ประเภทให้คำปรึกษาที่เลือกยังเป็นยาเสพติดอยู่
    }//GEN-LAST:event_jButtonDelActionPerformed
    private void jTableCounselDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCounselDataMouseReleased
        int row = jTableCounselData.getSelectedRow();
        if(row != -1) {
            theCounsel = (Counsel)vCounsel.get(row);
                showCounselDetail(theCounsel);
                boolean status = true;
                if(!theCounsel.visit_id.equals(""))
                    status = theExtraClinicServiceControl.checkStatusVisit(theCounsel.visit_id);
                else if("".equals(theCounsel.visit_id))
                    status = true; 
                if(status) 
                {
                    setFromEnable(true);
                }
                else
                {
//                    setFromEnable(false);
                    if(theVisit != null){
                        jButtonAdd.setEnabled(true);
                    }                    
                    else{
//                        jButtonAdd.setEnabled(false);
                    }
                }
        }
    }//GEN-LAST:event_jTableCounselDataMouseReleased
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(isEmptyCounsel())
        {   
            theUS.setStatus(GutilPCU.getTextBundle("EmptyCounsel"),UpdateStatus.WARNING);
            return;
        }
        int selectRow = -1;
        if(!checkCounselServiceType()){
            if(!checkUpdateValue())
            {   
                theUS.setStatus(GutilPCU.getTextBundle("CounselWarning"),UpdateStatus.WARNING);
                return;
            }
        }
        if (pcuobject.getFamily() == null)
        {   
            setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",UpdateStatus.WARNING);
            return ;
        }
        if(checkDateSurvey())
            return;
        
        if(getCounsel()==null)
            return ;

        int result = theExtraClinicServiceControl.saveCounsel(theCounsel);
        listCounsel();
        for(int i=0;i<this.vCounsel.size();i++){
            Counsel pp = (Counsel)vCounsel.get(i);
            if(pp.getObjectId().equals(theCounsel.getObjectId())){
                this.jTableCounselData.setRowSelectionInterval(i,i);
                return ;
            }
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed
    /**
     * ใช้ตรวจสอบว่าได้ใส่ข้อมูลการให้คำปรึกษาแล้ว
     * @param -
     * @return true = เป็นค่าว่าง false = ไม่เป็นค่าว่าง
     * @author kingland
     * @date 18/07/2549
     */
    private boolean isEmptyCounsel(){
        return jTextAreaCounselDetail.getText().trim().equals("");
    }   
    private boolean checkUpdateValue(){
        boolean isUpdate = false;
        int row = jTableCounselData.getSelectedRow();
        if(row != -1) {
            Counsel counsel = (Counsel)vCounsel.get(row);
            if(counsel != null){
                if(counsel.b_health_counsel_type_id.equals(ComboboxModel.getCodeComboBox(jComboBoxProblem))){
                    isUpdate = true;
                }
            }
        }
        return isUpdate;
    }
    /**
     * ตรวจสอบว่ามีการให้คำปรึกษาเรื่องนี้แล้วหรือยัง
     * มีการตรวจสอบ ทั้งข้อมูล ที่ Visit และไม่ Visit
     * ไม่จำเป็นต้องเช็คแล้ว เพราะว่าอาจมีการบันทึกคำปรึกษาซ้ำหลายครั้งได้  henbe
     */
    private boolean checkCounselServiceType()
    {
        boolean result = true;
        if(vCounsel != null && theVisit != null) 
        {
            Counsel counsel = null;
            //comment by noom 21/10/2548
            //Vector vCounselAll =  theExtraClinicServiceControl.listCounselByPatientID(thePatient.getObjectId());
            Vector vCounselAll =  theExtraClinicServiceControl.listCounselByVisitID(theVisit.getObjectId());
            
            if(vCounselAll != null){
               /*
                for(int i = vCounselAll.size()-1 ; i >=0  ; i--) {
                    counsel = (Counsel)vCounselAll.get(i);
                    if(counsel.b_health_counsel_type_id.equalsIgnoreCase(ComboboxModel.getCodeComboBox(jComboBoxProblem))) {
                        result =  false;
                        break;
                    }
                    counsel = null;
                }*/
                for(int i=0;i<vCounselAll.size();i++){
                    counsel = new Counsel();
                    counsel = (Counsel)vCounselAll.get(i);
                    if(counsel.b_health_counsel_type_id.equalsIgnoreCase(ComboboxModel.getCodeComboBox(jComboBoxProblem))) {
                        result =  false;
                        break;
                    }
                }
            }
        }
        else if(vCounsel != null && (theVisit == null || "".equals(theVisit.getObjectId())))
        {
            Counsel counsel = null;
            Vector vCounselAll =  vCounsel;
            if(vCounselAll  != null)
            {
                for(int i=0;i<vCounselAll.size();i++){
                    counsel = new Counsel();
                    counsel = (Counsel)vCounselAll.get(i);
                    if(counsel.b_health_counsel_type_id.equalsIgnoreCase(ComboboxModel.getCodeComboBox(jComboBoxProblem)) 
                        && counsel.survey_date.equalsIgnoreCase(dateComboBoxSurvey.getText())) {
                        result =  false;
                        break;
                    }
                }
            }
        }
        //return result;
        return true;
    }
    public void setEnabled(boolean flag)
    {   setFromEnable(flag);
    }
    private void setFromEnable(boolean flag){
        jComboBoxProblem.setEnabled(flag);
        jTextAreaCounselDetail.setEnabled(flag);
        jTextAreaCounselRemark.setEnabled(flag);
        jButtonAdd.setEnabled(flag);
        jButtonSave.setEnabled(flag);
        jButtonDel.setEnabled(flag);
        jButtonRefresh.setEnabled(flag);
        jTableCounselData.setEnabled(flag);
    }
    /**
     * ใช้ในการเซตปุ่มลบ ว่าสามารถทงานได้หรือไม่ โดยถ้ามีข้อมูลที่จะลบปุ่มก็สามารถทำงานได้
     * @param Vector ของข้อมูลที่จะลบ
     * @return void
     * @author kingland
     * @date 03/06/2549
     */
    private void setButtonDel(Vector vCouns)
    {
        if(vCouns == null || vCouns.size() == 0)
        {
//           jButtonDel.setEnabled(false); 
        }
        else
        {
            jButtonDel.setEnabled(true); 
        }
    }
    private void setButtonBeforeAddValue(){
        jButtonAdd.setEnabled(true);
//        jButtonSave.setEnabled(false);
//        jButtonDel.setEnabled(false);
//        jComboBoxProblem.setEnabled(false);
//        jTextAreaCounselDetail.setEnabled(false);
//        jTextAreaCounselRemark.setEnabled(false);
    }
    public void setJFrame(JFrame frame)
    {
        theFrame = frame;
        initBalloon();
    }
    public JFrame getJFrame()
    {
        return theFrame;
    }
    public void setLanguage() {
        /*jLabel*/
        jLabelProblem.setText(GutilPCU.getTextBundle(jLabelProblem.getText()));
        jLabelRemark.setText(GutilPCU.getTextBundle(jLabelRemark.getText()));
        jLabelSurveyDate.setText(GutilPCU.getTextBundle(jLabelSurveyDate.getText()));
        GutilPCU.setLanguage(jLabel7);
        GutilPCU.setLanguage(jLabel8);
        
        /*jButton*/
        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));
        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));
        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));
        GutilPCU.setLanguage(jCheckBoxGroup);
        /*TitledBorder*/
        GutilPCU.JPanelLabler(jPanelCounselList);
        GutilPCU.JPanelLabler(jPanelCounselDetail);
        GutilPCU.JPanelLabler(jPanelCounselSubDetail);
        //GutilPCU.JPanelLabler(jPanelRemark);
    }
    /*นำข้อมูลจาก GUI มา set ค่าให้ Counsel Object*/
    private Counsel getCounsel() 
    {
        boolean result = true;
        if(theCounsel == null) 
            theCounsel = new Counsel();
        
        theCounsel.b_health_counsel_type_id  = ComboboxModel.getCodeComboBox(jComboBoxProblem);
        theCounsel.counsel_detail = Gutil.CheckReservedWords(jTextAreaCounselDetail.getText());
        theCounsel.counsel_remark = Gutil.CheckReservedWords(jTextAreaCounselRemark.getText());
        /////////////////////////////////////
        // ไม่มี Visit
        /////////////////////////////////////
        if(pcuobject.getVisit() == null || pcuobject.getVisit().getObjectId() == null || "".equals(pcuobject.getVisit().getObjectId()))
        {
            if(theCounsel.getObjectId() == null || "".equalsIgnoreCase(theCounsel.getObjectId()))
            {
                String survey_date = dateComboBoxSurvey.getText();
                if(survey_date == null || survey_date.equals(""))
                {
                    theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveSurVeyDate"), 2);
                    dateComboBoxSurvey.requestFocus();                    
                    return null;
                }
                else if(survey_date.length() != 10 )
                {
                    theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveSurVeyDate"), 2);
                    dateComboBoxSurvey.requestFocus();                    
                    return null;
                }
            }
        }            
        if(theCounsel.getObjectId() == null) {
            if(thePatient != null){
                theCounsel.patient_id = thePatient.getObjectId();
                theCounsel.family_id = thePatient.family_id;            
            }
            if (theFamily!=null){
                theCounsel.family_id = theFamily.getObjectId();
            }
            if(pcuobject.getVisit()!=null){
                theCounsel.visit_id = pcuobject.getVisit().getObjectId();
            }
            theCounsel.counsel_staff_record = theEmployee.getObjectId();
            theCounsel.counsel_record_time = com.hospital_os.utility.Gutil.getTextCurrentDateTime(theAllComboBoxControl.theConnectionInf);
        }
        theCounsel.survey_date = dateComboBoxSurvey.getText();
        theCounsel.counsel_modify_time = dateComboBoxCheck.getText()+","+timeTextFieldCheck.getText();
        return theCounsel;
    }
    /*สำหรับ clear หน้าจอเมื่อผู้ใช้ทำการกดปุ่ม + หรือ -*/
    public void clearGUICounselDetail(){
        jTextAreaCounselDetail.setText("");
        jTextAreaCounselRemark.setText("");
        this.jLabelVN.setText("");
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(""));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
    }
    /*นำค่าจาก Counsel Object มาแสดงผล*/
    public void showCounselDetail(Counsel theCounsel){
        if(theCounsel == null)
            theCounsel = new Counsel();
        
        ComboboxModel.setCodeComboBox(jComboBoxProblem,theCounsel.b_health_counsel_type_id);
        jTextAreaCounselDetail.setText(theCounsel.counsel_detail);
        jTextAreaCounselRemark.setText(theCounsel.counsel_remark);
        this.dateComboBoxCheck.setText(com.hosv3.utility.DateUtil.convertFieldDate(theCounsel.counsel_modify_time));
        this.timeTextFieldCheck.setText(theCounsel.counsel_modify_time.substring(11));
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(theCounsel.survey_date));      
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
        this.jLabelVN.setText("");
        if(!theCounsel.visit_id.equals("")){
            String vn_id = this.theAllComboBoxControl.readVNbyVid(theCounsel.visit_id);
            this.jLabelVN.setText("VN:"+vn_id);
        }      
    }
    /**
     * ตรวจสอบก่อนทำการลบ
     * @param -
     * @return boolean true = สามารถลบข้อมูลได้ false = ไม่สามารถลบข้อมูลได้
     * @author kingland
     * @date 03/06/2549
     */  
    public boolean checkBeforDelete()
    {
        boolean result = false;
        int row = jTableCounselData.getSelectedRow();
        if(row != -1)
        {
            if(theUS.confirmBox(GutilPCU.getTextBundle("ConfirmDeleteCounsel"),UpdateStatus.WARNING)){
                result = true;
            }
        }
        else
        {
            theUS.setStatus(GutilPCU.getTextBundle("WarningNotSelect"), 2);
        }
        return result;
    }
    /**
     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่
     *@param -
     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkDead()
    {   boolean result = false;
        if(theFamily != null && Dischar.DEATH.equals(theFamily.discharge_status_id))
        {   result = true;
        }
        else if(thePatient != null && Dischar.DEATH.equals(thePatient.discharge_status_id))
        {   result = true;
        }
        return false;//result;
    }
    /**
     *ตรวจสอบเพศของผู้รับบริการ
     *@param -
     *@return boolean true=ผ่าน false=ไม่ผ่าน
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkSex(boolean showWarningMessage)
    {   boolean result = true;
        //add code by noom สำหรับ check เพศ หญิงเท่านั้น
        if(thePatient != null && !("2").equals(thePatient.f_sex_id))
        {   if(showWarningMessage)
            {    
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        //สำหรับ check เพศ หญิงเท่านั้น
        else if(theFamily!=null && !("2").equals(theFamily.f_sex_id))
        {   if(showWarningMessage)
            {    
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        return result;
    }
    /**
     *ตรวจสอบ Patient และ Family จาก PCUobject
     *@param -
     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkPatientAndFamily()
    {   boolean result = true;
        if(theFamily == null) result = false;
        return result;
    }
    /**
     * ลบข้อมูลการให้คำปรึกษา (เปลี่ยนสถานะของ active)
     * @param -
     * @return void
     * @author kingland
     * @date 03/06/2549
     */    
    public void deleteCounsel(){
        if(!checkBeforDelete())
            return;
        int row = jTableCounselData.getSelectedRow();
        if(row == -1)
            return;
        
        theCounsel = (Counsel)vCounsel.get(row);
        theCounsel.counsel_detail = Gutil.CheckReservedWords(jTextAreaCounselDetail.getText());
        theCounsel.counsel_remark = Gutil.CheckReservedWords(jTextAreaCounselRemark.getText());
        int ret = theExtraClinicServiceControl.deleteCounsel(theCounsel);
        if(ret==0)
            return;
        listCounsel();
        clearGUICounselDetail();
    }
    /**
     * ตรวจสอบ
     * @param -
     * @return void
     * @author kingland
     * @date 18/07/2549
     */
    private boolean checkServiceCounsel() {
        boolean result = true;
        if(vCounsel != null && theVisit != null) {
            Counsel counsel = null;
            Vector  vCounselAll = theExtraClinicServiceControl.listCounselByFamilyID();
            if(vCounselAll != null){
                Constant.println("---Counsel have size = "+vCounselAll.size());
                for(int i =  vCounselAll.size()-1 ; i >=0  ; i--) {
                    counsel = (Counsel)vCounselAll.get(i);
                    if(counsel.visit_id.equalsIgnoreCase(theVisit.getObjectId())) {
                        result =  false;
                        break;
                    }
                    counsel = null;
                }
            }
        }
        return result;
    }
    
    /**
     * Update ข้อมูลการให้คำปรึกษาใน Table ใหม่
     * @param -
     * @return void
     * @author kingland
     * @date 03/06/2549
     */
//    public void updateList(){
    public void listCounsel()
    {
        String type = GutilPCU.getGuiData(jComboBoxSearchProblem);
        vCounsel = null;
        if(theFamily!=null)
            vCounsel = theExtraClinicServiceControl.listCounselByFamilyID(theFamily.getObjectId(),type);
        if (vCounsel==null || vCounsel.isEmpty())
        {   
            setButtonBeforeAddValue();
            setFromEnable(true);
            jButtonAdd.setEnabled(true);
        }
        if (vCounsel==null || vCounsel.isEmpty())
        {
            if(thePatient != null){
                vCounsel = theExtraClinicServiceControl.listCounselByFamilyID(thePatient.family_id,type);        
                setFromEnable(true);
                jButtonAdd.setEnabled(true);
            }
            clearGUICounselDetail();
        }
        setButtonDel(vCounsel);
        setCounselV(vCounsel);
    }
    public void updateList(Vector vC){
        vCounsel = vC;
        if(theCounsel != null){
            if(theVisit != null && thePatient != null)
            {
                setButtonBeforeAddValue();
                jButtonAdd.setEnabled(true);
            }
            else
            {
                //comment code by noom 23/10/2548
//                setFromEnable(false);
                clearGUICounselDetail();
                jButtonAdd.setEnabled(true);
            }
        }
        jButtonAdd.setEnabled(true);
        setCounselV(vCounsel);
    }
    /*นำข้อมูลจาก Counsel Object มาแสดงผลในตาราง*/
    private void setCounselV(Vector vc) {
        this.vCounsel = vc;
        String[] col = { GutilPCU.getTextBundle("No."),GutilPCU.getTextBundle("DentalServiceDate"),GutilPCU.getTextBundle("CounselType")};
        TableModel tm ;
        if(vc != null) {
            tm= new TableModel(col,vc.size());
            Counsel counsel = new Counsel();
            for(int i=0 ;i<vc.size(); i++) {
                counsel = (Counsel)vc.get(i);
                tm.setValueAt(String.valueOf((i+1)),i,0);
                tm.setValueAt(GutilPCU.changDateToString(counsel.counsel_modify_time,false),i,1);
                tm.setValueAt(theAllComboBoxControl.getValueOfServiceType(counsel.b_health_counsel_type_id),i,2);
            }
        } else {
            tm= new TableModel(col,0);
            //ไม่มีข้อมูลการได้รับบริการของผู้ป่วยคนนี้ กำหนดให้ผู้ป่วยสามารถบันทึกได้ทันที
            promptSave();
        }
        
        jTableCounselData.setModel(tm);
        setDefaultTableListVisit();
    }
    private void promptSave(){
        if(theVisit != null && theVisit.getObjectId() != null){
            theCounsel = new Counsel();
            clearGUICounselDetail();
            setFromEnable(true);
//            jButtonDel.setEnabled(false);
//            jButtonAdd.setEnabled(false);
        }
    }
    /*กำหนดรูปแบบของตารางที่ต้องการแสดงผล*/
    private void setDefaultTableListVisit() {
        if(rendererCenter == null){
            rendererCenter = new DefaultTableCellRenderer();
        }
        //กำหนดให้จัด Column ให้อยู่ตรงกลาง
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        jTableCounselData.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);
        //กำหนดความกว้างของตาราง
        jTableCounselData.getColumnModel().getColumn(0).setPreferredWidth(45);
        jTableCounselData.getColumnModel().getColumn(1).setPreferredWidth(125);
    }
    public void setVisit(Visit theVisit){
        theVisit = theVisit;
    }
    public void setEmployee(Employee theEmployee){
        theEmployee = theEmployee;
    }
    public void setPatient(Patient thePatient){
        thePatient = thePatient;
    }
    /**
     * เช็ควันที่สำรวจว่าเป็นวันในอนาคตหรือไม่
     * หาก return true แสดงว่าไม่ผ่าน  false แสดงว่าผ่าน
     * @jao 
     */
    private boolean checkDateSurvey()
    {        
        if(!dateComboBoxSurvey.getText().equals("") 
            && dateComboBoxSurvey.getText().length()==10 
            && com.pcu.utility.DateUtil.countDay(dateComboBoxSurvey.getText(),theHosManage.theHosControl.theConnectionInf) == -1 
            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxSurvey.getText()),theHosManage.theHosControl.theConnectionInf)==false)  
        {            
             if(checksurvey == false)
             {
                 // ไม่สามารถกรอกวันที่เป็นวันในอนาคตได้
                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") ,UpdateStatus.WARNING);
                checksurvey = true;
                return true;
             }
        }  
        return false;
    }
    /**
     *เซตสถานะ
     *@param message = ข้อความ status = สถานะ
     *@return void
     *@author kingland
     *@date 29/08/2549
     */
    private void setStatus(String message,int status)
    {   theUS.setStatus(message, status);
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck;
    private com.pcu.utility.DateComboBox dateComboBoxSurvey;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxGroup;
    private javax.swing.JComboBox jComboBoxProblem;
    private javax.swing.JComboBox jComboBoxSearchProblem;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelProblem;
    private javax.swing.JLabel jLabelRemark;
    private javax.swing.JCheckBox jLabelSurveyDate;
    private javax.swing.JLabel jLabelVN;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanelCounselControl;
    private javax.swing.JPanel jPanelCounselData;
    private javax.swing.JPanel jPanelCounselDetail;
    private javax.swing.JPanel jPanelCounselList;
    private javax.swing.JPanel jPanelCounselSubDetail;
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JPanel jPanelTableSummary;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JTable jTableCounselData;
    private com.hosv3.gui.component.BalloonTextArea jTextAreaCounselDetail;
    private javax.swing.JTextField jTextAreaCounselRemark;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck;
    // End of variables declaration//GEN-END:variables
}
