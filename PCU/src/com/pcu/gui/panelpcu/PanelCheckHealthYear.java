/*
 
 * PanelCheckHealthYear.java
 
 *
 
 * Created on 13 มิถุนายน 2548, 11:30 น.
 
 */
/*
 
 * ตรวจสอบวันที่สำรวจแล้ว
 
 * kingland
 
 */
package com.pcu.gui.panelpcu;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import com.pcu.control.PCUControl;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.Vector;
import com.pcu.utility.*;
import com.pcu.object.Family;
import com.pcu.object.CheckHealthYear;
import com.hospital_os.utility.*;
import com.hospital_os.object.Visit;
import com.hospital_os.object.Employee;
import com.hospital_os.object.Patient;
import com.hospital_os.object.Dischar;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.HosManage;
import com.pcu.control.ExtraClinicServiceControl;
import com.hosv3.utility.connection.UpdateStatus;

/**
 *
 *
 *
 * @author  Noom
 *
 */
public class PanelCheckHealthYear extends javax.swing.JPanel {
    public static final  String WARNING ="Warning";
    private HosManage theHosManage;
    private PCUControl theHC;
    private ExtraClinicServiceControl theExtraClinicServiceControl;
    private DefaultTableCellRenderer rendererCenter;
    private AllComboBoxControl theAllComboBoxControl;
    private CheckHealthYear theCheckHealthYear = new CheckHealthYear();
    private Vector vCheckHealthYear;
    
    private Visit theVisit;
    private Employee theEmployee;
    private Patient thePatient;
    private Family theFamily;
    private PCUObject pcuobject ;
    JFrame theFrame;
    private boolean checksurvey;

    private UpdateStatus theUS;
    
    /** Creates new form PanelCheckHealthYear */
    public PanelCheckHealthYear()
    {
        initComponents();
    }
    
    public void setControl(HosManage hm,HosDialog hd,UpdateStatus us)
    {
        setLanguage();
        theHosManage = hm;
        
        theUS = us;
        theHC = hm.theHosControl;
        pcuobject = hm.thePO;
        theExtraClinicServiceControl = theHC.theExtraClinicServiceControl;
        theAllComboBoxControl = theHC.theAllComboBoxControl;
        initDatas();
        initBalloon();
        setEnabled(false);
    }
    private void initBalloon()
    {
        theHosManage.theHosControl.balloon.add(jTextAreaResult);
        jTextAreaResult.setControl(this.theHosManage.theHosInf.getVitalTemplate());
        jTextAreaResult.setJFrame(getJFrame());
    }
    public void initDatas()
    {
        theAllComboBoxControl.initFixDataToHashTable();
        ComboboxModel.initComboBox(this.jComboBoxCheckHealthYear,this.theAllComboBoxControl.listCheckHealthYearActivity());
    }
    /** ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI */
    public void setObject(PCUObject pcuobject)
    {
        Constant.println("_henbe_______________________" + this.getClass().toString());
        theFamily = pcuobject.getFamily();
        if(pcuobject != null)
        {
            if(pcuobject.getEmployee() != null)
            {
                theEmployee = pcuobject.getEmployee();
            }
            theVisit = null;
            if(pcuobject.getVisit() != null)
            {
                theVisit = pcuobject.getVisit();
            }
            thePatient = null;
            if(pcuobject.getPatient() != null)
            {
                thePatient = pcuobject.getPatient();
                setFromEnable(true);
            }
            this.listCheckHealthYear();
            theCheckHealthYear = new CheckHealthYear();
        }
        if(!checkPatientAndFamily())
        {
            setEnabled(false);
        }
        else if(checkDead())
        {
            setEnabled(false);
        }
        showCheckHealthYearDetail(null);
    }
    public void setObjectFamily(Family family)
    {
        Constant.println("_henbe other_______________________" + this.getClass().toString());
        theFamily = family;
        thePatient = null;
        theVisit =null;
        if(theFamily!=null)
        {
            setFromEnable(true);
        }
        listCheckHealthYear();
        theCheckHealthYear = new CheckHealthYear();
    }
    
    /** This method is called from within the constructor to
     *
     * initialize the form.
     *
     * WARNING: Do NOT modify this code. The content of this method is
     *
     * always regenerated by the Form Editor.
     *
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelCheckHealthYearList = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableCheckHealthYearData = new javax.swing.JTable();
        jPanelCheckHealthYearDetail = new javax.swing.JPanel();
        jPanelCheckHealthYearData = new javax.swing.JPanel();
        jPanelCheckHeatlh = new javax.swing.JPanel();
        jLabelActivityCheckHealthYear = new javax.swing.JLabel();
        jComboBoxCheckHealthYear = new javax.swing.JComboBox();
        jButtonRefresh = new javax.swing.JButton();
        dateComboBoxSurvey = new com.pcu.utility.DateComboBox();
        jLabelSurveyDate = new javax.swing.JCheckBox();
        jPanelResult = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaResult = new com.hosv3.gui.component.BalloonTextArea();
        jPanelRemark = new javax.swing.JPanel();
        jLabelRemark = new javax.swing.JLabel();
        jTextAreaRemark = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dateComboBoxCheck = new com.hospital_os.utility.DateComboBox();
        jLabel8 = new javax.swing.JLabel();
        timeTextFieldCheck = new com.hospital_os.utility.TimeTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabelVN = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonDel = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(700, 299));
        setPreferredSize(new java.awt.Dimension(700, 464));
        jPanelCheckHealthYearList.setLayout(new java.awt.GridBagLayout());

        jPanelCheckHealthYearList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CheckHealthYear_Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelCheckHealthYearList.setMinimumSize(new java.awt.Dimension(200, 85));
        jPanelCheckHealthYearList.setPreferredSize(new java.awt.Dimension(200, 464));
        jTableCheckHealthYearData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "VisitDate"
            }
        ));
        jTableCheckHealthYearData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableCheckHealthYearDataMouseReleased(evt);
            }
        });

        jScrollPaneTable.setViewportView(jTableCheckHealthYearData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelCheckHealthYearList.add(jScrollPaneTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jPanelCheckHealthYearList, gridBagConstraints);

        jPanelCheckHealthYearDetail.setLayout(new java.awt.GridBagLayout());

        jPanelCheckHealthYearDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CheckHealthYear_Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelCheckHealthYearDetail.setMinimumSize(new java.awt.Dimension(500, 299));
        jPanelCheckHealthYearDetail.setPreferredSize(new java.awt.Dimension(500, 299));
        jPanelCheckHealthYearData.setLayout(new java.awt.GridBagLayout());

        jPanelCheckHeatlh.setLayout(new java.awt.GridBagLayout());

        jLabelActivityCheckHealthYear.setText("ActivityCheckHealthYear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanelCheckHeatlh.add(jLabelActivityCheckHealthYear, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        jPanelCheckHeatlh.add(jComboBoxCheckHealthYear, gridBagConstraints);

        jButtonRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pcu/images/Refresh2.gif")));
        jButtonRefresh.setToolTipText("Refresh");
        jButtonRefresh.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonRefresh.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonRefresh.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanelCheckHeatlh.add(jButtonRefresh, gridBagConstraints);

        dateComboBoxSurvey.setEnabled(false);
        dateComboBoxSurvey.setText("");
        dateComboBoxSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSurveyActionPerformed(evt);
            }
        });
        dateComboBoxSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxSurveyFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelCheckHeatlh.add(dateComboBoxSurvey, gridBagConstraints);

        jLabelSurveyDate.setText("SurveyDate");
        jLabelSurveyDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabelSurveyDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jLabelSurveyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabelSurveyDateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelCheckHeatlh.add(jLabelSurveyDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelCheckHealthYearData.add(jPanelCheckHeatlh, gridBagConstraints);

        jPanelResult.setLayout(new java.awt.GridBagLayout());

        jPanelResult.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelResult.setMinimumSize(new java.awt.Dimension(44, 120));
        jPanelResult.setPreferredSize(new java.awt.Dimension(44, 120));
        jScrollPane7.setMaximumSize(new java.awt.Dimension(30, 150));
        jScrollPane7.setMinimumSize(new java.awt.Dimension(30, 150));
        jScrollPane7.setPreferredSize(new java.awt.Dimension(30, 100));
        jScrollPane7.setViewportView(jTextAreaResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelResult.add(jScrollPane7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelCheckHealthYearData.add(jPanelResult, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 11);
        jPanelCheckHealthYearDetail.add(jPanelCheckHealthYearData, gridBagConstraints);

        jPanelRemark.setLayout(new java.awt.GridBagLayout());

        jLabelRemark.setFont(defaultFont1);
        jLabelRemark.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanelRemark.add(jLabelRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 2);
        jPanelRemark.add(jTextAreaRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 11);
        jPanelCheckHealthYearDetail.add(jPanelRemark, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel7, gridBagConstraints);

        dateComboBoxCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(dateComboBoxCheck, gridBagConstraints);

        jLabel8.setText("\u0e19.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel16.add(jLabel8, gridBagConstraints);

        timeTextFieldCheck.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheckMouseClicked(evt);
            }
        });
        timeTextFieldCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(timeTextFieldCheck, gridBagConstraints);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif")));
        jLabel9.setToolTipText("\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e15\u0e23\u0e27\u0e08");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel9, gridBagConstraints);

        jLabelVN.setText("VN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(jLabelVN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelCheckHealthYearDetail.add(jPanel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelCheckHealthYearDetail, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jButtonDel, gridBagConstraints);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setOpaque(false);
        jButtonAdd.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jButtonAdd, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSave.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonSave.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonSave.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        add(jPanel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jLabelSurveyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabelSurveyDateActionPerformed
        this.dateComboBoxSurvey.setEnabled(jLabelSurveyDate.isSelected());
        if(!jLabelSurveyDate.isSelected())
            dateComboBoxSurvey.setText("");
    }//GEN-LAST:event_jLabelSurveyDateActionPerformed
    private void timeTextFieldCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheckMouseClicked
        timeTextFieldCheck.selectAll();
    }//GEN-LAST:event_timeTextFieldCheckMouseClicked
    private void timeTextFieldCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheckKeyReleased
    }//GEN-LAST:event_timeTextFieldCheckKeyReleased
    private void dateComboBoxCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheckKeyReleased
    }//GEN-LAST:event_dateComboBoxCheckKeyReleased
    
    private void dateComboBoxSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyFocusLost
        checksurvey = false;
        checkDateSurvey();
    }//GEN-LAST:event_dateComboBoxSurveyFocusLost
    
    private void dateComboBoxSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyActionPerformed
        checkDateSurvey();
        checksurvey = false;
    }//GEN-LAST:event_dateComboBoxSurveyActionPerformed
    
    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        initDatas();
    }//GEN-LAST:event_jButtonRefreshActionPerformed
    
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if(checkServiceCheckHealthYear())
        {
            theCheckHealthYear = new CheckHealthYear();
            clearGUICheckHealthYearDetail();
            setFromEnable(true);
            jTableCheckHealthYearData.clearSelection();
        }
        else
        {
            theCheckHealthYear = new CheckHealthYear();
            clearGUICheckHealthYearDetail();
            setFromEnable(true);
            jTableCheckHealthYearData.clearSelection();
        }
        setButtonDel(vCheckHealthYear);
    }//GEN-LAST:event_jButtonAddActionPerformed
    
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        
            deleteCheckHealthYear();
    }//GEN-LAST:event_jButtonDelActionPerformed
    
    private void jTableCheckHealthYearDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCheckHealthYearDataMouseReleased
        int row = jTableCheckHealthYearData.getSelectedRow();
        if(row != -1)
        {
            CheckHealthYear theCheckHealthYear = getDataFromObjectCheckHealthYear(row);
            if(theCheckHealthYear != null)
            {
                showCheckHealthYearDetail(getDataFromObjectCheckHealthYear(row));
                boolean status = this.theExtraClinicServiceControl.checkStatusVisit(theCheckHealthYear.visit_id);
                if(status)
                    
                {
                    setFromEnable(true);
                    
                }
                else
                    
                {
                    if(theVisit != null)
                        
                    {
                        jButtonAdd.setEnabled(true);
                        
                    }
                    
                }
            }
        }
    }//GEN-LAST:event_jTableCheckHealthYearDataMouseReleased
    
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(jTextAreaResult.getText().trim().equals("")){
             theUS.setStatus(GutilPCU.getTextBundle("EmptyResult"),UpdateStatus.WARNING);
            return ;
        }
        if (pcuobject.getFamily() == null){
            theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",UpdateStatus.WARNING);
            return ;
        }

        if(!checkCheckHealthYearServiceType()){
            if(!checkUpdateValue()){
                theUS.setStatus(GutilPCU.getTextBundle("CheckHealthYearWarning"),UpdateStatus.WARNING);
                return;
            }
        }
        if(!getHealthYear())
            return;
        int ret = theExtraClinicServiceControl.saveCheckHealthYear(this.theCheckHealthYear);
        if(ret==0)
            return; 
        
        int selectRow = -1;
        listCheckHealthYear();
        for(int i=0;i<this.vCheckHealthYear.size();i++){
            CheckHealthYear pp = (CheckHealthYear)vCheckHealthYear.get(i);
            if(pp.getObjectId().equals(theCheckHealthYear.getObjectId())){
                this.jTableCheckHealthYearData.setRowSelectionInterval(i,i);
                return ;
            }
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed
    
    
    
    private boolean checkUpdateValue(){
        boolean isUpdate = false;
        int row = jTableCheckHealthYearData.getSelectedRow();
        if(row != -1) {
            CheckHealthYear checkHealthYear = getDataFromObjectCheckHealthYear(row);
            if(checkHealthYear != null){
                if(checkHealthYear.b_health_check_health_year_activity_id.equals(ComboboxModel.getCodeComboBox(jComboBoxCheckHealthYear))){
                    
                    isUpdate = true;
                    
                }
            }
        }
        return isUpdate;
    }
    /**
     *
     *ตรวจสอบว่ามีตรวจซ้ำกันหรือไม่
     *
     *@param -
     *
     *@return true = ไม่ซ้ำกัน false = ซ้ำกัน
     *
     *@author kingland
     *
     *@date 29/08/2549
     *
     */
    private boolean checkCheckHealthYearServiceType()
    {
        boolean result = true;
        if(this.vCheckHealthYear != null && this.theVisit != null)
        {
            CheckHealthYear checkHealthYear = null;
            Vector vCheckHealthYearAll =  this.theExtraClinicServiceControl.listCheckHealthYearByVisitID(theVisit.getObjectId());
            if(vCheckHealthYearAll != null)
            {
                for(int i = vCheckHealthYearAll.size()-1 ; i >=0  ; i--)
                    
                {
                    checkHealthYear = (CheckHealthYear)vCheckHealthYearAll.get(i);
                    
                    if(checkHealthYear.b_health_check_health_year_activity_id.equalsIgnoreCase(ComboboxModel.getCodeComboBox(jComboBoxCheckHealthYear)))
                        
                    {
                        result =  false;
                        
                        break;
                        
                    }
                    
                    checkHealthYear = null;
                    
                }
            }
        }
        return result;
    }
    public void setEnabled(boolean flag)
    {
        setFromEnable(flag);
    }
    private void setFromEnable(boolean flag)
    {
        jTextAreaResult.setEnabled(flag);
        jTextAreaRemark.setEnabled(flag);
        jButtonSave.setEnabled(flag);
        jButtonDel.setEnabled(flag);
        jButtonAdd.setEnabled(flag);
        jComboBoxCheckHealthYear.setEnabled(flag);
        jButtonRefresh.setEnabled(flag);
        jTableCheckHealthYearData.setEnabled(flag);
    }
    
    private void setButtonBeforeAddValue()
    {
//        jTextAreaResult.setEnabled(false);
//        jTextAreaRemark.setEnabled(false);
//        jButtonSave.setEnabled(false);
//        jButtonDel.setEnabled(false);
//        jComboBoxCheckHealthYear.setEnabled(false);
        jButtonAdd.setEnabled(true);
    }
    
    private boolean checkServiceCheckHealthYear()
    {
        boolean result = true;
//        if(this.vCheckHealthYear != null && this.theVisit != null)
//        {
//            CheckHealthYear checkHealthYear = null;
//            for(int i = this.vCheckHealthYear.size()-1 ; i >=0  ; i--)
//            {
//                checkHealthYear = (CheckHealthYear)this.vCheckHealthYear.get(i);
//                if(checkHealthYear.visit_id.equalsIgnoreCase(this.theVisit.getObjectId()))
//
//                {
//                    result =  false;
//
//                    break;
//
//                }
//                checkHealthYear = null;
//            }
//        }
        return result;
    }
    
    public void setJFrame(JFrame frame)
    {
        theFrame = frame;
        initBalloon();
    }
    
    public JFrame getJFrame()
    {
        return theFrame;
    }
    public void setLanguage()
    {   /*jButton*/
        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));
        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));
        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));

        GutilPCU.setLanguage(jLabel7);
        GutilPCU.setLanguage(jLabel8);
        jLabelActivityCheckHealthYear.setText(GutilPCU.getTextBundle(jLabelActivityCheckHealthYear.getText()));
        jLabelRemark.setText(GutilPCU.getTextBundle(jLabelRemark.getText()));
        jLabelSurveyDate.setText(GutilPCU.getTextBundle(jLabelSurveyDate.getText()));
        
        /*TitledBorder*/
        GutilPCU.JPanelLabler(jPanelCheckHealthYearList);
        GutilPCU.JPanelLabler(jPanelCheckHealthYearDetail);
        GutilPCU.JPanelLabler(jPanelRemark);
        GutilPCU.JPanelLabler(jPanelResult);
        //GutilPCU.JPanelLabler(jPanelEKG);
        
    }
    
    /*นำข้อมูลจาก GUI มา set ค่าให้ CheckHealthYear Object*/
    private boolean getHealthYear()
    {
        boolean result = true;
        if(theCheckHealthYear == null)
            theCheckHealthYear = new CheckHealthYear();

        this.theCheckHealthYear.b_health_check_health_year_activity_id = ComboboxModel.getCodeComboBox(jComboBoxCheckHealthYear);
        this.theCheckHealthYear.check_health_year_result = Gutil.CheckReservedWords(this.jTextAreaResult.getText());
        this.theCheckHealthYear.check_health_year_remark = Gutil.CheckReservedWords(this.jTextAreaRemark.getText());
        this.theCheckHealthYear.check_health_year_active = "1";
        ////////////////////////////////
        //ไม่มี Visit
        ////////////////////////////////
        if(pcuobject.getVisit() == null)
        {
            if(theCheckHealthYear.getObjectId() == null || "".equals(theCheckHealthYear.getObjectId()))
            {
                String survey_date = dateComboBoxSurvey.getText();
                if(survey_date == null || survey_date.equals(""))
                {
                    theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveSurVeyDate"), UpdateStatus.WARNING);//กรุณาใส่วันที่สำรวจ
                    dateComboBoxSurvey.requestFocus();
                    return false;
                }
                else if(survey_date.length() != 10 )
                {
                    theUS.setStatus(GutilPCU.getTextBundle("WarningNotHaveSurVeyDate"), UpdateStatus.WARNING);//กรุณาใส่วันที่สำรวจ
                    dateComboBoxSurvey.requestFocus();
                    return false;
                    
                }
            }
        }
        if(theCheckHealthYear.getObjectId() == null){
            if(this.thePatient != null)
            {
                this.theCheckHealthYear.patient_id = thePatient.getObjectId();
                this.theCheckHealthYear.family_id = thePatient.family_id;
            }
            else if(theFamily!=null)
            {
                this.theCheckHealthYear.family_id = theFamily.getObjectId();
            }
            if(pcuobject.getVisit()!=null){
                this.theCheckHealthYear.visit_id = pcuobject.getVisit().getObjectId();
            }
            this.theCheckHealthYear.check_health_year_staff_record = theEmployee.getObjectId();
            this.theCheckHealthYear.check_health_year_record_time = Gutil.getTextCurrentDateTime(this.theAllComboBoxControl.theConnectionInf);
        }
        theCheckHealthYear.survey_date = dateComboBoxSurvey.getText();
        theCheckHealthYear.check_health_year_staff_modify = theEmployee.getObjectId();
        theCheckHealthYear.check_health_year_modify_time = dateComboBoxCheck.getText()+","+timeTextFieldCheck.getText();
        return result;
    }
    
    /*สำหรับ clear หน้าจอเมื่อผู้ใช้ทำการกดปุ่ม + หรือ -*/
    public void clearGUICheckHealthYearDetail()
    {
        jTextAreaResult.setText("");
        jTextAreaRemark.setText("");
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(""));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
    }
    
    /*นำค่าจาก CheckHealthYear Object มาแสดงผล*/
    public void showCheckHealthYearDetail(CheckHealthYear theCheckHealthYear)
    {
        if(theCheckHealthYear == null)
            theCheckHealthYear = new CheckHealthYear();

        ComboboxModel.setCodeComboBox(this.jComboBoxCheckHealthYear,theCheckHealthYear.b_health_check_health_year_activity_id);
        jTextAreaResult.setText(theCheckHealthYear.check_health_year_result);
        jTextAreaRemark.setText(theCheckHealthYear.check_health_year_remark);
        this.dateComboBoxCheck.setText(com.hosv3.utility.DateUtil.convertFieldDate(theCheckHealthYear.check_health_year_modify_time));
        if(theCheckHealthYear.check_health_year_modify_time.length()<11){
            this.timeTextFieldCheck.setText("");
        }else{
            this.timeTextFieldCheck.setText(theCheckHealthYear.check_health_year_modify_time.substring(11));
        }
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(theCheckHealthYear.survey_date));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
            
        this.jLabelVN.setText("");
        if(!theCheckHealthYear.visit_id.equals("")){
            String vn_id = this.theAllComboBoxControl.readVNbyVid(theCheckHealthYear.visit_id);
            this.jLabelVN.setText("VN:"+vn_id);
        }
    }
    
    /**
     *
     * ลบข้อมูลการตรวจสุขภาพประจำปี (เปลี่ยนสถานะของ active)
     *
     * @param -
     *
     * @return -
     *
     * @author kingland
     *
     * @date 03/06/2549
     *
     */
    public void deleteCheckHealthYear()
    {
        int row = this.jTableCheckHealthYearData.getSelectedRow();
        if(row == -1) {
            theUS.setStatus(GutilPCU.getTextBundle("WarningNotSelect"), UpdateStatus.WARNING);//กรุณาเลือกรายการโรคเรื้อรังที่ต้องการลบ
            return;
        }
        
        theCheckHealthYear = (CheckHealthYear)vCheckHealthYear.get(row);
        this.theCheckHealthYear.check_health_year_result = Gutil.CheckReservedWords(this.jTextAreaResult.getText());
        this.theCheckHealthYear.check_health_year_remark = Gutil.CheckReservedWords(this.jTextAreaRemark.getText());
        int ret=theExtraClinicServiceControl.deleteCheckHealthYear(theCheckHealthYear);
        
        if(ret==0)
            return;
        
        listCheckHealthYear();
        clearGUICheckHealthYearDetail();
    }
    
    /**
     *
     *ตรวจสอบเพศของผู้รับบริการ
     *
     *@param -
     *
     *@return boolean true=ผ่าน false=ไม่ผ่าน
     *
     *@author kingland
     *
     *@date 04/09/2549
     *
     */
    private boolean checkSex(boolean showWarningMessage)
    {
        boolean result = true;
        //add code by noom สำหรับ check เพศ หญิงเท่านั้น
        if(thePatient != null && !("2").equals(thePatient.f_sex_id))
        {
            if(showWarningMessage)
            {
                 theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        //สำหรับ check เพศ หญิงเท่านั้น
        else if(theFamily!=null && !("2").equals(theFamily.f_sex_id))
        {
            if(showWarningMessage)
            { 
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        return result;
    }
    /**
     *
     *ตรวจสอบ Patient และ Family จาก PCUobject
     *
     *@param -
     *
     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร
     *
     *@author kingland
     *
     *@date 04/09/2549
     *
     */
    private boolean checkPatientAndFamily()
    {
        boolean result = true;
        if(theFamily == null) result = false;
        return result;
    }
    /**
     *
     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่
     *
     *@param -
     *
     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต
     *
     *@author kingland
     *
     *@date 04/09/2549
     *
     */
    private boolean checkDead()
    {
        boolean result = false;
        if(theFamily != null && Dischar.DEATH.equals(theFamily.discharge_status_id))
        {
            result = true;
        }
        else if(thePatient != null && Dischar.DEATH.equals(thePatient.discharge_status_id))
        {
            result = true;
        }
        return false;//result;
    }
    /**
     *
     *ตรวจสอบข้อมูลก่อนทำการแก้ไข
     *
     *@param -
     *
     *@return true = แก้ไขได้ false = ไม่สามารถแก้ไขได้
     *
     *@author kingland
     *
     *@date 29/08/2549
     *
     */
    /**
     *
     *@deprecated kingland
     *
     */
    private CheckHealthYear getDataFromObjectCheckHealthYear(int row)
    {
        theCheckHealthYear = (CheckHealthYear)vCheckHealthYear.get(row);
        return theCheckHealthYear;
    }
    
    
    /**
     *
     * Update ข้อมูลการตรวจสุขภาพประจำปีใน Table ใหม่
     *
     * @param -
     *
     * @return -
     *
     * @author kingland
     *
     * @date 03/06/2549
     *
     */
    public void listCheckHealthYear()
    {
        vCheckHealthYear = null;
        if(theCheckHealthYear != null)
        {
            if(thePatient != null&&!thePatient.family_id.equals(""))
            {
                vCheckHealthYear = this.theExtraClinicServiceControl.listCheckHealthYearByFamilyID();
                setButtonBeforeAddValue();
                setFromEnable(true);
                jButtonAdd.setEnabled(true);
            }
            if(vCheckHealthYear==null)
            {
                vCheckHealthYear = new Vector();
                if(theFamily != null)
                    
                {
                    vCheckHealthYear = this.theExtraClinicServiceControl.listCheckHealthYearByFamilyID();
                    
                    setFromEnable(true);
                    
                    jButtonAdd.setEnabled(true);
                    
                }
                clearGUICheckHealthYearDetail();
            }
        }
        setButtonDel(vCheckHealthYear);
        setTableListVisit(vCheckHealthYear);
    }
    /**
     *
     * ใช้ในการเซตปุ่มลบ ว่าสามารถทงานได้หรือไม่ โดยถ้ามีข้อมูลที่จะลบปุ่มก็สามารถทำงานได้
     *
     * @param Vector ของข้อมูลที่จะลบ
     *
     * @return void
     *
     * @author kingland
     *
     * @date 03/06/2549
     *
     */
    private void setButtonDel(Vector vCheckHealth)
    {
        if(vCheckHealth == null || vCheckHealth.size() == 0)
        {
//           jButtonDel.setEnabled(false);
        }
        else
        {
            jButtonDel.setEnabled(true);
        }
    }
    /*นำข้อมูลจาก CheckHealthYear Object มาแสดงผลในตาราง*/
    private void setTableListVisit(Vector vc) {
        String[] col = { GutilPCU.getTextBundle("No."),GutilPCU.getTextBundle("DateRecord"),GutilPCU.getTextBundle("Check")};
        TableModel tm ;
        if(vc != null) {
            tm= new TableModel(col,vc.size());
            CheckHealthYear checkHealthYear = new CheckHealthYear();
            for(int i=0 ;i<vc.size(); i++) {
                checkHealthYear = (CheckHealthYear)vc.get(i);
                tm.setValueAt(String.valueOf((i+1)),i,0);
                tm.setValueAt(GutilPCU.changDateToString(checkHealthYear.check_health_year_modify_time,false),i,1);
                tm.setValueAt(this.theAllComboBoxControl.getValueOfCheckHealthYearActivity(checkHealthYear.b_health_check_health_year_activity_id),i,2);
            }
        } else {
            tm= new TableModel(col,0);
            //ไม่มีข้อมูลการได้รับบริการของผู้ป่วยคนนี้ กำหนดให้ผู้ป่วยสามารถบันทึกได้ทันที
            promptSave();
        }
        
        jTableCheckHealthYearData.setModel(tm);
        setDefaultTableListVisit();
    }
    
    private void promptSave(){
        if(theVisit != null && theVisit.getObjectId() != null){
            theCheckHealthYear = new CheckHealthYear();
            clearGUICheckHealthYearDetail();
            setFromEnable(true);
//            jButtonDel.setEnabled(false);
//            jButtonAdd.setEnabled(false);
        }
    }
    
    /*กำหนดรูปแบบของตารางที่ต้องการแสดงผล*/
    private void setDefaultTableListVisit() {
        if(rendererCenter == null){
            rendererCenter = new DefaultTableCellRenderer();
        }
        //กำหนดให้จัด Column ให้อยู่ตรงกลาง
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        jTableCheckHealthYearData.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);
        jTableCheckHealthYearData.getColumnModel().getColumn(1).setCellRenderer(rendererCenter);
        //กำหนดความกว้างของตาราง
        jTableCheckHealthYearData.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTableCheckHealthYearData.getColumnModel().getColumn(1).setPreferredWidth(150);
    }
    
    public void setVisit(Visit theVisit){
        this.theVisit = theVisit;
        
    }
    
    public void setEmployee(Employee theEmployee){
        this.theEmployee = theEmployee;
    }
    
    public void setPatient(Patient thePatient){
        this.thePatient = thePatient;
    }
    
    
    /**
     *
     * เช็ควันที่สำรวจว่าเป็นวันในอนาคตหรือไม่
     *
     * @jao
     *
     */
    private void checkDateSurvey()
    {
        if(!dateComboBoxSurvey.getText().equals("")
        && dateComboBoxSurvey.getText().length()==10
                && com.pcu.utility.DateUtil.countDay(dateComboBoxSurvey.getText(),this.theHosManage.theHosControl.theConnectionInf) == -1
                && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxSurvey.getText()),this.theHosManage.theHosControl.theConnectionInf)==false)
        {
            if(checksurvey == false)
            {
                // ไม่สามารถกรอกวันที่เป็นวันในอนาคตได้
                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") , UpdateStatus.WARNING);
                checksurvey = true;
            }
        }
    }
    /**
     *
     *เซตสถานะ
     *
     *@param message = ข้อความ status = สถานะ
     *
     *@return void
     *
     *@author kingland
     *
     *@date 29/08/2549
     *
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck;
    private com.pcu.utility.DateComboBox dateComboBoxSurvey;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxCheckHealthYear;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelActivityCheckHealthYear;
    private javax.swing.JLabel jLabelRemark;
    private javax.swing.JCheckBox jLabelSurveyDate;
    private javax.swing.JLabel jLabelVN;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanelCheckHealthYearData;
    private javax.swing.JPanel jPanelCheckHealthYearDetail;
    private javax.swing.JPanel jPanelCheckHealthYearList;
    private javax.swing.JPanel jPanelCheckHeatlh;
    private javax.swing.JPanel jPanelRemark;
    private javax.swing.JPanel jPanelResult;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JTable jTableCheckHealthYearData;
    private javax.swing.JTextField jTextAreaRemark;
    private com.hosv3.gui.component.BalloonTextArea jTextAreaResult;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck;
    // End of variables declaration//GEN-END:variables
    
}
