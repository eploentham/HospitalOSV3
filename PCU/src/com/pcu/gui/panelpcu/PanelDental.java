/*

 * PanelVisitHome.java

 *

 * Created on 13 มิถุนายน 2548, 11:30 น.

 */

/*

 * ตรวจสอบวันที่สำรวจแล้ว

 * kingland

 */

package com.pcu.gui.panelpcu;
import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.Vector;
import com.pcu.utility.*;
import com.pcu.object.Dental;
import com.pcu.object.Family;
import com.hosv3.utility.connection.UpdateStatus;
import com.hospital_os.utility.*;
import com.hospital_os.object.Visit;
import com.hospital_os.object.Employee;
import com.hospital_os.object.Patient;
import com.hospital_os.object.Dischar;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.HosManage;
import com.pcu.control.ExtraClinicServiceControl;
/**

 *

 * @author  Noom

 */

public class PanelDental extends javax.swing.JPanel {

    public static final  String WARNING = "Warning";

    private static HosManage theHosManage;

    private ExtraClinicServiceControl theExtraClinicServiceControl;

    private DefaultTableCellRenderer rendererCenter;

    private AllComboBoxControl theAllComboBoxControl;

    private Dental theDental = new Dental();

    private Vector vDental;

    

    private Visit theVisit;

    private Employee theEmployee;

    private Patient thePatient;

    private Family theFamily;

    private PCUObject pcuobject;

    JFrame theFrame;

    private boolean checksurvey;


    private UpdateStatus theUS;
    

    /** Creates new form PanelDental */

    public PanelDental() {

        initComponents();

    }

    

    public void setControl(HosManage hm,HosDialog hd,UpdateStatus us) {
        

        theHosManage = hm;        

        pcuobject = hm.thePO;   

        theUS = us;
        theExtraClinicServiceControl = theHosManage.theHosControl.theExtraClinicServiceControl;

        theAllComboBoxControl = theHosManage.theHosControl.theAllComboBoxControl;

        initDatas();

        setLanguage();

        initBalloon();

        panelYesNoRadioButton.setTextYesNo(GutilPCU.setLanguage("จำเป็น")
                ,GutilPCU.setLanguage("ไม่จำเป็น"));

        panelYesNoRadioButton.setSelected("0");

        setEnabled(false);

    }

    private void initBalloon()

    {   theHosManage.theHosControl.balloon.add(jTextAreaDentalDetail);

        jTextAreaDentalDetail.setControl(theHosManage.theHosInf.getVitalTemplate());

        jTextAreaDentalDetail.setJFrame(getJFrame());        

    }

    public void initDatas() 

    {   ComboboxModel.initComboBox(jComboBoxGumLevel,theAllComboBoxControl.listGumLevel());

    }

    /** ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI */

    public void setObject(PCUObject pcuobject) 

    {   System.out.println("_henbe_______________________" + this.getClass().toString());

        this.pcuobject = pcuobject;        

        theFamily = pcuobject.getFamily();        

        if(pcuobject != null) 

        {   if(pcuobject.getEmployee() != null) 

            {   theEmployee = pcuobject.getEmployee();

            }

            theVisit = null;

            if(pcuobject.getVisit() != null) 

            {   theVisit = pcuobject.getVisit();

            }

            thePatient = null;

            if(pcuobject.getPatient() != null) 

            {   thePatient = pcuobject.getPatient();

            }

            listDental();

            theDental = new Dental();
        }

        if(!checkPatientAndFamily())

        {   setEnabled(false);

        }

        else if(checkDead())

        {   setEnabled(false);

        }

    }

    

    public void setObjectFamily (Family family)

    {   System.out.println("_henbe other_______________________" + this.getClass().toString());

        theFamily = null;

        theVisit = null;

        thePatient = null;

        if(pcuobject.getFamily()!=null)

        {   theFamily = pcuobject.getFamily();          

            setFromEnable(true);

        }

        listDental();

        theDental = new Dental();
    }

    

    /** This method is called from within the constructor to

     * initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is

     * always regenerated by the Form Editor.

     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelDentalList = new javax.swing.JPanel();
        jPanelTableSummary = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableDentalData = new javax.swing.JTable();
        jPanelDentalDetail = new javax.swing.JPanel();
        jPanelDentalData = new javax.swing.JPanel();
        jPanelDetail = new javax.swing.JPanel();
        jLabelBadMilkTooth = new javax.swing.JLabel();
        jLabelMilkTooth = new javax.swing.JLabel();
        jLabelRealTooth = new javax.swing.JLabel();
        jLabelBadRealTooth = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jComboBoxGumLevel = new javax.swing.JComboBox();
        integerTextFieldBadMilkTooth = new com.pcu.utility.IntegerTextField();
        integerTextFieldRealTooth = new com.pcu.utility.IntegerTextField();
        integerTextFieldMilkTooth = new com.pcu.utility.IntegerTextField();
        integerTextFieldBadRealTooth = new com.pcu.utility.IntegerTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabelFalseTeeth = new javax.swing.JLabel();
        panelYesNoRadioButton = new com.pcu.gui.utility.component.PanelYesNoRadioButton();
        dateComboBoxSurvey = new com.pcu.utility.DateComboBox();
        jLabelGumLevel = new javax.swing.JLabel();
        jLabelSurveyDate = new javax.swing.JCheckBox();
        jPanelDentalSubDetail = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaDentalDetail = new com.hosv3.gui.component.BalloonTextArea();
        jPanelTest = new javax.swing.JPanel();
        jLabelRemark = new javax.swing.JLabel();
        jTextAreaDentalRemark = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        dateComboBoxCheck = new com.hospital_os.utility.DateComboBox();
        jLabel6 = new javax.swing.JLabel();
        timeTextFieldCheck = new com.hospital_os.utility.TimeTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabelVN = new javax.swing.JLabel();
        jPanelCounselControl = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(700, 299));
        setPreferredSize(new java.awt.Dimension(700, 464));
        jPanelDentalList.setLayout(new java.awt.GridBagLayout());

        jPanelDentalList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dental_Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelDentalList.setMinimumSize(new java.awt.Dimension(250, 85));
        jPanelDentalList.setPreferredSize(new java.awt.Dimension(250, 464));
        jPanelTableSummary.setLayout(new java.awt.GridBagLayout());

        jTableDentalData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "VisitDate"
            }
        ));
        jTableDentalData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDentalDataMouseReleased(evt);
            }
        });

        jScrollPaneTable.setViewportView(jTableDentalData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTableSummary.add(jScrollPaneTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelDentalList.add(jPanelTableSummary, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jPanelDentalList, gridBagConstraints);

        jPanelDentalDetail.setLayout(new java.awt.GridBagLayout());

        jPanelDentalDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dental_Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelDentalDetail.setMinimumSize(new java.awt.Dimension(500, 299));
        jPanelDentalDetail.setPreferredSize(new java.awt.Dimension(500, 299));
        jPanelDentalData.setLayout(new java.awt.GridBagLayout());

        jPanelDetail.setLayout(new java.awt.GridBagLayout());

        jLabelBadMilkTooth.setText("BadMilkTooth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        jPanelDetail.add(jLabelBadMilkTooth, gridBagConstraints);

        jLabelMilkTooth.setText("MilkTooth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanelDetail.add(jLabelMilkTooth, gridBagConstraints);

        jLabelRealTooth.setText("RealTooth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelDetail.add(jLabelRealTooth, gridBagConstraints);

        jLabelBadRealTooth.setText("BadRealTooth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelDetail.add(jLabelBadRealTooth, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jComboBoxGumLevel.setEnabled(false);
        jComboBoxGumLevel.setMinimumSize(new java.awt.Dimension(150, 20));
        jComboBoxGumLevel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jComboBoxGumLevel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        jPanelDetail.add(jPanel1, gridBagConstraints);

        integerTextFieldBadMilkTooth.setColumns(2);
        integerTextFieldBadMilkTooth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        jPanelDetail.add(integerTextFieldBadMilkTooth, gridBagConstraints);

        integerTextFieldRealTooth.setColumns(2);
        integerTextFieldRealTooth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelDetail.add(integerTextFieldRealTooth, gridBagConstraints);

        integerTextFieldMilkTooth.setColumns(2);
        integerTextFieldMilkTooth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 11, 0, 0);
        jPanelDetail.add(integerTextFieldMilkTooth, gridBagConstraints);

        integerTextFieldBadRealTooth.setColumns(2);
        integerTextFieldBadRealTooth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 0);
        jPanelDetail.add(integerTextFieldBadRealTooth, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabelFalseTeeth.setText("FalseTeeth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabelFalseTeeth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        jPanel2.add(panelYesNoRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelDetail.add(jPanel2, gridBagConstraints);

        dateComboBoxSurvey.setEnabled(false);
        dateComboBoxSurvey.setText("");
        dateComboBoxSurvey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxSurveyActionPerformed(evt);
            }
        });
        dateComboBoxSurvey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateComboBoxSurveyFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        jPanelDetail.add(dateComboBoxSurvey, gridBagConstraints);

        jLabelGumLevel.setText("GumLevel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanelDetail.add(jLabelGumLevel, gridBagConstraints);

        jLabelSurveyDate.setSelected(true);
        jLabelSurveyDate.setText("SurveyDate");
        jLabelSurveyDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabelSurveyDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jLabelSurveyDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLabelSurveyDateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDetail.add(jLabelSurveyDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelDentalData.add(jPanelDetail, gridBagConstraints);

        jPanelDentalSubDetail.setLayout(new java.awt.GridBagLayout());

        jPanelDentalSubDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DentailSubDetail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, defaultFont1));
        jPanelDentalSubDetail.setPreferredSize(new java.awt.Dimension(44, 183));
        jScrollPane4.setMaximumSize(new java.awt.Dimension(30, 150));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(30, 150));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(30, 100));
        jScrollPane4.setViewportView(jTextAreaDentalDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelDentalSubDetail.add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        jPanelDentalData.add(jPanelDentalSubDetail, gridBagConstraints);

        jPanelTest.setLayout(new java.awt.GridBagLayout());

        jLabelRemark.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelTest.add(jLabelRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelTest.add(jTextAreaDentalRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        jPanelDentalData.add(jPanelTest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        jPanelDentalDetail.add(jPanelDentalData, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel5, gridBagConstraints);

        dateComboBoxCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheckKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(dateComboBoxCheck, gridBagConstraints);

        jLabel6.setText("\u0e19.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel16.add(jLabel6, gridBagConstraints);

        timeTextFieldCheck.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheckKeyReleased(evt);
            }
        });
        timeTextFieldCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheckMouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(timeTextFieldCheck, gridBagConstraints);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif")));
        jLabel9.setToolTipText("\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e15\u0e23\u0e27\u0e08");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel9, gridBagConstraints);

        jLabelVN.setText("VN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(jLabelVN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 0, 11);
        jPanelDentalDetail.add(jPanel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanelDentalDetail, gridBagConstraints);

        jPanelCounselControl.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonSave.setMaximumSize(new java.awt.Dimension(67, 25));
        jButtonSave.setMinimumSize(new java.awt.Dimension(67, 25));
        jButtonSave.setPreferredSize(new java.awt.Dimension(67, 25));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        jPanelCounselControl.add(jButtonSave, gridBagConstraints);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelCounselControl.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDel.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDel.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelCounselControl.add(jButtonDel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 5, 11);
        add(jPanelCounselControl, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jLabelSurveyDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLabelSurveyDateActionPerformed
        this.dateComboBoxSurvey.setEnabled(jLabelSurveyDate.isSelected());
        if(!jLabelSurveyDate.isSelected())
            dateComboBoxSurvey.setText("");
    }//GEN-LAST:event_jLabelSurveyDateActionPerformed



    private void timeTextFieldCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheckMouseClicked
        timeTextFieldCheck.selectAll();
    }//GEN-LAST:event_timeTextFieldCheckMouseClicked

    private void timeTextFieldCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheckKeyReleased
        
    }//GEN-LAST:event_timeTextFieldCheckKeyReleased

    private void dateComboBoxCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheckKeyReleased
        
    }//GEN-LAST:event_dateComboBoxCheckKeyReleased

    private void dateComboBoxSurveyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyActionPerformed

// TODO add your handling code here:

        checkDateSurvey();

        checksurvey = false;

    }//GEN-LAST:event_dateComboBoxSurveyActionPerformed



    private void dateComboBoxSurveyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateComboBoxSurveyFocusLost

// TODO add your handling code here:

        checksurvey = false;

        checkDateSurvey();

    }//GEN-LAST:event_dateComboBoxSurveyFocusLost

    

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed

  
            if(checkServiceDental()){

                theDental = new Dental();

                clearGUIDentalDetail();

                setFromEnable(true);

                jTableDentalData.clearSelection();

            }
            else{

                theUS.setStatus(GutilPCU.getTextBundle("VisitAlready"),UpdateStatus.WARNING);
            }

            setButtonDel(vDental);
        //}

    }//GEN-LAST:event_jButtonAddActionPerformed

    

    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed

        deleteDental();
    }//GEN-LAST:event_jButtonDelActionPerformed

    

    private void jTableDentalDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDentalDataMouseReleased

         int row = jTableDentalData.getSelectedRow();

        if(row != -1) {

            Dental theDental = getDataFromObjectDental(row);

            if(theDental != null){

                showDentalDetail(getDataFromObjectDental(row));

                boolean status = theExtraClinicServiceControl.checkStatusVisit(theDental.visit_id);
                if(status) {

                    setFromEnable(true);

                }else{

//                    setFromEnable(false);

                     if(theVisit != null){

                        jButtonAdd.setEnabled(true);

                    }else{

//                        jButtonAdd.setEnabled(false);

                    }

                }

            }

        }

    }//GEN-LAST:event_jTableDentalDataMouseReleased

    

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveDental();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    

    

    

    

    private boolean checkNumOfTooth()

    {   String numMilkTooth = integerTextFieldMilkTooth.getText();

        String numBadMilkTooth = integerTextFieldBadMilkTooth.getText();

        String numRealTooth = integerTextFieldRealTooth.getText();

        String numBadRealTooth = integerTextFieldBadRealTooth.getText();

        String detail = jTextAreaDentalDetail.getText();

        String errorMsg = "";

        String newLine = "\r\n";

        boolean isCheckNumPass = false;

        try

        {   if((!numMilkTooth.equals("") && Integer.parseInt(numMilkTooth) > 20) || (!numBadMilkTooth.equals("") && Integer.parseInt(numBadMilkTooth) > 20)){

                errorMsg =  GutilPCU.getTextBundle("WarningCheckMilkTooth")+"\r\n";

            }

            if((!numRealTooth.equals("") && Integer.parseInt(numRealTooth) > 32) || (!numBadRealTooth.equals("") && Integer.parseInt(numBadRealTooth) > 32)){

                errorMsg +=  GutilPCU.getTextBundle("WarningCheckRealTooth")+"\r\n";

            }

            //new code for test num of tooth

            if(!numRealTooth.equals("") && !numBadRealTooth.equals("")){

                if(Integer.parseInt(numBadRealTooth) > Integer.parseInt(numRealTooth)){

                    errorMsg +=  GutilPCU.getTextBundle("WarningCheckNumRealTooth")+"\r\n";

                }

            }

            if(!numMilkTooth.equals("") && !numBadMilkTooth.equals("")){

                if(Integer.parseInt(numBadMilkTooth) > Integer.parseInt(numMilkTooth)){

                    errorMsg +=  GutilPCU.getTextBundle("WarningCheckNumMilkTooth")+"\r\n";

                }

            }

            if(!numRealTooth.equals("") && !numMilkTooth.equals("")){

                if(Integer.parseInt(numRealTooth)+Integer.parseInt(numMilkTooth) > 32){

                    errorMsg +=  GutilPCU.getTextBundle("WarningCheckSumTooth")+newLine;

                }

            }

            if(!numBadMilkTooth.equals("") && !numBadRealTooth.equals("")){

                if(Integer.parseInt(numBadMilkTooth)+Integer.parseInt(numBadRealTooth) > 32){

                    errorMsg +=  GutilPCU.getTextBundle("WarningCheckBadSumTooth")+newLine;

                }

            }

            if(("").equals(errorMsg))

            {   return true;

            }

            else

            {    
                theUS.setStatus(errorMsg,UpdateStatus.WARNING);
                return false;

            }

        }

        catch(NumberFormatException e)

        {   e.printStackTrace();

            return false;

        }

    }

    public void setEnabled(boolean flag)

    {

        setFromEnable(flag);

    }

    private void setFromEnable(boolean flag)

    {   integerTextFieldRealTooth.setEnabled(flag);

        integerTextFieldBadRealTooth.setEnabled(flag);

        integerTextFieldMilkTooth.setEnabled(flag);

        integerTextFieldBadMilkTooth.setEnabled(flag);

        jComboBoxGumLevel.setEnabled(flag);

        jTextAreaDentalDetail.setEnabled(flag);

        jTextAreaDentalRemark.setEnabled(flag);

        panelYesNoRadioButton.setEnableRadioButton(flag);

        jButtonSave.setEnabled(flag);

        jButtonAdd.setEnabled(flag);

        jButtonDel.setEnabled(flag);
        jTableDentalData.setEnabled(flag);

    }

    

    private void setButtonBeforeAddValue(){

        jButtonAdd.setEnabled(true);

//        integerTextFieldRealTooth.setEnabled(false);

//        integerTextFieldBadRealTooth.setEnabled(false);

//        integerTextFieldMilkTooth.setEnabled(false);

//        integerTextFieldBadMilkTooth.setEnabled(false);

//        jComboBoxGumLevel.setEnabled(false);

//        jTextAreaDentalDetail.setEnabled(false);

//        jTextAreaDentalRemark.setEnabled(false);

        panelYesNoRadioButton.setEnableRadioButton(false);

//        jButtonSave.setEnabled(false);

//        jButtonDel.setEnabled(false);

    }

    public void setJFrame(JFrame frame)

    {

        theFrame = frame;

        initBalloon();

    }

    public JFrame getJFrame()

    {

        return theFrame;

    }

    public void setLanguage() {

        /*jLabel*/

        jLabelRealTooth.setText(GutilPCU.getTextBundle(jLabelRealTooth.getText()));

        jLabelBadRealTooth.setText(GutilPCU.getTextBundle(jLabelBadRealTooth.getText()));

        jLabelMilkTooth.setText(GutilPCU.getTextBundle(jLabelMilkTooth.getText()));

        jLabelBadMilkTooth.setText(GutilPCU.getTextBundle(jLabelBadMilkTooth.getText()));

        jLabelGumLevel.setText(GutilPCU.getTextBundle(jLabelGumLevel.getText()));

        jLabelRemark.setText(GutilPCU.getTextBundle(jLabelRemark.getText()));

        jLabelFalseTeeth.setText(GutilPCU.getTextBundle(jLabelFalseTeeth.getText()));

        jLabelSurveyDate.setText(GutilPCU.getTextBundle(jLabelSurveyDate.getText()));
        GutilPCU.setLanguage(jLabel5);
        GutilPCU.setLanguage(jLabel6);

        

        

        /*jButton*/

        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));

        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));

        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));

        

        /*TitledBorder*/

        GutilPCU.JPanelLabler(jPanelDentalList);

        GutilPCU.JPanelLabler(jPanelDentalDetail);

        GutilPCU.JPanelLabler(jPanelDentalSubDetail);

        //GutilPCU.JPanelLabler(jPanelRemark);

        

    }

    

    /*นำข้อมูลจาก GUI มา set ค่าให้ Dental Object*/

    private boolean setDataToObjectDental() {

        boolean result = true;

        theDental.dental_num_tooth = integerTextFieldRealTooth.getText();

        theDental.dental_num_bad_tooth = integerTextFieldBadRealTooth.getText();

        theDental.dental_num_milktooth = integerTextFieldMilkTooth.getText();

        theDental.dental_num_bad_milktooth = integerTextFieldBadMilkTooth.getText();

        theDental.f_health_gum_level_id  = ComboboxModel.getCodeComboBox(jComboBoxGumLevel);

        theDental.dental_false_teeth_need = panelYesNoRadioButton.getStringSelect();

        theDental.dental_detail = Gutil.CheckReservedWords(jTextAreaDentalDetail.getText());

        theDental.dental_remark = Gutil.CheckReservedWords(jTextAreaDentalRemark.getText());

        theDental.dental_active = "1";
        if(theDental.getObjectId() == null){
            if(pcuobject.getVisit() != null)
                    theDental.visit_id = pcuobject.getVisit().getObjectId();
            if(thePatient != null)
            {   theDental.patient_id = thePatient.getObjectId();
                theDental.family_id = thePatient.family_id;
            }
            if(theFamily!=null)
               theDental.family_id = theFamily.getObjectId();

            theDental.dental_staff_record = theEmployee.getObjectId();
            theDental.dental_record_time = Gutil.getTextCurrentDateTime(theAllComboBoxControl.theConnectionInf);
        }
        theDental.survey_date = dateComboBoxSurvey.getText();
        theDental.dental_modify_time = dateComboBoxCheck.getText()+","+timeTextFieldCheck.getText();
        return result;

    }

    

    /*สำหรับ clear หน้าจอเมื่อผู้ใช้ทำการกดปุ่ม + หรือ -*/

    public void clearGUIDentalDetail(){

        integerTextFieldRealTooth.setText("");

        integerTextFieldBadRealTooth.setText("");

        integerTextFieldMilkTooth.setText("");

        integerTextFieldBadMilkTooth.setText("");

        jTextAreaDentalDetail.setText("");

        jTextAreaDentalRemark.setText("");

        panelYesNoRadioButton.setSelected("0");

        dateComboBoxSurvey.setText(Gutil.convertFieldDate(""));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
    }

    

    /*นำค่าจาก Dental Object มาแสดงผล*/

    public void showDentalDetail(Dental theDental){

        if(theDental == null)
            theDental = new Dental();
        ComboboxModel.setCodeComboBox(jComboBoxGumLevel,theDental.f_health_gum_level_id);
        integerTextFieldRealTooth.setText(theDental.dental_num_tooth);
        integerTextFieldBadRealTooth.setText(theDental.dental_num_bad_tooth);
        integerTextFieldMilkTooth.setText(theDental.dental_num_milktooth);
        integerTextFieldBadMilkTooth.setText(theDental.dental_num_bad_milktooth);
        jTextAreaDentalDetail.setText(theDental.dental_detail);
        jTextAreaDentalRemark.setText(theDental.dental_remark);
        panelYesNoRadioButton.setSelected(theDental.dental_false_teeth_need);
        dateComboBoxSurvey.setText(Gutil.convertFieldDate(theDental.survey_date));
        jLabelSurveyDate.setSelected(!dateComboBoxSurvey.getText().equals(""));
        dateComboBoxSurvey.setEnabled(!dateComboBoxSurvey.getText().equals(""));
        this.jLabelVN.setText("");
        if(!theDental.visit_id.equals("")){
            String vn_id = this.theAllComboBoxControl.readVNbyVid(theDental.visit_id);
            this.jLabelVN.setText("VN:"+vn_id);
        }
        this.dateComboBoxCheck.setText(com.hosv3.utility.DateUtil.convertFieldDate(theDental.dental_modify_time));
        this.timeTextFieldCheck.setText(theDental.dental_modify_time.substring(11));

    }

    

    /*บันทึกหรือแก้ไขข้อมูลประวัติการตรวจฟันและเหงือก*/

    public String saveDental()
    {  
        
        if(!checkNumOfTooth())
            return "";
        
        if (pcuobject.getFamily() == null)
        {   theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",UpdateStatus.WARNING);
            return "";
        }
        if(!setDataToObjectDental())
            return "";
        if(theDental == null)
            return "";
        theExtraClinicServiceControl.saveDental(theDental);
        String objectId = theDental.getObjectId();
        listDental();
        for(int i=0;i<this.vDental.size();i++){
            Dental pp = (Dental)vDental.get(i);
            if(pp.getObjectId().equals(theDental.getObjectId())){
                this.jTableDentalData.setRowSelectionInterval(i,i);
                return "";
            }
        }
        return theDental.getObjectId();

    }

    /**

     *ตรวจสอบเพศของผู้รับบริการ

     *@param -

     *@return boolean true=ผ่าน false=ไม่ผ่าน

     *@author kingland

     *@date 04/09/2549

     */

    private boolean checkSex(boolean showWarningMessage)

    {   boolean result = true;

        //add code by noom สำหรับ check เพศ หญิงเท่านั้น

        if(thePatient != null && !("2").equals(thePatient.f_sex_id))

        {   if(showWarningMessage)

            {   theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้

            }

            result = false;

        }

        //สำหรับ check เพศ หญิงเท่านั้น

        else if(theFamily!=null && !("2").equals(theFamily.f_sex_id))

        {   if(showWarningMessage)

            {   theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้

            }

            result = false;

        }

        return result;

    }

    /**

     *ตรวจสอบ Patient และ Family จาก PCUobject

     *@param -

     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร

     *@author kingland

     *@date 04/09/2549

     */

    private boolean checkPatientAndFamily()

    {   boolean result = true;

        if(theFamily == null) result = false;

        return result;

    }

    /**

     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่

     *@param -

     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต

     *@author kingland

     *@date 04/09/2549

     */

    private boolean checkDead()

    {   boolean result = false;

        if(theFamily != null && Dischar.DEATH.equals(theFamily.discharge_status_id))

        {   result = true;

        }

        else if(thePatient != null && Dischar.DEATH.equals(thePatient.discharge_status_id))

        {   result = true;

        }

        return false;//result;
    }

    /**

     * ตรวจสอบก่อนทำการลบ

     * @param -

     * @return boolean true = สามารถลบข้อมูลได้ false = ไม่สามารถลบข้อมูลได้

     * @author kingland

     * @date 03/06/2549

     */ 

     public boolean checkBeforDelete()

    {

        boolean result = false;

        int row = jTableDentalData.getSelectedRow();

        if(row != -1)

        {

            if(theUS.confirmBox(GutilPCU.getTextBundle("ConfirmDeleteDental"),UpdateStatus.WARNING)){
                result = true;

            }

        }

        else

        {   theUS.setStatus(GutilPCU.getTextBundle("WarningNotSelect"), UpdateStatus.WARNING);
        }

        return result;

    }

    

    /**

     * ลบข้อมูลประวัติการตรวจฟันและเหงือก (เปลี่ยนสถานะของ active)

     * @param -

     * @return boolean true = สามารถลบข้อมูลได้ false = ไม่สามารถลบข้อมูลได้

     * @author kingland

     * @date 03/06/2549

     */ 

    public void deleteDental(){

        if(!checkBeforDelete())
            return;
        int row = jTableDentalData.getSelectedRow();
        if(row == -1) 
            return;

        theDental = (Dental)vDental.get(row);
        theDental.dental_detail = Gutil.CheckReservedWords(jTextAreaDentalDetail.getText());
        theDental.dental_remark = Gutil.CheckReservedWords(jTextAreaDentalRemark.getText());
        int ret = theExtraClinicServiceControl.deleteDental(theDental);
        if(ret==0)
            return;

        listDental();
        clearGUIDentalDetail();
    }

    

    private Dental getDataFromObjectDental(int row) {

        theDental = (Dental)vDental.get(row);

        return theDental;

    }    

    

    public void refresh(String family_id)

    {   

        vDental = theExtraClinicServiceControl.listDentalByFamilyID(family_id);

    }

    /**

     * Update ข้อมูลประวัติการตรวจฟันและเหงือกใน Table ใหม่

     * @param -

     * @return boolean true = สามารถลบข้อมูลได้ false = ไม่สามารถลบข้อมูลได้

     * @author kingland

     * @date 03/06/2549

     */ 

    public void listDental()

    {   vDental=null;

        if(thePatient != null&&!thePatient.family_id.equals(""))

        {   vDental = theExtraClinicServiceControl.listDentalByFamilyID();

            setButtonBeforeAddValue();

            setFromEnable(true);

            jButtonAdd.setEnabled(true);

        }

        if(vDental==null)

        {   vDental = new Vector();

            if(theFamily != null)

            {   vDental = theExtraClinicServiceControl.listDentalByFamilyID();

                setFromEnable(true);

                jButtonAdd.setEnabled(true);

            }

        }   

        setButtonDel(vDental);

        setDentalV(vDental);

    }

    /**

     * เซตปุ่มลบ

     * @param -

     * @return void

     * @author kingland

     * @date 03/06/2549

     */

    private void setButtonDel(Vector vDent)

    {   if(vDent == null || vDent.size() == 0)

        {

//            jButtonDel.setEnabled(false);

        }

        else

        {

            jButtonDel.setEnabled(true);

        }

    }

    /*นำข้อมูลจาก Dental Object มาแสดงผลในตาราง*/

    private void setDentalV(Vector vc)

    {   String[] col = { GutilPCU.getTextBundle("No."),GutilPCU.getTextBundle("DentalServiceDate")};

        TableModel tm ;

        if(vc != null) 

        {   tm= new TableModel(col,vc.size());

            Dental dental = new Dental();

            for(int i=0 ;i<vc.size(); i++) 

            {   dental = (Dental)vc.get(i);

                tm.setValueAt(String.valueOf((i+1)),i,0);

                tm.setValueAt(GutilPCU.changDateToString(dental.dental_modify_time,false),i,1);
            }

        }

        else 

        {   tm= new TableModel(col,0);

            //ไม่มีข้อมูลการได้รับบริการของผู้ป่วยคนนี้ กำหนดให้ผู้ป่วยสามารถบันทึกได้ทันที

            promptSave();

        }

        jTableDentalData.setModel(tm);

        setDefaultTableListVisit();

    }

    

    private void promptSave()

    {   if(theVisit != null && theVisit.getObjectId() != null)

        {   theDental = new Dental();

            clearGUIDentalDetail();

            setFromEnable(true);

        }

    }

    

    /*กำหนดรูปแบบของตารางที่ต้องการแสดงผล*/

    private void setDefaultTableListVisit() {

        if(rendererCenter == null){

            rendererCenter = new DefaultTableCellRenderer();

        }

        //กำหนดให้จัด Column ให้อยู่ตรงกลาง

        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);

        jTableDentalData.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);

        jTableDentalData.getColumnModel().getColumn(1).setCellRenderer(rendererCenter);

        //กำหนดความกว้างของตาราง

        jTableDentalData.getColumnModel().getColumn(0).setPreferredWidth(50);

        jTableDentalData.getColumnModel().getColumn(1).setPreferredWidth(150);

    }

    

    

    private boolean checkServiceDental() {
//
//        boolean result = true;
//
//        if(vDental != null && theVisit != null) {
//
//            Dental dental = null;
//
//            for(int i = vDental.size()-1 ; i >=0  ; i--) {
//
//                dental = (Dental)vDental.get(i);
//
//                if(dental.visit_id.equalsIgnoreCase(theVisit.getObjectId())) {
//                    result =  false;
//
//                    break;
//
//                }
//
//                dental = null;
//
//            }
//
//        }
//
//        return result;
        return true;
    }

    

    public void setVisit(Visit theVisit){

        theVisit = theVisit;

    }

    

    public void setEmployee(Employee theEmployee){

        theEmployee = theEmployee;

    }

    

    public void setPatient(Patient thePatient){

        thePatient = thePatient;

    }

    

    /**

     * เช็ควันที่สำรวจว่าเป็นวันในอนาคตหรือไม่

     * @jao 

     */

    private void checkDateSurvey()

    {        

        if(!dateComboBoxSurvey.getText().equals("") 

            && dateComboBoxSurvey.getText().length()==10 

            && com.pcu.utility.DateUtil.countDay(dateComboBoxSurvey.getText(),theHosManage.theHosControl.theConnectionInf) == -1 

            && com.pcu.utility.DateUtil.isToday(com.pcu.utility.DateUtil.getDateFromText(dateComboBoxSurvey.getText()),theHosManage.theHosControl.theConnectionInf)==false)  
        {            
             if(checksurvey == false)
             {
                 // ไม่สามารถกรอกวันที่เป็นวันในอนาคตได้
                theUS.setStatus(GutilPCU.getTextBundle("NoDateFuture") , UpdateStatus.WARNING);
                checksurvey = true;

             }

        }  

    } 

     /**

     *เซตสถานะ

     *@param message = ข้อความ status = สถานะ

     *@return void

     *@author kingland

     *@date 29/08/2549

     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck;
    private com.pcu.utility.DateComboBox dateComboBoxSurvey;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.pcu.utility.IntegerTextField integerTextFieldBadMilkTooth;
    private com.pcu.utility.IntegerTextField integerTextFieldBadRealTooth;
    private com.pcu.utility.IntegerTextField integerTextFieldMilkTooth;
    private com.pcu.utility.IntegerTextField integerTextFieldRealTooth;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxGumLevel;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBadMilkTooth;
    private javax.swing.JLabel jLabelBadRealTooth;
    private javax.swing.JLabel jLabelFalseTeeth;
    private javax.swing.JLabel jLabelGumLevel;
    private javax.swing.JLabel jLabelMilkTooth;
    private javax.swing.JLabel jLabelRealTooth;
    private javax.swing.JLabel jLabelRemark;
    private javax.swing.JCheckBox jLabelSurveyDate;
    private javax.swing.JLabel jLabelVN;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelCounselControl;
    private javax.swing.JPanel jPanelDentalData;
    private javax.swing.JPanel jPanelDentalDetail;
    private javax.swing.JPanel jPanelDentalList;
    private javax.swing.JPanel jPanelDentalSubDetail;
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JPanel jPanelTableSummary;
    private javax.swing.JPanel jPanelTest;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JTable jTableDentalData;
    private com.hosv3.gui.component.BalloonTextArea jTextAreaDentalDetail;
    private javax.swing.JTextField jTextAreaDentalRemark;
    private com.pcu.gui.utility.component.PanelYesNoRadioButton panelYesNoRadioButton;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck;
    // End of variables declaration//GEN-END:variables

}

