/*
 * PanelVisitHome.java
 *
 * Created on 13 มิถุนายน 2548, 11:30 น.
 */

package com.pcu.gui.panelpcu;
import com.hospital_os.object.Dischar;
import javax.swing.*;
import java.awt.event.*;
import java.util.Vector;
import java.util.Date;
import javax.swing.table.DefaultTableCellRenderer;

import com.pcu.control.PCUObject;
import com.pcu.gui.dialog.HosDialog;
import com.pcu.utility.*;
import com.pcu.object.VisitHome;
import com.pcu.object.VitalsignHomeVisit;
import com.pcu.control.AllComboBoxControl;
import com.pcu.control.HosManage;
import com.pcu.control.ExtraClinicServiceControl;
import com.pcu.object.Family;

import com.hospital_os.utility.Gutil;
import com.hospital_os.object.Patient;
import com.hospital_os.object.Employee;
import com.hospital_os.utility.ComboboxModel;
import com.hospital_os.utility.Constant;
import com.hosv3.utility.connection.UpdateStatus;
import com.hospital_os.utility.DateUtil;

/**
 *
 * @author  Noom
 */
public class PanelVisitHome extends javax.swing.JPanel implements PanelObj
{
    public static final  String WARNING = "Warning";
    String initString = "";
    String[] col_jTableVitalSign = {"วัน-เวลาตรวจ"};
    private static HosManage theHosManage;
    private Vector vNutritionType;
    private ExtraClinicServiceControl theExtraClinicServiceControl;
    private DefaultTableCellRenderer rendererCenter;
    private AllComboBoxControl theAllComboBoxControl;
    
    private VisitHome theVisitHome = new VisitHome();
    private Vector vVisitHome;
    
    private Patient thePatient;
    private Employee theEmployee;
    private PCUObject pcuobject ;
    private Family theFamily;
    private VitalsignHomeVisit theVitalsignHomeVisit;
    private Vector vVitalsignHomeVisit;

    private UpdateStatus theUS;
    /** Creates new form PanelVisitHome */
    public PanelVisitHome() 
    {   initComponents();
    }

    public PanelVisitHome(HosManage hm,HosDialog hd,UpdateStatus us)
    {   initComponents();
        setControl(hm,hd,us);
    }
    public void setControl(HosManage hm,HosDialog hd,UpdateStatus us) 
    {
        theHosManage = hm;
        setLanguage();        
        initCombobox();
        theUS = us;
        pcuobject = hm.thePO;   
        theExtraClinicServiceControl = theHosManage.theHosControl.theExtraClinicServiceControl;
        theAllComboBoxControl = theHosManage.theHosControl.theAllComboBoxControl;    
        setEnabled(false);
        //jPanelHide.setVisible(false);
    }
    private void initCombobox()
    {
        vNutritionType = theHosManage.theHC.theLookupControl.listNutritionType();
        ComboboxModel.initComboBox(jComboBoxNutrition,vNutritionType);
    }
    /** ไปจัดการต่อเรื่องของข้อมูลที่จะรับ ถ้าเมื่อไรไม่มีข้อมูล นั้นจะทำอย่างไรบนหน้า GUI */
    public void setObject(PCUObject pcuobject) 
    {
        System.out.println("_henbe_______________________" + this.getClass().toString());
        this.pcuobject = pcuobject;

        theFamily = pcuobject.getFamily();
        if(pcuobject.getEmployee() != null)
           theEmployee = pcuobject.getEmployee();

        thePatient = null;
        if(pcuobject.getPatient() != null)
           thePatient = pcuobject.getPatient();

        updateList();
        theVisitHome = null;
        if(theFamily != null)
           setVisitbleNutrition(theFamily.patient_birthday);

        setEnabled(true);
        if(!checkPatientAndFamily())
           setEnabled(false);
        
        else if(checkDead())
           setEnabled(false);
        
    }
    
    public void setObjectFamily (Family family)
    {
        
        System.out.println("_henbe other_______________________" + this.getClass().toString());
//        setFromEnable(false); 
        theFamily = family;
        thePatient = null;        
        if(theFamily!=null)
        {   
            setEnabled(true);
            setVisitbleNutrition(theFamily.patient_birthday);
        }
        this.updateList();
        theVisitHome = null;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultFont1 = new com.hospital_os.gui.font.DefaultFont();
        jPanelVisitHomeList = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTableHomeVisitData = new javax.swing.JTable();
        jCheckBoxVisit = new javax.swing.JCheckBox();
        jPanelVisitHomeDetail = new javax.swing.JPanel();
        jPanelOther = new javax.swing.JPanel();
        jLabelDateVisitHome = new javax.swing.JLabel();
        dateComboBox = new com.pcu.utility.DateComboBox();
        jLabelNextDateVisitHome = new javax.swing.JLabel();
        dateComboBoxNextDate = new com.pcu.utility.DateComboBox();
        jLabelRemark = new javax.swing.JLabel();
        jTextAreaHomeVisitRemark = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabelWeight = new javax.swing.JLabel();
        jTextFieldWeight = new com.hospital_os.utility.DoubleTextField();
        jLabelWeightUnit = new javax.swing.JLabel();
        jLabelNu = new javax.swing.JLabel();
        jComboBoxNutrition = new javax.swing.JComboBox();
        jLabelHeight = new javax.swing.JLabel();
        jTextFieldHeight = new com.hospital_os.utility.DoubleTextField();
        jLabelHeightUnit = new javax.swing.JLabel();
        jLabelTemp = new javax.swing.JLabel();
        jTextFieldTemp = new com.hospital_os.utility.DoubleTextField();
        jLabelTempUnit = new javax.swing.JLabel();
        jLabelPulse = new javax.swing.JLabel();
        jTextFieldPulse = new com.hospital_os.utility.DoubleTextField();
        jLabelPulseUnit = new javax.swing.JLabel();
        jLabelRespiration = new javax.swing.JLabel();
        jTextFieldRespiration = new com.hospital_os.utility.DoubleTextField();
        jLabelResUnit = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPressure1 = new com.hospital_os.utility.DoubleTextField();
        jTextFieldPressure2 = new com.hospital_os.utility.DoubleTextField();
        jLabelPresUnit = new javax.swing.JLabel();
        jLabelPressure = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabelBMI1 = new javax.swing.JLabel();
        doubleTextFieldBMI = new com.hospital_os.utility.DoubleTextField();
        timeTextFieldCheck = new com.hospital_os.utility.TimeTextField();
        jLabelBMI = new javax.swing.JLabel();
        jButtonAddVistalsign = new javax.swing.JButton();
        jScrollPaneVital = new javax.swing.JScrollPane();
        jTableVitalSign = new com.hosv3.gui.component.HJTableSort();
        jLabel1 = new javax.swing.JLabel();
        jScrollPaneProblem = new javax.swing.JScrollPane();
        jTextFieldProblem = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPaneObject = new javax.swing.JScrollPane();
        jTextFieldObject = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPaneMaintain = new javax.swing.JScrollPane();
        jTextFieldMaintain = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jScrollPaneAssess = new javax.swing.JScrollPane();
        jTextFieldAssess = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPanePlan = new javax.swing.JScrollPane();
        jTextFieldPlan = new javax.swing.JTextArea();
        jPanel16 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dateComboBoxCheck = new com.hospital_os.utility.DateComboBox();
        jLabel8 = new javax.swing.JLabel();
        timeTextFieldCheck1 = new com.hospital_os.utility.TimeTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanelHomeVisitControl1 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(700, 299));
        setPreferredSize(new java.awt.Dimension(700, 464));
        setLayout(new java.awt.GridBagLayout());

        jPanelVisitHomeList.setBorder(javax.swing.BorderFactory.createTitledBorder("VisitHome_Data"));
        jPanelVisitHomeList.setMinimumSize(new java.awt.Dimension(200, 85));
        jPanelVisitHomeList.setPreferredSize(new java.awt.Dimension(200, 464));
        jPanelVisitHomeList.setLayout(new java.awt.GridBagLayout());

        jTableHomeVisitData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableHomeVisitDataKeyReleased(evt);
            }
        });
        jTableHomeVisitData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableHomeVisitDataMouseReleased(evt);
            }
        });
        jScrollPaneTable.setViewportView(jTableHomeVisitData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelVisitHomeList.add(jScrollPaneTable, gridBagConstraints);

        jCheckBoxVisit.setText("ข้อมูลปัจจุบัน");
        jCheckBoxVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxVisitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelVisitHomeList.add(jCheckBoxVisit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(jPanelVisitHomeList, gridBagConstraints);

        jPanelVisitHomeDetail.setMinimumSize(new java.awt.Dimension(500, 299));
        jPanelVisitHomeDetail.setPreferredSize(new java.awt.Dimension(500, 299));
        jPanelVisitHomeDetail.setLayout(new java.awt.GridBagLayout());

        jPanelOther.setLayout(new java.awt.GridBagLayout());

        jLabelDateVisitHome.setText("HomeVisitDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelOther.add(jLabelDateVisitHome, gridBagConstraints);

        dateComboBox.setAlignmentY(1.0F);
        dateComboBox.setEnabled(false);
        dateComboBox.setMinimumSize(new java.awt.Dimension(107, 19));
        dateComboBox.setPreferredSize(new java.awt.Dimension(107, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelOther.add(dateComboBox, gridBagConstraints);

        jLabelNextDateVisitHome.setText("HomeNextVisitDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelOther.add(jLabelNextDateVisitHome, gridBagConstraints);

        dateComboBoxNextDate.setAlignmentY(1.0F);
        dateComboBoxNextDate.setEnabled(false);
        dateComboBoxNextDate.setMinimumSize(new java.awt.Dimension(107, 19));
        dateComboBoxNextDate.setPreferredSize(new java.awt.Dimension(107, 19));
        dateComboBoxNextDate.setText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelOther.add(dateComboBoxNextDate, gridBagConstraints);

        jLabelRemark.setText("Remark");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelOther.add(jLabelRemark, gridBagConstraints);

        jTextAreaHomeVisitRemark.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelOther.add(jTextAreaHomeVisitRemark, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanelVisitHomeDetail.add(jPanelOther, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("VistalSign"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jLabelWeight.setText("PPWeight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel14.add(jLabelWeight, gridBagConstraints);

        jTextFieldWeight.setColumns(4);
        jTextFieldWeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldWeight.setMinimumSize(new java.awt.Dimension(45, 21));
        jTextFieldWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldWeightFocusLost(evt);
            }
        });
        jTextFieldWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldWeightKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jTextFieldWeight, gridBagConstraints);

        jLabelWeightUnit.setText("kgs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jLabelWeightUnit, gridBagConstraints);

        jLabelNu.setText("CheckNutrition");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jLabelNu, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jComboBoxNutrition, gridBagConstraints);

        jLabelHeight.setText("NtrHigh");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jLabelHeight, gridBagConstraints);

        jTextFieldHeight.setColumns(4);
        jTextFieldHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldHeight.setMinimumSize(new java.awt.Dimension(45, 21));
        jTextFieldHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldHeightFocusLost(evt);
            }
        });
        jTextFieldHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldHeightKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jTextFieldHeight, gridBagConstraints);

        jLabelHeightUnit.setText("cms");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jLabelHeightUnit, gridBagConstraints);

        jLabelTemp.setText("T");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jLabelTemp, gridBagConstraints);

        jTextFieldTemp.setColumns(4);
        jTextFieldTemp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTemp.setMinimumSize(new java.awt.Dimension(45, 21));
        jTextFieldTemp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldTempKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jTextFieldTemp, gridBagConstraints);

        jLabelTempUnit.setText("C");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jLabelTempUnit, gridBagConstraints);

        jLabelPulse.setText("Pulse");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jLabelPulse, gridBagConstraints);

        jTextFieldPulse.setColumns(4);
        jTextFieldPulse.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPulse.setMinimumSize(new java.awt.Dimension(45, 21));
        jTextFieldPulse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPulseKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jTextFieldPulse, gridBagConstraints);

        jLabelPulseUnit.setText("n/m");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jLabelPulseUnit, gridBagConstraints);

        jLabelRespiration.setText("การหายใจ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jLabelRespiration, gridBagConstraints);

        jTextFieldRespiration.setColumns(4);
        jTextFieldRespiration.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldRespiration.setMinimumSize(new java.awt.Dimension(45, 21));
        jTextFieldRespiration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldRespirationKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jTextFieldRespiration, gridBagConstraints);

        jLabelResUnit.setText("n/m");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel14.add(jLabelResUnit, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(jLabel4, gridBagConstraints);

        jTextFieldPressure1.setColumns(2);
        jTextFieldPressure1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPressure1.setMinimumSize(new java.awt.Dimension(38, 21));
        jTextFieldPressure1.setPreferredSize(new java.awt.Dimension(38, 21));
        jTextFieldPressure1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPressure1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(jTextFieldPressure1, gridBagConstraints);

        jTextFieldPressure2.setColumns(4);
        jTextFieldPressure2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPressure2.setMinimumSize(new java.awt.Dimension(38, 21));
        jTextFieldPressure2.setPreferredSize(new java.awt.Dimension(38, 21));
        jTextFieldPressure2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPressure2KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(jTextFieldPressure2, gridBagConstraints);

        jLabelPresUnit.setText("mmHg");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabelPresUnit, gridBagConstraints);

        jLabelPressure.setText("Pressure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(jLabelPressure, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jPanel4, gridBagConstraints);

        jPanel20.setLayout(new java.awt.GridBagLayout());

        jLabelBMI1.setText("BMI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel20.add(jLabelBMI1, gridBagConstraints);

        doubleTextFieldBMI.setColumns(4);
        doubleTextFieldBMI.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        doubleTextFieldBMI.setMinimumSize(new java.awt.Dimension(38, 21));
        doubleTextFieldBMI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doubleTextFieldBMIKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel20.add(doubleTextFieldBMI, gridBagConstraints);

        timeTextFieldCheck.setColumns(4);
        timeTextFieldCheck.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        timeTextFieldCheck.setMinimumSize(new java.awt.Dimension(45, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel20.add(timeTextFieldCheck, gridBagConstraints);

        jLabelBMI.setText("Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel20.add(jLabelBMI, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel14.add(jPanel20, gridBagConstraints);

        jButtonAddVistalsign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAddVistalsign.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddVistalsign.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddVistalsign.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddVistalsign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddVistalsignActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jButtonAddVistalsign, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel14, gridBagConstraints);

        jScrollPaneVital.setMinimumSize(new java.awt.Dimension(0, 40));
        jScrollPaneVital.setOpaque(false);
        jScrollPaneVital.setPreferredSize(new java.awt.Dimension(0, 40));

        jTableVitalSign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableVitalSignMouseReleased(evt);
            }
        });
        jTableVitalSign.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableVitalSignKeyReleased(evt);
            }
        });
        jScrollPaneVital.setViewportView(jTableVitalSign);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPaneVital, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelVisitHomeDetail.add(jPanel1, gridBagConstraints);

        jLabel1.setText("Problem");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        jPanelVisitHomeDetail.add(jLabel1, gridBagConstraints);

        jScrollPaneProblem.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneProblem.setMinimumSize(new java.awt.Dimension(23, 38));
        jScrollPaneProblem.setPreferredSize(new java.awt.Dimension(2, 38));

        jTextFieldProblem.setLineWrap(true);
        jTextFieldProblem.setWrapStyleWord(true);
        jScrollPaneProblem.setViewportView(jTextFieldProblem);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 5, 0, 0);
        jPanelVisitHomeDetail.add(jScrollPaneProblem, gridBagConstraints);

        jLabel2.setText("Object");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelVisitHomeDetail.add(jLabel2, gridBagConstraints);

        jScrollPaneObject.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneObject.setMinimumSize(new java.awt.Dimension(23, 38));
        jScrollPaneObject.setPreferredSize(new java.awt.Dimension(2, 38));

        jTextFieldObject.setLineWrap(true);
        jTextFieldObject.setWrapStyleWord(true);
        jScrollPaneObject.setViewportView(jTextFieldObject);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelVisitHomeDetail.add(jScrollPaneObject, gridBagConstraints);

        jLabel3.setText("Maintain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelVisitHomeDetail.add(jLabel3, gridBagConstraints);

        jScrollPaneMaintain.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneMaintain.setMinimumSize(new java.awt.Dimension(23, 38));
        jScrollPaneMaintain.setPreferredSize(new java.awt.Dimension(2, 38));

        jTextFieldMaintain.setLineWrap(true);
        jTextFieldMaintain.setWrapStyleWord(true);
        jScrollPaneMaintain.setViewportView(jTextFieldMaintain);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelVisitHomeDetail.add(jScrollPaneMaintain, gridBagConstraints);

        jLabel5.setText("Assess");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelVisitHomeDetail.add(jLabel5, gridBagConstraints);

        jScrollPaneAssess.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAssess.setMinimumSize(new java.awt.Dimension(23, 38));
        jScrollPaneAssess.setPreferredSize(new java.awt.Dimension(2, 38));

        jTextFieldAssess.setLineWrap(true);
        jTextFieldAssess.setWrapStyleWord(true);
        jScrollPaneAssess.setViewportView(jTextFieldAssess);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelVisitHomeDetail.add(jScrollPaneAssess, gridBagConstraints);

        jLabel6.setText("Plan");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelVisitHomeDetail.add(jLabel6, gridBagConstraints);

        jScrollPanePlan.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPanePlan.setMinimumSize(new java.awt.Dimension(23, 38));
        jScrollPanePlan.setPreferredSize(new java.awt.Dimension(2, 38));

        jTextFieldPlan.setLineWrap(true);
        jTextFieldPlan.setWrapStyleWord(true);
        jScrollPanePlan.setViewportView(jTextFieldPlan);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelVisitHomeDetail.add(jScrollPanePlan, gridBagConstraints);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("วันที่บันทึก");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel7, gridBagConstraints);

        dateComboBoxCheck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateComboBoxCheckKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(dateComboBoxCheck, gridBagConstraints);

        jLabel8.setText("น.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel16.add(jLabel8, gridBagConstraints);

        timeTextFieldCheck1.setMinimumSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck1.setPreferredSize(new java.awt.Dimension(45, 23));
        timeTextFieldCheck1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeTextFieldCheck1KeyReleased(evt);
            }
        });
        timeTextFieldCheck1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeTextFieldCheck1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(timeTextFieldCheck1, gridBagConstraints);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hospital_os/images/clock.gif"))); // NOI18N
        jLabel9.setToolTipText("เวลาที่ตรวจ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 3);
        jPanel16.add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelVisitHomeDetail.add(jPanel16, gridBagConstraints);

        jPanelHomeVisitControl1.setLayout(new java.awt.GridBagLayout());

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanelHomeVisitControl1.add(jButtonSave, gridBagConstraints);

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif"))); // NOI18N
        jButtonAdd.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelHomeVisitControl1.add(jButtonAdd, gridBagConstraints);

        jButtonDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif"))); // NOI18N
        jButtonDel.setMaximumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setMinimumSize(new java.awt.Dimension(26, 26));
        jButtonDel.setPreferredSize(new java.awt.Dimension(26, 26));
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanelHomeVisitControl1.add(jButtonDel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        jPanelVisitHomeDetail.add(jPanelHomeVisitControl1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelVisitHomeDetail, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void timeTextFieldCheck1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeTextFieldCheck1MouseClicked
        timeTextFieldCheck.selectAll();
    }//GEN-LAST:event_timeTextFieldCheck1MouseClicked

    private void timeTextFieldCheck1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeTextFieldCheck1KeyReleased
        
    }//GEN-LAST:event_timeTextFieldCheck1KeyReleased

    private void dateComboBoxCheckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateComboBoxCheckKeyReleased
        
    }//GEN-LAST:event_dateComboBoxCheckKeyReleased

    private void jTableHomeVisitDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableHomeVisitDataKeyReleased
        if(evt.getKeyCode()==evt.VK_UP || evt.getKeyCode()==evt.VK_DOWN)
            jTableHomeVisitDataMouseReleased(null);
    }//GEN-LAST:event_jTableHomeVisitDataKeyReleased

    private void jTextFieldWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldWeightFocusLost
        System.out.println("_______________jTextFieldWeightFocusLost");
        String month = initString;
        if(theHosManage.thePO.getFamily()== null) return;
        month = com.hospital_os.utility.DateUtil.countMonth(theHosManage.thePO.getFamily().patient_birthday);
        int months = Integer.parseInt(month);
        if(months >= 0 && months < 73)
        {
            int index = Constant.calculateIndexComboBoxNutrition(theHosManage.thePO.getFamily().f_sex_id,month,jTextFieldWeight.getText());
            if(index == 5)
            {
                theUS.setStatus("ไม่ได้ชั่งน้ำหนัก", UpdateStatus.WARNING);
                return;
            }
            if(index == 6)
            {
                theUS.setStatus("ไม่ได้ระบุเพศ", UpdateStatus.WARNING);
                return;
            }        
            jComboBoxNutrition.setSelectedIndex(index); 
        }
    }//GEN-LAST:event_jTextFieldWeightFocusLost

    private void jTextFieldHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldHeightFocusLost
        String bmi = Constant.calculateBMI(jTextFieldWeight.getText()
            ,jTextFieldHeight.getText());
        doubleTextFieldBMI.setText(bmi);
    }//GEN-LAST:event_jTextFieldHeightFocusLost

    private void jTableVitalSignMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVitalSignMouseReleased
        int select = jTableVitalSign.getSelectedRow();
        theVitalsignHomeVisit = (VitalsignHomeVisit)vVitalsignHomeVisit.get(select);
        setVitalSign(theVitalsignHomeVisit);
    }//GEN-LAST:event_jTableVitalSignMouseReleased

    private void jButtonAddVistalsignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddVistalsignActionPerformed
        theVitalsignHomeVisit = null;
        this.setVitalSign(null);
        jTextFieldWeight.requestFocus();        
    }//GEN-LAST:event_jButtonAddVistalsignActionPerformed

    private void doubleTextFieldBMIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleTextFieldBMIKeyReleased
        
    }//GEN-LAST:event_doubleTextFieldBMIKeyReleased

    private void jTextFieldRespirationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldRespirationKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jButtonSaveActionPerformed(null);
        }
    }//GEN-LAST:event_jTextFieldRespirationKeyReleased

    private void jTextFieldPulseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPulseKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jTextFieldRespiration.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldPulseKeyReleased

    private void jTextFieldTempKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTempKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jTextFieldPulse.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldTempKeyReleased

    private void jTextFieldPressure2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPressure2KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jTextFieldTemp.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldPressure2KeyReleased

    private void jTextFieldPressure1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPressure1KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jTextFieldPressure2.requestFocus();
        }
        if(jTextFieldPressure1.getText().length() == 3)
        {
            jTextFieldPressure2.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldPressure1KeyReleased

    private void jTextFieldWeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldWeightKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jTextFieldHeight.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldWeightKeyReleased

    private void jTextFieldHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldHeightKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jTextFieldPressure1.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldHeightKeyReleased
        
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        setVitalSign(null);
        setVitalSignV(null);
        addVisitHome();
        
        
    }//GEN-LAST:event_jButtonAddActionPerformed
    
    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed

        deleteVisitHome();
    }//GEN-LAST:event_jButtonDelActionPerformed
    
    private void jTableHomeVisitDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableHomeVisitDataMouseReleased
        int row = jTableHomeVisitData.getSelectedRow();
        if(row != -1) {
            setVisitHome((VisitHome)vVisitHome.get(row));
            setEnabled(true);
        }
    }//GEN-LAST:event_jTableHomeVisitDataMouseReleased

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        String objectId = saveVisitHome();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTableVitalSignKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableVitalSignKeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_DELETE)
            this.deleteVisitHome();
    }//GEN-LAST:event_jTableVitalSignKeyReleased

    private void jCheckBoxVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxVisitActionPerformed
        this.refreshList();
    }//GEN-LAST:event_jCheckBoxVisitActionPerformed
    /**
     *ตรวจสอบว่าผู้ป่วยหรือประชากรเสียชีวิตแล้วหรือไม่
     *@param -
     *@return boolean true=เสียชีวิต false=ไม่เสียชีวิต
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkDead()
    {   boolean result = false;
        if(theFamily != null && Dischar.DEATH.equals(theFamily.discharge_status_id))
        {   result = true;
        }
        else if(thePatient != null && Dischar.DEATH.equals(thePatient.discharge_status_id))
        {   result = true;
        }
        return false;//result;
    }
    /**
     *
     */
    private JFrame getJFrame()
    {
        return theHosManage.theHosInf.getJFrame();
    }
     /**
     *ตรวจสอบ Patient และ Family จาก PCUobject
     *@param -
     *@return boolean true=มีผู้ป่วยหรือประชากร false=ไม่มีผู้ป่วยและประชากร
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkPatientAndFamily()
    {   boolean result = true;
        if(theFamily == null) result = false;
        return result;
    }
    /**
     *ตรวจสอบเพศของผู้รับบริการ
     *@param -
     *@return boolean true=ผ่าน false=ไม่ผ่าน
     *@author kingland
     *@date 04/09/2549
     */
    private boolean checkSex(boolean showWarningMessage)
    {   boolean result = true;
        //add code by noom สำหรับ check เพศ หญิงเท่านั้น
        if(thePatient != null && !("2").equals(thePatient.f_sex_id))
        {   if(showWarningMessage)
            {   
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        //สำหรับ check เพศ หญิงเท่านั้น
        else if(theFamily!=null && !("2").equals(theFamily.f_sex_id))
        {   if(showWarningMessage)
            {   
                theUS.setStatus(GutilPCU.getTextBundle("ISSEXWOMAN"),UpdateStatus.WARNING);
                //ยังไม่ระบุเพศ หรือเป็นเพศชาย ไม่สามารถเข้ารับบริการส่วนนี้ได้
            }
            result = false;
        }
        return result;
    }
    /**
     * ตรวจสอบรูปแบบวันที่
     */
    public boolean checkFormatDate(){
        String bdate = dateComboBox.getText();
        if(bdate!=null && bdate.length()>0 && bdate.length()!=10) {
            return true;
        }
        else
        {
            return false;
        }
    }
    /**
     * ตรวจสอบว่าเป็นวันในอนาคตหรือไม่
     */
    public boolean checkNextDate(){
        if(theAllComboBoxControl != null){
            String bdate = dateComboBox.getText();
            String date_time = DateTime.getTextCurrentDateTime(theAllComboBoxControl.theConnectionInf);
            if(!bdate.equals("") && com.hosv3.utility.DateUtil.countDateDiff(bdate,date_time)> 0) {
                return true;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }
    
    /**
     * เพิ่มรายการเยี่ยมบ้าน
     */
    private void addVisitHome(){
        if(theFamily!=null || thePatient!=null)
        {
            theVisitHome = new VisitHome();
            setVisitHome(null);
            jTableHomeVisitData.clearSelection();
            setEnabled(true);
        }
    }
    
    private boolean isEmptyVisitHome(){
        return (jTextFieldProblem.getText().trim().equals("") && jTextFieldObject.getText().trim().equals("") && jTextFieldMaintain.getText().trim().equals("")  && jTextFieldAssess.getText().trim().equals("")  && jTextFieldPlan.getText().trim().equals(""));
    }
    
    /*ตรวจสอบวันนัดครั้งถัดไปต้องเป็นวันหลังจากวันที่เยี่ยมบ้าน*/
    private boolean checkNextAppDate(){
        boolean isNextAppDate = false;
        String appDate = dateComboBox.getText();
        String appNextDate = dateComboBoxNextDate.getText();
        if(appNextDate.equals("") || appDate.equals(appNextDate)){
            isNextAppDate = true;
        }else if(!appDate.equals("") && !appNextDate.equals("")){
            if(DateUtil.countDayByTwoDate(appDate,appNextDate) != -1){
                isNextAppDate = true;
            }
        }
        return isNextAppDate;
    }
    
    
    public void setEnabled(boolean flag)
    {
        jTextFieldProblem.setEnabled(flag);
        jTextFieldObject.setEnabled(flag);
        jTextFieldMaintain.setEnabled(flag);
        jTextFieldAssess.setEnabled(flag);
        jTextFieldPlan.setEnabled(flag);
        dateComboBox.setEnabled(flag);
        dateComboBoxNextDate.setEnabled(flag);
        jTextAreaHomeVisitRemark.setEnabled(flag);
        jButtonSave.setEnabled(flag);
        jButtonDel.setEnabled(flag);
        jButtonAdd.setEnabled(flag);
        jTextFieldWeight.setEnabled(flag);
        jTextFieldHeight.setEnabled(flag);
        jTextFieldPressure1.setEnabled(flag);
        jTextFieldPressure2.setEnabled(flag);
        jTextFieldTemp.setEnabled(flag);
        jTextFieldPulse.setEnabled(flag);
        jTextFieldRespiration.setEnabled(flag);
        timeTextFieldCheck.setEnabled(flag);
        jComboBoxNutrition.setEnabled(flag);
        jButtonAddVistalsign.setEnabled(flag);
    }
    
    private void setButtonBeforeAddValue(){
//        jTextFieldProblem.setEnabled(false);
//        jTextFieldObject.setEnabled(false);
//        jTextFieldMaintain.setEnabled(false);
//        jTextFieldAssess.setEnabled(false);
//        jTextFieldPlan.setEnabled(false);
//        dateComboBox.setEnabled(false);
//        dateComboBoxNextDate.setEnabled(false);
//////        jTextAreaHomeVisitRemark.setEnabled(false);
//        jButtonSave.setEnabled(false);
//        jButtonDel.setEnabled(false);
        jButtonAdd.setEnabled(true);
    }
    
    public void setLanguage() {
        GutilPCU.setLanguage(col_jTableVitalSign);
        /*jLabel*/
        /*
        jLabelProblem.setText(GutilPCU.getTextBundle(jLabelProblem.getText()));
        jLabelObject.setText(GutilPCU.getTextBundle(jLabelObject.getText()));
        jLabelMaintain.setText(GutilPCU.getTextBundle(jLabelMaintain.getText()));
        jLabelAssess.setText(GutilPCU.getTextBundle(jLabelAssess.getText()));
        jLabelPlan.setText(GutilPCU.getTextBundle(jLabelPlan.getText()));
         */
        jLabelRemark.setText(GutilPCU.getTextBundle(jLabelRemark.getText()));
        jLabelNextDateVisitHome.setText(GutilPCU.getTextBundle(jLabelNextDateVisitHome.getText()));
        jLabelDateVisitHome.setText(GutilPCU.getTextBundle(jLabelDateVisitHome.getText()));
        
        /*jButton*/
        GutilPCU.setLanguage(jCheckBoxVisit);
        jButtonAdd.setText(GutilPCU.getTextBundle(jButtonAdd.getText()));
        jButtonDel.setText(GutilPCU.getTextBundle(jButtonDel.getText()));
        jButtonSave.setText(GutilPCU.getTextBundle(jButtonSave.getText()));
        jButtonAddVistalsign.setText(GutilPCU.getTextBundle(jButtonAdd.getText())); 
                
        /*TitledBorder*/
        GutilPCU.JPanelLabler(jPanelVisitHomeList);
        GutilPCU.JPanelLabler(jPanelVisitHomeDetail);
        //GutilPCU.JPanelLabler(jPanelRemark);
        
        //GutilPCU.JPanelLabler(jPanelVisitHomeDetail);
        GutilPCU.setGuiLang(jLabel1);
        GutilPCU.setGuiLang(jLabel2);
        GutilPCU.setGuiLang(jLabel3);
        GutilPCU.setGuiLang(jLabel5);
        GutilPCU.setGuiLang(jLabel6);
        GutilPCU.setGuiLang(jLabel7);
        GutilPCU.setGuiLang(jLabel8);
        GutilPCU.setGuiLang(jPanel1);
        GutilPCU.setGuiLang(jLabelWeight);
        GutilPCU.setGuiLang(jLabelWeightUnit);
        GutilPCU.setGuiLang(jLabelHeight);
        GutilPCU.setGuiLang(jLabelHeightUnit);
        GutilPCU.setGuiLang(jLabelPressure);
        GutilPCU.setGuiLang(jLabelTemp);
        GutilPCU.setGuiLang(jLabelPulse);
        GutilPCU.setGuiLang(jLabelRespiration);
        GutilPCU.setGuiLang(jLabelPulseUnit);
        GutilPCU.setGuiLang(jLabelResUnit);
        GutilPCU.setGuiLang(jLabelBMI);
        GutilPCU.setGuiLang(jLabelBMI1);
        GutilPCU.setGuiLang(jLabelNu);
        GutilPCU.setGuiLang(jLabel4);
        GutilPCU.setGuiLang(jLabelPresUnit);
        GutilPCU.setGuiLang(jLabelTempUnit);
        GutilPCU.setGuiLang(jPanel1);
    }
    
     /**
     * ตรวจสอบรายการ VitalSign
     * @param  v = VitalsignHomeVisit
     * @return int 1 = ไม่มีการใส่ข้อมูล
      * 2 = น้ำหนักไม่ถูกต้อง
      * 3 = ความสูงไม่ถูกต้อง
      * 4 = ความดันไม่ถูกต้อง
      * 5 = ความดันไม่ถูกต้อง
      * 6 = ความดันไม่ถูกต้อง
      * 7 = ความดันไม่ถูกต้อง
      * 8 = อัตราการหายใจไม่ถูกต้อง
      * 9 = อัตราการหายใจไม่ถูกต้อง
      * 10 = อูณหภูมิไม่ถูกต้อง
      * 11 = เวลาที่ตรวจไม่ถูกต้อง
     * @authur kingland
     * @date 10/08/2549
     */
    public int checkVitalSignVisitHome(VitalsignHomeVisit v)
    {
        int ret = 0;
        if(v != null)
        {
            if(v.weight.equals("")  && v.height.equals("")
            && v.pressure.equals("")&& v.puls.equals("")
            && v.res.equals("")     && v.temp.equals("")) 
            {
                theUS.setStatus("กรุณากรอกข้อมูลอย่างน้อย 1 รายการ",UpdateStatus.WARNING);
                ret = 1;
            }
            if(!v.weight.equals(""))
            {
                float weight = Float.parseFloat(v.weight);
                if(weight<0 || weight>200){
                    theUS.setStatus("น้ำหนักควรอยู่ในช่วง 0-200",UpdateStatus.WARNING);
                    ret = 2;
                }
            }
            if(!v.height.equals(""))
            {
                float height = Float.parseFloat(v.height);
                if(height<30 || height>250){
                    theUS.setStatus("ส่วนสูงควรอยู่ในช่วง 30-250",UpdateStatus.WARNING);
                    ret = 3;
                }
            }
            int index = v.pressure.indexOf('/');
            if(index!=-1)
            {
                String pres1 = v.pressure.substring(0,index);
                String pres2 = v.pressure.substring(index+1);
                if(pres1.equals("") || pres2.equals(""))
                {
                    theUS.setStatus("กรุณากรอกค่าความดันให้ครบถ้วน",UpdateStatus.WARNING);
                    ret = 4;
                }
                float pressure1 = Float.parseFloat(pres1);
                float pressure2 = Float.parseFloat(pres2);
                if(pressure1<0 || pressure1>260)
                {
                    theUS.setStatus("ความดันค่าแรกควรอยู่ในช่วง 0-260",UpdateStatus.WARNING);
                    ret = 5;
                }
                if(pressure2<0 || pressure2>160)
                {
                    theUS.setStatus("ความดันค่าหลังควรอยู่ในช่วง 0-160",UpdateStatus.WARNING);
                    ret = 6;
                }
                if(pressure1<pressure2)
                {
                    theUS.setStatus("ความดันค่าแรกต้องมากกว่าค่าความดันค่าหลัง",UpdateStatus.WARNING);
                    ret = 7;
                }
            }
            if(!v.puls.equals(""))
            {
                float puls = Float.parseFloat(v.puls);
                if(puls<0 || puls>200)
                {
                    theUS.setStatus("อัตราการเต้นของหัวใจควรอยู่ในช่วง 0-200",UpdateStatus.WARNING);
                    ret = 8;
                }
            }
            if(!v.res.equals(""))
            {
                float res = Float.parseFloat(v.res);
                if(res<0 || res>60)
                {
                    if(!theUS.confirmBox(Constant.getTextBundle("อัตราการหายใจควรอยู่ในช่วง 0-60 ค่าที่กรอกมีค่ามากกว่าค่าปกติ") +
                            " " +
                       Constant.getTextBundle("ยืนยันที่จะบันทึกใช่หรือไม่"),UpdateStatus.WARNING))
                    {
                        ret = 9;
                    }
                }
            }
            if(!v.temp.equals(""))
            {
                float temp = Float.parseFloat(v.temp); 
                if(temp<35 || temp>45){
                    theUS.setStatus("อุณหภูมิควรอยู่ในช่วง 35-45",UpdateStatus.WARNING);
                    ret = 10;
                }
            }

            //amp:05/04/2549
            if("".equals(v.check_date) || "".equals(v.check_time))
            {
                theUS.setStatus("ต้องระบุวันที่ตรวจ และเวลาที่ตรวจ",UpdateStatus.WARNING);
                ret = 11;
            }
            Date check_date = DateUtil.getDateFromText(v.check_date+","+v.check_time+",00");
            if(check_date!=null && check_date.after(new Date()))      
            {
                theUS.setStatus("วันและเวลาที่ตรวจ เป็นเวลาในอนาคตไม่ได้",UpdateStatus.WARNING);
                ret = 11;
            }  
        }
        ret = 0 ;
        int err = ret;
        boolean result = true;
         if(err == 1)
         {  result = false;
         }
         if(err == 2)
         {  jTextFieldWeight.requestFocus();
            result = false;
         }
         else if(err == 3)
         {    jTextFieldHeight.requestFocus();
              result = false;
         }
         else if(err == 4)
         {  jTextFieldPressure1.requestFocus();
            result = false;
         }
         else if(err == 5)
         {  jTextFieldPressure1.requestFocus();
            result = false;
         }
         else if(err == 6)
         { jTextFieldPressure2.requestFocus();
           result = false;
         }
         else if(err == 7)
         {  jTextFieldPressure1.requestFocus();
            result = false;
         }
         else if(err == 8)
         {  jTextFieldPulse.requestFocus();
            result = false;
         }
         else if(err == 9)
         {  jTextFieldRespiration.requestFocus();
            result = false;
         }
         else if(err == 10)
         {  jTextFieldTemp.requestFocus();        
            result = false;
         }
         else if(err == 11)
         {  dateComboBox.requestFocus();
            result = false;
         }
         return ret;
    }
     /*นำข้อมูลจาก GUI มา set ค่าให้ VitalSignVisitHome Object*/
    private VitalsignHomeVisit getVitalSign() 
    {
        //Object VitalsignHomeVisit 
        if(this.theVitalsignHomeVisit == null) 
            this.theVitalsignHomeVisit = new VitalsignHomeVisit();
        this.theVitalsignHomeVisit.height = jTextFieldHeight.getText();
        this.theVitalsignHomeVisit.weight = jTextFieldWeight.getText();
        if(!jTextFieldPressure1.getText().equals(initString) && !jTextFieldPressure2.getText().equals(initString))
        {
            this.theVitalsignHomeVisit.pressure = jTextFieldPressure1.getText()
                    .concat("/").concat(jTextFieldPressure2.getText()); 
        }
        this.theVitalsignHomeVisit.temp = jTextFieldTemp.getText();
        this.theVitalsignHomeVisit.puls = jTextFieldPulse.getText();
        this.theVitalsignHomeVisit.res = jTextFieldRespiration.getText();
        this.theVitalsignHomeVisit.bmi = doubleTextFieldBMI.getText();
        if(this.jComboBoxNutrition.isVisible())
            this.theVitalsignHomeVisit.nutrition = GutilPCU.getGuiData(jComboBoxNutrition);
        else
            this.theVitalsignHomeVisit.nutrition = initString;
        this.theVitalsignHomeVisit.check_date = dateComboBox.getText();
        this.theVitalsignHomeVisit.check_time = timeTextFieldCheck.getText();
//        this.theVitalsignHomeVisit.bmi = doubleTextFieldBMI.getText();
        if(this.theVitalsignHomeVisit.getObjectId() == null || this.theVitalsignHomeVisit.getObjectId().equals(""))
        {   this.theVitalsignHomeVisit.reporter = this.theEmployee.getObjectId();
            this.theVitalsignHomeVisit.record_date = theHosManage.theHosInf.getLookupControl().getTextCurrentDate();
            this.theVitalsignHomeVisit.record_time = theHosManage.theHosInf.getLookupControl().getTextCurrentTime();
        }
        else
        {   this.theVitalsignHomeVisit.staff_modify = this.theEmployee.getObjectId();    
            this.theVitalsignHomeVisit.modify_date_time = this.pcuobject.getCurrentDateTime();
        }
        return theVitalsignHomeVisit;
    }
    /*นำข้อมูลจาก GUI มา set ค่าให้ VisitHome Object*/
    private VisitHome getVisitHome() 
    {
        //Object VisitHome
        if(theVisitHome == null)
            theVisitHome = new VisitHome();
        this.theVisitHome.visit_home_problem = Gutil.CheckReservedWords(this.jTextFieldProblem.getText());
        this.theVisitHome.visit_home_object = Gutil.CheckReservedWords(this.jTextFieldObject.getText());
        this.theVisitHome.visit_home_maintain = Gutil.CheckReservedWords(this.jTextFieldMaintain.getText());
        this.theVisitHome.visit_home_assess = Gutil.CheckReservedWords(this.jTextFieldAssess.getText());
        this.theVisitHome.visit_home_plane = Gutil.CheckReservedWords(this.jTextFieldPlan.getText());
        this.theVisitHome.visit_home_date = this.dateComboBox.getText();
        this.theVisitHome.visit_home_nextdate = this.dateComboBoxNextDate.getText();
        this.theVisitHome.visit_home_remark = Gutil.CheckReservedWords(this.jTextAreaHomeVisitRemark.getText());
        
        this.theVisitHome.visit_home_active = "1";
        if(this.thePatient != null){
            this.theVisitHome.patient_id = thePatient.getObjectId();
            this.theVisitHome.family_id = thePatient.family_id;
        }
        else if(theFamily!=null)
        {
            this.theVisitHome.family_id = theFamily.getObjectId();
        }
        if(this.theVisitHome.getObjectId() != null ) {
            this.theVisitHome.visit_home_staff_modify = theEmployee.getObjectId();
            this.theVisitHome.visit_home_modify_time = Gutil.getTextCurrentDateTime(this.theAllComboBoxControl.theConnectionInf);
        } else {
            this.theVisitHome.visit_home_staff_record = theEmployee.getObjectId();
            this.theVisitHome.visit_home_record_time = com.hospital_os.utility.Gutil.getTextCurrentDateTime(this.theAllComboBoxControl.theConnectionInf);
        }
        theVisitHome.visit_home_modify_time = dateComboBoxCheck.getText()+","+timeTextFieldCheck.getText();
        return theVisitHome;
    }
    
    private void setVitalSign(VitalsignHomeVisit v)
    { 
        this.theVitalsignHomeVisit = v;
        if(theVitalsignHomeVisit == null)
        {
            theVitalsignHomeVisit = new VitalsignHomeVisit();
            timeTextFieldCheck.initCurrenttime();
        }
            jTextFieldPressure1.setText("");
            jTextFieldPressure2.setText("");
            jTextFieldHeight.setText(theVitalsignHomeVisit.height);
            jTextFieldWeight.setText(theVitalsignHomeVisit.weight);
            if(theVitalsignHomeVisit.pressure != null || theVitalsignHomeVisit.pressure.equals(""))
            {
                String pressure[] = theVitalsignHomeVisit.pressure.split("/");
                if(pressure.length > 1)
                {
                    jTextFieldPressure1.setText(pressure[0]); 
                    jTextFieldPressure2.setText(pressure[1]); 
                }
            }
            jTextFieldTemp.setText(theVitalsignHomeVisit.temp);
            jTextFieldPulse.setText(theVitalsignHomeVisit.puls);
            jTextFieldRespiration.setText(theVitalsignHomeVisit.res);
            doubleTextFieldBMI.setText(theVitalsignHomeVisit.bmi);
            timeTextFieldCheck.setText(theVitalsignHomeVisit.check_time);
            if(theVitalsignHomeVisit.nutrition != null && !theVitalsignHomeVisit.nutrition.equals(initString))
                ComboboxModel.setCodeComboBox(jComboBoxNutrition, theVitalsignHomeVisit.nutrition);
    }
   
    /*นำค่าจาก VisitHome Object มาแสดงผล*/
    public void setVisitHome(VisitHome vh)
    {
        this.theVisitHome = vh;
        if(theVisitHome == null)
        {
            theVisitHome = new VisitHome();
            jTextFieldProblem.requestFocus();
            vVitalsignHomeVisit = null;
            theVisitHome.visit_home_modify_time = this.pcuobject.getCurrentDateTime();
        }
        this.jTextFieldProblem.setText(theVisitHome.visit_home_problem);
        this.jTextFieldObject.setText(theVisitHome.visit_home_object);
        this.jTextFieldMaintain.setText(theVisitHome.visit_home_maintain);
        this.jTextFieldAssess.setText(theVisitHome.visit_home_assess);
        this.jTextFieldPlan.setText(theVisitHome.visit_home_plane);
        this.dateComboBox.setText(DateUtil.convertFieldDate(theVisitHome.visit_home_date));
        this.dateComboBoxNextDate.setText(DateUtil.convertFieldDate(theVisitHome.visit_home_nextdate));
        this.jTextAreaHomeVisitRemark.setText(theVisitHome.visit_home_remark);
        this.dateComboBoxCheck.setText(DateUtil.convertFieldDate(theVisitHome.visit_home_modify_time));
        this.timeTextFieldCheck.setText(theVisitHome.visit_home_modify_time.substring(11));
        this.vVitalsignHomeVisit = this.theExtraClinicServiceControl.listVitalsignHomeVisit(theVisitHome.getObjectId());
        
        setVitalSignV(vVitalsignHomeVisit);
    }
    
    /**
     * แสดงโภชนาการหรือไม่
     * @param  birthdate วันเกิดของผู้ป่วย รูปแบบ yyyy-mm-dd
     * @return void
     * @authur kingland
     * @date 10/08/2549
     */
    public void setVisitbleNutrition(String birthdate)
    {
        if(birthdate != null && birthdate.length() == 10)
        {
            String month = com.hospital_os.utility.DateUtil.countMonth(birthdate);
            int months = Integer.parseInt(month);
            if(months >= 0 && months < 73)
            {
                jComboBoxNutrition.setVisible(true);
                this.jLabelNu.setVisible(true);
            }
            else
            {
                jComboBoxNutrition.setVisible(false);
                jLabelNu.setVisible(false);
            }
        }
        else
        {
            jComboBoxNutrition.setVisible(false);
            jLabelNu.setVisible(false);
        }
    }
    /**
     *อับเดตตาราง VitalSign
     */
    public void setVitalSignV(Vector v)
    {
        TableModel tm;
        if(v == null || v.size() == 0)
        {
            tm= new TableModel(col_jTableVitalSign,0);
            jTableVitalSign.setModel(tm);  
            setVitalSign(null);            
            return;
        }
        tm = new TableModel(col_jTableVitalSign,v.size());
        String date;
        for(int i=0 ;i<v.size(); i++) 
        {  
            VitalsignHomeVisit vs = (VitalsignHomeVisit)v.get(i);
//            date = DateUtil.getDateToString(DateUtil.getDateFromText(vs.modify_date_time),false);
//            date = GutilPCU.changDateToString(vs.record_date),false);
            date = GutilPCU.changDateToString(vs.check_date,false);
            tm.setValueAt(date,i,0);
        }
        jTableVitalSign.setModel(tm); 
        //ระบบเลือก อัตโนมัติ
        int row = jTableVitalSign.getSelectedRow();
        if(row==-1 || row>=v.size())
            row = 0;
        if(row==-1)
        {
            setVitalSign(null);
        }
    }
    /**
     * @deprecated henbe bad pattern การตรวจสอบต้องอยู่ใน control หรือฟังชันบันทึกไม่ใช่อยู่ที่ event
     * บันทึกหรือแก้ไขข้อมูลการเยี่ยมบ้าน
     */
    public String saveVisitHome()
    {
        if(dateComboBoxCheck.getText().equals(""))
        {
            dateComboBoxCheck.requestFocus();
            theUS.setStatus("กรุณากรอกวันที่บันทึกข้อมูล", UpdateStatus.WARNING);
            return null;
        }
        boolean isFutureDate = theAllComboBoxControl.isFutureDate(pcuobject.getCurrentDateTime(),dateComboBoxCheck.getText());
        if(!isFutureDate)
        {
            theUS.setStatus("บันทึกเป็นวันที่ในอนาคตไม่ได้", UpdateStatus.WARNING);
            return null;
        }
        if(isEmptyVisitHome()){
            theUS.setStatus(GutilPCU.getTextBundle("EmptyVisitHome"),UpdateStatus.WARNING);
            return null;
        }
        String objectId = "";
        if(dateComboBox.getText().equals("")){
            theUS.setStatus(GutilPCU.getTextBundle("กรุณากรอกข้อมูลวันที่เยี่ยมบ้าน"),UpdateStatus.WARNING);
            return null;
        }
        if(!checkNextAppDate()){                
            theUS.setStatus(GutilPCU.getTextBundle("กรุณาตรวจสอบวันที่เยียมบ้านครั้งต่อไปอีกครั้ง"),UpdateStatus.WARNING);
            return null;
        }
        if(checkFormatDate()){
            theUS.setStatus(GutilPCU.getTextBundle("กรุณากรอกวันเกิดให้ถูกรูปแบบ วว/ดด/ปปปป"),UpdateStatus.WARNING);
            return null;
        }
        if(checkNextDate()){
            theUS.setStatus(GutilPCU.getTextBundle("กรุณาระบุวันที่เยี่ยมบ้านเป็นวันในอดีต"),UpdateStatus.WARNING);           
            return null;
        }
        if (pcuobject.getFamily() == null)
        {   
            theUS.setStatus("กรุณาเลือกประชากรหรือบันทึกข้อมูลประชากรก่อน",2);
            return null;
        }
        theVisitHome = getVisitHome();
        theVitalsignHomeVisit = getVitalSign();
        int vitalsignerr = checkVitalSignVisitHome(theVitalsignHomeVisit);            
        if(vitalsignerr != 0)
            return null;
        
        theExtraClinicServiceControl.saveVitalsignHomeVisit(theVisitHome,theVitalsignHomeVisit);
        //เพิ่ม code ใหม่สำหรับการกดบันทึกหรือการแก้ไขให้ selection ในตาราง
        if(theVisitHome.getObjectId() == null){
            return null;
        }
        int selectRow = this.jTableHomeVisitData.getSelectedRow();
        updateList();
        if(selectRow != -1)
        {
            try{
                jTableHomeVisitData.setRowSelectionInterval(selectRow,selectRow);
                setVisitHome((VisitHome)vVisitHome.get(selectRow));
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        /////////////////////////////////////////////////
        setEnabled(true);
        return null;
    }
     /**
     * ลบรายการ VitalSign
     * @param  -
     * @return void
     * @authur kingland
     * @date 11/08/2549
     */
    public void deleteVitalSignHomeVisit()
    {
        int select[] = jTableVitalSign.getSelectedRows();
        
        if(select.length > 0
        && theUS.confirmBox(GutilPCU.getTextBundle("คุณต้องการลบรายการ Vitalsign หรือไม่"),UpdateStatus.WARNING))
        {
            for(int i=0;i<select.length;i++)
            {
                VitalsignHomeVisit vitalsign = (VitalsignHomeVisit)vVitalsignHomeVisit.get(i);
                vitalsign.cancle_datetime = DateTime.getTextCurrentDateTime(theHosManage.theHosControl.theConnectionInf);
                vitalsign.staff_cancle = theHosManage.thePO.getEmployee().getObjectId();
            }
            int result = theHosManage.theHosControl.theExtraClinicServiceControl.deleteVitalSignVisitHome(vVitalsignHomeVisit, select);
            if(result != 0)
            {
                vVitalsignHomeVisit = theExtraClinicServiceControl.listVitalsignHomeVisit(theVisitHome.getObjectId());
                setVitalSignV(vVitalsignHomeVisit);
                theUS.setStatus("ลบรายการ VitalSign เสร็จสิ้น", UpdateStatus.COMPLETE);
            }
            
        }
        else
        {  
            if(select.length == 0)
                theUS.setStatus("กรุณาเลือกรายการ VitalSign", UpdateStatus.WARNING);
        }
    }
    /*ลบข้อมูลการเยี่ยมบ้าน (เปลี่ยนสถานะของ active)*/
    public void deleteVisitHome()
    {
        int row = jTableHomeVisitData.getSelectedRow();
        if(row == -1) {
            theUS.setStatus("กรุณาเลือกรายการที่ต้องการลบ",UpdateStatus.WARNING);
            return;
        }
        theVisitHome = (VisitHome)vVisitHome.get(row);
        this.theExtraClinicServiceControl.deleteVisitHome(theVisitHome);
        setVitalSign(null);
        setVitalSignV(null);
        setVisitHome(null);
        updateList();
    }
    
    
    
    /*Update ข้อมูลเยี่ยมบ้านใน Table ใหม่*/
    public void updateList()
    {
        Vector vv = theExtraClinicServiceControl.listVisitHome(jCheckBoxVisit.isSelected());
        setButtonBeforeAddValue();            
        setVisitHomeV(vv);
    }
    
    /*นำข้อมูลจาก VisitHome Object มาแสดงผลในตาราง*/
    private void setVisitHomeV(Vector vc) 
    {
        this.vVisitHome = vc;
        String[] col = { GutilPCU.getTextBundle("No."),GutilPCU.getTextBundle("HomeVisitDate")};
        TableModel tm ;
        if(vc != null) {
            tm= new TableModel(col,vc.size());
            VisitHome visitHome = new VisitHome();
            for(int i=0 ;i<vc.size(); i++) {
                visitHome = (VisitHome)vc.get(i);
                tm.setValueAt(String.valueOf((i+1)),i,0);
                tm.setValueAt(GutilPCU.changDateToString(visitHome.visit_home_date,false),i,1);
            }
//            System.out.println("* * * * have  value = "+vc.size());
        } else {
            tm= new TableModel(col,0);
//            System.out.println("* * * Emtry value");
            //ไม่มีข้อมูลการได้รับบริการของผู้ป่วยคนนี้ กำหนดให้ผู้ป่วยสามารถบันทึกได้ทันที
            promptSave();
        }
        jTableHomeVisitData.setModel(tm);
        if(rendererCenter == null){
            rendererCenter = new DefaultTableCellRenderer();
        }
        //กำหนดให้จัด Column ให้อยู่ตรงกลาง
        rendererCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        jTableHomeVisitData.getColumnModel().getColumn(0).setCellRenderer(rendererCenter);
        jTableHomeVisitData.getColumnModel().getColumn(1).setCellRenderer(rendererCenter);
        //กำหนดความกว้างของตาราง
        jTableHomeVisitData.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTableHomeVisitData.getColumnModel().getColumn(1).setPreferredWidth(150);
        setVisitHome(null);
    }
    
    private void promptSave(){
        if(theFamily != null && theFamily.getObjectId()!= null || thePatient != null && thePatient.getObjectId() != null){
            theVisitHome = new VisitHome();
            setVisitHome(null);
            setEnabled(true);
//            jButtonDel.setEnabled(false);
//            jButtonAdd.setEnabled(false);
        }
    }
    
    public void setPatient(Patient thePatient){
        this.thePatient = thePatient;
    }
    
    public void setEmployee(Employee theEmployee){
        this.theEmployee = theEmployee;
    }
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.pcu.utility.DateComboBox dateComboBox;
    private com.hospital_os.utility.DateComboBox dateComboBoxCheck;
    private com.pcu.utility.DateComboBox dateComboBoxNextDate;
    private com.hospital_os.gui.font.DefaultFont defaultFont1;
    private com.hospital_os.utility.DoubleTextField doubleTextFieldBMI;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddVistalsign;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxVisit;
    private javax.swing.JComboBox jComboBoxNutrition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBMI;
    private javax.swing.JLabel jLabelBMI1;
    private javax.swing.JLabel jLabelDateVisitHome;
    private javax.swing.JLabel jLabelHeight;
    private javax.swing.JLabel jLabelHeightUnit;
    private javax.swing.JLabel jLabelNextDateVisitHome;
    private javax.swing.JLabel jLabelNu;
    private javax.swing.JLabel jLabelPresUnit;
    private javax.swing.JLabel jLabelPressure;
    private javax.swing.JLabel jLabelPulse;
    private javax.swing.JLabel jLabelPulseUnit;
    private javax.swing.JLabel jLabelRemark;
    private javax.swing.JLabel jLabelResUnit;
    private javax.swing.JLabel jLabelRespiration;
    private javax.swing.JLabel jLabelTemp;
    private javax.swing.JLabel jLabelTempUnit;
    private javax.swing.JLabel jLabelWeight;
    private javax.swing.JLabel jLabelWeightUnit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelHomeVisitControl1;
    private javax.swing.JPanel jPanelOther;
    private javax.swing.JPanel jPanelVisitHomeDetail;
    private javax.swing.JPanel jPanelVisitHomeList;
    private javax.swing.JScrollPane jScrollPaneAssess;
    private javax.swing.JScrollPane jScrollPaneMaintain;
    private javax.swing.JScrollPane jScrollPaneObject;
    private javax.swing.JScrollPane jScrollPanePlan;
    private javax.swing.JScrollPane jScrollPaneProblem;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JScrollPane jScrollPaneVital;
    private javax.swing.JTable jTableHomeVisitData;
    private com.hosv3.gui.component.HJTableSort jTableVitalSign;
    private javax.swing.JTextField jTextAreaHomeVisitRemark;
    private javax.swing.JTextArea jTextFieldAssess;
    private com.hospital_os.utility.DoubleTextField jTextFieldHeight;
    private javax.swing.JTextArea jTextFieldMaintain;
    private javax.swing.JTextArea jTextFieldObject;
    private javax.swing.JTextArea jTextFieldPlan;
    private com.hospital_os.utility.DoubleTextField jTextFieldPressure1;
    private com.hospital_os.utility.DoubleTextField jTextFieldPressure2;
    private javax.swing.JTextArea jTextFieldProblem;
    private com.hospital_os.utility.DoubleTextField jTextFieldPulse;
    private com.hospital_os.utility.DoubleTextField jTextFieldRespiration;
    private com.hospital_os.utility.DoubleTextField jTextFieldTemp;
    private com.hospital_os.utility.DoubleTextField jTextFieldWeight;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck;
    private com.hospital_os.utility.TimeTextField timeTextFieldCheck1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setObject(Object obj) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getObject() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void refreshList() {
        this.setObject(pcuobject);
    }

    @Override
    public void selectList() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
}
