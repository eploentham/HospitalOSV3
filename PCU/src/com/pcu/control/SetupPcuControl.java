/* * SetupPcuControl.java * * Created on 14 มิถุนายน 2548, 14:56 น. */package com.pcu.control;import com.hospital_os.object.Active;import com.hospital_os.usecase.connection.ConnectionInf;import com.hosv3.control.HosControl;import com.hosv3.control.LookupControl;import java.util.*;import com.hospital_os.object.Item;import com.hosv3.utility.connection.UpdateStatus;import com.hospital_os.object.CategoryGroupItem;import com.hosv3.object.UseCase;import com.pcu.object.*;import com.pcu.utility.*;import com.pcu.subject.CommunityResourceSubject;import com.hosv3.utility.*;/** * * @author Administrator */public class SetupPcuControl{    ConnectionInf theConnectionInf;    HosDB thePcuDB;    UpdateStatus theUS;//show status on PCU Frame    UpdateStatus theHosUS; //show status on HospitalOS Frame;    int iresult ;    private Vector vVector;    private HospitalosControlInf theHCInf;    HosControl theHC;    LookupControl theLookupControl;    /** Creates a new instance of SetupPcuControl */    public SetupPcuControl()    {    }    public SetupPcuControl(ConnectionInf con,HosDB hdb,HosControl hc,UpdateStatus us)    {        theConnectionInf = con;        thePcuDB = hdb;        theHC =hc;        this.theLookupControl = theHC.theLookupControl;        theHosUS = hc.theUS;    }    /**     * @deprecated pu : จะยกเลิกการใช้ HospitalosControlInf     **/    public SetupPcuControl(ConnectionInf con,HosDB hdb,UpdateStatus us,HospitalosControlInf hcInf)    {        theConnectionInf = con;        thePcuDB = hdb;        theUS = us;        theHosUS = hcInf.getHosControl().theUS;        this.theLookupControl = hcInf.getHosControl().theLookupControl;        theHCInf = hcInf;    }    public void saveVillageLocation(VillageLocation villageLocation)    {        theConnectionInf.open();        try        {            if(villageLocation.getObjectId() == null)            {                thePcuDB.theVillageLocationDB.insert(villageLocation);            }            else            {                thePcuDB.theVillageLocationDB.update(villageLocation);            }            theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }    }    public Vector listVillageLocationByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theVillageLocationDB.listVillageLocationByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteVillageLocation(VillageLocation villageLocation)    {        theConnectionInf.open();        try        {            thePcuDB.theVillageLocationDB.delete(villageLocation);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveSchoolMaxClass(SchoolMaxClass schoolMaxClass)    {        theConnectionInf.open();        try        {            if(schoolMaxClass.getObjectId() == null)            {                thePcuDB.theSchoolMaxClassDB.insert(schoolMaxClass);            }            else            {                thePcuDB.theSchoolMaxClassDB.update(schoolMaxClass);            }            theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }    }    public Vector listSchoolMaxClassByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theSchoolMaxClassDB.listSchoolMaxClassByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteSchoolMaxClass(SchoolMaxClass schoolMaxClass)    {        theConnectionInf.open();        try        {            thePcuDB.theSchoolMaxClassDB.delete(schoolMaxClass);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveCompanyType(CompanyType companyType)    {        theConnectionInf.open();        try        {            if(companyType.getObjectId() == null)            {                thePcuDB.theCompanyTypeDB.insert(companyType);            }            else            {                thePcuDB.theCompanyTypeDB.update(companyType);            }                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listCompanyTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theCompanyTypeDB.listCompanyTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    /**     * การลบข้อมูลชนิดของบริษัท     * @param  vCompanyType = เวคเตอร์ของออปเจ็คCompany select = อาเรย์ของเรคคอร์ดที่ต้องการลบ     * @return int จำนวนเรคคอร์ดที่ลบ     * @author kingland     * @date 28-07-2549     */    public int deleteCompanyType(Vector vCompanyType,int[] select)    {        int result = 0;        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return result;        }        theConnectionInf.open();        try        {            for(int i=0;i<select.length;i++)            {                CompanyType comt = (CompanyType)vCompanyType.get(select[i]);                result += thePcuDB.theCompanyTypeDB.delete(comt);            }            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * การลบข้อมูลชนิดของบริษัท     * @param  CompanyType = เป็นข้อมูลที่ต้องการลบ     * @return int จำนวนเรคคอร์ดที่ลบ     * @author -     * @date -     */    public int deleteCompanyType(CompanyType companyType)    {        int result = 0;        theConnectionInf.open();        try        {            result = thePcuDB.theCompanyTypeDB.delete(companyType);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();            theConnectionInf.rollback();        }        finally        {            theConnectionInf.close();        }        return result;    }    public void saveWaterType(WaterType waterType)    {        theConnectionInf.open();        try        {            if(waterType.getObjectId() == null)            {                thePcuDB.theWaterTypeDB.insert(waterType);            }            else            {                thePcuDB.theWaterTypeDB.update(waterType);            }                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listWaterTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theWaterTypeDB.listWaterTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteWaterType(WaterType waterType)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theWaterTypeDB.delete(waterType);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    /****************************************PetType******************************************/    public void savePetType(PetType petType)    {        theConnectionInf.open();        try        {            if(petType.getObjectId() == null)            {                thePcuDB.thePetTypeDB.insert(petType);            }            else            {                thePcuDB.thePetTypeDB.update(petType);            }                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listPetTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.thePetTypeDB.listPetTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deletePetType(PetType petType)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.thePetTypeDB.delete(petType);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public CategoryGroupItem listCategoryGroupItemByPk(String pk)    {        CategoryGroupItem cg = new CategoryGroupItem();        theConnectionInf.open();        try        {            cg = thePcuDB.theCategoryGroupItemDB.selectByPK(pk);        }        catch(Exception ex)        {   ex.printStackTrace();        }        theConnectionInf.close();        return cg;    }    public Vector listItemByGroup(String itemname, String active)    {        Vector vc = new Vector();        theConnectionInf.open();        /*        try        {   vc = thePcuDB.theItemPCUDB.selectItemDrugAndSupply(itemname,active);        }*/        int sh = 2 ;        try        {            if(sh == 2)            {                vc = thePcuDB.theItemDB.selectByItemGroup("","%"+itemname+"%", "1");//                Vector categorygroup = thePcuDB.theCategoryGroupItemDB.selectByCategoryGroupCode("1");//                for(int i = 0 ;categorygroup !=null&& categorygroup.size() > i; i++)//                {//                    CategoryGroupItem cat = (CategoryGroupItem)categorygroup.get(i);//                    Vector tempp = thePcuDB.theItemDB.selectByItemGroup( cat.getObjectId(),"%"+itemname+"%", "1");//                    if(tempp != null)//                        for(int n=0;n<tempp.size();n++)//                            vc.add(tempp.get(n));//                }//                categorygroup = thePcuDB.theCategoryGroupItemDB.selectByCategoryGroupCode("4");//                for(int i = 0 ;categorygroup !=null&& categorygroup.size() > i; i++)//                {//                    CategoryGroupItem cat = (CategoryGroupItem)categorygroup.get(i);//                    Vector tempp = thePcuDB.theItemDB.selectByItemGroup( cat.getObjectId(),"%"+itemname+"%", "1");//                    if(tempp != null)//                        for(int n=0;n<tempp.size();n++)//                            vc.add(tempp.get(n));//                }            }        }        catch(Exception ex)        {   ex.printStackTrace();        }        theConnectionInf.close();        return vc;    }    public Item listItemByPk(String pk)    {        Item item = new Item();        theConnectionInf.open();        try        {   item = thePcuDB.theItemDB.selectByPK(pk);        }        catch(Exception ex)        {   ex.printStackTrace();        }        theConnectionInf.close();        return item;    }    //@deprecated pu:ยกเลิกการใช้    /**     * บอล เปิดใช้งาน    */    public Vector listEpiSetGroup(String pk,String active)    {        Vector vc = new Vector();        theConnectionInf.open();        try        {            if(pk.equals(""))            {                vc = thePcuDB.theEpiSetGroupDB.selectAll(active);            }            else            {                vc = thePcuDB.theEpiSetGroupDB.selectByCodeName(pk,active);            }        }        catch(Exception ex)        {    ex.printStackTrace();        }        theConnectionInf.close();        return vc;    }    /**     * @deprecated ball:ยกเลิกการใช้     * @param pk     * @return     */    public Vector listEpiSetGroup(String pk)    {        Vector vc = new Vector();        theConnectionInf.open();        try        {            if(pk.equals(""))            {                vc = thePcuDB.theEpiSetGroupDB.selectAll();            }            else            {                vc = thePcuDB.theEpiSetGroupDB.selectByCodeName(pk,"1");            }        }        catch(Exception ex)        {    ex.printStackTrace();        }        theConnectionInf.close();        return vc;    }    /**     *บันทึกกลุ่มวัคซีน     *@param theEpiSetGroup เป็น Object ของกลุ่มวัคซีน     *@modifier pu     *@date 18/09/08     *     */    public int saveEpiSetGroup(EpiSetGroup theEpiSetGroup)    {        Constant.println(UseCase.UCID_saveVaccineGroup);        String objectid =   null;        int result = 0;        if(theEpiSetGroup.other_description.equals(""))        {            theHosUS.setStatus("กรุณาระบุรหัสวัคซีน",UpdateStatus.WARNING);            return result;        }        if("".equals(theEpiSetGroup.description))        {            theHosUS.setStatus("กรุณาระบุชื่อชุดวัคซีน", UpdateStatus.WARNING);            return result;        }        theConnectionInf.open();        try        {            //pu:18/09/08 ถ้าเป็นการอัพเดตไม่ต้องเช๊คซ้ำ            if((theEpiSetGroup.getObjectId() == null || theEpiSetGroup.getObjectId().equals("")) && !isEqualEpiSetGroupName(theEpiSetGroup))            {                theHosUS.setStatus(GutilPCU.getTextBundle("SameEpiGroup"), UpdateStatus.WARNING);                return result;            }            if(theEpiSetGroup.getObjectId() != null && !theEpiSetGroup.getObjectId().equals(""))            {                result = thePcuDB.theEpiSetGroupDB.update(theEpiSetGroup);            }            else            {                result = thePcuDB.theEpiSetGroupDB.insert(theEpiSetGroup);            }                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);                if(theEpiSetGroup != null)                    objectid = theEpiSetGroup.getObjectId();                theHC.theSystemControl.setStatus(UseCase.TH_saveVaccineGroup,UpdateStatus.COMPLETE,null);                theHC.theSystemControl.saveLog(UseCase.UCID_saveVaccineGroup,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_saveVaccineGroup,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_saveVaccineGroup,objectid,ex,UpdateStatus.ERROR);        }        theConnectionInf.close();        return result;    }    /**     *ตรวจสอบชื่อชื่อกลุ่มวัคซีนซ้ำ     *@modifier pu     *@date 18/09/08     *     */    private boolean isEqualEpiSetGroupName(EpiSetGroup theEpiSetGroup) throws Exception    {        boolean same = true;        Vector v = new Vector();        v = thePcuDB.theEpiSetGroupDB.selectAll();        if(v != null && !v.isEmpty())        {            EpiSetGroup eg = new EpiSetGroup();            for(int i=0;i<v.size();i++)            {                eg = (EpiSetGroup)v.elementAt(i);                if(eg.description.trim().equalsIgnoreCase(theEpiSetGroup.description.trim()))                {                    same = false;                    break;                }            }        }        return same;    }    public int saveEpiDrugSet(Vector vEpiDrugSet)    {        int ans = 0;        theConnectionInf.open();        try        {            if(vEpiDrugSet == null)                return ans;            for(int i=0 ; i< vEpiDrugSet.size(); i++)            {                if( ((EpiSet)vEpiDrugSet.get(i)).getObjectId() == null  )                {                    thePcuDB.theEpiSetDB.insert((EpiSet)vEpiDrugSet.get(i));                }                else                {                    thePcuDB.theEpiSetDB.update((EpiSet)vEpiDrugSet.get(i));                }            }                    theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {   ex.printStackTrace();                    theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        theConnectionInf.close();        return ans;    }    /*     *     *@ บันทึกแบบ Object     **/    public int saveEpiset(EpiSet episet)    {   iresult = 0;        theConnectionInf.open();        try        {            if(episet != null)            {                iresult = this.thePcuDB.theEpiSetDB.insert(episet);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);                DoseEpiSet dds = listDoseEpiSet(episet);                if(dds != null)                {                    dds.epi_set_key_id = episet.getObjectId();                    saveDoseEpiSet(dds);                }            }        }        catch(Exception ex)        {                theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();        }        theConnectionInf.close();        return iresult;    }    public int saveDoseEpiSet(Vector vDoseEpiDrugSet)    {        int ans = 0;        theConnectionInf.open();        try        {            if(vDoseEpiDrugSet == null)                return ans;            for(int i=0 ; i< vDoseEpiDrugSet.size(); i++)            {                if(vDoseEpiDrugSet.get(i) == null)                    continue;                if( ((DoseEpiSet)vDoseEpiDrugSet.get(i)).getObjectId() == null  )                {                    thePcuDB.theDoseEpiSetDB.insert( (DoseEpiSet)vDoseEpiDrugSet.get(i) );                }                else                {                    thePcuDB.theDoseEpiSetDB.update( (DoseEpiSet)vDoseEpiDrugSet.get(i) );                }            }                    theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {                    theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);            ex.printStackTrace();        }        theConnectionInf.close();        return ans;    }    public int saveDoseEpiSet(DoseEpiSet des)    {     iresult = 0;          theConnectionInf.open();          try          {              if(des != null)              {                  if(des.getObjectId() == null)                  {                      iresult = this.thePcuDB.theDoseEpiSetDB.insert(des);                  }                  else                  {                      iresult = this.thePcuDB.theDoseEpiSetDB.update(des);                  }              }                      theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);          }          catch(Exception ex)          {              ex.printStackTrace();                      theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);          }          theConnectionInf.close();          return iresult;    }    /**     *pu:18/09/08     ***///     public int saveEpiSetGroup(EpiSetGroup drugSetGroup)//    {//        int ans =0;//        theConnectionInf.open();//        try//        {//            do//            {//            }while(thePcuDB.theEpiSetGroupDB.insert(drugSetGroup)  == 0 );//            theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);//        }//        catch(Exception ex)//        {    ex.printStackTrace();////        }//        theConnectionInf.close();//        return ans;//    }    public int deleteEpiSetGroup(EpiSetGroup drugsetgroup)    {        Constant.println(UseCase.UCID_deleteVaccineGroup);        String objectid =   null;        int ans = 0;        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return ans;        }        theConnectionInf.open();        try        {            thePcuDB.theEpiSetGroupDB.delete(drugsetgroup);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            if(drugsetgroup != null)                objectid = drugsetgroup.getObjectId();            theHC.theSystemControl.setStatus(UseCase.TH_deleteVaccineGroup,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteVaccineGroup,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_deleteVaccineGroup,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteVaccineGroup,objectid,ex,UpdateStatus.ERROR);        }        theConnectionInf.close();        return ans;    }    /**     *ลบรายการ item ออกจากกลุ่มวัคซีนทีละ record     */    public int deleteEpiSetReq(EpiSet drugset)    {        int ans = 0;        theConnectionInf.open();        try        {            thePcuDB.theEpiSetDB.delete(drugset);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {    ex.printStackTrace();            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        theConnectionInf.close();        return ans;    }    /**     *ลบรายการ item ออกจากกลุ่มวัคซีน ได้ครั้งละมากกว่า 1 record     *@parm vEpiSet เป็น Vector ที่เก็บรายการ Item ที่เป็นวัคซีน     *@param rows เป็น Array ของ Integer ที่เก็บ Index ของรายการ Item ที่ต้องการลบ     *@return int เป็น Integer ที่เก็บสถานะการลบ     *@Author Pu     *@date 01/09/2006     */    public int deleteEpiSetReq(Vector vEpiSet,int[] rows)    {        int ans = 0;        theConnectionInf.open();        try        {            EpiSet ds = new EpiSet();            DoseEpiSet dds = new DoseEpiSet();            int row[] = rows;            int size = row.length;            for(int i = size-1 ; i >= 0 ; i--)            {                ds  = (EpiSet)vEpiSet.get(row[i]);                thePcuDB.theEpiSetDB.delete(ds);                if(((EpiSet)vEpiSet.get(row[i])).dose_epi_set !=null)                {                    dds = ((EpiSet)vEpiSet.get(row[i])).dose_epi_set;                    thePcuDB.theDoseEpiSetDB.delete(dds);                }            }            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {    ex.printStackTrace();            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        theConnectionInf.close();        return ans;    }    public int deleteDoseEpiSet(DoseEpiSet doseEpiSet)    {        int ans = 0;        theConnectionInf.open();        try        {            thePcuDB.theDoseEpiSetDB.delete(doseEpiSet);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }        return ans;    }    public Vector listEpiSetByGroup(String pk)    {        theConnectionInf.open();        try{            return thePcuDB.theEpiSetDB.selectByGroup(pk);        }        catch(Exception ex)        {            ex.printStackTrace();            return new Vector();        }        finally        {            theConnectionInf.close();        }    }    public DoseEpiSet listDoseEpiSet(EpiSet ep)    {        DoseEpiSet dds = new DoseEpiSet() ;        theConnectionInf.open();        try{            dds = thePcuDB.theDoseEpiSetDB.selectByKeyEpiSet(ep.getObjectId());            if(dds==null)            {                final com.hospital_os.object.Drug drug = this.thePcuDB.theDrugDB.selectByItem(ep.item_code);                if(drug != null)                {                    dds = new DoseEpiSet();                    dds.description = drug.description;                    dds.frequency = drug.frequency;                    dds.instruction = drug.instruction;                    dds.item_code = drug.item_id;                    dds.day_time = drug.day_time;                    dds.dose = drug.dose;                    dds.printting = drug.printting;                    dds.qty = drug.qty;                    dds.usage_special = drug.usage_special;                    dds.use_uom = drug.use_uom;                    dds.caution = drug.caution;                    dds.purch_uom = drug.purch_uom;                    dds.usage_text = drug.usage_text;                }            }            return dds;        }        catch(Exception ex)        {   ex.printStackTrace();            return null;        }        finally{            theConnectionInf.close();        }    }    public void saveTempleType(TempleType templeType)    {        theConnectionInf.open();        try        {            if(templeType.getObjectId() == null)            {                thePcuDB.theTempleTypeDB.insert(templeType);            }            else            {                thePcuDB.theTempleTypeDB.update(templeType);            }                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listTempleTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theTempleTypeDB.listTempleTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteTempleType(TempleType templeType)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theTempleTypeDB.delete(templeType);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การลบข้อมูลผิดพลาด",UpdateStatus.ERROR);            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveTemplePersonel(TemplePersonel templePersonel)    {        theConnectionInf.open();        try        {            if(templePersonel.getObjectId() == null)            {                thePcuDB.theTemplePersonelDB.insert(templePersonel);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theTemplePersonelDB.update(templePersonel);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listTemplePersonelByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theTemplePersonelDB.listTemplePersonelByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteTemplePersonel(TemplePersonel templePersonel)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theTemplePersonelDB.delete(templePersonel);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveMarketType(MarketType marketType)    {        theConnectionInf.open();        try        {            if(marketType.getObjectId() == null)            {                thePcuDB.theMarketTypeDB.insert(marketType);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theMarketTypeDB.update(marketType);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listMarketTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theMarketTypeDB.listMarketTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteMarketType(MarketType marketType)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theMarketTypeDB.delete(marketType);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveMarketTypeLock(MarketTypeLock marketTypeLock)    {        theConnectionInf.open();        try        {            if(marketTypeLock.getObjectId() == null)            {                thePcuDB.theMarketTypeLockDB.insert(marketTypeLock);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theMarketTypeLockDB.update(marketTypeLock);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listMarketTypeLockByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theMarketTypeLockDB.listMarketTypeLockByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteMarketTypeLock(MarketTypeLock marketTypeLock)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theMarketTypeLockDB.delete(marketTypeLock);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveResource(CommunityResource resource)    {        theConnectionInf.open();        try        {            if(resource.getObjectId() == null)            {                thePcuDB.theCommunityResourceDB.insert(resource);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theCommunityResourceDB.update(resource);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public void saveResourceGui(CommunityResource resource,CommunityResourceSubject theCommunityResourceSubject)    {        theConnectionInf.open();        try        {            if(resource.getObjectId() == null)            {                String maxcode = thePcuDB.theCommunityResourceDB.selectMaxCode();                if(Integer.parseInt(maxcode.substring(0,1))==0 && Integer.parseInt(maxcode.substring(1,2))!=9)                    resource.number = "0"+String.valueOf(Integer.parseInt(maxcode)+1);                else                    resource.number = String.valueOf(Integer.parseInt(maxcode)+1);                thePcuDB.theCommunityResourceDB.insert(resource);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);                //theCommunityResourceSubject.notifyCommunityResource(resource.getObjectId());            }            else            {                thePcuDB.theCommunityResourceDB.update(resource);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }    }    public Vector listResourceByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theCommunityResourceDB.listResourceByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteResource(CommunityResource resource)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theCommunityResourceDB.delete(resource);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveAGRCode(AGRCode aGRCode)    {        theConnectionInf.open();        try        {            if(aGRCode.getObjectId() == null)            {                thePcuDB.theAGRCodeDB.insert(aGRCode);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theAGRCodeDB.update(aGRCode);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listAGRCodeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theAGRCodeDB.listAGRCodeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteAGRCode(AGRCode aGRCode)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theAGRCodeDB.delete(aGRCode);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    public void saveAGRType(AGRType aGRType)    {        theConnectionInf.open();        try        {            if(aGRType.getObjectId() == null)            {                thePcuDB.theAGRTypeDB.insert(aGRType);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theAGRTypeDB.update(aGRType);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listvAGRTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theAGRTypeDB.listvAGRTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteAGRType(AGRType aGRType)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theAGRTypeDB.delete(aGRType);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    /************************** SchoolClass ********************************/    public void saveSchoolClass(SchoolClass schoolClass)    {        theConnectionInf.open();        try        {            if(schoolClass.getObjectId() == null)            {                thePcuDB.theSchoolClassDB.insert(schoolClass);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theSchoolClassDB.update(schoolClass);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }    }    public Vector listSchoolClassByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theSchoolClassDB.listSchoolClassByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteSchoolClass(SchoolClass schoolClass)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theSchoolClassDB.delete(schoolClass);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    /*********************** end SchoolClass ********************************/    /************************** ServiceType ********************************/    public void saveServiceType(ServiceType schoolClass)    {        theConnectionInf.open();        try        {            if(schoolClass.getObjectId() == null)            {                thePcuDB.theServiceTypeDB.insert(schoolClass);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theServiceTypeDB.update(schoolClass);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }    }    public Vector listServiceTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theServiceTypeDB.listServiceTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteServiceType(ServiceType schoolClass)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theServiceTypeDB.delete(schoolClass);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    /*********************** end ServiceType ********************************/    /************************** CheckHealthYearActivity ********************************/    public void saveCheckHealthYearActivity(CheckHealthYearActivity schoolClass)    {        theConnectionInf.open();        try        {            if(schoolClass.getObjectId() == null)            {                thePcuDB.theCheckHealthYearActivityDB.insert(schoolClass);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theCheckHealthYearActivityDB.update(schoolClass);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }    }    public Vector listCheckHealthYearActivityByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theCheckHealthYearActivityDB.listCheckHealthYearActivityByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    public void deleteCheckHealthYearActivity(CheckHealthYearActivity schoolClass)    {        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return;        }        theConnectionInf.open();        try        {            thePcuDB.theCheckHealthYearActivityDB.delete(schoolClass);            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();    }    /*********************** end CheckHealthYearActivity ********************************/    /**     * ค้นหารายการโรค     * @param  คำค้น ,true = ค้นหารายการที่ Active false = ค้นหารายการที่ไม่  Active     * @return Vector ของ Object Disease     * @author kingland     * @date 22-02-2549     */    public Vector listDisease(String searchword,boolean active)    {        Vector v = null;        theConnectionInf.open();        try        {            if(searchword.equals(""))            {                if(active == true)                {                    v = thePcuDB.theDiseaseDB.selectAll();                }                else                {                    v = thePcuDB.theDiseaseDB.selectAllNotActive();                }            }            else            {                if(active == true)                {                    v = thePcuDB.theDiseaseDB.selectDiseaseByName(searchword);                }                else                {                    v = thePcuDB.theDiseaseDB.selectDiseaseNotActiveByName(searchword);                }            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return v;    }    /**     * บันทึกรายการโรค     * @param  object ของ Disease     * @return int จำข้อมูลที่ทำการเพิ่มหรือับเดต     * @author kingland     * @date 22-02-2549     */    public int saveDisease(Disease ds)    {        Constant.println(UseCase.UCID_saveSetupDisease);        String objectid =   null;        int result = 0;        if(ds == null)        {            theHosUS.setStatus("กรุณากดปุ่ม + เพื่อทำการใส่ข้อมูลใหม่", 2);            return result;        }        if(ds.number.equals(""))        {            theHosUS.setStatus("กรุณาใส่หมายเลขลำดับโรค", 2);            return result;        }        if(ds.diseaseName.equals(""))        {            theHosUS.setStatus("กรุณาใส่ชื่อโรค", 2);            return result;        }//        if(!ds.icdCode.equalsIgnoreCase(""))//        {//            ICD10 icd10 = theHosInf.listIcd10ById(ds.icdCode.toUpperCase());//            if(icd10 != null)//            {//                ds.icdCode = icd10.icd10_id;//            }//            else//            {//                theHosInf.setStatus("ไม่สามารถบันทึกรหัส ICD10 ได้เนื่องจากรหัสไม่ถูกต้อง", 2);//                ds.icdCode = "";//            }//        }        theConnectionInf.open();        try        {            if(ds.getObjectId() == null || ds.getObjectId().equals(""))            {                result = thePcuDB.theDiseaseDB.insert(ds);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                result = thePcuDB.theDiseaseDB.update(ds);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            if(ds != null)                objectid = ds.getObjectId();            theHC.theSystemControl.setStatus(UseCase.TH_saveSetupDisease,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_saveSetupDisease,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_saveSetupDisease,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_saveSetupDisease,objectid,ex,UpdateStatus.ERROR);            theHosUS.setStatus("การบันทึกข้อมูลผิดพลาด",UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ลบรายการโรค     * @param  object ของ Disease     * @return int จำข้อมูลที่ทำลบ     * @author henbe     * @date 22-02-2549     */    public int deleteDisease(Vector v,int[] select)    {        Constant.println(UseCase.UCID_deleteSetupDisease);        String objectid =   null;        Vector vDisease = null;        Disease ds = null;        int result = 0;        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return result;        }        if(v == null)        {            theHosUS.setStatus("ไม่มีรายการโรค ไม่สามารถลบได้", 2);            return result;        }        if (!theHosUS.confirmBox(GutilPCU.getTextBundle("Delete_Disease"),UpdateStatus.WARNING))        {            return result;        }        theConnectionInf.open();        try        {            for(int i=select.length-1;i>=0;i--)            {                ds = (Disease)v.get(select[i]);                //ตรวจสอบว่ามีการนำข้อมูลโรคนี้ไปใช้งานแล้วหรือยัง                Vector un = thePcuDB.theUncontagiousDB.selectByDiseaseID(ds.getObjectId());                if(un.isEmpty())                {                    result = result + thePcuDB.theDiseaseDB.delete(ds);                    v.remove(select[i]);                }            }            if(result==0)                theHosUS.setStatus("การลบข้อมูลโรคไม่สำเร็จ อาจมีการบันทึกโรคดังกล่าวในการใช้งานปกติแล้ว"                        ,UpdateStatus.WARNING);            else                theHosUS.setStatus("การลบข้อมูลโรคเสร็จสิ้น",UpdateStatus.COMPLETE);            theHC.theSystemControl.setStatus(UseCase.TH_deleteSetupDisease,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteSetupDisease,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_deleteSetupDisease,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteSetupDisease,objectid,ex,UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ตรวจสอบว่ามีรหัสซ้ำกันหรือไม่     * @param -     * @return boolean true = ซ้ำ false = ไม่ซ้ำ     * @author kingland     * @date 26-07-2549     */    public boolean checkMaimNumber(String maimtypenumber)    {        boolean result = false;        theConnectionInf.open();        try        {            Vector vMaimType = thePcuDB.theMaimTypeDB.selectMaimTypeNumber(maimtypenumber);            if(vMaimType != null && vMaimType.size() == 1)            {                MaimType mt = (MaimType)vMaimType.get(0);                if(mt.maim_number.equals(maimtypenumber))                {                    result = true;                }            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * บันทึกรายการความพิการ     * @param  object ของ MaimType     * @return int     * @author jao     * @date 22-02-2549     */    public int saveMaimType(MaimType maimType)    {        Constant.println(UseCase.UCID_saveMaim);        String objectid =   null;        int result  = 0;        if(maimType == null)        {            theHosUS.setStatus("กรุณากดปุ่ม + เพื่อทำการใส่ข้อมูลใหม่", 3);            return result;        }        if(maimType.maim_number.equals(""))        {            theHosUS.setStatus("กรุณาใส่หมายเลขลำดับความพิการ", 3);            return result;        }        if(maimType.description.equals(""))        {            theHosUS.setStatus("กรุณาใส่ชื่อประเภทความพิการ", 3);            return result;        }        theConnectionInf.open();        try        {            if(maimType.getObjectId() == null)            {                thePcuDB.theMaimTypeDB.insert(maimType);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theMaimTypeDB.update(maimType);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            if(maimType != null)                objectid = maimType.getObjectId();            theHC.theSystemControl.setStatus(UseCase.TH_saveMaim,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_saveMaim,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            theHC.theSystemControl.setStatus(UseCase.TH_saveMaim,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_saveMaim,objectid,ex,UpdateStatus.ERROR);            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ค้นหารายการความพิการ     * @param  String search , String active     * @return     * @author jao     * @date 23-02-2549     */    public Vector listMaimTypeByNameOrNumberAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theMaimTypeDB.listMaimTypeByNameOrNumberAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    /**     * ลบรายการความพิการ     * @param  Vector , array int     * @return int     * @author jao     * @date 23-02-2549     */    public int deleteMaimType(Vector v,int[] select)    {        Constant.println(UseCase.UCID_deleteMaim);        String objectid =   null;        int result = 0;        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return result;        }        MaimType mm = null;        if(v == null)        {            theHosUS.setStatus("ไม่มีรายการประเภทความพิการ ไม่สามารถลบได้", 2);            return result;        }        theConnectionInf.open();        try        {            for(int i=select.length-1;i>=0;i--)            {                mm = (MaimType)v.get(select[i]);                result = result + thePcuDB.theMaimTypeDB.delete(mm);                v.remove(select[i]);            }            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            theHC.theSystemControl.setStatus(UseCase.TH_deleteMaim,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteMaim,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_deleteMaim,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteMaim,objectid,ex,UpdateStatus.ERROR);            theConnectionInf.rollback();        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ค้นหารายการโรคที่ติดต่อและไม่ติดต่อ     * @param  true = โรคติดต่อ   false = โรคไม่ติดต่อ     * @return Vector ของ Object Disease     * @author kingland     * @date 24-02-2549     */    public Vector listDisease(boolean isDiseaseContagious)    {        Vector v = null;        theConnectionInf.open();        try        {            v = thePcuDB.theDiseaseDB.selectDisease(isDiseaseContagious);        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return v;    }    /**     * ค้นหารายการโรคโดยใช้ Primary Key     * @param  รหัสPK     * @return Object Disease     * @author kingland     * @date 24-02-2549     */    public Disease readDiseasebyPK(String pk)    {        Disease ds = null;        theConnectionInf.open();        try        {            if(!"".equals(pk))            {                ds = thePcuDB.theDiseaseDB.selectByPK(pk);            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return ds;    }    /**     * ค้นหารายการสำรวจ     * @param  คำค้น ,true = ค้นหารายการที่ Active false = ค้นหารายการที่ไม่  Active     * @return Vector ของ Object AgeSurvey     * @author kingland     * @date 22-02-2549     */    public Vector listAgeSurvey(String searchword,boolean active)    {        Vector v = null;        theConnectionInf.open();        try        {            if(searchword.equals(""))            {                if(active == true)                {                    v = thePcuDB.theAgeSurveyDB.selectAll();                }                else                {                    v = thePcuDB.theAgeSurveyDB.selectAllNotActive();                }            }            else            {                if(active == true)                {                    v = thePcuDB.theAgeSurveyDB.selectByName(searchword);                }                else                {                    v = thePcuDB.theAgeSurveyDB.selectNotActiveByName(searchword);                }            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return v;    }    /**     * บันทึกรายสำรวจตามช่วงอายุ     * @param  object ของ AgeSurvey     * @return int จำข้อมูลที่ทำการเพิ่มหรือับเดต     * @author kingland     * @date 07-03-2549     */    public int saveAgeSurvey(Vector vAgeSurvey,AgeSurvey as)    {        Constant.println(UseCase.UCID_saveSetupAgeSurvay);        String objectid =   null;//        Constant.println("+++++++++++++saveAgeSurvey+++++++++++++++");        int result = 0;        if(as == null)        {            theHosUS.setStatus("กรุณากดปุ่ม + เพื่อทำการใส่ข้อมูลใหม่", 3);            return result;        }        for(int i=0;i<vAgeSurvey.size();i++)        {//            Constant.println("+++++++++++++FOR+++++++++++++++");            AgeSurvey temp = (AgeSurvey)vAgeSurvey.get(i);            if(temp != null && temp.survey_id.equals(as.survey_id) && !temp.getObjectId().equals(as.getObjectId()))            {//                Constant.println("+++++++++++++CHECK+++++++++++++++");                int tStart = Integer.parseInt(temp.survey_start);                int tEnd = 200;                int start = Integer.parseInt(as.survey_start);                int end = 200;                if(!temp.survey_end.equals(""))                {                    tEnd = Integer.parseInt(temp.survey_end);                }                else if(temp.survey_is_lifetime.equals("1"))                {                    tEnd = 200;                }                if(!as.survey_end.equals(""))                {                    end = Integer.parseInt(as.survey_end);                }                else if(as.survey_is_lifetime.equals("1"))                {                    end = 200;                }//                Constant.println("+++++++++++++tStart+++++++++++++++ "+tStart);//                Constant.println("+++++++++++++tEnd+++++++++++++++++"+tEnd);//                Constant.println("+++++++++++++start++++++++++++++++ "+start);//                Constant.println("+++++++++++++end+++++++++++++++ "+end);                if(start <= tStart && tEnd <= end)                {//                    Constant.println("++++++1+++++++");                    theHosUS.setStatus("รายการสำรวจตามช่วงอายุมีช่วงเวลาที่ช้อนกัน", 2);                    return 0;                }                else if((start <= tStart && tStart <= end) && (tStart <= end && end < tEnd))                {//                    Constant.println("++++++2+++++++");                    theHosUS.setStatus("รายการสำรวจตามช่วงอายุมีช่วงเวลาที่ช้อนกัน", 2);                    return 0;                }                else if((tStart <= start && start <= tEnd) && (start <= tEnd && tEnd <= end))                {//                    Constant.println("++++++3+++++++");                    theHosUS.setStatus("รายการสำรวจตามช่วงอายุมีช่วงเวลาที่ช้อนกัน", 2);                    return 0;                }                else if(tStart <= start && end <= tEnd)                {//                    Constant.println("++++++4+++++++");                    theHosUS.setStatus("รายการสำรวจตามช่วงอายุมีช่วงเวลาที่ช้อนกัน", 2);                    return 0;                }            }        }//        if(ds.number.equals(""))//        {//            theHosInf.setStatus("กรุณาใส่หมายเลขลำดับโรค", 3);//            return result;//        }//        if(ds.diseaseName.equals(""))//        {//            theHosInf.setStatus("กรุณาใส่ชื่อโรค", 3);//            return result;//        }//        if(!ds.icdCode.equalsIgnoreCase(""))//        {//            ICD10 icd10 = theHosInf.listIcd10ById(ds.icdCode.toUpperCase());//            if(icd10 != null)//            {//                ds.icdCode = icd10.icd10_id;//            }//            else//            {//                theHosInf.setStatus("ไม่สามารถบันทึกรหัส ICD10 ได้เนื่องจากรหัสไม่ถูกต้อง", 2);//                ds.icdCode = "";//            }//        }        theConnectionInf.open();        try        {            if(as.getObjectId() == null || as.getObjectId().equals(""))            {                result = thePcuDB.theAgeSurveyDB.insert(as);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);                if(result == 1)                {                    vAgeSurvey.add(as);                }            }            else            {                result = thePcuDB.theAgeSurveyDB.update(as);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            if(as != null)                objectid = as.getObjectId();            theHC.theSystemControl.setStatus(UseCase.TH_saveSetupAgeSurvay,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_saveSetupAgeSurvay,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_saveSetupAgeSurvay,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_saveSetupAgeSurvay,objectid,ex,UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * อ่านข้อมูลสำรวจ โดยใช้PK     * @param     * @return object ของ AgeSurvey     * @author kingland     * @date 07-03-2549     */    public AgeSurvey readAgeSurveyByPk(String pk)    {        AgeSurvey result = null;        theConnectionInf.open();        try        {            if(pk != null || "".equals(pk))            {                result = this.thePcuDB.theAgeSurveyDB.selectByPk(pk);            }        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ลบรายการสำรวจ     * @param  object ของ Disease     * @return int จำข้อมูลที่ทำลบ     * @author kingland     * @date 22-02-2549     */    public int deleteAgeSurvey(Vector v,int[] select)    {        Constant.println(UseCase.UCID_deleteSetupAgeSurvey);        String objectid =   null;        AgeSurvey as = null;        int result = 0;        if(v == null)        {            theHosUS.setStatus("ไม่มีรายการสำรวจ ไม่สามารถลบได้", 2);            return result;        }        theConnectionInf.open();        try        {            for(int i=select.length-1;i>=0;i--)            {                as = (AgeSurvey)v.get(select[i]);                //amp:26/5/2549 จะได้เป็น pattern ที่เหมือนกันกับ panel อื่น                //result = result + thePcuDB.theAgeSurveyDB.update(as);                result = result + thePcuDB.theAgeSurveyDB.delete(as);                v.remove(select[i]);            }            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            theHC.theSystemControl.setStatus(UseCase.TH_deleteSetupAgeSurvey,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteSetupAgeSurvey,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_deleteSetupAgeSurvey,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteSetupAgeSurvey,objectid,ex,UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ค้นหารายชื่อแบบสอบถาม     * @param  String search , String active     * @return     * @author jao     * @date 09-03-2549     */    public Vector listSurveyByNameAndActive(String search,String active)    {        vVector = new Vector();        theConnectionInf.open();        try        {            vVector = thePcuDB.theSurveyDB.listSurveyByNameAndActive(search,active);        }        catch(Exception ex)        {            ex.printStackTrace();            theConnectionInf.rollback();        }        theConnectionInf.close();        return vVector;    }    /**     * บันทึกรายชื่อแบบสำรวจ     * @param  object ของ Survey     * @return int     * @author jao     * @date 09-03-2549     */    public int saveSurvay(Survey survay)    {        Constant.println(UseCase.UCID_saveSetupSurvey);        String objectid =   null;        int result  = 0;        if(survay == null)        {            theHosUS.setStatus("กรุณากดปุ่ม + เพื่อทำการใส่ข้อมูลใหม่", 2);            return result;        }        if(survay.survey_description.equals(""))        {            theHosUS.setStatus("กรุณาใส่ชื่อแบบสำรวจ", 2);            return result;        }        theConnectionInf.open();        try        {            if(survay.getObjectId() == null)            {                thePcuDB.theSurveyDB.insert(survay);                theHosUS.setStatus("การบันทึกข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            else            {                thePcuDB.theSurveyDB.update(survay);                theHosUS.setStatus("การแก้ไขข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            }            result = 1;            if(survay != null)                objectid = survay.getObjectId();            theHC.theSystemControl.setStatus(UseCase.TH_saveSetupSurvey,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_saveSetupSurvey,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_saveSetupSurvey,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_saveSetupSurvey,objectid,ex,UpdateStatus.ERROR);        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ลบรายการแบบสำรวจ     * @param  Vector , array int     * @return int     * @author jao     * @date 09-03-2549     */    public int deleteSurvey(Vector v,int[] select)    {        Constant.println(UseCase.UCID_deleteSetupSurvey);        String objectid =   null;        int result = 0;        if(theLookupControl.readOption().life.equals(Active.isEnable()))        {            theHosUS.setStatus(Constant.getTextBundle("ระบบเริ่มใช้งานจริงแล้ว") + " "+                    Constant.getTextBundle("ไม่สามารถลบข้อมูลได้"),UpdateStatus.WARNING);            return result;        }        Survey mm = null;        if(v == null)        {            theHosUS.setStatus("ไม่มีรายการแบบสำรวจ ไม่สามารถลบได้", 2);            return result;        }        theConnectionInf.open();        try        {            for(int i=select.length-1;i>=0;i--)            {                mm = (Survey)v.get(select[i]);                result = result + thePcuDB.theSurveyDB.delete(mm);                v.remove(select[i]);            }            theHosUS.setStatus("การลบข้อมูลเสร็จสิ้น",UpdateStatus.COMPLETE);            theHC.theSystemControl.setStatus(UseCase.TH_deleteSetupSurvey,UpdateStatus.COMPLETE,null);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteSetupSurvey,objectid,null,UpdateStatus.COMPLETE);        }        catch(Exception ex)        {            ex.printStackTrace();            theHC.theSystemControl.setStatus(UseCase.TH_deleteSetupSurvey,UpdateStatus.ERROR,ex);            theHC.theSystemControl.saveLog(UseCase.UCID_deleteSetupSurvey,objectid,ex,UpdateStatus.ERROR);            theConnectionInf.rollback();        }        finally        {            theConnectionInf.close();        }        return result;    }    /**     * ลบรายการแบบสำรวจ     * @param  str = ข้อความที่ต้องการ status = สถานะของข้อความ     * @return void     * @author kingland     * @date 26/072549     */    public void setStatus(String str ,int status)    {        str = Constant.getTextBundle(str);        theHosUS.setStatus(str, status);    }}