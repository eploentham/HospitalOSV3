/*
 * PanelSetupAntibiotic.java
 *
 * Created on 22 ตุลาคม 2548, 11:09 น.
 */

package com.setupreport.gui.panel;
import com.setupreport.utility.ComboFix;
import com.setupreport.utility.ComboboxModel;
import java.util.Vector;
import javax.swing.*;
import com.setupreport.manage.HosManage;
import com.setupreport.utility.TableModelGUI;
import com.setupreport.object.PlanGroupMapPtType;
import com.setupreport.object.PlanGroup;
import com.setupreport.utility.Language;
import com.setupreport.usecase.connection.ManageGUI;
/**
 *
 * @author  tong(Padungrat)
 */
public class PanelSetupMapPlanPtType extends javax.swing.JPanel implements 
ManageGUI{
    final String panelname = "MapPlanPtType";
    HosManage theHosManage;
    int language =1;
    ComboFix theComboFix;
    PlanGroupMapPtType thePlanGroupMapPtType, thePlanGroupMapPtTypeTemp;
    PlanGroup thePlanGroup;
    Vector vPlanGroupMapPtType,vPlanGroup;
    String[] colName;
    TableModelGUI theTableModelGUI;
    
    public PanelSetupMapPlanPtType(HosManage hosManage) {
        this.theHosManage = hosManage;
        initComponents();
        
        setLanguage();
        Language.getTextBundle(panelname, language);
        initComboBox();
        showDataToTable(null);
        searchDataAndShowDataToTable(); // ojika 28 Feb 2007
    }
    
    
    private void initComboBox()
    {
        
        vPlanGroup = theHosManage.theHosControl.thePlanGroupControl.selectPlanGroupShowComboBox();
        if(vPlanGroup == null)
        {
            vPlanGroup = new Vector();
            vPlanGroup.add(theComboFix);
        }
        //jComboBoxPlanGroup
        ComboboxModel.initComboBox(jComboBoxPlanGroup, vPlanGroup);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelTop = new javax.swing.JPanel();
        jLabelSetupName = new javax.swing.JLabel();
        jPanelLeft = new javax.swing.JPanel();
        jPanelSearch = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanelShowList = new javax.swing.JPanel();
        jScrollPaneShowList = new javax.swing.JScrollPane();
        jTableShowList = new javax.swing.JTable();
        jPanelRight = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelPTType = new javax.swing.JLabel();
        jTextFieldPTType = new javax.swing.JTextField();
        jLabelPlanGroup = new javax.swing.JLabel();
        jComboBoxPlanGroup = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabelSetupName.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabelSetupName.setText("MapPlanPtType");
        jPanelTop.add(jLabelSetupName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanelTop, gridBagConstraints);

        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        jPanelLeft.setMinimumSize(new java.awt.Dimension(200, 53));
        jPanelLeft.setPreferredSize(new java.awt.Dimension(200, 433));
        jPanelSearch.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setText("Search");
        jPanelSearch.add(jLabelSearch, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSearch.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelSearch.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelLeft.add(jPanelSearch, gridBagConstraints);

        jPanelShowList.setLayout(new java.awt.GridBagLayout());

        jTableShowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableShowList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowListMouseReleased(evt);
            }
        });

        jScrollPaneShowList.setViewportView(jTableShowList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowList.add(jScrollPaneShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanelLeft.add(jPanelShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(jPanelLeft, gridBagConstraints);

        jPanelRight.setLayout(new java.awt.GridBagLayout());

        jPanelRight.setMinimumSize(new java.awt.Dimension(350, 24));
        jPanelRight.setPreferredSize(new java.awt.Dimension(350, 24));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelPTType.setText("PTType");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabelPTType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(jTextFieldPTType, gridBagConstraints);

        jLabelPlanGroup.setText("Plan_Group");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabelPlanGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 5);
        jPanel1.add(jComboBoxPlanGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelRight.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        jPanel2.add(jButtonAdd, gridBagConstraints);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 5, 0);
        jPanel2.add(jButtonDelete, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSave.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSave.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel2.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelRight.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(jPanelRight, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveData();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int confirm_del = JOptionPane.showConfirmDialog(this,Language.getTextBundle("confirm_del_effect_report", language),Language.getTextBundle("confirm_del", language),JOptionPane.YES_NO_OPTION);
        
        if(confirm_del == 0)
        {
            deleteData();
        }
        
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        addData();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableShowListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableShowListMouseReleased
        selectShowData(jTableShowList.getSelectedRow());
    }//GEN-LAST:event_jTableShowListMouseReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchDataAndShowDataToTable();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    
    /**ใช้ในการลบข้อมูลของกลุ่มย่อนของรายการ ARIC*/
    public void deleteData()
    {
        //ลบข้อมูลออก
        deleteDataToDB();
        //clear GUI
        //clear Object
        addData();
        searchDataAndShowDataToTable();
    }
    
    /**ใช้ในการลบข้อมูลออกจาฐานข้อมูล*/
    private void deleteDataToDB()
    {
        if(thePlanGroupMapPtType != null)
        {
            this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.deletePlanGroupMapPtType(thePlanGroupMapPtType);
        }
    }
    /**ใช้ในการเพิ่มข้อมูลของกลุ่มย่อยของรายการ ARIC*/
    public void addData()
    {
        //clear GUI
        clearGUI();
        //clear Object
        clearObject();
        setFocusPlanGroupMapPtType();
        
    }
    
    /**
     *  ใช้ในการบันทึกข้อมูล
     */
    public void saveData()
    {
        if(setGUIToDataObject())
        {
            if(checkDataSameInDB())
            {
                saveDataToDB();
                searchDataAndShowDataToTable();
                setSelectDataInTable();
            }
            else
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("SameGroupIDAndPtType", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
            }
        }
    }
    /**
     *  ใช้ในการตรวจสอบว่า code และ คำอธิบาย ซ้ำกันกับที่มีอยู่ในฐานข้อมูลหรือไม่ ถ้าเกิดการซ้ำกัน
     *  จะให้ค่าเป็น false ถ้าไม่ซ้ำกันจะให้ค่าเป็น true
     *  @return boolean ถ้าเป็น true จะไม่ซ้ำกัน ถ้าเป็น false จำซ้ำกัน
     */
    private boolean checkDataSameInDB()
    {
        boolean result = true;
        if(thePlanGroupMapPtType != null)
        {   //ตรวจสอบว่าเป็น Object ใหม่หรือไม่
            if(thePlanGroupMapPtType.getObjectId() == null)
            {
                 //เป็น Object ใหม่
                //ให้ตรวจสอบ รหัสของplangroup และ PtType ว่ามีอยู่ในฐานข้อมูลแล้วหรือยัง
                    //ถ้ามีแล้วกำหนดให้เป็น false
                result = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.checkSamePlanGroupPtType(thePlanGroupMapPtType.mapptypename,""); 
                
            }
            else
            {   //เป็น Object เก่า
              /*  if(vPlanGroupMapPtType != null)
                {
                    int size = this.vPlanGroupMapPtType.size();
                    for(int  i=0; i< size;i++)
                    {
                        thePlanGroupMapPtTypeTemp = (PlanGroupMapPtType)vPlanGroupMapPtType.get(i);
                        if(thePlanGroupMapPtTypeTemp.getObjectId().equalsIgnoreCase(thePlanGroupMapPtType.getObjectId()))
                        {    //ตรวจสอบว่ามีการเปลี่ยนแปลง code หรือไม่
                            if(!thePlanGroupMapPtTypeTemp.plangroupid.toUpperCase().equalsIgnoreCase(thePlanGroupMapPtType.plangroupid.trim().toUpperCase()))
                            {
               */
                                // เปลี่ยนแปลง
                               result = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.checkSamePlanGroupPtType(thePlanGroupMapPtType.mapptypename, thePlanGroupMapPtType.getObjectId());
                                
                                //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                                // ถ้าซ้ำกันให้ เป็น false
                                // ไม่เปลี่ยนแปลง
                  /*              //จบการทำงาน
                            }
                        }
                        thePlanGroupMapPtTypeTemp = null;
                    }
                }*/
            }
            
            if(!result)
            {
                //javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameCode", language));
                setFocusPlanGroupMapPtType();
            }
          //  else
          //  {
                
                    /*if(thePlanGroupMapPtType.getObjectId() == null)
                    {
                        // เป็น Object ใหม่
                        // ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                        result = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.checkSamePlanGroupPtType(thePlanGroupMapPtType.mapptypename);
                        // ถ้าซ้ำกันให้ เป็น false
                        // ไม่ซ้ำกัน จบการทำงาน
                     
                    }
                    else
                    {
                        // เป็น Object เก่า
                        int size = this.vPlanGroupMapPtType.size();
                        for(int i = 0 ; i < size ; i++)
                        {
                            thePlanGroupMapPtTypeTemp = (PlanGroupMapPtType)vPlanGroupMapPtType.get(i);
                            if(thePlanGroupMapPtTypeTemp.getObjectId().equalsIgnoreCase(thePlanGroupMapPtType.getObjectId()))
                            {    //ตรวจสอบว่ามีการเปลี่ยนแปลง คำอธิบาย หรือไม่
                                if(!thePlanGroupMapPtTypeTemp.mapptypename.toUpperCase().equalsIgnoreCase(thePlanGroupMapPtType.mapptypename.trim().toUpperCase()))
                                {
                                    // เปลี่ยนแปลง
                                    result = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.checkSamePlanGroupPtType(thePlanGroupMapPtType.mapptypename);
                     
                     
                                    //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                                    // ถ้าซ้ำกันให้ เป็น false
                                    // ไม่เปลี่ยนแปลง
                                    //จบการทำงาน
                                }
                            }
                            thePlanGroupMapPtTypeTemp = null;
                        }
                    }
                    if(!result)
                    {
                        javax.swing.JOptionPane.showMessageDialog(this,"SameDescription");
                        setFocusPlanGroupMapPtType();
                    }
                    /*int row = jTableShowList.getSelectedRow();
                    thePlanGroupMapPtTypeTemp = (PlanGroupMapPtType)vPlanGroupMapPtType.get(row);
                    String plangroup = ComboboxModel.getCodeComboBox(jComboBoxPlanGroup);
                    String pttype = this.jTextFieldPTType.getText().trim();
                    if(thePlanGroupMapPtTypeTemp.getObjectId().equalsIgnoreCase(thePlanGroupMapPtType.getObjectId()))
                    {
                        //ให้ตรวจสอบ กับ Object เดิมว่ามีการเปลียนแปลงของ plangroup และ PtType หรือไม่
                        //ถ้าเปลี่ยนอย่างใดอย่างหนึ่งให้ตรวจสอบ รหัสของplangroup และ PtType ว่ามีอยู่ในฐานข้อมูลแล้วหรือยัง
                        if(!thePlanGroupMapPtTypeTemp.mapptypename.toUpperCase().equalsIgnoreCase(pttype.toUpperCase())
                        || !thePlanGroupMapPtTypeTemp.plangroupid.equalsIgnoreCase(plangroup)
                        )
                        {
                            //ถ้ามีแล้วกำหนดให้เป็น false
                            result = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.checkSamePlanGroupIDAndPtType(thePlanGroupMapPtType.plangroupid,thePlanGroupMapPtType.mapptypename);
                     
                        }
                    }
                     */
                    /*
                    int size = vPlanGroupMapPtType.size();
                    for(int i = 0 ; i < size ; i++)
                    {
                        thePlanGroupMapPtTypeTemp = (PlanGroupMapPtType)vPlanGroupMapPtType.get(i);
                        if(thePlanGroupMapPtTypeTemp.getObjectId().equalsIgnoreCase(thePlanGroupMapPtType.getObjectId()))
                        {   System.out.println(thePlanGroupMapPtTypeTemp.getObjectId() + " Same ID " + thePlanGroupMapPtType.getObjectId());
                            System.out.println(thePlanGroupMapPtTypeTemp.mapptypename + " " + thePlanGroupMapPtType.mapptypename + " : "+ thePlanGroupMapPtTypeTemp.mapptypename.toUpperCase().equalsIgnoreCase(thePlanGroupMapPtType.mapptypename.toUpperCase()));
                            System.out.println(thePlanGroupMapPtTypeTemp.plangroupid.equalsIgnoreCase(thePlanGroupMapPtType.plangroupid));
                            //ให้ตรวจสอบ กับ Object เดิมว่ามีการเปลียนแปลงของ plangroup และ PtType หรือไม่
                            //ถ้าเปลี่ยนอย่างใดอย่างหนึ่งให้ตรวจสอบ รหัสของplangroup และ PtType ว่ามีอยู่ในฐานข้อมูลแล้วหรือยัง
                            if(!thePlanGroupMapPtTypeTemp.mapptypename.toUpperCase().equalsIgnoreCase(thePlanGroupMapPtType.mapptypename.toUpperCase())
                                || !thePlanGroupMapPtTypeTemp.plangroupid.equalsIgnoreCase(thePlanGroupMapPtType.plangroupid)
                            )
                            {
                                //ถ้ามีแล้วกำหนดให้เป็น false
                                result = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.checkSamePlanGroupIDAndPtType(thePlanGroupMapPtType.plangroupid,thePlanGroupMapPtType.mapptypename);
                     
                            }
                        }
                     thePlanGroupMapPtTypeTemp =null;
                    }
                    thePlanGroupMapPtTypeTemp = null;
                     */
      //      }
      //  }
    }
    else
    {
        result = false;
    }
    
    
    return result;
    
}
/**ใช้ในการเลือกข้อมูลในตาราง*/
public void setSelectDataInTable()
{
    int row = -1;
    jTableShowList.clearSelection();
    if(vPlanGroupMapPtType !=null)
    {
        int size = vPlanGroupMapPtType.size();
        for(int i =0; i < size;i++)
        {
            thePlanGroupMapPtTypeTemp = (PlanGroupMapPtType)vPlanGroupMapPtType.get(i);
            if(thePlanGroupMapPtTypeTemp.getObjectId().equalsIgnoreCase(thePlanGroupMapPtType.getObjectId()))
            {
                row = i ;
                break;
            }
        }
    }
    thePlanGroupMapPtTypeTemp = null;
    if(row >-1)
    {
        jTableShowList.setRowSelectionInterval(row,row);
        selectShowData(row);
    }
    
}

/**บันทึกลงฐานข้อมูล*/
private void saveDataToDB()
{
    this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.savePlanGroupMapPtType(thePlanGroupMapPtType);
}
/**ใช้ในการ Clear ข้อมูลที่อยู่บน GUI*/
private void clearGUI()
{
    jTableShowList.clearSelection();
    jTextFieldPTType.setText("");
}
/**ใช้ในการ Clear ค่าที่ Object ที่ต้องการเป็นอยู่ให้เป็น null หรือเป็น ช่องว่าง หรือเป็น 0*/
private void clearObject()
{
    thePlanGroupMapPtType = null;
}

/**ใช้ในการ กำหนดให้ปุ่ม บวก, ลบ และบันทึก สามารถทำงานได้หรือไม่*/
private void setEnableButton()
{
}

/**ใช้ในการกำหนดผลที่เลือกบนตาราง และต้องการจะให้แสดงบน GUI*/
public void selectShowData(int row)
{
    if(row > -1)
    {
        if(vPlanGroupMapPtType != null)
        {
            thePlanGroupMapPtType = (PlanGroupMapPtType)vPlanGroupMapPtType.get(row);
            
            setDataObjectToGUI();
        }
    }
}
private void setDataObjectToGUI()
{
    if(thePlanGroupMapPtType != null)
    {
        
        jTextFieldPTType.setText(thePlanGroupMapPtType.mapptypename);
        ComboboxModel.setCodeComboBox(jComboBoxPlanGroup, thePlanGroupMapPtType.plangroupid);
    }
    else
    {
        clearGUI();
    }
}
/**ใช้ในการรับข้อมูลจาก GUI ลง Object*/
private boolean setGUIToDataObject()
{
    boolean result = true;
    if(thePlanGroupMapPtType == null)
    {
        thePlanGroupMapPtType = new PlanGroupMapPtType();
    }
    
    thePlanGroupMapPtType.mapptypename = jTextFieldPTType.getText().trim();
    thePlanGroupMapPtType.plangroupid = ComboboxModel.getCodeComboBox(jComboBoxPlanGroup);
    
    if(thePlanGroupMapPtType.mapptypename.length() == 0 )
    {
        JOptionPane.showMessageDialog(this,Language.getTextBundle("MapPtTypeNotNULL", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
        setFocusPlanGroupMapPtType();
        result = false;
    }
    
    return result ;
}

/**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
private void setFocusPlanGroupMapPtType()
{
    jTextFieldPTType.requestFocus();
}

/**
 *  ใช้ในการค้นหาข้อมูล และทำการแสดงข้อมูลลงบนตารางที่กำหนด
 */
public void searchDataAndShowDataToTable()
{
    vPlanGroupMapPtType = searchData();
    showDataToTable(vPlanGroupMapPtType);
}
/**
 * ใช้ในการ search ข้อมูลตามข้อมูลที่กำหนด
 * @return เป็น Vector ของ Object ที่กำหนด
 */
private Vector searchData()
{
    String search = this.jTextFieldSearch.getText();
    search = search.trim();
    vPlanGroupMapPtType = this.theHosManage.theHosControl.thePlanGroupMapPtTypeControl.selectPlanGroupMapPtTypeByCodeOrDescription(search);
    return vPlanGroupMapPtType;
}

/**
 * ใช้ในการ แสดงข้อมูลการค้นหาลงบนตารางที่กำหนด
 * @param vc เป็น Vector ของข้อมูลที่ทำการส่งมาให้และต้องการกำหนดให้แสดงบนตาราง
 */
private void showDataToTable(Vector vc)
{
    theTableModelGUI = new TableModelGUI(colName, 0);
    if(vc != null)
    {
        int size = vc.size();
        theTableModelGUI = new TableModelGUI(colName, size);
        thePlanGroupMapPtTypeTemp = null;
        for(int i = 0 ; i < size ;i++)
        {
            thePlanGroupMapPtTypeTemp = (PlanGroupMapPtType)vc.get(i);
            theTableModelGUI.setValueAt(thePlanGroupMapPtTypeTemp.mapptypename,i, 0);
            theTableModelGUI.setValueAt(getPlanGroup(thePlanGroupMapPtTypeTemp.plangroupid),i, 1);
            
            thePlanGroupMapPtTypeTemp = null;
        }
        
    }
    
    jTableShowList.setModel(theTableModelGUI);
    jTableShowList.getColumnModel().getColumn(0).setPreferredWidth(25);
    jTableShowList.getColumnModel().getColumn(1).setPreferredWidth(100);
}

private String getPlanGroup(String plangroupid)
{   String planname = plangroupid;
    if(this.vPlanGroup != null)
    {
        
        planname = ComboboxModel.getDescriptionComboBox(jComboBoxPlanGroup, plangroupid);
        
    }
    return planname;
}
/**
 *  ใช้ในการกำหนดภาษาให้กับ GUI
 */
private void setLanguage()
{
    colName = new String[] {Language.getTextBundle("Code",language),Language.getTextBundle("Plan_Group",language)};
    theComboFix = new ComboFix();
    theComboFix.code = "000";
    theComboFix.name = Language.getTextBundle("NoSpec",language);
    
    jButtonAdd.setText(Language.getTextBundle(jButtonAdd.getText(),language));
    jButtonDelete.setText(Language.getTextBundle(jButtonDelete.getText(),language));
    jButtonSave.setText(Language.getTextBundle(jButtonSave.getText(),language));
    jButtonSearch.setText(Language.getTextBundle(jButtonSearch.getText(),language));
    jLabelPlanGroup.setText(Language.getTextBundle(jLabelPlanGroup.getText(),language));
    
    jLabelPTType.setText(Language.getTextBundle(jLabelPTType.getText(),language));
    jLabelSearch.setText(Language.getTextBundle(jLabelSearch.getText(),language));
    jLabelSetupName.setText(Language.getTextBundle(jLabelSetupName.getText(),language));
}

public String getPanelName()
{
    return panelname;
}

public void setEnableButtonSetupPanel(boolean enabled)
{
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox jComboBoxPlanGroup;
    private javax.swing.JLabel jLabelPTType;
    private javax.swing.JLabel jLabelPlanGroup;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSetupName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelShowList;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JScrollPane jScrollPaneShowList;
    private javax.swing.JTable jTableShowList;
    private javax.swing.JTextField jTextFieldPTType;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
    
}
