/*
 * PanelSetupEyeDisease.java
 *
 * Created on 26 ตุลาคม 2548, 11:41 น.
 */

package com.setupreport.gui.panel;
import java.util.Vector;
import com.setupreport.manage.HosManage;
import com.setupreport.utility.TableModelGUI;
import com.setupreport.object.*;
import com.setupreport.utility.Language;
import com.setupreport.usecase.connection.ManageGUI;
import javax.swing.JOptionPane;

/**
 *
 * @author  americus
 */
public class PanelSetupEyeDisease extends javax.swing.JPanel implements 
ManageGUI
{
    final String panelname = "EyeDisease";
    HosManage theHosManage;
    Vector vEyeGroup;
    Vector vEyeDiseaseCode; 
    EyeGroup theEyeGroup,theEyeGroupTemp;
    EyeDiseaseCode theEyeDiseaseCode,theEyeDiseaseCodeTemp;
    TableModelGUI theTableModelGUI;
    String[] colName1;
    String[] colName2;
    ICD10 theICD10;
    Object Objectcd10;
    int selectInTableDiseaseCode = -1;
    int language = 1;
    int flag1 = 0;
    String active = "0";
    
    /** Creates new form PanelSetupEyeDisease */
    public PanelSetupEyeDisease(HosManage hosManage)
    {
        this.theHosManage = hosManage;
        initComponents();
        setEnableDiseaseCode(false);
        setLaguage();
        showDataToTable(null);
        showEyeDiseaseToTable(null);
        Language.getTextBundle(panelname, language);
        colName1 = new String[] {Language.getTextBundle("Code", language),Language.getTextBundle("Description", language)};
        colName2 = new String[] {Language.getTextBundle("Begin_Code", language),Language.getTextBundle("End_Code", language)};
        setTitleBorder("");
        initDataActive();
        searchDataAndShowDataToTable(); //ojika 28 Feb 2007
    }
    
    private void initDataActive()
    {
        if(jCheckBoxActive.isSelected())
        {
            active = "1";
        }
        else
        {
            active = "0";
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelTop = new javax.swing.JPanel();
        jLabelSetupName = new javax.swing.JLabel();
        jPanelLeft = new javax.swing.JPanel();
        jPanelSearch = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanelShowList = new javax.swing.JPanel();
        jScrollPaneShowList = new javax.swing.JScrollPane();
        jTableShowList = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxActive = new javax.swing.JCheckBox();
        jPanelRight = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelCode = new javax.swing.JLabel();
        jLabelDescThai = new javax.swing.JLabel();
        jLabelDescEng = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldDesc_th = new javax.swing.JTextField();
        jTextFieldDesc_eng = new javax.swing.JTextField();
        jCheckBoxActive2 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEyeDisease = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabelBeginCode = new javax.swing.JLabel();
        jLabelEndCode = new javax.swing.JLabel();
        jTextFieldBegin_Code = new javax.swing.JTextField();
        jTextFieldEnd_Code = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jButtonAdd1 = new javax.swing.JButton();
        jButtonDelete1 = new javax.swing.JButton();
        jButtonSave1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabelSetupName.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabelSetupName.setText("EyeDisease");
        jPanelTop.add(jLabelSetupName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanelTop, gridBagConstraints);

        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        jPanelLeft.setMinimumSize(new java.awt.Dimension(200, 53));
        jPanelLeft.setPreferredSize(new java.awt.Dimension(200, 433));
        jPanelSearch.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setText("Search");
        jPanelSearch.add(jLabelSearch, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSearch.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelSearch.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelLeft.add(jPanelSearch, gridBagConstraints);

        jPanelShowList.setLayout(new java.awt.GridBagLayout());

        jTableShowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableShowList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowListMouseReleased(evt);
            }
        });

        jScrollPaneShowList.setViewportView(jTableShowList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowList.add(jScrollPaneShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanelLeft.add(jPanelShowList, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jCheckBoxActive.setSelected(true);
        jCheckBoxActive.setText("Active");
        jCheckBoxActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActiveActionPerformed(evt);
            }
        });

        jPanel3.add(jCheckBoxActive, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanelLeft.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(jPanelLeft, gridBagConstraints);

        jPanelRight.setLayout(new java.awt.GridBagLayout());

        jPanelRight.setMinimumSize(new java.awt.Dimension(350, 24));
        jPanelRight.setPreferredSize(new java.awt.Dimension(350, 24));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(271, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(271, 100));
        jLabelCode.setText("Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabelCode, gridBagConstraints);

        jLabelDescThai.setText("Desc_th");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel1.add(jLabelDescThai, gridBagConstraints);

        jLabelDescEng.setText("Desc_Eng");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabelDescEng, gridBagConstraints);

        jTextFieldCode.setMinimumSize(new java.awt.Dimension(200, 21));
        jTextFieldCode.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(jTextFieldCode, gridBagConstraints);

        jTextFieldDesc_th.setMinimumSize(new java.awt.Dimension(200, 21));
        jTextFieldDesc_th.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(jTextFieldDesc_th, gridBagConstraints);

        jTextFieldDesc_eng.setMinimumSize(new java.awt.Dimension(200, 21));
        jTextFieldDesc_eng.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(jTextFieldDesc_eng, gridBagConstraints);

        jCheckBoxActive2.setSelected(true);
        jCheckBoxActive2.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jCheckBoxActive2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanelRight.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jButtonAdd, gridBagConstraints);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButtonDelete, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSave.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSave.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 4);
        jPanelRight.add(jPanel2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jTableEyeDisease.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableEyeDisease.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableEyeDiseaseMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTableEyeDisease);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel7.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel7, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabelBeginCode.setText("Begin_Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jLabelBeginCode, gridBagConstraints);

        jLabelEndCode.setText("End_Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel6.add(jLabelEndCode, gridBagConstraints);

        jTextFieldBegin_Code.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldBegin_Code.setPreferredSize(new java.awt.Dimension(100, 21));
        jTextFieldBegin_Code.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldBegin_CodeFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel6.add(jTextFieldBegin_Code, gridBagConstraints);

        jTextFieldEnd_Code.setMinimumSize(new java.awt.Dimension(100, 21));
        jTextFieldEnd_Code.setPreferredSize(new java.awt.Dimension(100, 21));
        jTextFieldEnd_Code.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldEnd_CodeFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 3);
        jPanel6.add(jTextFieldEnd_Code, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jButtonAdd1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd1.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd1.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd1.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdd1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel8.add(jButtonAdd1, gridBagConstraints);

        jButtonDelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete1.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete1.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelete1.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelete1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel8.add(jButtonDelete1, gridBagConstraints);

        jButtonSave1.setText("Save");
        jButtonSave1.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSave1.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSave1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSave1ActionPerformed(evt);
            }
        });
        jButtonSave1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonSave1FocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel8.add(jButtonSave1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel4.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 4);
        jPanelRight.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(jPanelRight, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxActiveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBoxActiveActionPerformed
    {//GEN-HEADEREND:event_jCheckBoxActiveActionPerformed
        if(!jCheckBoxActive.isSelected())
        {            
            jCheckBoxActive.setSelected(false);
            active = "0";
            System.out.println("--Active false------"+ active);
        }
        else
        {
            jCheckBoxActive.setSelected(true);
            active = "1";
            System.out.println("--Active true------"+ active);
        }
    }//GEN-LAST:event_jCheckBoxActiveActionPerformed

    private void jButtonSave1FocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jButtonSave1FocusGained
    {//GEN-HEADEREND:event_jButtonSave1FocusGained
        this.flag1 = 1;
    }//GEN-LAST:event_jButtonSave1FocusGained

    private void jTextFieldEnd_CodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jTextFieldEnd_CodeFocusLost
    {//GEN-HEADEREND:event_jTextFieldEnd_CodeFocusLost
       // this.flag1 = 0;
      //  checkICD10EndCode();
    }//GEN-LAST:event_jTextFieldEnd_CodeFocusLost

    private void jTextFieldBegin_CodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jTextFieldBegin_CodeFocusLost
    {//GEN-HEADEREND:event_jTextFieldBegin_CodeFocusLost
     //   this.flag1 = 0;
      //  checkICD10BeginCode();
    }//GEN-LAST:event_jTextFieldBegin_CodeFocusLost

    private void jTableEyeDiseaseMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTableEyeDiseaseMouseReleased
    {//GEN-HEADEREND:event_jTableEyeDiseaseMouseReleased
        this.flag1 = 0;
        selectShowDataEyeDisease(jTableEyeDisease.getSelectedRow());
    }//GEN-LAST:event_jTableEyeDiseaseMouseReleased

    private void jButtonSave1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSave1ActionPerformed
    {//GEN-HEADEREND:event_jButtonSave1ActionPerformed
        saveEyeDisease();
    }//GEN-LAST:event_jButtonSave1ActionPerformed

    private void jButtonDelete1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDelete1ActionPerformed
    {//GEN-HEADEREND:event_jButtonDelete1ActionPerformed
        int confirm_del = JOptionPane.showConfirmDialog(this,Language.getTextBundle("confirm_del_effect_report", language),Language.getTextBundle("confirm_del", language),JOptionPane.YES_NO_OPTION);
        
        if(confirm_del == 0)
        {
            deleteDataEyeDisease();
        }
        
    }//GEN-LAST:event_jButtonDelete1ActionPerformed

    private void jButtonAdd1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAdd1ActionPerformed
    {//GEN-HEADEREND:event_jButtonAdd1ActionPerformed
        this.flag1 = 0;
        addDataEyeDiseaseCode();
    }//GEN-LAST:event_jButtonAdd1ActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveActionPerformed
        saveData();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDeleteActionPerformed
    {//GEN-HEADEREND:event_jButtonDeleteActionPerformed
        int confirm_del = JOptionPane.showConfirmDialog(this,Language.getTextBundle("confirm_del_effect_report", language),Language.getTextBundle("confirm_del", language),JOptionPane.YES_NO_OPTION);
        
        if(confirm_del == 0)
        {
            this.flag1 = 0;
            deleteData();
        }
        
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddActionPerformed
    {//GEN-HEADEREND:event_jButtonAddActionPerformed
        this.flag1 = 0;
        addData();        
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableShowListMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jTableShowListMouseReleased
    {//GEN-HEADEREND:event_jTableShowListMouseReleased
        this.flag1 = 0;
        clearObjectEyeDiseaseCode();
        selectShowData(jTableShowList.getSelectedRow());
        //setEnableGUI(true);
    }//GEN-LAST:event_jTableShowListMouseReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSearchActionPerformed
    {//GEN-HEADEREND:event_jButtonSearchActionPerformed
        searchDataAndShowDataToTable();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    private void saveEyeDisease()
    {
       /* if(jTextFieldBegin_Code.getText().equals("") || jTextFieldEnd_Code.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("SaveEyeDiseaseWarning", language),Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
            return;
        }
        else
        {
            checkIcd10();
           // SaveDataEyeDisease();
        }
        **/
        if(setGUIToICD10Object())
        {
            System.out.println("----------------TEST CHECK SAME ---------------------");
            if(searchBeginCode())
            {
                if(searchEndCode())
                {
                    System.out.println("----------------TEST NOT SAME ---------------------");
                    saveEyeDiseaseToDB();
                    searchEyeDiseaseAndShowDataToTable();
                }
                else
                {
                    checkICD10EndCode();
                }
            }
            else
            {
                if(checkICD10BeginCode())
                {
                    
                }
                             
            }
        }
    }
    
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
   /* private void checkIcd10()
    {
        if(searchEndCode())
        {
            SaveDataEyeDisease();
        }
        else if(!searchEndCode())
        {
            int confirm = 0;
            confirm = JOptionPane.showConfirmDialog(this,Language.getTextBundle("End_Warning", language),Language.getTextBundle("Confirm", language),JOptionPane.YES_NO_OPTION);
            System.out.println("----confirm "+ confirm);
            if(confirm == 0)
            {
                this.jTextFieldEnd_Code.setText("");
                this.jTextFieldEnd_Code.requestFocus();
            }
            else
            {
                SaveDataEyeDisease();
            }
        }
    }
    **/
    
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    private boolean checkICD10BeginCode()
    {
            boolean pass = true;
            String icd10 = this.jTextFieldBegin_Code.getText();
            int confirm = 0;
            confirm = JOptionPane.showConfirmDialog(this,Language.getTextBundle("Begin_Warning", language),Language.getTextBundle("Confirm", language),JOptionPane.YES_NO_OPTION);
            System.out.println("--Begin--confirm "+ confirm);
            if(confirm == 0)
            {
                this.jTextFieldBegin_Code.setText("");
                this.jTextFieldBegin_Code.requestFocus();
                pass = false;
            }
            else
            {
                this.jTextFieldEnd_Code.requestFocus();
                pass = true;                
            }
        return pass;
    }
    
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    private boolean checkICD10EndCode()
    {
        boolean pass = true;
        String icd10 = this.jTextFieldEnd_Code.getText();
    /*    if(this.flag1 ==1)//กดปุ่ม save
        {
            //checkIcd10();
            System.out.println("--flag1 "+ flag1);
            saveEyeDisease();
        }
        else
        {
     **/
                int confirm = 0;
                confirm = JOptionPane.showConfirmDialog(this,Language.getTextBundle("End_Warning", language),Language.getTextBundle("Confirm", language),JOptionPane.YES_NO_OPTION);
                System.out.println("--End--confirm "+ confirm);
                if(confirm == 0)
                {
                    this.jTextFieldEnd_Code.setText("");
                    this.jTextFieldEnd_Code.requestFocus();
                    pass = false;
                }
                else
                {
                    saveEyeDiseaseToDB();
                    searchEyeDiseaseAndShowDataToTable();
                    pass = true;
                }
                
                return pass;
       // }
    }
    
    public void addDataEyeDiseaseCode()
    {
        clearGUIEyeDiseaseCode();
        clearObjectEyeDiseaseCode();
        jTextFieldBegin_Code.requestFocus();
    }
    
    /**เคลียร์ข้อมูล เพื่อเตรียมการสร้างข้อมูลใหม่*/
    public void addData()
    {
        clearGUI();
        clearObject();
        clearDiseaseCode(false);
        setEnableGUI(true);
        setFocusEyeGroupCode();
        this.jCheckBoxActive2.setSelected(true);
    }
    
    /**ใช้ในการรับข้อมูลจาก GUI ลง Object และจะทำการตรวจสอบข้อมูลที่เก็บอยู่ว่ามีค่าเป็นช่องว่างหรือไม่
     * ถ้าเป็นช่องว่างจะให้ค่าเป็น false ถ้าไม่ว่าจะให้ค่าเป็น true
     *  @return boolean เป็น true จะมีค่า false ไม่มีค่า
     */
    public void saveData()
    {
        if(setGUIToDataObject())
        {
            System.out.println("----------------TEST CHECK SAME ---------------------");
            if(checkDataSameInDB())
            {
                System.out.println("----------------TEST NOT SAME ---------------------");
                saveDataToDB();
                searchDataAndShowDataToTable();
                setSelectInTableEyeGroup();
            }
        }
    }
    
    /**
     *  ใช้ในการบันทึกข้อมูลรหัสโรคตา
     */
   /* public void SaveDataEyeDisease()
    {
        if(setGUIToEyeDiseaseObject())
        {
            saveEyeDiseaseToDB();
        }
        //setGUIToEyeDiseaseObject();
    
        searchEyeDiseaseAndShowDataToTable();
    }
    */
    
    /*
     *ใช้ในการลบข้อมูล
     */
    public void deleteData()
    {
        deleteDataEyeDiseaseFromDB(theEyeGroup);
        clearDiseaseCode(false);
        
        deleteDataToDB();
        searchDataAndShowDataToTable();
        addData();
        setFocusEyeGroupCode();
    }
    
    /**ใช้ในการลบข้อมูลของ EyeDiseaseCode ออกจากฐานข้อมูล โดยที่จะมีวิธีการลบ 2 แบบ
     * 1. ลบแบบรายตัว
     * 2. ลบแบบรายกลุ่มของ AricGroup
     *@param obj เป็น object ที่รับเข้ามา จะมี 2 Object คือ EyeDisease และ EyeGroup
     *ถ้าเป็น EyeDisease จะลบแบบรายตัว
     *ถ้าเป็น EyeGroup จะลบแบบรายกลุ่มของ EyeGroup
     */
    private void deleteDataEyeDiseaseFromDB(Object obj)
    {
        if(obj instanceof EyeDiseaseCode)
        {
            this.theHosManage.theHosControl.theEyeDiseaseCodeControl.deleteEyeDiseaseCode(theEyeDiseaseCode);
        }
        if(obj instanceof EyeGroup)
        {    if(theEyeGroup != null)
             {
                 this.theHosManage.theHosControl.theEyeDiseaseCodeControl.deleteEyeDiseaseCodeByEyeGroupID(theEyeGroup.getObjectId());
             }
        }
    }
    
    private void deleteDataEyeDisease()
    {
        deleteDataEyeDiseaseFromDB(theEyeDiseaseCode);
        searchEyeDiseaseAndShowDataToTable();
        clearGUIEyeDiseaseCode();
    }
    /**ใช้ในการ Clear ข้อมูลที่อยู่บน GUI*/
    private void clearGUI()
    {
        jTextFieldCode.setText("");
        jTextFieldDesc_th.setText("");
        jTextFieldDesc_eng.setText("");
    }
    
    /**ใช้ในการ Clear ค่าที่ Object ที่ต้องการเป็นอยู่ให้เป็น null หรือเป็น ช่องว่าง หรือเป็น 0*/
    private void clearObject()
    {
        this.theEyeGroup= null;
    }
    
    private void clearObjectEyeDiseaseCode()
    {
        this.theEyeDiseaseCode = null;
    }
    /**ใช้ในการ Clear ข้อมูลที่อยู่บน GUI ก่อนเพิ่มรัหสโรค*/
    private void clearGUIEyeDiseaseCode()
    {
        jTextFieldBegin_Code.setText("");
        jTextFieldEnd_Code.setText("");
    }
    
    /**
     *กำหนดให้ Gui ไม่สามารถแก้ไขได้ ในกรณีที่เลือกรายการ AricGroup ที่มี
     *key id 13 หลัก
     *@param enabled เป็น boolean เพื่อกำหนดสถานะการ Enable
     *       ถ้า enabled เป็น true ให้ enable
     *       ถ้า enabled เป็น false ให้ disable
     */
    private void setEnableGUI(boolean enabled)
    {
        jTextFieldCode.setEnabled(enabled);
        jButtonDelete.setEnabled(enabled);
    }
    
    /**ใช้ในการ แสดงข้อมูลบนตาราง AricDiseaseCode ใหม่เมื่อมีการบันทึกหรือลบ
     *  param typeAdd เป็น boolean เพื่อบอกสถานะว่าเป็นการ เพิ่ม หรือลบ ถ้าเป็น true จะเป็นการเพิ่ม ถ้าเป็น false เป็นการลบ
     */
    public void refreshAricDisease(boolean typeAdd)
    {   selectInTableDiseaseCode = -1;
        jTableEyeDisease.clearSelection();
        if(typeAdd)
        {   boolean result = true;
            if(vEyeDiseaseCode == null)
                vEyeDiseaseCode = new Vector();
            int size = vEyeDiseaseCode.size();
            for(int i =0 ;i < size ;i++)
            {
                theEyeDiseaseCodeTemp = (EyeDiseaseCode)vEyeDiseaseCode.get(i);
                if(theEyeDiseaseCodeTemp.getObjectId().equalsIgnoreCase(theEyeDiseaseCode.getObjectId()))
                {   selectInTableDiseaseCode = i;
                    result = false;
                    break;
                }
            }
            if(result)
            {
                vEyeDiseaseCode.add(theEyeDiseaseCode);
                selectInTableDiseaseCode = size;
            }
        }
        else
        {
            vEyeDiseaseCode.removeElement(theEyeDiseaseCode);
        }
        
        //vAricDiseaseCode = this.theHosManage.theHosControl.theAricDiseaseCodeControl.selectAricDiseaseCodeByAricGroup(aricgroupid);
        showEyeDiseaseToTable(vEyeDiseaseCode);
        if(selectInTableDiseaseCode > -1)
        {
            jTableEyeDisease.setRowSelectionInterval(selectInTableDiseaseCode,selectInTableDiseaseCode);
        }
    }
    /**ใช้ในการ กำหนดให้ปุ่ม บวก, ลบ และบันทึก สามารถทำงานได้หรือไม่*/
    private void setEnableButton()
    {
    }
    
    /**ใช้ในการกำหนดผลที่เลือกบนตาราง และต้องการจะให้แสดงบน GUI*/
    public void selectShowData(int row)
    {
        if(row > -1)
        {
            if(this.vEyeGroup != null)
            {
                theEyeGroup = (EyeGroup)this.vEyeGroup.get(row);
                if(isKeyIDLength13(theEyeGroup.getObjectId()))
                {
                    setEnableGUI(false);
                }
                else
                {
                    setEnableGUI(true);
                }
                setDataObjectToGUI();
                setDataEyeDiseaseToGUI();
            }
        }
    }
    
    /**ใช้ในการแสดงการเลือกข้อมูลที่อยู่บนตาราง*/
    private void setSelectInTableEyeGroup()
    {   int row = -1;
        jTableShowList.clearSelection();
        if(vEyeGroup !=null)
        {
            int size = vEyeGroup.size();
            for(int i =0; i < size;i++)
            {
                theEyeGroupTemp = (EyeGroup)vEyeGroup.get(i);
                if(theEyeGroupTemp.getObjectId().equalsIgnoreCase(theEyeGroup.getObjectId()))
                {
                    row = i ;
                    break;
                }
            }
        }
        
        if(row >-1)
        {
            jTableShowList.setRowSelectionInterval(row,row);
            selectShowData(row);
        }
    }
    
    /**ใช้ในการกำหนดผลที่เลือกบนตาราง และต้องการจะให้แสดงบน GUI*/
    public void selectShowDataEyeDisease(int row)
    {
        selectInTableDiseaseCode = row;
        if(row > -1)
        {
            if(this.vEyeDiseaseCode != null)
            {
                theEyeDiseaseCode = (EyeDiseaseCode)this.vEyeDiseaseCode.get(row);
                setEyeDiseaseObjectToGUI();
            }
        }
    }
    
    /**ใช้ในการแสดงผลที่ได้ Object ลงบน GUI*/
    private void setDataObjectToGUI()
    {
        if(theEyeGroup != null)
        {
            jTextFieldCode.setText(theEyeGroup.number);
            jTextFieldDesc_th.setText(theEyeGroup.desc_th);
            jTextFieldDesc_eng.setText(theEyeGroup.desc_eng);
            if(theEyeGroup.active.equals("1"))
            {
                this.jCheckBoxActive2.setSelected(true);
            }
            else
            {
                this.jCheckBoxActive2.setSelected(false);
            }
        }
        else
        {
            clearGUI();
        }
    }
    
    /**
     *สำหรับตรวจสอบ key id ของ object ว่าเป็น 13 หลัก หรือไม่
     *ถ้าเป็น 13 หลัก จะไม่สามารถแก้ไข หรือ ลบ ได้
     *@param keyid เป็น key id ของ AricGroup ที่เลือกจากตาราง
     *@return boolean ถ้า key id เป็น 13 หลัก เป็น false ถ้าไม่ใช่ 13 หลัก เป็น true
     */
    private boolean isKeyIDLength13(String keyid)
    {
        boolean result = true;
        if(keyid.length() == 13)
        {
            result = true;
        }
        else
        {
            result = false;
        }
        return result;
    }
    
    /**ใช้ในการแสดงผลที่ได้ Object ลงบน GUI*/
    private void setEyeDiseaseObjectToGUI()
    {
        if(theEyeDiseaseCode != null)
        {
            jTextFieldBegin_Code.setText(theEyeDiseaseCode.code_begin);
            jTextFieldEnd_Code.setText(theEyeDiseaseCode.code_end);
        }
        else
        {
            clearGUIEyeDiseaseCode();
        }
    }
    
    /**ค้นหา EyeDiseaseCode จาก key id ของ EyeGroup**/
    private void setDataEyeDiseaseToGUI()
    {
        if(theEyeGroup != null)
        {
            clearDiseaseCode(true);
            String key = theEyeGroup.getObjectId();
            this.vEyeDiseaseCode = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectEyeDiseaseCodeByEyeGroupID(key);
            setTitleBorder(theEyeGroup.desc_th);
            showEyeDiseaseToTable(this.vEyeDiseaseCode);
        }
    }
    
    /**ใช้ในการรับข้อมูลจาก GUI ลง Object*/
    private boolean setGUIToDataObject()
    {
        boolean result = true;
        if(theEyeGroup == null)
        {
            theEyeGroup = new EyeGroup();
        }
        
        theEyeGroup.number = jTextFieldCode.getText();
        theEyeGroup.desc_th = jTextFieldDesc_th.getText();
        theEyeGroup.desc_eng = jTextFieldDesc_eng.getText();
        
        if(theEyeGroup.number.length() == 0)
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("CodeNotNULL", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
            setFocusEyeGroupCode();
            result = false;
        }
        else
        {
            if(theEyeGroup.desc_th.length() == 0)
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("Thai_DescriptionNotNULL", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
                setFocusEyeGroupThaiDescription();
                result = false;
            }
            else
            {
                if(theEyeGroup.desc_eng.length() == 0)
                {
                    JOptionPane.showMessageDialog(this,Language.getTextBundle("Eng_DescriptionNotNULL", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
                    setFocusEyeGroupEngDescription();
                    result = false;
                }
            }
        }
        
        if(jCheckBoxActive2.isSelected())
        {
            theEyeGroup.active = "1";
        }
        else
        {
            theEyeGroup.active = "0";
        }
        return result;
    }
    
    /**ใช้ในการรับข้อมูลจาก GUI ลง Object*/
    private boolean setGUIToICD10Object()
    {
        boolean result = true;
        if(theEyeDiseaseCode == null)
        {
            theEyeDiseaseCode = new EyeDiseaseCode();
        }
        theEyeDiseaseCode.code_begin = this.jTextFieldBegin_Code.getText();
        theEyeDiseaseCode.code_end = this.jTextFieldEnd_Code.getText();
        theEyeDiseaseCode.group_id = this.theEyeGroup.getObjectId();
        if(theEyeDiseaseCode.code_begin.length() == 0)
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("BeginNotNull", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
            setFocusICD10BeginCode();
            result = false;
        }
        else
        {
            if(theEyeDiseaseCode.code_end.length() == 0)
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("EndNotNull", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
                setFocusICD10EndCode();
                result = false;
            }
        }
        return result;
    }
    
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusEyeGroupCode()
    {
        jTextFieldCode.requestFocus();
    }
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusEyeGroupThaiDescription()
    {
        jTextFieldDesc_th.requestFocus();
    }
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusEyeGroupEngDescription()
    {
        jTextFieldDesc_eng.requestFocus();
    }
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusICD10BeginCode()
    {
        jTextFieldBegin_Code.requestFocus();
    }
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusICD10EndCode()
    {
        jTextFieldEnd_Code.requestFocus();
    }
    
    /**
     *  ใช้ในการตรวจสอบว่า code และ คำอธิบาย ซ้ำกันกับที่มีอยู่ในฐานข้อมูลหรือไม่ ถ้าเกิดการซ้ำกัน
     *  จะให้ค่าเป็น false ถ้าไม่ซ้ำกันจะให้ค่าเป็น true
     *  @return boolean ถ้าเป็น true จะไม่ซ้ำกัน ถ้าเป็น false จำซ้ำกัน
     */
    private boolean checkDataSameInDB()
    {
        boolean result = true;
        //ตรวจสอบว่า code ซ้ำกันหรือไม่
        
        if(theEyeGroup != null)
        { // ถ้าเป็น Object ใหม่หรือไม่
            if(theEyeGroup.getObjectId() == null)
            {
                // เป็น Object ใหม่
                // ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupCode(theEyeGroup.number, "");
                // ถ้าซ้ำกันให้ เป็น false
                // ไม่ซ้ำกัน จบการทำงาน
            }
            else
            {
                // เป็น Object เก่า
                // int size = this.vEyeGroup.size();
                // for(int i = 0 ; i < size ; i++)
                //{
                //    theEyeGroupTemp = (EyeGroup)vEyeGroup.get(i);
                //    if(!theEyeGroupTemp.getObjectId().equalsIgnoreCase(theEyeGroup.getObjectId()))
                //   {    //ตรวจสอบว่ามีการเปลี่ยนแปลง code หรือไม่
                //       if(theEyeGroupTemp.number.toUpperCase().equalsIgnoreCase(theEyeGroup.number.trim().toUpperCase()))
                //       {
                //           result = false;
                // เปลี่ยนแปลง
                //result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupCode(theEyeGroup.number);
                
                //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                // ถ้าซ้ำกันให้ เป็น false
                // ไม่เปลี่ยนแปลง
                //จบการทำงาน
                //      }
                   /* else
                    {
                        result = false;
                    }*/
                //  }
                //  theEyeGroupTemp = null;
                //  }
                
                // if(result)
                // {
                /// System.out.println("******************OJIKa***********");
                result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupCode(theEyeGroup.number,theEyeGroup.getObjectId());
                //   }
            }
            
            if(!result)
            {
                javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameCode", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                setFocusEyeGroupCode();
            }
            else
            {
                //ตรวจสอบว่า ชื่อซ้ำกันหรือไม่
                // ถ้าเป็น Object ใหม่หรือไม่
                if(theEyeGroup.getObjectId() == null)
                {
                    // เป็น Object ใหม่
                    // ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                    result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupThaiDescription(theEyeGroup.desc_th,"");
                }
                else
                {
                    result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupThaiDescription(theEyeGroup.desc_th, theEyeGroup.getObjectId());
                }
                
                if(!result)
                {
                    javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameThai", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                    setFocusEyeGroupThaiDescription();
                }
                else
                {
                    if(theEyeGroup.getObjectId() == null)
                    {
                        result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupEngDescription(theEyeGroup.desc_eng, "");
                    }
                    else
                    {
                        
                        result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupEngDescription(theEyeGroup.desc_eng, theEyeGroup.getObjectId());
                        
                    }
                    if(!result)
                    {
                        javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameEng", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                        setFocusEyeGroupEngDescription();
                    }
                    
                    // ถ้าซ้ำกันให้ เป็น false
                    // ไม่ซ้ำกัน จบการทำงาน
                }
               /* else
                {
                
                    // เป็น Object เก่า
                   /* int size = this.vEyeGroup.size();
                    for(int i = 0 ; i < size ; i++)
                    {
                        theEyeGroupTemp = (EyeGroup)vEyeGroup.get(i);
                  /*  System.out.println("---Temp-------Old ---" + theEyeGroupTemp.desc_th +"++++"+theEyeGroupTemp.getObjectId());
                    System.out.println("---Eye-------Old ---" + theEyeGroup.desc_th +"++++"+ theEyeGroup.getObjectId());
                */
                      /*  if(theEyeGroupTemp.getObjectId().equalsIgnoreCase(theEyeGroup.getObjectId()))
                        {    //ตรวจสอบว่ามีการเปลี่ยนแปลง คำอธิบาย หรือไม่
                            if(!theEyeGroupTemp.desc_th.toUpperCase().equalsIgnoreCase(theEyeGroup.desc_th.trim().toUpperCase()))
                            {
                       */
                  /*  if(theEyeGroup.getObjectId() == null)
                    {
                   
                    }
                    // เปลี่ยนแปลง
                    result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupThaiDescription(theEyeGroup.desc_th, theEyeGroup.getObjectId());
                    if(!result)
                    {
                        javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameThai", language));
                        setFocusEyeGroupThaiDescription();
                    }
                    else
                    {
                        result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupEngDescription(theEyeGroup.desc_eng, theEyeGroup.getObjectId());
                        if(!result)
                        {
                            javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameEng", language));
                            setFocusEyeGroupEngDescription();
                        }
                        //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                        // ถ้าซ้ำกันให้ เป็น false
                        // ไม่เปลี่ยนแปลง
                        //จบการทำงาน
                    }
                   
                                /*if(!theEyeGroupTemp.desc_eng.toUpperCase().equalsIgnoreCase(theEyeGroup.desc_eng.trim().toUpperCase()))
                                {
                                    // เปลี่ยนแปลง
                                    result = this.theHosManage.theHosControl.theEyeGroupControl.checkSameEyeGroupEngDescription(theEyeGroup.desc_eng);
                                    if(!result)
                                    {
                                        javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameEng", language));
                                        setFocusEyeGroupEngDescription();
                                    }*/
                //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                // ถ้าซ้ำกันให้ เป็น false
                // ไม่เปลี่ยนแปลง
                //จบการทำงาน
            }
            theEyeGroupTemp = null;
        }
        else
        {
            System.out.println("------------------ TEST NULL OBJECT ");
        }
        return result;
    }
    
   /* private boolean checkHaveInDB()
    {
        boolean result = true;
         if(theEyeGroup != null)
        {
           if(theEyeDiseaseCode.getObjectId() == null)
           {
               result = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectIcd10BySearch(theEyeGroup.desc_eng);
           }
        }
    }
    **/
    /**
     *  ใช้ในการบันทึกข้อมูลจาก GUI ลง Object ของ EyeDiseaseCode เพื่อลงฐานข้อมูล
     *  @return เป็น boolean เพื่อบอกว่าสามารถบันทึกลงฐานข้อมูลได้หรือไม่ ถ้าเป็น true สามารถบันทึกลงฐานข้อมูลได้
     */
    /*private boolean setGUIToEyeDiseaseObject()
    {
        boolean result = true;
        /**ตรวจสอบ รหัสของ Eyegroupก่อนว่ามีค่าหรือไม่ ถ้าไม่มีจะไม่ set ค่าให้กับ EyeDiseaseCode */
     /*   if(this.theEyeGroup != null && this.theEyeGroup.getObjectId() != null)
        {
            if(theEyeDiseaseCode == null)
            {
                theEyeDiseaseCode = new EyeDiseaseCode();
            }
            theEyeDiseaseCode.code_begin = jTextFieldBegin_Code.getText();
            theEyeDiseaseCode.code_end = jTextFieldEnd_Code.getText();
            theEyeDiseaseCode.group_id = this.theEyeGroup.getObjectId();
            result = true;
        }
        else
        {
            result = false;
        }
        return result;
    }
      **/
    
    private void saveDataToDB()
    {
        this.theHosManage.theHosControl.theEyeGroupControl.saveEyeGroup(this.theEyeGroup);
    }
    
    private void saveEyeDiseaseToDB()
    {
        
        this.theHosManage.theHosControl.theEyeDiseaseCodeControl.saveEyeDiseaseCode(this.theEyeDiseaseCode);
    }
    
    private void deleteDataToDB()
    {
        if(theEyeGroup != null)
        {
            this.theHosManage.theHosControl.theEyeGroupControl.deleteEyeGroup(theEyeGroup);
        }
    }
    
    private void deleteEyeDiseaseToDB()
    {
        if(this.theEyeGroup != null)
        {
            this.theHosManage.theHosControl.theEyeDiseaseCodeControl.deleteEyeDiseaseCodeByEyeGroupID(theEyeGroup.getObjectId());
        }
    }
    
    private void deleteEyeDisease()
    {
        if(this.theEyeGroup != null)
        {
            this.theHosManage.theHosControl.theEyeDiseaseCodeControl.deleteEyeDiseaseCode(this.theEyeDiseaseCode);
        }
    }
    /**
     *  ใช้ในการค้นหาข้อมูล และทำการแสดงข้อมูลลงบนตารางที่กำหนด
     */
    public void searchDataAndShowDataToTable()
    {
        this.vEyeGroup = searchData();
        this.showDataToTable(this.vEyeGroup);
    }
    
    public void searchEyeDiseaseAndShowDataToTable()
    {
        this.vEyeDiseaseCode = searchDataEyeDisease();
        this.showEyeDiseaseToTable(this.vEyeDiseaseCode);
    }
    
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    public boolean searchBeginCode()
    {
        boolean isIcd10 = false;
        String begin_code = this.jTextFieldBegin_Code.getText();
        //this.Objectcd10 = new Object();
        this.theICD10 = null;
        this.Objectcd10 = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectIcd10BySearch(begin_code);
        System.out.println("----------" + this.Objectcd10);
        //this.theICD10  = (ICD10)this.Objectcd10;
        if(this.Objectcd10 != null)
        {
            isIcd10 = true;
        }
        else
        {
            isIcd10 = false;
        }
        return isIcd10;
    }
    
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    public boolean searchEndCode()
    {
        
        boolean isIcd10 = false;
        String end_code = this.jTextFieldEnd_Code.getText();
        this.Objectcd10 = new Object();
        this.theICD10 = null;
        this.Objectcd10 = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectIcd10BySearch(end_code);
        //this.theICD10  =  (ICD10)this.Objectcd10;
        if(this.Objectcd10 != null)
        {
            isIcd10 = true;
        }
        else
        {
            isIcd10 = false;
        }
        return isIcd10;
    }
    /**
     * ใช้ในการ search ข้อมูลตามข้อมูลที่กำหนด
     * @return เป็น Vector ของ Object ที่กำหนด
     */
    private Vector searchData()
    {
        String search = this.jTextFieldSearch.getText();
        search = search.trim();
        this.vEyeGroup = this.theHosManage.theHosControl.theEyeGroupControl.selectEyeGroupByCodeOrDescription(search, this.active);
        return this.vEyeGroup;
    }
    
    /**
     * ใช้ในการ search ข้อมูลตามข้อมูลที่กำหนด
     * @return เป็น Vector ของ Object ที่กำหนด
     */
    private Vector searchDataEyeDisease()
    {
        String search = this.theEyeGroup.getObjectId();
        search = search.trim();
        this.vEyeDiseaseCode = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectEyeDiseaseCodeByEyeGroupID(search);
        return this.vEyeDiseaseCode;
    }
    /**
     * ใช้ในการ แสดงข้อมูลการค้นหาลงบนตารางที่กำหนด
     * @param vc เป็น Vector ของข้อมูลที่ทำการส่งมาให้และต้องการกำหนดให้แสดงบนตาราง
     */
    private void showDataToTable(Vector vc)
    {
        theTableModelGUI = new TableModelGUI(colName1, 0);
        
        if(vc != null)
        {
            int size = vc.size();
            System.out.println("-------------SIZE---" + size);
            theTableModelGUI = new TableModelGUI(colName1, size);
            theEyeGroupTemp = null;
            for(int i = 0 ; i < size ;i++)
            {
                theEyeGroupTemp = (EyeGroup)vc.get(i);
                theTableModelGUI.setValueAt(theEyeGroupTemp.number,i, 0);
                theTableModelGUI.setValueAt(theEyeGroupTemp.desc_th,i, 1);
                
                theEyeGroupTemp = null;
            }
        }
        jTableShowList.setModel(theTableModelGUI);
    }
    
    /**
     * ใช้ในการ แสดงข้อมูลการค้นหาลงบนตารางที่กำหนด
     * @param vc เป็น Vector ของข้อมูลที่ทำการส่งมาให้และต้องการกำหนดให้แสดงบนตาราง
     */
    private void showEyeDiseaseToTable(Vector vc)
    {
        theTableModelGUI = new TableModelGUI(colName2, 0);
        if(vc != null)
        {
            int size = vc.size();
            theTableModelGUI = new TableModelGUI(colName2, size);
            theEyeDiseaseCodeTemp = null;
            for(int i = 0 ; i < size ;i++)
            {
                theEyeDiseaseCodeTemp = (EyeDiseaseCode)vc.get(i);
                theTableModelGUI.setValueAt(theEyeDiseaseCodeTemp.code_begin,i, 0);
                theTableModelGUI.setValueAt(theEyeDiseaseCodeTemp.code_end,i, 1);
                
                theEyeDiseaseCodeTemp = null;
            }
        }
        jTableEyeDisease.setModel(theTableModelGUI);
        // jTableEyeDisease.getColumnModel().getColumn(0).setPreferredWidth(25);
        //jTableEyeDisease.getColumnModel().getColumn(1).setPreferredWidth(100);
    }
    
    private void setTitleBorder(String eyegroup)
    {
        if(eyegroup.equals(""))
        {
            jPanel4.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle("Eye_Disease_Code", language)));
        }
        else
        {
            jPanel4.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle("Eye_Disease_Code", language) + " : " + eyegroup));
        }
    }
    
    /*
     *
     */
    private void setEnableEyeGroup(boolean flag)
    {
        jTextFieldCode.setEnabled(flag);
        jTextFieldDesc_th.setEnabled(flag);
        jTextFieldDesc_eng.setEnabled(flag);
        jButtonSave.setEnabled(flag);
        jButtonAdd1.setEnabled(flag);
        jButtonSave1.setEnabled(flag);
    }
    
    public void setEnableDiseaseCode(boolean flag)
    {
        jTableEyeDisease.setEnabled(flag);
        jTextFieldBegin_Code.setEnabled(flag);
        jTextFieldEnd_Code.setEnabled(flag);
        jButtonAdd1.setEnabled(flag);
        jButtonDelete1.setEnabled(flag);
        jButtonSave1.setEnabled(flag);
    }
    
    /**ใช้ในการ Clear ข้อมูลของ DiseaseCode ทั้งหนด
     *@param setenabled เป็นการกำหนดให้ ปุ่มและตารางสามารถใช้งานได้หรือไม่
     */
    public void clearDiseaseCode(boolean setenabled)
    {
        clearGUIEyeDiseaseCode();
        vEyeDiseaseCode = null;
        showEyeDiseaseToTable(vEyeDiseaseCode);
        setEnableDiseaseCode(setenabled);
    }
    
    private void setLaguage()
    {
        jButtonAdd.setText(Language.getTextBundle(jButtonAdd.getText(), language));
        jButtonAdd1.setText(Language.getTextBundle(jButtonAdd1.getText(), language));
        jButtonDelete.setText(Language.getTextBundle(jButtonDelete.getText(), language));
        jButtonDelete1.setText(Language.getTextBundle(jButtonDelete1.getText(), language));
        jButtonSave.setText(Language.getTextBundle(jButtonSave.getText(), language));
        jButtonSave1.setText(Language.getTextBundle(jButtonSave1.getText(), language));
        jButtonSearch.setText(Language.getTextBundle(jButtonSearch.getText(), language));
        jCheckBoxActive.setText(Language.getTextBundle(jCheckBoxActive.getText(), language));
        jCheckBoxActive2.setText(Language.getTextBundle(jCheckBoxActive2.getText(), language));
        jLabelCode.setText(Language.getTextBundle(jLabelCode.getText(), language));
        jLabelDescEng.setText(Language.getTextBundle(jLabelDescEng.getText(), language));
        jLabelDescThai.setText(Language.getTextBundle(jLabelDescThai.getText(), language));
        jLabelSearch.setText(Language.getTextBundle(jLabelSearch.getText(), language));
        jLabelSetupName.setText(Language.getTextBundle(jLabelSetupName.getText(), language));
        jLabelBeginCode.setText(Language.getTextBundle(jLabelBeginCode.getText(), language));
        jLabelEndCode.setText(Language.getTextBundle(jLabelEndCode.getText(), language));
        
        
    }
    
    public String getPanelName()
    {
        return panelname;
    }
    
    public void setEnableButtonSetupPanel(boolean enabled)
    {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAdd1;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDelete1;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSave1;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxActive;
    private javax.swing.JCheckBox jCheckBoxActive2;
    private javax.swing.JLabel jLabelBeginCode;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDescEng;
    private javax.swing.JLabel jLabelDescThai;
    private javax.swing.JLabel jLabelEndCode;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSetupName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelShowList;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneShowList;
    private javax.swing.JTable jTableEyeDisease;
    private javax.swing.JTable jTableShowList;
    private javax.swing.JTextField jTextFieldBegin_Code;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDesc_eng;
    private javax.swing.JTextField jTextFieldDesc_th;
    private javax.swing.JTextField jTextFieldEnd_Code;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
    
}
