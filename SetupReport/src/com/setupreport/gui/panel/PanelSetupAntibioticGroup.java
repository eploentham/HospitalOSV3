/*
 * PanelSetupAntibioticGroup.java
 *
 * Created on 22 ตุลาคม 2548, 11:09 น.
 */

package com.setupreport.gui.panel;
import java.util.Vector;
import javax.swing.*;
import com.setupreport.manage.HosManage;
import com.setupreport.object.AricGroup;
import com.setupreport.object.AricDiseaseCode;
import com.setupreport.object.ICD10;
import com.setupreport.utility.TableModelGUI;
import com.setupreport.utility.Language;
import com.setupreport.usecase.connection.ManageGUI;
/**
 *
 * @author  tong(Padungrat)
 */
public class PanelSetupAntibioticGroup extends javax.swing.JPanel implements 
ManageGUI
{
    final String panelname = "AntibioticGroup";
    HosManage theHosManage;
    AricGroup theAricGroup, theAricGroupTemp;
    AricDiseaseCode theAricDiseaseCode,theAricDiseaseCodeTemp;
    Vector vAricGroup,vAricDiseaseCode;
    TableModelGUI theTableModelGUI;
    String[] colName,colNameDisease;
    ICD10 theICD10;
    Object Objectcd10;
    int selectInTableDiseaseCode = -1;
    int language = 1;
    public PanelSetupAntibioticGroup(HosManage hosManage)
    {
        this.theHosManage = hosManage;
        initComponents();
        
        //ojika 28 Feb 2007
        jButtonAdd.setVisible(false);
        jButtonDelete.setVisible(false);
        
        setLanguage();
        Language.getTextBundle(panelname, language);
       
        setTitleBorder("");
        showDataToTable(null);
        showDataDiseaseCodeToTable(null);
        clearGUI();
        searchDataAndShowDataToTable(); //ojika 28 Feb 2007
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelTop = new javax.swing.JPanel();
        jLabelSetupName = new javax.swing.JLabel();
        jPanelLeft = new javax.swing.JPanel();
        jPanelSearch = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanelShowList = new javax.swing.JPanel();
        jScrollPaneShowList = new javax.swing.JScrollPane();
        jTableShowList = new javax.swing.JTable();
        jPanelRight = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelCode = new javax.swing.JLabel();
        jLabelDescription = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldDescrpiton = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanelDisease = new javax.swing.JPanel();
        jPanelShowDisease = new javax.swing.JPanel();
        jScrollPaneShowDisease = new javax.swing.JScrollPane();
        jTableShowDisease = new javax.swing.JTable();
        jPanelData = new javax.swing.JPanel();
        jLabelBeginCode = new javax.swing.JLabel();
        jLabelEndCode = new javax.swing.JLabel();
        jTextFieldBeginDisease = new javax.swing.JTextField();
        jTextFieldEndDisease = new javax.swing.JTextField();
        jPanelControl = new javax.swing.JPanel();
        jButtonAddDisease = new javax.swing.JButton();
        jButtonDeleteDisease = new javax.swing.JButton();
        jButtonSaveDisease = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabelSetupName.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabelSetupName.setText("AntibioticGroup");
        jPanelTop.add(jLabelSetupName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanelTop, gridBagConstraints);

        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        jPanelLeft.setMinimumSize(new java.awt.Dimension(200, 53));
        jPanelLeft.setPreferredSize(new java.awt.Dimension(200, 433));
        jPanelSearch.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setText("Search");
        jPanelSearch.add(jLabelSearch, new java.awt.GridBagConstraints());

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSearch.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelSearch.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelLeft.add(jPanelSearch, gridBagConstraints);

        jPanelShowList.setLayout(new java.awt.GridBagLayout());

        jTableShowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableShowList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowListMouseReleased(evt);
            }
        });

        jScrollPaneShowList.setViewportView(jTableShowList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowList.add(jScrollPaneShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanelLeft.add(jPanelShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(jPanelLeft, gridBagConstraints);

        jPanelRight.setLayout(new java.awt.GridBagLayout());

        jPanelRight.setMinimumSize(new java.awt.Dimension(350, 24));
        jPanelRight.setPreferredSize(new java.awt.Dimension(350, 24));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabelCode.setText("Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel3.add(jLabelCode, gridBagConstraints);

        jLabelDescription.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel3.add(jLabelDescription, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel3.add(jTextFieldCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 5);
        jPanel3.add(jTextFieldDescrpiton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanelRight.add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setEnabled(false);
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jButtonAdd, gridBagConstraints);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setEnabled(false);
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButtonDelete, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSave.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSave.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelRight.add(jPanel2, gridBagConstraints);

        jPanelDisease.setLayout(new java.awt.GridBagLayout());

        jPanelDisease.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelShowDisease.setLayout(new java.awt.GridBagLayout());

        jTableShowDisease.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableShowDisease.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowDiseaseMouseReleased(evt);
            }
        });

        jScrollPaneShowDisease.setViewportView(jTableShowDisease);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowDisease.add(jScrollPaneShowDisease, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelDisease.add(jPanelShowDisease, gridBagConstraints);

        jPanelData.setLayout(new java.awt.GridBagLayout());

        jLabelBeginCode.setText("Begin_Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelData.add(jLabelBeginCode, gridBagConstraints);

        jLabelEndCode.setText("End_Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelData.add(jLabelEndCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelData.add(jTextFieldBeginDisease, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanelData.add(jTextFieldEndDisease, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelDisease.add(jPanelData, gridBagConstraints);

        jPanelControl.setLayout(new java.awt.GridBagLayout());

        jButtonAddDisease.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAddDisease.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAddDisease.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAddDisease.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAddDisease.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAddDisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDiseaseActionPerformed(evt);
            }
        });

        jPanelControl.add(jButtonAddDisease, new java.awt.GridBagConstraints());

        jButtonDeleteDisease.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDeleteDisease.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDeleteDisease.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDeleteDisease.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDeleteDisease.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDeleteDisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteDiseaseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelControl.add(jButtonDeleteDisease, gridBagConstraints);

        jButtonSaveDisease.setText("Save");
        jButtonSaveDisease.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSaveDisease.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSaveDisease.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSaveDisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDiseaseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelControl.add(jButtonSaveDisease, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanelDisease.add(jPanelControl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanelRight.add(jPanelDisease, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(jPanelRight, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldSearchActionPerformed
    {//GEN-HEADEREND:event_jTextFieldSearchActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jButtonAddDiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDiseaseActionPerformed
        addDataDisease();
    }//GEN-LAST:event_jButtonAddDiseaseActionPerformed

    private void jButtonDeleteDiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteDiseaseActionPerformed
        deleteDataDisease();
    }//GEN-LAST:event_jButtonDeleteDiseaseActionPerformed

    private void jButtonSaveDiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDiseaseActionPerformed
        saveDataDisease();
    }//GEN-LAST:event_jButtonSaveDiseaseActionPerformed

    private void jTableShowDiseaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableShowDiseaseMouseReleased
        selectShowDataDisease(jTableShowDisease.getSelectedRow());
    }//GEN-LAST:event_jTableShowDiseaseMouseReleased

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        addData();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveData();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTableShowListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableShowListMouseReleased
        selectShowData(jTableShowList.getSelectedRow());
    }//GEN-LAST:event_jTableShowListMouseReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchDataAndShowDataToTable();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    
    /**ใช้ในการ clear GUI เมื่อมีการกดเพิ่มข้อมูลของ AricDisease*/
    public void addDataDisease()
    {
        clearGUIDiseaseCode();
        clearObjectDisease();
        jTextFieldBeginDisease.requestFocus();
    }
    
    /**ใช้ในการ clear GUI เมื่อมีการกดเพิ่มข้อมูล ของ AricGroup*/
    public void addData()
    {
        clearGUI();
        clearObject();
        setEnableGUI(true);
        clearDiseaseCode(false);
        jTextFieldCode.requestFocus();
    }
    
    /**ใช้ในการ Clear ข้อมูลของ DiseaseCode ทั้งหนด
     *@param setenabled เป็นการกำหนดให้ ปุ่มและตารางสามารถใช้งานได้หรือไม่
     */
    public void clearDiseaseCode(boolean setenabled)
    {
        addDataDisease();
        vAricDiseaseCode = null;
        showDataDiseaseCodeToTable(vAricDiseaseCode);
        setEnableDiseaseCode(setenabled);
    }
    
    public void setEnableDiseaseCode(boolean enabled)
    {
        jTableShowDisease.setEnabled(enabled);
        jTextFieldBeginDisease.setEnabled(enabled);
        jTextFieldEndDisease.setEnabled(enabled);
        jButtonAddDisease.setEnabled(enabled);
        jButtonDeleteDisease.setEnabled(enabled);
        jButtonSaveDisease.setEnabled(enabled);     
    }
    
    /**
     *กำหนดให้ Gui ไม่สามารถแก้ไขได้ ในกรณีที่เลือกรายการ AricGroup ที่มี
     *key id 13 หลัก
     *@param enabled เป็น boolean เพื่อกำหนดสถานะการ Enable 
     *       ถ้า enabled เป็น true ให้ enable 
     *       ถ้า enabled เป็น false ให้ disable
     */
    private void setEnableGUI(boolean enabled)
    {
        jTextFieldCode.setEnabled(enabled);
        jButtonDelete.setEnabled(enabled);
    }
    
    /**ใช้ในการ แสดงข้อมูลบนตาราง AricDiseaseCode ใหม่เมื่อมีการบันทึกหรือลบ
     * @param typeAdd เป็น boolean เพื่อบอกสถานะว่าเป็นการ เพิ่ม หรือลบ ถ้าเป็น true จะเป็นการเพิ่ม ถ้าเป็น false เป็นการลบ
     */
    public void refreshAricDisease(boolean typeAdd)
    {   selectInTableDiseaseCode = -1;
        jTableShowDisease.clearSelection();
        if(typeAdd)
        {   boolean result = true;
            if(vAricDiseaseCode == null)
                vAricDiseaseCode = new Vector();
            int size = vAricDiseaseCode.size();
            for(int i =0 ;i < size ;i++)
            {
                theAricDiseaseCodeTemp = (AricDiseaseCode)vAricDiseaseCode.get(i);
                if(theAricDiseaseCodeTemp.getObjectId().equalsIgnoreCase(theAricDiseaseCode.getObjectId()))
                {   selectInTableDiseaseCode = i;
                    result = false;
                    break;
                }
            }
            if(result)
            {
                vAricDiseaseCode.add(theAricDiseaseCode);
                selectInTableDiseaseCode = size;
            }           
        }
        else
        {
            vAricDiseaseCode.removeElement(theAricDiseaseCode);
        }
                
        //vAricDiseaseCode = this.theHosManage.theHosControl.theAricDiseaseCodeControl.selectAricDiseaseCodeByAricGroup(aricgroupid);
        showDataDiseaseCodeToTable(vAricDiseaseCode);
        if(selectInTableDiseaseCode > -1)
        {
            jTableShowDisease.setRowSelectionInterval(selectInTableDiseaseCode,selectInTableDiseaseCode);
        }
    }
    /**ใช้ในการลบข้อมูลของ AricDisease แบบรายตัวตามรายการที่เลือก*/
    public void deleteDataDisease()
    {
        deleteDataDiseaseCodeToDB(theAricDiseaseCode);
        refreshAricDisease(false);
        addDataDisease();
        
    }
    
    /**ใช้ในการลบข้อมูลของ AricGroup และ AricDiseaseCode 
     * ออกจากฐานข้อมูล
     */
    public void deleteData()
    {
        //ลบ AricDiseaseCode ออกจากฐานข้อมูล
        deleteDataDiseaseCodeToDB(theAricGroup);
        clearDiseaseCode(false);
        
        //ลบ AricGroup ออกจากฐานข้อมูล
        deleteDataToDB();
        searchDataAndShowDataToTable();
        addData();
        setFocusAricGroupCode();
    }
   
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusAricGroupCode()
    {
        jTextFieldCode.requestFocus();
    }
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusAricGroupDescription()
    {
        jTextFieldDescrpiton.requestFocus();
    }
    /**ใช้ในการลบข้อมูลของ AricDiseaseCode ออกจากฐานข้อมูล โดยที่จะมีวิธีการลบ 2 แบบ
     * 1. ลบแบบรายตัว
     * 2. ลบแบบรายกลุ่มของ AricGroup
     *@param obj เป็น object ที่รับเข้ามา จะมี 2 Object คือ AricDiseaseCode และ AricGroup
     *ถ้าเป็น AricDiseaseCode จะลบแบบรายตัว
     *ถ้าเป็น AricGroup จะลบแบบรายกลุ่มของ AricGroup
     */
    private void deleteDataDiseaseCodeToDB(Object obj)
    {   
        
        if(obj instanceof AricDiseaseCode)
        {
            this.theHosManage.theHosControl.theAricDiseaseCodeControl.deleteAricDiseaseCode(theAricDiseaseCode);
        }
        if(obj instanceof AricGroup)
        {    if(theAricGroup != null)
            {
                this.theHosManage.theHosControl.theAricDiseaseCodeControl.deleteAricDiseaseCodeByAricGroupID(theAricGroup.getObjectId());
            }
        }
    }
    /**ใช้ในการลบข้อมูลออกจากฐานข้อมูล*/
    private void deleteDataToDB()
    {
        if(theAricGroup != null)
        {
            this.theHosManage.theHosControl.theAricGroupControl.deleteAricGroup(theAricGroup);
        }
        
    }
    
    /**
     * ใช้ในการบันทึกข้อมูลของรหัสโรค
     */
    public void saveDataDisease()
    { 
        /**ตรวจสอบว่า Object สามารถลงฐานข้อมูลไปได้หรือไม่*/
       if(setGUIToDataObjectAricDisease()) 
       {
           if(searchBeginCode())
            {
                if(searchEndCode())
                {
                    System.out.println("----------------TEST NOT SAME ---------------------");
                    saveDataDiseaseToDB();
                    //refreshAricDisease(true);
                    searchAricDiseaseAndShowDataToTable();
                }
                else
                {
                    checkICD10EndCode();
                }
            }
            else
            {
                if(checkICD10BeginCode())
                {
                    
                }
                             
            }
        //   saveDataDiseaseToDB();
          // refreshAricDisease(true);
       }
              
    }
    
        /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    private boolean checkICD10BeginCode()
    {
            boolean pass = true;
            String icd10 = this.jTextFieldBeginDisease.getText();
            int confirm = 0;
            confirm = JOptionPane.showConfirmDialog(this,Language.getTextBundle("Begin_Warning", language),Language.getTextBundle("Confirm", language),JOptionPane.YES_NO_OPTION);
            System.out.println("--Begin--confirm "+ confirm);
            if(confirm == 0)
            {
                this.jTextFieldBeginDisease.setText("");
                this.jTextFieldBeginDisease.requestFocus();
                pass = false;
            }
            else
            {
                this.jTextFieldBeginDisease.requestFocus();
                pass = true;                
            }
        return pass;
    }
    
        /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    private boolean checkICD10EndCode()
    {
        boolean pass = true;
        String icd10 = this.jTextFieldEndDisease.getText();
    /*    if(this.flag1 ==1)//กดปุ่ม save
        {
            //checkIcd10();
            System.out.println("--flag1 "+ flag1);
            saveEyeDisease();
        }
        else
        {
     **/
                int confirm = 0;
                confirm = JOptionPane.showConfirmDialog(this,Language.getTextBundle("End_Warning", language),Language.getTextBundle("Confirm", language),JOptionPane.YES_NO_OPTION);
                System.out.println("--End--confirm "+ confirm);
                if(confirm == 0)
                {
                    this.jTextFieldEndDisease.setText("");
                    this.jTextFieldEndDisease.requestFocus();
                    pass = false;
                }
                else
                {
                    saveDataDiseaseToDB();
                    searchAricDiseaseAndShowDataToTable();
                    pass = true;
                }
                
                return pass;
       // }
    }
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    public boolean searchEndCode()
    {
        
        boolean isIcd10 = false;
        String end_code = this.jTextFieldEndDisease.getText();
        this.Objectcd10 = new Object();
        this.theICD10 = null;
        this.Objectcd10 = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectIcd10BySearch(end_code);
        //this.theICD10  =  (ICD10)this.Objectcd10;
        if(this.Objectcd10 != null)
        {
            isIcd10 = true;
        }
        else
        {
            isIcd10 = false;
        }
        return isIcd10;
    }
    
    /**ตรวจสอบรหัสโรค ว่ามีอยู่ในฐานข้อมูลหรือไม่
     *@return boolean return true ถ้ามีข้อมูลฐานข้อมูล
     *                return false ถ้าไม่มีข้อมูลในฐานข้อมูล
     */
    public boolean searchBeginCode()
    {
        boolean isIcd10 = false;
        String begin_code = this.jTextFieldBeginDisease.getText();
        //this.Objectcd10 = new Object();
        this.theICD10 = null;
        this.Objectcd10 = this.theHosManage.theHosControl.theEyeDiseaseCodeControl.selectIcd10BySearch(begin_code);
        System.out.println("----------" + this.Objectcd10);
        //this.theICD10  = (ICD10)this.Objectcd10;
        if(this.Objectcd10 != null)
        {
            isIcd10 = true;
        }
        else
        {
            isIcd10 = false;
        }
        return isIcd10;
    }
    
    /**
     *  ใช้ในการบันทึกข้อมูล
     */
    public void saveData()
    {
        if(setGUIToDataObject())
        {
            if(checkDataSameInDB())
            {                
                saveDataToDB();
                searchDataAndShowDataToTable();
                setSelectInTableAricGroup();
            }
        }
    }
    
    /**
     *  ใช้ในการตรวจสอบว่า code และ คำอธิบาย ซ้ำกันกับที่มีอยู่ในฐานข้อมูลหรือไม่ ถ้าเกิดการซ้ำกัน
     *  จะให้ค่าเป็น false ถ้าไม่ซ้ำกันจะให้ค่าเป็น true
     *  @return boolean ถ้าเป็น true จะไม่ซ้ำกัน ถ้าเป็น false จำซ้ำกัน
     */
    private boolean checkDataSameInDB()
    {
        boolean result = true;
        
        //ตรวจสอบว่า code ซ้ำกันหรือไม่
        
        
        if(theAricGroup != null)
        { // ถ้าเป็น Object ใหม่หรือไม่
            if(theAricGroup.getObjectId() == null)
            {
                // เป็น Object ใหม่
                // ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                result = this.theHosManage.theHosControl.theAricGroupControl.checkSameAricGroupCode(theAricGroup.number,"");
                // ถ้าซ้ำกันให้ เป็น false
                // ไม่ซ้ำกัน จบการทำงาน
            }
            else
            {
                // เป็น Object เก่า
             /*   int size = this.vAricGroup.size();
                for(int i = 0 ; i < size ; i++)
                {
                    theAricGroupTemp = (AricGroup)vAricGroup.get(i);
                    if(theAricGroupTemp.getObjectId().equalsIgnoreCase(theAricGroup.getObjectId()))
                    {    //ตรวจสอบว่ามีการเปลี่ยนแปลง code หรือไม่
                        if(!theAricGroupTemp.number.toUpperCase().equalsIgnoreCase(theAricGroup.number.trim().toUpperCase()))
                        {
              **/
                // เปลี่ยนแปลง
                result = this.theHosManage.theHosControl.theAricGroupControl.checkSameAricGroupCode(theAricGroup.number, theAricGroup.getObjectId());
                
                
                //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                // ถ้าซ้ำกันให้ เป็น false
                // ไม่เปลี่ยนแปลง
                //จบการทำงาน
                //  }
                // }
                //  theAricGroupTemp = null;
                // }
            }
            if(!result)
            {
                javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameAricCode", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                setFocusAricGroupCode();
            }
            else
            {
                //ตรวจสอบว่า ชื่อซ้ำกันหรือไม่
                // ถ้าเป็น Object ใหม่หรือไม่
                if(theAricGroup.getObjectId() == null)
                {
                    // เป็น Object ใหม่
                    // ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                    result = this.theHosManage.theHosControl.theAricGroupControl.checkSameAricGroupDescription(theAricGroup.description,"");
                    // ถ้าซ้ำกันให้ เป็น false
                    // ไม่ซ้ำกัน จบการทำงาน
                }
                else
                {
                    // เป็น Object เก่า
                    /*int size = this.vAricGroup.size();
                    for(int i = 0 ; i < size ; i++)
                    {
                        theAricGroupTemp = (AricGroup)vAricGroup.get(i);
                        if(theAricGroupTemp.getObjectId().equalsIgnoreCase(theAricGroup.getObjectId()))
                        {    //ตรวจสอบว่ามีการเปลี่ยนแปลง คำอธิบาย หรือไม่
                            if(!theAricGroupTemp.description.toUpperCase().equalsIgnoreCase(theAricGroup.description.trim().toUpperCase()))
                            {
                     */
                    // เปลี่ยนแปลง
                    result = this.theHosManage.theHosControl.theAricGroupControl.checkSameAricGroupDescription(theAricGroup.description, theAricGroup.getObjectId());
                    
                    
                    //ให้ตรวจสอบทั้งหมดที่อยู่ในฐานข้อมูล
                    // ถ้าซ้ำกันให้ เป็น false
                    // ไม่เปลี่ยนแปลง
                    //จบการทำงาน
                    //  }
                    // }
                    // theAricGroupTemp = null;
                    //}
                }
                if(!result)
                {
                    javax.swing.JOptionPane.showMessageDialog(this,Language.getTextBundle("SameAricDescription", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                    setFocusAricGroupDescription();
                }
            }
            theAricGroupTemp = null;
        }
        else
        {
            //result = false;
        }
        return result;
    }
    /**ใช้ในการแสดงการเลือกข้อมูลที่อยู่บนตาราง*/
    private void setSelectInTableAricGroup()
    {   int row = -1;
        jTableShowList.clearSelection();
        if(vAricGroup !=null)
        {
            int size = vAricGroup.size();
            for(int i =0; i < size;i++)
            {
                theAricGroupTemp = (AricGroup)vAricGroup.get(i);
                if(theAricGroupTemp.getObjectId().equalsIgnoreCase(theAricGroup.getObjectId()))
                {
                    row = i ;
                    break;
                }
            }
        }
        
        if(row >-1)
        {
            jTableShowList.setRowSelectionInterval(row,row);
            selectShowData(row);
        }
    }
    
    /**ใช้ในการ Select ข้อมูลในตารางให้เป็น highLigth*/
    public void selectRowInTable()
    {
        
    }
    /**ใช้ในการบันทึกข้อมูลของ AricDiseaseCode ลงฐานข้อมูล*/
    private void saveDataDiseaseToDB()
    {
        this.theHosManage.theHosControl.theAricDiseaseCodeControl.saveAricDiseaseCode(theAricDiseaseCode);
    }
    
    /**ใช้ในการบันทึกข้อมูลของ AricGroup ลงฐานข้อมูล*/
    private void saveDataToDB()
    {
        this.theHosManage.theHosControl.theAricGroupControl.saveAricGroup(theAricGroup);
    }
    /**ใช้ในการ Clear ข้อมูลที่อยู่บน GUI*/
    private void clearGUI()
    {
        jTextFieldCode.setText("");
        jTextFieldDescrpiton.setText("");
        
    }
    /**ใช้ในการ Clear ข้อมูลที่อยู่บน GUI*/
    private void clearGUIDiseaseCode()
    {
        jTableShowDisease.clearSelection();
        jTextFieldBeginDisease.setText("");
        jTextFieldEndDisease.setText("");
    }
    /**ใช้ในการ Clear ค่าที่ Object ที่ต้องการเป็นอยู่ให้เป็น null หรือเป็น ช่องว่าง หรือเป็น 0*/
    private void clearObject()
    {
        theAricGroup = null;
    }
    /**ใช้ในการ Clear ค่าที่ Object ที่ต้องการเป็นอยู่ให้เป็น null หรือเป็น ช่องว่าง หรือเป็น 0*/
    private void clearObjectDisease()
    {
        theAricDiseaseCode = null;
    }
    /**ใช้ในการ กำหนดให้ปุ่ม บวก, ลบ และบันทึก สามารถทำงานได้หรือไม่*/
    private void setEnableButton()
    {
    }
    
    /**ใช้ในการ แสดงผลบน Code*/
    public void selectShowDataDisease(int row)
    {   selectInTableDiseaseCode = row;
        if(row > -1)
        {
            if(vAricDiseaseCode != null)
            {
                theAricDiseaseCode = (AricDiseaseCode)vAricDiseaseCode.get(row);
                setDataObjectAricDiseaseCodeToGUI();
            }
        }
    }
    
    /**ใช้ในการแสดงผลที่ได้ Object ลงบน GUI*/
    private void setDataObjectAricDiseaseCodeToGUI()
    {
        if(theAricDiseaseCode != null)
        {
            jTextFieldBeginDisease.setText(theAricDiseaseCode.codebegin);
            jTextFieldEndDisease.setText(theAricDiseaseCode.codeend);
        }
        else
        {
            clearGUIDiseaseCode();
        }
    }
    /**
     *  ใช้ในการบันทึกข้อมูลจาก GUI ลง Object ของ AricDiseaseCode เพื่อลงฐานข้อมูล
     *  @return เป็น boolean เพื่อบอกว่าสามารถบันทึกลงฐานข้อมูลได้หรือไม่ ถ้าเป็น true สามารถบันทึกลงฐานข้อมูลได้
     */
    private boolean setGUIToDataObjectAricDisease()
    {   boolean result = true;
        /**ตรวจสอบ รหัสของตารางก่อนว่ามีค่าหรือไม่ ถ้าไม่มีจะไม่ set ลงตารางให้*/
        if(theAricGroup !=null && theAricGroup.getObjectId() !=null)
        {
            if(theAricDiseaseCode == null)
            {
                theAricDiseaseCode = new AricDiseaseCode();
            }
            theAricDiseaseCode.aricgroupid = theAricGroup.getObjectId();
            theAricDiseaseCode.codebegin = jTextFieldBeginDisease.getText().trim();
            theAricDiseaseCode.codeend = jTextFieldEndDisease.getText().trim();
            
            if(theAricDiseaseCode.codebegin.length() == 0)
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("BeginNotNull", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                setFocusAricDissaceBeginCode();
                result = false;
            }
            else
            {
                if(theAricDiseaseCode.codeend.length() == 0)
                {
                    JOptionPane.showMessageDialog(this,Language.getTextBundle("EndNotNull", language),Language.getTextBundle("Warning", language),JOptionPane.OK_OPTION);
                    setFocusAricDissaceEndCode();
                    result = false;
                }
            }
        }
        else
        {
            //บอกผู้ใช่งานยังไม่ได้มีการบันทึกข้อมูล
            result = false;
        }
        return result;
    }
    
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusAricDissaceBeginCode()
    {
        jTextFieldBeginDisease.requestFocus();
    }
    /**ใช้ในการกำหนดให้มีการนำ curor ไปไว้ที่ส่วนไหนของ GUI*/
    private void setFocusAricDissaceEndCode()
    {
        jTextFieldEndDisease.requestFocus();
    }
    
    /**ใช้ในการกำหนดผลที่เลือกบนตาราง และต้องการจะให้แสดงบน GUI*/
    public void selectShowData(int row)
    {
        if(row > -1)
        {
            if(vAricGroup != null)
            {
                theAricGroup = (AricGroup)vAricGroup.get(row);
                if(isKeyIDLength13(theAricGroup.getObjectId()))
                {
                    setEnableGUI(false);
                }
                else
                {
                    setEnableGUI(true);
                }
                setDataObjectToGUI();
            }
        }
    }
    /**ใช้ในการแสดง ช่วงของระหัสโรค ของกลุ่ม ARIC*/
    private void setShowTableDiseaseCodeToGUI(String aricgroupid)
    {
        clearDiseaseCode(true);
        vAricDiseaseCode = this.theHosManage.theHosControl.theAricDiseaseCodeControl.selectAricDiseaseCodeByAricGroup(aricgroupid);
        setTitleBorder(theAricGroup.description);
        showDataDiseaseCodeToTable(vAricDiseaseCode);
        
    }
    /**ใช้ในการแสดงผลที่ได้ Object ลงบน GUI*/
    private void setDataObjectToGUI()
    {
        if(theAricGroup != null)
        {
            jTextFieldCode.setText(theAricGroup.number);
            jTextFieldDescrpiton.setText(theAricGroup.description);
            setShowTableDiseaseCodeToGUI(theAricGroup.getObjectId());
        }
        else
        {
            clearGUI();
        }
    }
    
    /**
     *สำหรับตรวจสอบ key id ของ object ว่าเป็น 13 หลัก หรือไม่
     *ถ้าเป็น 13 หลัก จะไม่สามารถแก้ไข หรือ ลบ ได้
     *@param keyid เป็น key id ของ AricGroup ที่เลือกจากตาราง
     *@return boolean ถ้า key id เป็น 13 หลัก เป็น false ถ้าไม่ใช่ 13 หลัก เป็น true
     */
    private boolean isKeyIDLength13(String keyid)
    {
        boolean result = true;
        if(keyid.length() == 13)
        {
            result = true;
        }
        else
        {
            result = false;
        }
        return result;
    }
    
    /**ใช้ในการรับข้อมูลจาก GUI ลง Object และจะทำการตรวจสอบข้อมูลที่เก็บอยู่ว่ามีค่าเป็นช่องว่างหรือไม่
     * ถ้าเป็นช่องว่างจะให้ค่าเป็น false ถ้าไม่ว่าจะให้ค่าเป็น true
     *  @return boolean เป็น true จะมีค่า false ไม่มีค่า
     */
    private boolean setGUIToDataObject()
    {   boolean result = true;
        
        if(theAricGroup == null)
        {
            theAricGroup = new AricGroup();
        }
        
        theAricGroup.number = jTextFieldCode.getText().trim();
        theAricGroup.description = jTextFieldDescrpiton.getText().trim();
        
        if(theAricGroup.number.length() == 0)
        {
            JOptionPane.showMessageDialog(this,Language.getTextBundle("CodeAricNotNULL", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
            setFocusAricGroupCode();
            result = false;
        }
        else
        {
            if(theAricGroup.description.length() == 0)
            {
                JOptionPane.showMessageDialog(this,Language.getTextBundle("DescriptionAricNotNULL", language),Language.getTextBundle("Warning", language),javax.swing.JOptionPane.OK_OPTION);
                setFocusAricGroupDescription();
                result = false;
            }
        }
        return result;
    }
    /**
     *  ใช้ในการค้นหาข้อมูล และทำการแสดงข้อมูลลงบนตารางที่กำหนด
     */
    public void searchDataAndShowDataToTable()
    {
        
        vAricGroup = searchData();
        showDataToTable(vAricGroup);
    }
    
    public void searchAricDiseaseAndShowDataToTable()
    {
        this.vAricDiseaseCode = searchDataAricDisease();
        this.showDataDiseaseCodeToTable(this.vAricDiseaseCode);
    }
    
    /**
     * ใช้ในการ search ข้อมูลตามข้อมูลที่กำหนด
     * @return เป็น Vector ของ Object ที่กำหนด
     */
    private Vector searchData()
    {
        String search = this.jTextFieldSearch.getText();
        search = search.trim();
        vAricGroup = this.theHosManage.theHosControl.theAricGroupControl.selectAricGroupByCodeOrDescription(search);
        return vAricGroup;
    }
    
    /**
     * ใช้ในการ search ข้อมูลตามข้อมูลที่กำหนด
     * @return เป็น Vector ของ Object ที่กำหนด
     */
    private Vector searchDataAricDisease()
    {
        String search = this.theAricGroup.getObjectId();
        search = search.trim();
        this.vAricDiseaseCode = this.theHosManage.theHosControl.theAricDiseaseCodeControl.selectAricDiseaseCodeByAricGroup(search);
        return this.vAricDiseaseCode;
    }
    
    /**
     * ใช้ในการ แสดงข้อมูลการค้นหาลงบนตารางที่กำหนด
     * @param vc เป็น Vector ของข้อมูลที่ทำการส่งมาให้และต้องการกำหนดให้แสดงบนตาราง
     */
    private void showDataToTable(Vector vc)
    {
        theTableModelGUI = new TableModelGUI(colName, 0);
        if(vc != null)
        {
            int size = vc.size();
            theTableModelGUI = new TableModelGUI(colName, size);
            theAricGroupTemp = null;
            for(int i = 0 ; i < size ;i++)
            {
                theAricGroupTemp = (AricGroup)vc.get(i);
                theTableModelGUI.setValueAt(theAricGroupTemp.number,i, 0);
                theTableModelGUI.setValueAt(theAricGroupTemp.description,i, 1);
                
                theAricGroupTemp = null;
            }
            
        }
        
        jTableShowList.setModel(theTableModelGUI);
        jTableShowList.getColumnModel().getColumn(0).setPreferredWidth(25);
        jTableShowList.getColumnModel().getColumn(1).setPreferredWidth(100);
    }
    /**
     * ใช้ในการ แสดงข้อมูลการค้นหาลงบนตารางที่กำหนด
     * @param vc เป็น Vector ของข้อมูลที่ทำการส่งมาให้และต้องการกำหนดให้แสดงบนตาราง
     */
    private void showDataDiseaseCodeToTable(Vector vc)
    {
        theTableModelGUI = new TableModelGUI(colNameDisease, 0);
        if(vc != null)
        {
            int size = vc.size();
            theTableModelGUI = new TableModelGUI(colNameDisease, size);
            theAricDiseaseCodeTemp = null;
            for(int i = 0 ; i < size ;i++)
            {
                theAricDiseaseCodeTemp = (AricDiseaseCode)vc.get(i);
                theTableModelGUI.setValueAt(theAricDiseaseCodeTemp.codebegin,i, 0);
                theTableModelGUI.setValueAt(theAricDiseaseCodeTemp.codeend,i, 1);
                
                theAricDiseaseCodeTemp = null;
            }
        }
        jTableShowDisease.setModel(theTableModelGUI);
    }
    
    /*
     *ใช้ในการเซ็ต Title Border ใหกับตาราง EyeDisease
     */
    private void setTitleBorder(String eyegroup)
    {
        if(eyegroup.equals(""))
        {
            jPanelDisease.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle("Aric_Code", language)));
        }
        else
        {
            jPanelDisease.setBorder(new javax.swing.border.TitledBorder(Language.getTextBundle("Aric_Code", language) + " : " + eyegroup));
        }
    }
    
    /**
     *  ใช้ในการกำหนดภาษาให้กับ GUI
     */
    private void setLanguage()
    {
        
        colName = new String[] {Language.getTextBundle("Code",language),Language.getTextBundle("Description",language)};
        colNameDisease  = new String[] {Language.getTextBundle("Begin_Code",language),Language.getTextBundle("End_Code",language)};
        jButtonAdd.setText(Language.getTextBundle(jButtonAdd.getText(),language));
        jButtonAddDisease.setText(Language.getTextBundle(jButtonAddDisease.getText(),language));
        jButtonDelete.setText(Language.getTextBundle(jButtonDelete.getText(),language));
        jButtonDeleteDisease.setText(Language.getTextBundle(jButtonDeleteDisease.getText(),language));
        jButtonSave.setText(Language.getTextBundle(jButtonSave.getText(),language));
        jButtonSaveDisease.setText(Language.getTextBundle(jButtonSaveDisease.getText(),language));
        jButtonSearch.setText(Language.getTextBundle(jButtonSearch.getText(),language));
        jLabelBeginCode.setText(Language.getTextBundle(jLabelBeginCode.getText(),language));
        jLabelEndCode.setText(Language.getTextBundle(jLabelEndCode.getText(),language));
        jLabelCode.setText(Language.getTextBundle(jLabelCode.getText(),language));
        jLabelDescription.setText(Language.getTextBundle(jLabelDescription.getText(),language));
        jLabelSearch.setText(Language.getTextBundle(jLabelSearch.getText(),language));
        jLabelSetupName.setText(Language.getTextBundle(jLabelSetupName.getText(),language));
               
    }
    
    public String getPanelName()
    {
        return panelname;
    }
    
    public void setEnableButtonSetupPanel(boolean enabled)
    {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddDisease;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDeleteDisease;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveDisease;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabelBeginCode;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelEndCode;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSetupName;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelData;
    private javax.swing.JPanel jPanelDisease;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelShowDisease;
    private javax.swing.JPanel jPanelShowList;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JScrollPane jScrollPaneShowDisease;
    private javax.swing.JScrollPane jScrollPaneShowList;
    private javax.swing.JTable jTableShowDisease;
    private javax.swing.JTable jTableShowList;
    private javax.swing.JTextField jTextFieldBeginDisease;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDescrpiton;
    private javax.swing.JTextField jTextFieldEndDisease;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
    
}
