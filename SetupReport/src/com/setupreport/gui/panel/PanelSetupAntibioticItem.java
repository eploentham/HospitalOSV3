/*
 * PanelSetupAntibiotic.java
 *
 * Created on 22 ตุลาคม 2548, 11:09 น.
 */

package com.setupreport.gui.panel;
import java.util.Vector;
import com.setupreport.manage.HosManage;
import com.setupreport.utility.TableModelGUI;
import com.setupreport.object.*;
import com.setupreport.utility.Language;
import javax.swing.JOptionPane;
import com.setupreport.gui.dialog.DialogSearchItemDrug;
import javax.swing.JFrame;
import com.setupreport.usecase.ManageAntibiotic;
import com.setupreport.usecase.connection.ManageGUI; 

/**
 *
 * @author  tong(Padungrat)
 */
public class PanelSetupAntibioticItem extends javax.swing.JPanel implements 
ManageAntibiotic,ManageGUI 
{
    
    Vector vAntibiotic,vAntibioticDrug,vAntibioticDrugTemp;
    AricAntibioticItem theAricAntibioticItem,theAricAntibioticItemTemp;
    Item theItem,theItemTemp;
    String[] colName;
    final String panelname = "AntibioticItem";

    HosManage theHosManage;
    TableModelGUI theTableModelGUI;
    int language = 1;
    int status =1;
    
    
    public PanelSetupAntibioticItem(HosManage hosManage)
    {
        this.theHosManage = hosManage;
        initComponents();        
        setLanguage();     
        initGUI();
        showDataToTable(null);
        theHosManage.theHosControl.theHosSubject.theAntibioticSubject.registerMainReportManage(this);
        colName = new String[] {Language.getTextBundle("Code", language),Language.getTextBundle("Description", language)};
        Language.getTextBundle(panelname, language);
        searchDataAndShowDataToTable(); //ojika 28 Feb 2007
    }
    
    private void initGUI()
    {
        jTextFieldCode.setEnabled(false);
        jTextFieldDescription.setEnabled(false);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelTop = new javax.swing.JPanel();
        jLabelSetupName = new javax.swing.JLabel();
        jPanelLeft = new javax.swing.JPanel();
        jPanelSearch = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanelShowList = new javax.swing.JPanel();
        jScrollPaneShowList = new javax.swing.JScrollPane();
        jTableShowList = new javax.swing.JTable();
        jPanelRight = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelCode = new javax.swing.JLabel();
        jLabelDescription = new javax.swing.JLabel();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldDescription = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabelSetupName.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabelSetupName.setText("AntibioticItem");
        jPanelTop.add(jLabelSetupName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanelTop, gridBagConstraints);

        jPanelLeft.setLayout(new java.awt.GridBagLayout());

        jPanelLeft.setMinimumSize(new java.awt.Dimension(200, 53));
        jPanelLeft.setPreferredSize(new java.awt.Dimension(200, 433));
        jPanelSearch.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setText("Search");
        jPanelSearch.add(jLabelSearch, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanelSearch.add(jTextFieldSearch, gridBagConstraints);

        jButtonSearch.setText("Search");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(75, 24));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(75, 24));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelSearch.add(jButtonSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelLeft.add(jPanelSearch, gridBagConstraints);

        jPanelShowList.setLayout(new java.awt.GridBagLayout());

        jTableShowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableShowList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableShowListMouseReleased(evt);
            }
        });

        jScrollPaneShowList.setViewportView(jTableShowList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelShowList.add(jScrollPaneShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanelLeft.add(jPanelShowList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(jPanelLeft, gridBagConstraints);

        jPanelRight.setLayout(new java.awt.GridBagLayout());

        jPanelRight.setMinimumSize(new java.awt.Dimension(350, 24));
        jPanelRight.setPreferredSize(new java.awt.Dimension(350, 24));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(350, 24));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 24));
        jLabelCode.setText("Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabelCode, gridBagConstraints);

        jLabelDescription.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabelDescription, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(jTextFieldCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(jTextFieldDescription, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/plus16.gif")));
        jButtonAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonAdd.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jButtonAdd, gridBagConstraints);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hosv3/gui/images/minus16.gif")));
        jButtonDelete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(24, 24));
        jButtonDelete.setPreferredSize(new java.awt.Dimension(24, 24));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButtonDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelRight.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(jPanelRight, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDeleteActionPerformed
    {//GEN-HEADEREND:event_jButtonDeleteActionPerformed
        int confirm_del = JOptionPane.showConfirmDialog(this,Language.getTextBundle("confirm_del_effect_report", language),Language.getTextBundle("confirm_del", language),JOptionPane.YES_NO_OPTION);
        
        if(confirm_del == 0)
        {
            setSelectInRow(this.jTableShowList.getSelectedRows());
        }
            
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddActionPerformed
    {//GEN-HEADEREND:event_jButtonAddActionPerformed
       showDiglogSearchItemDrug();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableShowListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableShowListMouseReleased
       selectShowDataAntibioticItem(this.jTableShowList.getSelectedRow());
    }//GEN-LAST:event_jTableShowListMouseReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        searchDataAndShowDataToTable();
    }//GEN-LAST:event_jButtonSearchActionPerformed
  
    /**แสดง Dialog สำหรับเลือกรายงานยา*/
    public void showDiglogSearchItemDrug()
    {
        DialogSearchItemDrug dialog = new DialogSearchItemDrug(new JFrame(), true,this.theHosManage);
        dialog.setVisible(true);
    }
    
    /**เลือกรายการ Antibiotic */ 
    public void setSelectInRow(int[] rows)
    { 
        if(rows.length !=0)
        {   
            int size = rows.length;
            
            for(int i = size-1 ; i >= 0 ; i--)
            {
                theAricAntibioticItem  = (AricAntibioticItem)this.vAntibiotic.get(rows[i]);                               
                this.theHosManage.theHosControl.theAricAntibioticControl.deleteAricAntibioticItem(theAricAntibioticItem);
                this.vAntibiotic.remove(theAricAntibioticItem);
                clearObject();
                showDataToTable(this.vAntibiotic);                     
            }            
        }        
    }
    /**บันทึกลงฐานข้อมูล*/
    private void saveDataToDB(Vector vc)
    {
        this.vAntibiotic = vc;
        Item item = new Item();
        int size = this.vAntibioticDrug.size();
        for(int i =0;i<size;i++)
        {
            AricAntibioticItem aAntibioticItem = new AricAntibioticItem();
            item = (Item)this.vAntibioticDrug.get(i);
            
            aAntibioticItem.item_id = item.getObjectId();
            aAntibioticItem.antibiotic_code = item.item_id;
            aAntibioticItem.common_name = item.common_name;
            
            this.theHosManage.theHosControl.theAricAntibioticControl.saveAricAntibioticItem(aAntibioticItem);
            aAntibioticItem = null;
        }
        item = null;        
    }

    /**ใช้ในการ Clear ค่าที่ Object ที่ต้องการเป็นอยู่ให้เป็น null หรือเป็น ช่องว่าง หรือเป็น 0*/
    private void clearObject()
    {
        jTextFieldCode.setText("");
        jTextFieldDescription.setText("");
    }
    
    /**ใช้ในการ กำหนดให้ปุ่ม บวก, ลบ และบันทึก สามารถทำงานได้หรือไม่*/
    private void setEnableButton()
    {
    }
    
    
    /**ใช้ในการกำหนดผลที่เลือกบนตาราง และต้องการจะให้แสดงบน GUI*/
    public void selectShowDataAntibioticItem(int row)
    {
        if(row > -1)
        {
            if(this.vAntibiotic != null)
            {
                theAricAntibioticItem = (AricAntibioticItem)this.vAntibiotic.get(row);
                setDataToGUI();
            }
        }
    }
    
    private void setDataToGUI()
    {
        this.jTextFieldCode.setText(theAricAntibioticItem.antibiotic_code);
        this.jTextFieldDescription.setText(theAricAntibioticItem.common_name);
        
    }
    
    
    /**ใช้ในการแสดงผลที่ได้ Object ลงใน Table*/
    private void checkSameData(AricAntibioticItem theAricAntibioticItem)
    {
        if(this.vAntibiotic != null)
        {
            int size = this.vAntibiotic.size();
            if(size > 0)
            {
                for(int i =0;i<size;i++)
                {
                    if(!theAricAntibioticItem.item_id.equals(((AricAntibioticItem)this.vAntibiotic.get(i)).item_id))
                    {
                        status = 1;
                    }
                    else
                    {
                        status = 0;
                        JOptionPane.showMessageDialog(this,Language.getTextBundle("Same_Item", language) + theAricAntibioticItem.common_name ,Language.getTextBundle("Warning", language),JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                }
                if(status != 0)
                {
                    this.theHosManage.theHosControl.theAricAntibioticControl.saveAricAntibioticItem(theAricAntibioticItem);
                    this.vAntibiotic.add(theAricAntibioticItem);
                }
            }
        }
        else
        {
            this.vAntibiotic = new Vector();
            this.theHosManage.theHosControl.theAricAntibioticControl.saveAricAntibioticItem(theAricAntibioticItem);
            this.vAntibiotic.add(theAricAntibioticItem);
        }
        
    }
    
    /**ใช้ในการรับข้อมูลจาก GUI ลง Object*/
    private void setGUIToDataObject()
    {
        
    }
    /**
     *  ใช้ในการค้นหาข้อมูล และทำการแสดงข้อมูลลงบนตารางที่กำหนด
     */
    public void searchDataAndShowDataToTable()
    {
        this.vAntibiotic = searchData();
        this.showDataToTable(this.vAntibiotic);
    }
    /**
     * ใช้ในการ search ข้อมูลตามข้อมูลที่กำหนด
     * @return เป็น Vector ของ Object ที่กำหนด
     */
    private Vector searchData()
    {
        String search = this.jTextFieldSearch.getText();
        search = search.trim();
        this.vAntibiotic = this.theHosManage.theHosControl.theAricAntibioticControl.selectAricAntibioticByCodeOrDescription(search);
        return this.vAntibiotic;
    }
    
    /**
     * ใช้ในการ แสดงข้อมูลการค้นหาลงบนตารางที่กำหนด
     * @param vc เป็น Vector ของข้อมูลที่ทำการส่งมาให้และต้องการกำหนดให้แสดงบนตาราง
     */
    private void showDataToTable(Vector vc)
    {
        theTableModelGUI = new TableModelGUI(colName, 0);
        if(vc != null)
        {
            int size = vc.size();
            theTableModelGUI = new TableModelGUI(colName, size);
            theAricAntibioticItemTemp = null;
            for(int i = 0 ; i < size ;i++)
            {
                theAricAntibioticItemTemp = (AricAntibioticItem)vc.get(i);
                theTableModelGUI.setValueAt(theAricAntibioticItemTemp.antibiotic_code,i, 0);
                theTableModelGUI.setValueAt(theAricAntibioticItemTemp.common_name,i, 1);
                
                theAricAntibioticItemTemp = null;
            }
        }
        jTableShowList.setModel(theTableModelGUI);
    }
  
    /**
     *  ใช้ในการกำหนดภาษาให้กับ GUI
     */
    private void setLanguage()
    {
        jButtonAdd.setText(Language.getTextBundle(jButtonAdd.getText(),language));
        jButtonDelete.setText(Language.getTextBundle(jButtonDelete.getText(),language));
        jButtonSearch.setText(Language.getTextBundle(jButtonSearch.getText(),language));
        jLabelCode.setText(Language.getTextBundle(jLabelCode.getText(),language));
        jLabelDescription.setText(Language.getTextBundle(jLabelDescription.getText(),language));
        jLabelSearch.setText(Language.getTextBundle(jLabelSearch.getText(),language));
        jLabelSetupName.setText(Language.getTextBundle(jLabelSetupName.getText(),language));
    }
    
    public void notifyShowItemDrug(Vector vItem)
    {
        if(vItem != null)
        {
            System.out.println(vItem.size());
            Item item = new Item();
            int size = vItem.size();
            for(int i =0;i<size;i++)
            {
                item = (Item)vItem.get(i);
                theAricAntibioticItem = new AricAntibioticItem();
                
                theAricAntibioticItem.item_id = item.getObjectId();
                theAricAntibioticItem.antibiotic_code = item.item_id;
                theAricAntibioticItem.common_name = item.common_name;
                checkSameData(theAricAntibioticItem);

                theAricAntibioticItem = null;
            }
            item = null;
        }
        showDataToTable(this.vAntibiotic);
    }
    
    public String getPanelName()
    {
        return panelname;
    }
    
    public void setEnableButtonSetupPanel(boolean enabled)
    {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSetupName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelShowList;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JScrollPane jScrollPaneShowList;
    private javax.swing.JTable jTableShowList;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
    
}
